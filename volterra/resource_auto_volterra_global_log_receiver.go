//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-tf-provider. DO NOT EDIT.
//

package volterra

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"gopkg.volterra.us/stdlib/client/vesapi"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_global_log_receiver "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/global_log_receiver"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

// resourceVolterraGlobalLogReceiver is implementation of Volterra's GlobalLogReceiver resources
func resourceVolterraGlobalLogReceiver() *schema.Resource {
	return &schema.Resource{
		Create: resourceVolterraGlobalLogReceiverCreate,
		Read:   resourceVolterraGlobalLogReceiverRead,
		Update: resourceVolterraGlobalLogReceiverUpdate,
		Delete: resourceVolterraGlobalLogReceiverDelete,

		Schema: map[string]*schema.Schema{

			"annotations": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"disable": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"labels": {
				Type:     schema.TypeMap,
				Optional: true,
			},

			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"namespace": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"ns_all": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"ns_current": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"ns_list": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"namespaces": {

							Type: schema.TypeList,

							Required: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
					},
				},
			},

			"ns_system": {

				Type:     schema.TypeBool,
				Optional: true,
			},

			"s3_receiver": {

				Type:     schema.TypeSet,
				Optional: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"aws_cred": {

							Type:     schema.TypeSet,
							Optional: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"namespace": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"tenant": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},

						"aws_region": {
							Type:     schema.TypeString,
							Optional: true,
						},

						"bucket": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},
		},
	}
}

// resourceVolterraGlobalLogReceiverCreate creates GlobalLogReceiver resource
func resourceVolterraGlobalLogReceiverCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	createMeta := &ves_io_schema.ObjectCreateMetaType{}
	createSpec := &ves_io_schema_global_log_receiver.CreateSpecType{}
	createReq := &ves_io_schema_global_log_receiver.CreateRequest{
		Metadata: createMeta,
		Spec:     createSpec,
	}

	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		createMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		createMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		createMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		createMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		createMeta.Namespace =
			v.(string)
	}

	//filter_choice

	filterChoiceTypeFound := false

	if v, ok := d.GetOk("ns_all"); ok && !filterChoiceTypeFound {

		filterChoiceTypeFound = true

		if v.(bool) {
			filterChoiceInt := &ves_io_schema_global_log_receiver.CreateSpecType_NsAll{}
			filterChoiceInt.NsAll = &ves_io_schema.Empty{}
			createSpec.FilterChoice = filterChoiceInt
		}

	}

	if v, ok := d.GetOk("ns_current"); ok && !filterChoiceTypeFound {

		filterChoiceTypeFound = true

		if v.(bool) {
			filterChoiceInt := &ves_io_schema_global_log_receiver.CreateSpecType_NsCurrent{}
			filterChoiceInt.NsCurrent = &ves_io_schema.Empty{}
			createSpec.FilterChoice = filterChoiceInt
		}

	}

	if v, ok := d.GetOk("ns_list"); ok && !filterChoiceTypeFound {

		filterChoiceTypeFound = true
		filterChoiceInt := &ves_io_schema_global_log_receiver.CreateSpecType_NsList{}
		filterChoiceInt.NsList = &ves_io_schema_global_log_receiver.NSList{}
		createSpec.FilterChoice = filterChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["namespaces"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				filterChoiceInt.NsList.Namespaces = ls

			}

		}

	}

	if v, ok := d.GetOk("ns_system"); ok && !filterChoiceTypeFound {

		filterChoiceTypeFound = true

		if v.(bool) {
			filterChoiceInt := &ves_io_schema_global_log_receiver.CreateSpecType_NsSystem{}
			filterChoiceInt.NsSystem = &ves_io_schema.Empty{}
			createSpec.FilterChoice = filterChoiceInt
		}

	}

	//receiver

	receiverTypeFound := false

	if v, ok := d.GetOk("s3_receiver"); ok && !receiverTypeFound {

		receiverTypeFound = true
		receiverInt := &ves_io_schema_global_log_receiver.CreateSpecType_S3Receiver{}
		receiverInt.S3Receiver = &ves_io_schema_global_log_receiver.S3Config{}
		createSpec.Receiver = receiverInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["aws_cred"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				awsCredInt := &ves_io_schema_views.ObjectRefType{}
				receiverInt.S3Receiver.AwsCred = awsCredInt

				for _, set := range sl {
					acMapToStrVal := set.(map[string]interface{})
					if val, ok := acMapToStrVal["name"]; ok && !isIntfNil(v) {
						awsCredInt.Name = val.(string)
					}
					if val, ok := acMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						awsCredInt.Namespace = val.(string)
					}

					if val, ok := acMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						awsCredInt.Tenant = val.(string)
					}
				}

			}

			if v, ok := cs["aws_region"]; ok && !isIntfNil(v) {

				receiverInt.S3Receiver.AwsRegion = v.(string)

			}

			if v, ok := cs["bucket"]; ok && !isIntfNil(v) {

				receiverInt.S3Receiver.Bucket = v.(string)

			}

		}

	}

	log.Printf("[DEBUG] Creating Volterra GlobalLogReceiver object with struct: %+v", createReq)

	createGlobalLogReceiverResp, err := client.CreateObject(context.Background(), ves_io_schema_global_log_receiver.ObjectType, createReq)
	if err != nil {
		return fmt.Errorf("error creating GlobalLogReceiver: %s", err)
	}
	d.SetId(createGlobalLogReceiverResp.GetObjSystemMetadata().GetUid())

	return resourceVolterraGlobalLogReceiverRead(d, meta)
}

func resourceVolterraGlobalLogReceiverRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	resp, err := client.GetObject(context.Background(), ves_io_schema_global_log_receiver.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] GlobalLogReceiver %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra GlobalLogReceiver %q: %s", d.Id(), err)
	}
	return setGlobalLogReceiverFields(client, d, resp)
}

func setGlobalLogReceiverFields(client *APIClient, d *schema.ResourceData, resp vesapi.GetObjectResponse) error {
	metadata := resp.GetObjMetadata()

	d.Set("annotations", metadata.GetAnnotations())

	d.Set("description", metadata.GetDescription())

	d.Set("disable", metadata.GetDisable())

	d.Set("labels", metadata.GetLabels())

	d.Set("name", metadata.GetName())

	d.Set("namespace", metadata.GetNamespace())

	return nil
}

// resourceVolterraGlobalLogReceiverUpdate updates GlobalLogReceiver resource
func resourceVolterraGlobalLogReceiverUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)

	updateMeta := &ves_io_schema.ObjectReplaceMetaType{}
	updateSpec := &ves_io_schema_global_log_receiver.ReplaceSpecType{}
	updateReq := &ves_io_schema_global_log_receiver.ReplaceRequest{
		Metadata: updateMeta,
		Spec:     updateSpec,
	}
	if v, ok := d.GetOk("annotations"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Annotations = ms
	}

	if v, ok := d.GetOk("description"); ok && !isIntfNil(v) {
		updateMeta.Description =
			v.(string)
	}

	if v, ok := d.GetOk("disable"); ok && !isIntfNil(v) {
		updateMeta.Disable =
			v.(bool)
	}

	if v, ok := d.GetOk("labels"); ok && !isIntfNil(v) {

		ms := map[string]string{}

		for k, v := range v.(map[string]interface{}) {
			val := v.(string)
			ms[k] = val
		}
		updateMeta.Labels = ms
	}

	if v, ok := d.GetOk("name"); ok && !isIntfNil(v) {
		updateMeta.Name =
			v.(string)
	}

	if v, ok := d.GetOk("namespace"); ok && !isIntfNil(v) {
		updateMeta.Namespace =
			v.(string)
	}

	filterChoiceTypeFound := false

	if v, ok := d.GetOk("ns_all"); ok && !filterChoiceTypeFound {

		filterChoiceTypeFound = true

		if v.(bool) {
			filterChoiceInt := &ves_io_schema_global_log_receiver.ReplaceSpecType_NsAll{}
			filterChoiceInt.NsAll = &ves_io_schema.Empty{}
			updateSpec.FilterChoice = filterChoiceInt
		}

	}

	if v, ok := d.GetOk("ns_current"); ok && !filterChoiceTypeFound {

		filterChoiceTypeFound = true

		if v.(bool) {
			filterChoiceInt := &ves_io_schema_global_log_receiver.ReplaceSpecType_NsCurrent{}
			filterChoiceInt.NsCurrent = &ves_io_schema.Empty{}
			updateSpec.FilterChoice = filterChoiceInt
		}

	}

	if v, ok := d.GetOk("ns_list"); ok && !filterChoiceTypeFound {

		filterChoiceTypeFound = true
		filterChoiceInt := &ves_io_schema_global_log_receiver.ReplaceSpecType_NsList{}
		filterChoiceInt.NsList = &ves_io_schema_global_log_receiver.NSList{}
		updateSpec.FilterChoice = filterChoiceInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["namespaces"]; ok && !isIntfNil(v) {

				ls := make([]string, len(v.([]interface{})))
				for i, v := range v.([]interface{}) {
					ls[i] = v.(string)
				}
				filterChoiceInt.NsList.Namespaces = ls

			}

		}

	}

	if v, ok := d.GetOk("ns_system"); ok && !filterChoiceTypeFound {

		filterChoiceTypeFound = true

		if v.(bool) {
			filterChoiceInt := &ves_io_schema_global_log_receiver.ReplaceSpecType_NsSystem{}
			filterChoiceInt.NsSystem = &ves_io_schema.Empty{}
			updateSpec.FilterChoice = filterChoiceInt
		}

	}

	receiverTypeFound := false

	if v, ok := d.GetOk("s3_receiver"); ok && !receiverTypeFound {

		receiverTypeFound = true
		receiverInt := &ves_io_schema_global_log_receiver.ReplaceSpecType_S3Receiver{}
		receiverInt.S3Receiver = &ves_io_schema_global_log_receiver.S3Config{}
		updateSpec.Receiver = receiverInt

		sl := v.(*schema.Set).List()
		for _, set := range sl {
			cs := set.(map[string]interface{})

			if v, ok := cs["aws_cred"]; ok && !isIntfNil(v) {

				sl := v.(*schema.Set).List()
				awsCredInt := &ves_io_schema_views.ObjectRefType{}
				receiverInt.S3Receiver.AwsCred = awsCredInt

				for _, set := range sl {
					acMapToStrVal := set.(map[string]interface{})
					if val, ok := acMapToStrVal["name"]; ok && !isIntfNil(v) {
						awsCredInt.Name = val.(string)
					}
					if val, ok := acMapToStrVal["namespace"]; ok && !isIntfNil(v) {
						awsCredInt.Namespace = val.(string)
					}

					if val, ok := acMapToStrVal["tenant"]; ok && !isIntfNil(v) {
						awsCredInt.Tenant = val.(string)
					}
				}

			}

			if v, ok := cs["aws_region"]; ok && !isIntfNil(v) {

				receiverInt.S3Receiver.AwsRegion = v.(string)

			}

			if v, ok := cs["bucket"]; ok && !isIntfNil(v) {

				receiverInt.S3Receiver.Bucket = v.(string)

			}

		}

	}

	log.Printf("[DEBUG] Updating Volterra GlobalLogReceiver obj with struct: %+v", updateReq)

	err := client.ReplaceObject(context.Background(), ves_io_schema_global_log_receiver.ObjectType, updateReq)
	if err != nil {
		return fmt.Errorf("error updating GlobalLogReceiver: %s", err)
	}

	return resourceVolterraGlobalLogReceiverRead(d, meta)
}

func resourceVolterraGlobalLogReceiverDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*APIClient)
	name := d.Get("name").(string)
	namespace := d.Get("namespace").(string)

	_, err := client.GetObject(context.Background(), ves_io_schema_global_log_receiver.ObjectType, namespace, name)
	if err != nil {
		if strings.Contains(err.Error(), "status code 404") {
			log.Printf("[INFO] GlobalLogReceiver %s no longer exists", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error finding Volterra GlobalLogReceiver before deleting %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Deleting Volterra GlobalLogReceiver obj with name %+v in namespace %+v", name, namespace)
	return client.DeleteObject(context.Background(), ves_io_schema_global_log_receiver.ObjectType, namespace, name)
}
