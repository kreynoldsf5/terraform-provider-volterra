// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/tenant/types.proto

package tenant

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DeletionReason
//
// x-displayName: "DeletionReason"
// List of available reason for account deletion.
type DeletionReason int32

const (
	// Unknown reason
	//
	// x-displayName: "Unknown"
	// Unknown reason
	REASON_UNKNOWN DeletionReason = 0
	// Switch to free plan
	//
	// x-displayName: "Switch to free plan"
	// Switch to free plan
	REASON_SWITCH_TO_FREE_PLAN DeletionReason = 1
	// No longer needed
	//
	// x-displayName: "No longer needed"
	// No longer needed
	REASON_NO_LONGER_NEEDED DeletionReason = 2
	// Too expensive
	//
	// x-displayName: "Too expensive"
	// Too expensive
	REASON_NOT_JUSTIFY_COSTS DeletionReason = 3
	// Difficult to use
	//
	// x-displayName: "Difficult to use"
	// Difficult to use
	REASON_DIFFICULT_TO_USE DeletionReason = 4
)

var DeletionReason_name = map[int32]string{
	0: "REASON_UNKNOWN",
	1: "REASON_SWITCH_TO_FREE_PLAN",
	2: "REASON_NO_LONGER_NEEDED",
	3: "REASON_NOT_JUSTIFY_COSTS",
	4: "REASON_DIFFICULT_TO_USE",
}

var DeletionReason_value = map[string]int32{
	"REASON_UNKNOWN":             0,
	"REASON_SWITCH_TO_FREE_PLAN": 1,
	"REASON_NO_LONGER_NEEDED":    2,
	"REASON_NOT_JUSTIFY_COSTS":   3,
	"REASON_DIFFICULT_TO_USE":    4,
}

func (DeletionReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_de41f8b87043178a, []int{0}
}

// States
//
// x-displayName: "States"
// Tenant states https://gitlab.com/volterra/ves.io/eywa/-/wikis/Tenant-State-Machine.
type FSMState int32

const (
	// StateUndefined
	//
	// x-displayName: "StateUndefined"
	// Tenant state when it was created without any state.
	StateUndefined FSMState = 0
	// StateCreating
	//
	// x-displayName: "StateCreating"
	// Tenant state of initial bootstrapping tenant, registering tenant in other service and
	// pre-create default objects for the tenant like default namespaces, default roles etc.
	StateCreating FSMState = 1
	// StateCreateFailed
	//
	// x-displayName: "StateCreateFailed"
	// Tenant state when initial bootstrapping was failed by some reason and must be retried
	// after issue is solved.
	StateCreateFailed FSMState = 2
	// StateInactive
	//
	// x-displayName: "StateInactive"
	// Tenant state when initial creation is completed and we have trigger next stage of tenant
	// registration like creating support account, billing account in third party services.
	StateInactive FSMState = 3
	// StateActive
	//
	// x-displayName: "StateActive"
	// Tenant state of completely registered tenant and available to use.
	StateActive FSMState = 4
	// StateSuspended
	//
	// x-displayName: "StateSuspended"
	// Tenant state of suspended tenant by some reason like not finished billing payments,
	// manually suspended by administrator, etc.
	StateSuspended FSMState = 5
	// StateDisabled
	//
	// x-displayName: "StateDisabled"
	// Tenant state of disabled tenant which are in pre-deletion state.
	StateDisabled FSMState = 6
	// StateConfiguring
	//
	// x-displayName: "StateConfiguring"
	// Configuring state of the specific tenant, can be set for instance if tenant is setting up billing account, etc..
	StateConfiguring FSMState = 7
	// StateConfiguringFailed
	//
	// x-displayName: "StateConfiguring"
	// Configuring state of the specific tenant, can be set for instance if tenant is setting up billing account, etc..
	StateConfiguringFailed FSMState = 8
)

var FSMState_name = map[int32]string{
	0: "StateUndefined",
	1: "StateCreating",
	2: "StateCreateFailed",
	3: "StateInactive",
	4: "StateActive",
	5: "StateSuspended",
	6: "StateDisabled",
	7: "StateConfiguring",
	8: "StateConfiguringFailed",
}

var FSMState_value = map[string]int32{
	"StateUndefined":         0,
	"StateCreating":          1,
	"StateCreateFailed":      2,
	"StateInactive":          3,
	"StateActive":            4,
	"StateSuspended":         5,
	"StateDisabled":          6,
	"StateConfiguring":       7,
	"StateConfiguringFailed": 8,
}

func (FSMState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_de41f8b87043178a, []int{1}
}

// OtpStatus
//
// x-displayName: "OtpStatus"
// OtpStatus can be either enabled/disabled or processing.
// Applying new policy can take time, especially if tenant has many users so for this purpose processing state is introduced.
type OtpStatus int32

const (
	// OTP_DISABLED
	//
	// x-displayName: "OTP_DISABLED"
	// OTP disabled
	OTP_DISABLED OtpStatus = 0
	// OTP_ENABLED
	//
	// x-displayName: "OTP_ENABLED"
	// OTP enabled
	OTP_ENABLED OtpStatus = 1
	// OTP_PROCESSING
	//
	// x-displayName: "OTP_PROCESSING"
	// OTP is being updated
	OTP_PROCESSING OtpStatus = 2
)

var OtpStatus_name = map[int32]string{
	0: "OTP_DISABLED",
	1: "OTP_ENABLED",
	2: "OTP_PROCESSING",
}

var OtpStatus_value = map[string]int32{
	"OTP_DISABLED":   0,
	"OTP_ENABLED":    1,
	"OTP_PROCESSING": 2,
}

func (OtpStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_de41f8b87043178a, []int{2}
}

// Sub CA Usage
//
// x-displayName: "Sub CA"
// Sub CA information.
type SubCA struct {
	// Name
	//
	// x-displayName: "Name"
	// Name for this CA
	CaName string `protobuf:"bytes,1,opt,name=CaName,proto3" json:"CaName,omitempty"`
	// CA PEM
	//
	// x-displayName: "PEM encoded certificate for"
	// PEM encoded certificate
	SubCAPEM string `protobuf:"bytes,2,opt,name=SubCAPEM,proto3" json:"SubCAPEM,omitempty"`
	// Password
	//
	// x-displayName: "Password"
	// Password for CA
	Password *EncryptedPassword `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	// Version
	//
	// x-displayName: "Version"
	// Certificate version
	Version uint32 `protobuf:"varint,4,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (m *SubCA) Reset()      { *m = SubCA{} }
func (*SubCA) ProtoMessage() {}
func (*SubCA) Descriptor() ([]byte, []int) {
	return fileDescriptor_de41f8b87043178a, []int{0}
}
func (m *SubCA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubCA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SubCA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubCA.Merge(m, src)
}
func (m *SubCA) XXX_Size() int {
	return m.Size()
}
func (m *SubCA) XXX_DiscardUnknown() {
	xxx_messageInfo_SubCA.DiscardUnknown(m)
}

var xxx_messageInfo_SubCA proto.InternalMessageInfo

func (m *SubCA) GetCaName() string {
	if m != nil {
		return m.CaName
	}
	return ""
}

func (m *SubCA) GetSubCAPEM() string {
	if m != nil {
		return m.SubCAPEM
	}
	return ""
}

func (m *SubCA) GetPassword() *EncryptedPassword {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *SubCA) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// CA Usage
//
// x-displayName: "CA"
// CA information.
type CA struct {
	// Name
	//
	// x-displayName: "Name"
	// Name for this CA
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// CA PEM
	//
	// x-displayName: "PEM encoded certificate"
	// PEM encoded certificate
	Pem string `protobuf:"bytes,2,opt,name=pem,proto3" json:"pem,omitempty"`
	// Password
	//
	// x-displayName: "Password"
	// Password for CA
	Password *EncryptedPassword `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// Version
	//
	// x-displayName: "Version"
	// Certificate version
	Version uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *CA) Reset()      { *m = CA{} }
func (*CA) ProtoMessage() {}
func (*CA) Descriptor() ([]byte, []int) {
	return fileDescriptor_de41f8b87043178a, []int{1}
}
func (m *CA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CA.Merge(m, src)
}
func (m *CA) XXX_Size() int {
	return m.Size()
}
func (m *CA) XXX_DiscardUnknown() {
	xxx_messageInfo_CA.DiscardUnknown(m)
}

var xxx_messageInfo_CA proto.InternalMessageInfo

func (m *CA) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CA) GetPem() string {
	if m != nil {
		return m.Pem
	}
	return ""
}

func (m *CA) GetPassword() *EncryptedPassword {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *CA) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// EncryptedPassword
//
// x-displayName: "EncryptedPassword"
// Encrypted Password type.
type EncryptedPassword struct {
	// Version
	//
	// x-displayName: "Version"
	// Password version
	Version uint32 `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	// Password
	//
	// x-displayName: "Password"
	// x-required
	// Encrypted Password
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (m *EncryptedPassword) Reset()      { *m = EncryptedPassword{} }
func (*EncryptedPassword) ProtoMessage() {}
func (*EncryptedPassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_de41f8b87043178a, []int{2}
}
func (m *EncryptedPassword) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncryptedPassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EncryptedPassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptedPassword.Merge(m, src)
}
func (m *EncryptedPassword) XXX_Size() int {
	return m.Size()
}
func (m *EncryptedPassword) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptedPassword.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptedPassword proto.InternalMessageInfo

func (m *EncryptedPassword) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *EncryptedPassword) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// This is the shape of the tenant representation in the database at Global Controller.
type GlobalSpecType struct {
	// public_vip
	//
	// x-displayName: "Dedicated Public VIP"
	// VIP to be used for all listeners for this tenant in public network.
	// x-example: "72.19.3.128"
	PublicVip string `protobuf:"bytes,1,opt,name=public_vip,json=publicVip,proto3" json:"public_vip,omitempty"`
	// Deleted Flag
	//
	// x-displayName: "Deleted"
	// Represents tenant object of deletion state.
	Deleted bool `protobuf:"varint,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// TGW ASN Offset
	//
	// x-displayName: "TGW ASN Offset"
	// x-example: 4293918720
	// Starting ASN for automatic allocation of ASNs for AWS TGW.
	TgwAsnOffset uint32 `protobuf:"varint,3,opt,name=tgw_asn_offset,json=tgwAsnOffset,proto3" json:"tgw_asn_offset,omitempty"`
	// Shared Public VIP
	//
	// this is a ref to a shared public ip object
	// this will be used for all of this tenant's VHs in public if dedicated public vip is not set
	// x-displayName: "Shared Public VIP"
	SharedPublicVip []*schema.ObjectRefType `protobuf:"bytes,4,rep,name=shared_public_vip,json=sharedPublicVip,proto3" json:"shared_public_vip,omitempty"`
	// K8S Server Sub CAs
	//
	// Array of SubCAs, the latest one will be used for minting k8s server cert for tenant
	// x-displayName: "K8S Server Sub CAs"
	K8SServerSubCas []*SubCA `protobuf:"bytes,5,rep,name=k8s_server_sub_cas,json=k8sServerSubCas,proto3" json:"k8s_server_sub_cas,omitempty"`
	// K8S Server Sub CA Version
	//
	// SubCA version which is the latest and will be used for k8s server cert for tenant
	// x-displayName: "K8S Server Sub CA Version"
	K8SServerSubCaLatestVersion uint32 `protobuf:"varint,6,opt,name=k8s_server_sub_ca_latest_version,json=k8sServerSubCaLatestVersion,proto3" json:"k8s_server_sub_ca_latest_version,omitempty"`
	// Proxy Root CAs
	//
	// Array of CAas, the latest one will be used for proxy feature.
	// x-displayName: "Proxy Root CAs"
	ProxyRootCas []*CA `protobuf:"bytes,7,rep,name=proxy_root_cas,json=proxyRootCas,proto3" json:"proxy_root_cas,omitempty"`
	// Proxy Root CA version
	//
	// CA version which is the latest and will be used for proxy feature.
	// x-displayName: "Proxy Root CA version"
	ProxyRootCaLatestVersion uint32 `protobuf:"varint,8,opt,name=proxy_root_ca_latest_version,json=proxyRootCaLatestVersion,proto3" json:"proxy_root_ca_latest_version,omitempty"`
	// Default disable advertisement on public
	//
	// Disable advertisement on public by default if true.
	// x-displayName: "Default disable advertisement on public"
	DefaultDisablePublicAp bool `protobuf:"varint,9,opt,name=default_disable_public_ap,json=defaultDisablePublicAp,proto3" json:"default_disable_public_ap,omitempty"`
	// Use Global Ain Vrf
	//
	// Flag to indicate that all CEs belonging to the tenant are
	// upgraded to use Global RE Ain Vrf to reach RE so that RE
	// can export AIN routes only to Global Ain Vrf without exporting
	// to tenant specific Ain Vrf
	//
	// All new tenants should have this flag set
	// x-displayName: "Use Global Ain Vrf"
	UseGlobalAinVrf bool `protobuf:"varint,10,opt,name=use_global_ain_vrf,json=useGlobalAinVrf,proto3" json:"use_global_ain_vrf,omitempty"`
	// Shared Shape Instance API auth key
	//
	// x-displayName: "API auth key"
	// x-example: "iL48DRzej6_UX1cOypny7NmtnJVBL9iSuT-0ImUsKlU"
	// API Auth Key for Shared Shape Bot Defense. This value is
	// set when tenant is created and comes from Shape IBD backend
	ShapeSharedInstanceAuthKey *schema.SecretType `protobuf:"bytes,11,opt,name=shape_shared_instance_auth_key,json=shapeSharedInstanceAuthKey,proto3" json:"shape_shared_instance_auth_key,omitempty"`
	// Company Name
	//
	// x-displayName: "Company Name"
	// Name of the company the tenant represents.
	// This is an optional value and mostly set for enterprise tenants - tenants with non volterra-xxx tenant ids
	CompanyName string `protobuf:"bytes,12,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	// Tenant FQDN
	//
	// x-displayName: "Tenant FQDN"
	// x-example: "abc.console.ves.volterra.io"
	// Tenant's fully qualified domain name for external access via Volterra's global controller.
	// Freemium tenant will have common access domain for eg: console.ves.volterra.io and in case of enterprise tenant,
	// it will include domain name tenant admin chose as cname for specific tenant access; for eg: abc.console.ves.volterra.io
	TenantFqdn string `protobuf:"bytes,13,opt,name=tenant_fqdn,json=tenantFqdn,proto3" json:"tenant_fqdn,omitempty"`
	// Addon Services Subscribed
	//
	// x-displayName: "Addon Services Subscribed"
	// x-example: "shape-bot"
	// List of addon service names currently subscribed by the tenant.
	AddonServicesSubscribed []string `protobuf:"bytes,14,rep,name=addon_services_subscribed,json=addonServicesSubscribed,proto3" json:"addon_services_subscribed,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_de41f8b87043178a, []int{3}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetPublicVip() string {
	if m != nil {
		return m.PublicVip
	}
	return ""
}

func (m *GlobalSpecType) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *GlobalSpecType) GetTgwAsnOffset() uint32 {
	if m != nil {
		return m.TgwAsnOffset
	}
	return 0
}

func (m *GlobalSpecType) GetSharedPublicVip() []*schema.ObjectRefType {
	if m != nil {
		return m.SharedPublicVip
	}
	return nil
}

func (m *GlobalSpecType) GetK8SServerSubCas() []*SubCA {
	if m != nil {
		return m.K8SServerSubCas
	}
	return nil
}

func (m *GlobalSpecType) GetK8SServerSubCaLatestVersion() uint32 {
	if m != nil {
		return m.K8SServerSubCaLatestVersion
	}
	return 0
}

func (m *GlobalSpecType) GetProxyRootCas() []*CA {
	if m != nil {
		return m.ProxyRootCas
	}
	return nil
}

func (m *GlobalSpecType) GetProxyRootCaLatestVersion() uint32 {
	if m != nil {
		return m.ProxyRootCaLatestVersion
	}
	return 0
}

func (m *GlobalSpecType) GetDefaultDisablePublicAp() bool {
	if m != nil {
		return m.DefaultDisablePublicAp
	}
	return false
}

func (m *GlobalSpecType) GetUseGlobalAinVrf() bool {
	if m != nil {
		return m.UseGlobalAinVrf
	}
	return false
}

func (m *GlobalSpecType) GetShapeSharedInstanceAuthKey() *schema.SecretType {
	if m != nil {
		return m.ShapeSharedInstanceAuthKey
	}
	return nil
}

func (m *GlobalSpecType) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *GlobalSpecType) GetTenantFqdn() string {
	if m != nil {
		return m.TenantFqdn
	}
	return ""
}

func (m *GlobalSpecType) GetAddonServicesSubscribed() []string {
	if m != nil {
		return m.AddonServicesSubscribed
	}
	return nil
}

// CredentialsExpiry
//
// x-displayName: "CredentialsExpiry"
// CredentialsExpiry is a struct that holds max expiration days setting for the different credentials.
type CredentialsExpiry struct {
	// Certificate expiry period
	//
	// x-displayName: "Certificate expiry period"
	// x-example: "90"
	// Certificate expiry period as days
	MaxApiCertificateExpiryDays int32 `protobuf:"varint,1,opt,name=max_api_certificate_expiry_days,json=maxApiCertificateExpiryDays,proto3" json:"max_api_certificate_expiry_days,omitempty"`
	// Token expiry period
	//
	// x-displayName: "Token expiry period"
	// x-example: "90"
	// Token expiry period as days
	MaxApiTokenExpiryDays int32 `protobuf:"varint,2,opt,name=max_api_token_expiry_days,json=maxApiTokenExpiryDays,proto3" json:"max_api_token_expiry_days,omitempty"`
	// Kubeconfig expiry period
	//
	// x-displayName: "Kubeconfig expiry period"
	// x-example: "90"
	// TokeKubeconfign expiry period as days
	MaxKubeConfigExpiryDays int32 `protobuf:"varint,3,opt,name=max_kube_config_expiry_days,json=maxKubeConfigExpiryDays,proto3" json:"max_kube_config_expiry_days,omitempty"`
}

func (m *CredentialsExpiry) Reset()      { *m = CredentialsExpiry{} }
func (*CredentialsExpiry) ProtoMessage() {}
func (*CredentialsExpiry) Descriptor() ([]byte, []int) {
	return fileDescriptor_de41f8b87043178a, []int{4}
}
func (m *CredentialsExpiry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialsExpiry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CredentialsExpiry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialsExpiry.Merge(m, src)
}
func (m *CredentialsExpiry) XXX_Size() int {
	return m.Size()
}
func (m *CredentialsExpiry) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialsExpiry.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialsExpiry proto.InternalMessageInfo

func (m *CredentialsExpiry) GetMaxApiCertificateExpiryDays() int32 {
	if m != nil {
		return m.MaxApiCertificateExpiryDays
	}
	return 0
}

func (m *CredentialsExpiry) GetMaxApiTokenExpiryDays() int32 {
	if m != nil {
		return m.MaxApiTokenExpiryDays
	}
	return 0
}

func (m *CredentialsExpiry) GetMaxKubeConfigExpiryDays() int32 {
	if m != nil {
		return m.MaxKubeConfigExpiryDays
	}
	return 0
}

// Empty
//
// x-displayName: "Empty"
// This can be used for messages where no values are needed
type Empty struct {
}

func (m *Empty) Reset()      { *m = Empty{} }
func (*Empty) ProtoMessage() {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_de41f8b87043178a, []int{5}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ves.io.schema.tenant.DeletionReason", DeletionReason_name, DeletionReason_value)
	golang_proto.RegisterEnum("ves.io.schema.tenant.DeletionReason", DeletionReason_name, DeletionReason_value)
	proto.RegisterEnum("ves.io.schema.tenant.FSMState", FSMState_name, FSMState_value)
	golang_proto.RegisterEnum("ves.io.schema.tenant.FSMState", FSMState_name, FSMState_value)
	proto.RegisterEnum("ves.io.schema.tenant.OtpStatus", OtpStatus_name, OtpStatus_value)
	golang_proto.RegisterEnum("ves.io.schema.tenant.OtpStatus", OtpStatus_name, OtpStatus_value)
	proto.RegisterType((*SubCA)(nil), "ves.io.schema.tenant.SubCA")
	golang_proto.RegisterType((*SubCA)(nil), "ves.io.schema.tenant.SubCA")
	proto.RegisterType((*CA)(nil), "ves.io.schema.tenant.CA")
	golang_proto.RegisterType((*CA)(nil), "ves.io.schema.tenant.CA")
	proto.RegisterType((*EncryptedPassword)(nil), "ves.io.schema.tenant.EncryptedPassword")
	golang_proto.RegisterType((*EncryptedPassword)(nil), "ves.io.schema.tenant.EncryptedPassword")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.tenant.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.tenant.GlobalSpecType")
	proto.RegisterType((*CredentialsExpiry)(nil), "ves.io.schema.tenant.CredentialsExpiry")
	golang_proto.RegisterType((*CredentialsExpiry)(nil), "ves.io.schema.tenant.CredentialsExpiry")
	proto.RegisterType((*Empty)(nil), "ves.io.schema.tenant.Empty")
	golang_proto.RegisterType((*Empty)(nil), "ves.io.schema.tenant.Empty")
}

func init() { proto.RegisterFile("ves.io/schema/tenant/types.proto", fileDescriptor_de41f8b87043178a) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/tenant/types.proto", fileDescriptor_de41f8b87043178a)
}

var fileDescriptor_de41f8b87043178a = []byte{
	// 1245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4d, 0x6f, 0xdb, 0xc6,
	0x16, 0x15, 0x25, 0x7f, 0xc8, 0xe3, 0x2f, 0x7a, 0x90, 0x38, 0xb4, 0x6c, 0xf0, 0x09, 0xde, 0x3c,
	0xc3, 0x81, 0x25, 0x20, 0xd9, 0xe4, 0x01, 0x0f, 0x01, 0x64, 0x89, 0x4a, 0x94, 0x38, 0x92, 0x41,
	0xca, 0x09, 0x5a, 0xa0, 0x98, 0x8e, 0xc8, 0x2b, 0x99, 0xb5, 0xc4, 0x99, 0x70, 0x86, 0x8a, 0xb5,
	0x28, 0x90, 0x65, 0xbb, 0x2b, 0xba, 0x2c, 0xfa, 0x03, 0x8a, 0xfe, 0x84, 0xae, 0xb2, 0x29, 0xd0,
	0x65, 0xba, 0xcb, 0xae, 0x8d, 0xbc, 0x68, 0xbb, 0xcb, 0x2f, 0x68, 0x0a, 0x0e, 0x29, 0xd9, 0x72,
	0xb2, 0xea, 0x6e, 0xee, 0x3d, 0xe7, 0xdc, 0x7b, 0x78, 0xef, 0x8c, 0x65, 0x54, 0x1c, 0x82, 0x28,
	0xf9, 0xac, 0x2c, 0xdc, 0x53, 0x18, 0xd0, 0xb2, 0x84, 0x80, 0x06, 0xb2, 0x2c, 0x47, 0x1c, 0x44,
	0x89, 0x87, 0x4c, 0x32, 0x7c, 0x23, 0x61, 0x94, 0x12, 0x46, 0x29, 0x61, 0x14, 0x0e, 0x7a, 0xbe,
	0x3c, 0x8d, 0x3a, 0x25, 0x97, 0x0d, 0xca, 0x3d, 0xd6, 0x63, 0x65, 0x45, 0xee, 0x44, 0x5d, 0x15,
	0xa9, 0x40, 0x9d, 0x92, 0x22, 0x85, 0xed, 0xd9, 0x36, 0x8c, 0x4b, 0x9f, 0x05, 0x69, 0x87, 0xc2,
	0xd6, 0x35, 0x0f, 0x97, 0xcd, 0x0b, 0x3b, 0xb3, 0xd0, 0x90, 0xf6, 0x7d, 0x8f, 0x4a, 0x48, 0xd0,
	0xdd, 0xef, 0x34, 0x34, 0xef, 0x44, 0x9d, 0x6a, 0x05, 0x6f, 0xa2, 0x85, 0x2a, 0x6d, 0xd2, 0x01,
	0x18, 0x5a, 0x51, 0xdb, 0x5b, 0xb2, 0xd3, 0x08, 0x17, 0x50, 0x5e, 0x11, 0x8e, 0xad, 0x27, 0x46,
	0x56, 0x21, 0xd3, 0x18, 0x57, 0x51, 0xfe, 0x98, 0x0a, 0xf1, 0x82, 0x85, 0x9e, 0x91, 0x2b, 0x6a,
	0x7b, 0xcb, 0x77, 0xfe, 0x5b, 0xfa, 0xd8, 0xb7, 0x96, 0xac, 0xc0, 0x0d, 0x47, 0x5c, 0x82, 0x37,
	0xa1, 0xdb, 0x53, 0x21, 0x36, 0xd0, 0xe2, 0x53, 0x08, 0x85, 0xcf, 0x02, 0x63, 0xae, 0xa8, 0xed,
	0xad, 0xda, 0x93, 0x70, 0xf7, 0x6b, 0x0d, 0x65, 0xab, 0x15, 0x8c, 0xd1, 0x5c, 0x70, 0xe9, 0x4b,
	0x9d, 0xb1, 0x8e, 0x72, 0x1c, 0x06, 0xa9, 0xa1, 0xf8, 0x18, 0x7b, 0xe1, 0xff, 0xd6, 0x0b, 0xbf,
	0xe2, 0x65, 0x38, 0xeb, 0x25, 0x0d, 0x77, 0x1b, 0x68, 0xe3, 0x03, 0xe1, 0x55, 0xeb, 0xda, 0x8c,
	0xf5, 0x78, 0x6a, 0xd3, 0xc9, 0xa4, 0x53, 0x9b, 0xc4, 0xbb, 0x7f, 0x2c, 0xa0, 0xb5, 0x07, 0x7d,
	0xd6, 0xa1, 0x7d, 0x87, 0x83, 0xdb, 0x1e, 0x71, 0xc0, 0x7b, 0x08, 0xf1, 0xa8, 0xd3, 0xf7, 0x5d,
	0x32, 0xf4, 0x79, 0xf2, 0xa1, 0x87, 0x4b, 0x3f, 0xfd, 0xf5, 0x2a, 0x37, 0x17, 0x66, 0xb9, 0x66,
	0x2f, 0x25, 0xe0, 0x53, 0x9f, 0xc7, 0x2d, 0x3d, 0xe8, 0x83, 0x84, 0xa4, 0x6e, 0xde, 0x9e, 0x84,
	0xf8, 0x2e, 0x5a, 0x93, 0xbd, 0x17, 0x84, 0x8a, 0x80, 0xb0, 0x6e, 0x57, 0x80, 0x54, 0x63, 0x58,
	0x3d, 0x5c, 0x8d, 0xeb, 0xe4, 0xf7, 0x17, 0x8c, 0xbf, 0x7f, 0x7b, 0xff, 0x7e, 0xdd, 0x5e, 0x91,
	0xbd, 0x17, 0x15, 0x11, 0xb4, 0x14, 0x05, 0x7f, 0x8e, 0x36, 0xc4, 0x29, 0x0d, 0xc1, 0x23, 0x57,
	0xfa, 0xcf, 0x15, 0x73, 0x7b, 0xcb, 0x77, 0x76, 0xae, 0x8d, 0xaf, 0xd5, 0xf9, 0x02, 0x5c, 0x69,
	0x43, 0x37, 0x76, 0x7c, 0xb8, 0xf9, 0xe3, 0x97, 0xa9, 0x2b, 0xe2, 0xf3, 0xb8, 0xc3, 0xfc, 0xb7,
	0x5a, 0x56, 0xd7, 0xec, 0xf5, 0xa4, 0xdc, 0xf1, 0xd4, 0xf0, 0x43, 0x84, 0xcf, 0xee, 0x09, 0x22,
	0x20, 0x1c, 0x42, 0x48, 0x44, 0xd4, 0x21, 0x2e, 0x15, 0xc6, 0xbc, 0x6a, 0xb1, 0xfd, 0xf1, 0x0d,
	0xa9, 0xfb, 0x65, 0xaf, 0x9f, 0xdd, 0x13, 0x8e, 0x52, 0xc5, 0x31, 0x15, 0xd8, 0x42, 0xc5, 0x0f,
	0x2a, 0x91, 0x3e, 0x95, 0x20, 0x24, 0x99, 0x6c, 0x6d, 0x41, 0xad, 0x61, 0x7b, 0x56, 0x7a, 0xa4,
	0x38, 0x93, 0xd5, 0xdc, 0x47, 0x6b, 0x3c, 0x64, 0xe7, 0x23, 0x12, 0x32, 0x26, 0x95, 0x99, 0x45,
	0x65, 0xc6, 0xf8, 0xb8, 0x99, 0x6a, 0xc5, 0x5e, 0x51, 0x7c, 0x9b, 0x31, 0x19, 0xdb, 0xb8, 0x8f,
	0x76, 0x66, 0xf4, 0xd7, 0x2d, 0xe4, 0x95, 0x05, 0xe3, 0x8a, 0x66, 0xb6, 0xff, 0xff, 0xd0, 0x96,
	0x07, 0x5d, 0x1a, 0xf5, 0x25, 0xf1, 0x7c, 0x41, 0x3b, 0x7d, 0x98, 0xcc, 0x9e, 0x72, 0x63, 0x49,
	0xed, 0x74, 0x33, 0x25, 0xd4, 0x12, 0x3c, 0x19, 0x66, 0x85, 0xe3, 0xdb, 0x08, 0x47, 0x02, 0x48,
	0x4f, 0x5d, 0x1e, 0x42, 0xfd, 0x80, 0x0c, 0xc3, 0xae, 0x81, 0x94, 0x66, 0x3d, 0x12, 0x90, 0xdc,
	0xaa, 0x8a, 0x1f, 0x3c, 0x0d, 0xbb, 0xf8, 0x33, 0x64, 0x8a, 0x53, 0xca, 0x81, 0xa4, 0x0b, 0xf6,
	0x03, 0x21, 0x69, 0xe0, 0x02, 0xa1, 0x91, 0x3c, 0x25, 0x67, 0x30, 0x32, 0x96, 0xd5, 0x33, 0xd9,
	0xba, 0xf6, 0xdd, 0x0e, 0xb8, 0x21, 0xc8, 0x78, 0xc9, 0x76, 0x41, 0x15, 0x70, 0x94, 0xbe, 0x91,
	0xca, 0x2b, 0x91, 0x3c, 0x7d, 0x0c, 0x23, 0x7c, 0x80, 0x56, 0x5c, 0x36, 0xe0, 0x34, 0x18, 0x11,
	0xf5, 0x3a, 0x57, 0xd4, 0xa5, 0x45, 0xea, 0x2a, 0x84, 0x39, 0xe3, 0x65, 0xd6, 0x5e, 0x4e, 0x71,
	0xf5, 0x67, 0xe4, 0x36, 0x5a, 0x4e, 0x06, 0x4a, 0xba, 0xcf, 0xbd, 0xc0, 0x58, 0xfd, 0x80, 0x8d,
	0x12, 0xb8, 0xfe, 0xdc, 0x0b, 0x70, 0x1d, 0x6d, 0x51, 0xcf, 0x63, 0x81, 0xda, 0xb5, 0xef, 0x82,
	0x88, 0xb7, 0x2d, 0xdc, 0xd0, 0xef, 0x80, 0x67, 0xac, 0x15, 0x73, 0x53, 0x69, 0x7c, 0xe7, 0x8a,
	0xf6, 0x2d, 0x45, 0x76, 0x52, 0xae, 0x33, 0xa5, 0xee, 0xfe, 0xaa, 0xa1, 0x8d, 0x6a, 0x08, 0x1e,
	0x04, 0xd2, 0xa7, 0x7d, 0x61, 0x9d, 0x73, 0x3f, 0x1c, 0xe1, 0x1a, 0xfa, 0xcf, 0x80, 0x9e, 0x13,
	0xca, 0x7d, 0xe2, 0x42, 0x28, 0xfd, 0xae, 0xef, 0x52, 0x09, 0x04, 0x14, 0x4a, 0x3c, 0x3a, 0x12,
	0xea, 0x05, 0xce, 0xdb, 0xdb, 0x03, 0x7a, 0x5e, 0xe1, 0x7e, 0xf5, 0x92, 0x94, 0x54, 0xa8, 0xd1,
	0x91, 0xc0, 0xf7, 0xd0, 0xd6, 0xa4, 0x8a, 0x64, 0x67, 0x10, 0xcc, 0xe8, 0xb3, 0x4a, 0x7f, 0x33,
	0xd1, 0xb7, 0x63, 0xf8, 0x8a, 0xf2, 0xff, 0x28, 0x2e, 0x4c, 0xce, 0xa2, 0x0e, 0x10, 0x97, 0x05,
	0x5d, 0xbf, 0x37, 0xa3, 0xcd, 0x29, 0xed, 0xad, 0x01, 0x3d, 0x7f, 0x1c, 0x75, 0xa0, 0xaa, 0x08,
	0x97, 0xea, 0xdd, 0x45, 0x34, 0x6f, 0x0d, 0xb8, 0x1c, 0xed, 0x7f, 0xaf, 0xa1, 0xb5, 0x5a, 0xfc,
	0xf6, 0x7d, 0x16, 0xd8, 0x40, 0x05, 0x0b, 0x30, 0x46, 0x6b, 0xb6, 0x55, 0x71, 0x5a, 0x4d, 0x72,
	0xd2, 0x7c, 0xdc, 0x6c, 0x3d, 0x6b, 0xea, 0x19, 0x6c, 0xa2, 0x42, 0x9a, 0x73, 0x9e, 0x35, 0xda,
	0xd5, 0x87, 0xa4, 0xdd, 0x22, 0x75, 0xdb, 0xb2, 0xc8, 0xf1, 0x51, 0xa5, 0xa9, 0x6b, 0x78, 0x1b,
	0xdd, 0x4a, 0xf1, 0x66, 0x8b, 0x1c, 0xb5, 0x9a, 0x0f, 0x2c, 0x9b, 0x34, 0x2d, 0xab, 0x66, 0xd5,
	0xf4, 0x2c, 0xde, 0x41, 0xc6, 0x14, 0x6c, 0x93, 0x47, 0x27, 0x4e, 0xbb, 0x51, 0xff, 0x84, 0x54,
	0x5b, 0x4e, 0xdb, 0xd1, 0x73, 0x57, 0xa4, 0xb5, 0x46, 0xbd, 0xde, 0xa8, 0x9e, 0x1c, 0xb5, 0xe3,
	0xea, 0x27, 0x8e, 0xa5, 0xcf, 0xed, 0xff, 0xac, 0xa1, 0x7c, 0xdd, 0x79, 0xe2, 0x48, 0x2a, 0x21,
	0x36, 0xa6, 0x0e, 0x27, 0x81, 0x07, 0x5d, 0x3f, 0x00, 0x4f, 0xcf, 0xe0, 0x0d, 0xb4, 0xaa, 0x72,
	0xd5, 0x10, 0xa8, 0xf4, 0x83, 0x9e, 0xae, 0xe1, 0x9b, 0x68, 0xe3, 0x32, 0x05, 0x75, 0xea, 0xf7,
	0xc1, 0xd3, 0xb3, 0x53, 0x66, 0x23, 0xa0, 0xae, 0xf4, 0x87, 0xa0, 0xe7, 0xf0, 0x3a, 0x5a, 0x56,
	0xa9, 0x4a, 0x92, 0x98, 0x9b, 0x76, 0x70, 0x22, 0xc1, 0x21, 0xf0, 0xc0, 0xd3, 0xe7, 0xa7, 0xba,
	0xf4, 0x19, 0x79, 0xfa, 0x02, 0xbe, 0x81, 0xf4, 0xa4, 0x83, 0x1a, 0x6b, 0x14, 0xc6, 0x7d, 0x17,
	0x71, 0x01, 0x6d, 0x5e, 0xcf, 0xa6, 0xcd, 0xf3, 0xfb, 0x87, 0x68, 0xa9, 0x25, 0x79, 0x0c, 0x47,
	0x02, 0xeb, 0x68, 0xa5, 0xd5, 0x3e, 0x26, 0xb5, 0x86, 0x53, 0x39, 0x3c, 0xb2, 0x6a, 0x7a, 0x26,
	0x36, 0x12, 0x67, 0xac, 0x66, 0x92, 0xd0, 0x62, 0x23, 0x71, 0xe2, 0xd8, 0x6e, 0x55, 0x2d, 0xc7,
	0x69, 0x34, 0x1f, 0xe8, 0xd9, 0xc3, 0xaf, 0xb4, 0xd7, 0x6f, 0xcd, 0xcc, 0x9b, 0xb7, 0x66, 0xe6,
	0xdd, 0x5b, 0x53, 0x7b, 0x39, 0x36, 0xb5, 0x1f, 0xc6, 0xa6, 0xf6, 0xcb, 0xd8, 0xd4, 0x5e, 0x8f,
	0x4d, 0xed, 0xcd, 0xd8, 0xd4, 0x7e, 0x1f, 0x9b, 0xda, 0x9f, 0x63, 0x33, 0xf3, 0x6e, 0x6c, 0x6a,
	0xdf, 0x5c, 0x98, 0x99, 0x57, 0x17, 0xa6, 0xf6, 0xfa, 0xc2, 0xcc, 0xbc, 0xb9, 0x30, 0x33, 0x9f,
	0x3e, 0xea, 0x31, 0x7e, 0xd6, 0x2b, 0x0d, 0x59, 0x5f, 0x42, 0x18, 0xd2, 0x52, 0x24, 0xca, 0xea,
	0xd0, 0x65, 0xe1, 0xe0, 0x80, 0x87, 0x6c, 0xe8, 0x7b, 0x10, 0x1e, 0x4c, 0xe0, 0x32, 0xef, 0xf4,
	0x58, 0x19, 0xce, 0x65, 0xfa, 0x8b, 0x3f, 0xf3, 0x7f, 0x49, 0x67, 0x41, 0xfd, 0xee, 0xdf, 0xfd,
	0x27, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xaf, 0x0a, 0x19, 0xb6, 0x08, 0x00, 0x00,
}

func (x DeletionReason) String() string {
	s, ok := DeletionReason_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x FSMState) String() string {
	s, ok := FSMState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OtpStatus) String() string {
	s, ok := OtpStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SubCA) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubCA)
	if !ok {
		that2, ok := that.(SubCA)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CaName != that1.CaName {
		return false
	}
	if this.SubCAPEM != that1.SubCAPEM {
		return false
	}
	if !this.Password.Equal(that1.Password) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *CA) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CA)
	if !ok {
		that2, ok := that.(CA)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Pem != that1.Pem {
		return false
	}
	if !this.Password.Equal(that1.Password) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *EncryptedPassword) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EncryptedPassword)
	if !ok {
		that2, ok := that.(EncryptedPassword)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PublicVip != that1.PublicVip {
		return false
	}
	if this.Deleted != that1.Deleted {
		return false
	}
	if this.TgwAsnOffset != that1.TgwAsnOffset {
		return false
	}
	if len(this.SharedPublicVip) != len(that1.SharedPublicVip) {
		return false
	}
	for i := range this.SharedPublicVip {
		if !this.SharedPublicVip[i].Equal(that1.SharedPublicVip[i]) {
			return false
		}
	}
	if len(this.K8SServerSubCas) != len(that1.K8SServerSubCas) {
		return false
	}
	for i := range this.K8SServerSubCas {
		if !this.K8SServerSubCas[i].Equal(that1.K8SServerSubCas[i]) {
			return false
		}
	}
	if this.K8SServerSubCaLatestVersion != that1.K8SServerSubCaLatestVersion {
		return false
	}
	if len(this.ProxyRootCas) != len(that1.ProxyRootCas) {
		return false
	}
	for i := range this.ProxyRootCas {
		if !this.ProxyRootCas[i].Equal(that1.ProxyRootCas[i]) {
			return false
		}
	}
	if this.ProxyRootCaLatestVersion != that1.ProxyRootCaLatestVersion {
		return false
	}
	if this.DefaultDisablePublicAp != that1.DefaultDisablePublicAp {
		return false
	}
	if this.UseGlobalAinVrf != that1.UseGlobalAinVrf {
		return false
	}
	if !this.ShapeSharedInstanceAuthKey.Equal(that1.ShapeSharedInstanceAuthKey) {
		return false
	}
	if this.CompanyName != that1.CompanyName {
		return false
	}
	if this.TenantFqdn != that1.TenantFqdn {
		return false
	}
	if len(this.AddonServicesSubscribed) != len(that1.AddonServicesSubscribed) {
		return false
	}
	for i := range this.AddonServicesSubscribed {
		if this.AddonServicesSubscribed[i] != that1.AddonServicesSubscribed[i] {
			return false
		}
	}
	return true
}
func (this *CredentialsExpiry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CredentialsExpiry)
	if !ok {
		that2, ok := that.(CredentialsExpiry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxApiCertificateExpiryDays != that1.MaxApiCertificateExpiryDays {
		return false
	}
	if this.MaxApiTokenExpiryDays != that1.MaxApiTokenExpiryDays {
		return false
	}
	if this.MaxKubeConfigExpiryDays != that1.MaxKubeConfigExpiryDays {
		return false
	}
	return true
}
func (this *Empty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Empty)
	if !ok {
		that2, ok := that.(Empty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SubCA) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tenant.SubCA{")
	s = append(s, "CaName: "+fmt.Sprintf("%#v", this.CaName)+",\n")
	s = append(s, "SubCAPEM: "+fmt.Sprintf("%#v", this.SubCAPEM)+",\n")
	if this.Password != nil {
		s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CA) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tenant.CA{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Pem: "+fmt.Sprintf("%#v", this.Pem)+",\n")
	if this.Password != nil {
		s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EncryptedPassword) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tenant.EncryptedPassword{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&tenant.GlobalSpecType{")
	s = append(s, "PublicVip: "+fmt.Sprintf("%#v", this.PublicVip)+",\n")
	s = append(s, "Deleted: "+fmt.Sprintf("%#v", this.Deleted)+",\n")
	s = append(s, "TgwAsnOffset: "+fmt.Sprintf("%#v", this.TgwAsnOffset)+",\n")
	if this.SharedPublicVip != nil {
		s = append(s, "SharedPublicVip: "+fmt.Sprintf("%#v", this.SharedPublicVip)+",\n")
	}
	if this.K8SServerSubCas != nil {
		s = append(s, "K8SServerSubCas: "+fmt.Sprintf("%#v", this.K8SServerSubCas)+",\n")
	}
	s = append(s, "K8SServerSubCaLatestVersion: "+fmt.Sprintf("%#v", this.K8SServerSubCaLatestVersion)+",\n")
	if this.ProxyRootCas != nil {
		s = append(s, "ProxyRootCas: "+fmt.Sprintf("%#v", this.ProxyRootCas)+",\n")
	}
	s = append(s, "ProxyRootCaLatestVersion: "+fmt.Sprintf("%#v", this.ProxyRootCaLatestVersion)+",\n")
	s = append(s, "DefaultDisablePublicAp: "+fmt.Sprintf("%#v", this.DefaultDisablePublicAp)+",\n")
	s = append(s, "UseGlobalAinVrf: "+fmt.Sprintf("%#v", this.UseGlobalAinVrf)+",\n")
	if this.ShapeSharedInstanceAuthKey != nil {
		s = append(s, "ShapeSharedInstanceAuthKey: "+fmt.Sprintf("%#v", this.ShapeSharedInstanceAuthKey)+",\n")
	}
	s = append(s, "CompanyName: "+fmt.Sprintf("%#v", this.CompanyName)+",\n")
	s = append(s, "TenantFqdn: "+fmt.Sprintf("%#v", this.TenantFqdn)+",\n")
	s = append(s, "AddonServicesSubscribed: "+fmt.Sprintf("%#v", this.AddonServicesSubscribed)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CredentialsExpiry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tenant.CredentialsExpiry{")
	s = append(s, "MaxApiCertificateExpiryDays: "+fmt.Sprintf("%#v", this.MaxApiCertificateExpiryDays)+",\n")
	s = append(s, "MaxApiTokenExpiryDays: "+fmt.Sprintf("%#v", this.MaxApiTokenExpiryDays)+",\n")
	s = append(s, "MaxKubeConfigExpiryDays: "+fmt.Sprintf("%#v", this.MaxKubeConfigExpiryDays)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Empty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tenant.Empty{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SubCA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubCA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubCA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x20
	}
	if m.Password != nil {
		{
			size, err := m.Password.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubCAPEM) > 0 {
		i -= len(m.SubCAPEM)
		copy(dAtA[i:], m.SubCAPEM)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SubCAPEM)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CaName) > 0 {
		i -= len(m.CaName)
		copy(dAtA[i:], m.CaName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CaName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x20
	}
	if m.Password != nil {
		{
			size, err := m.Password.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pem) > 0 {
		i -= len(m.Pem)
		copy(dAtA[i:], m.Pem)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Pem)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EncryptedPassword) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncryptedPassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncryptedPassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AddonServicesSubscribed) > 0 {
		for iNdEx := len(m.AddonServicesSubscribed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AddonServicesSubscribed[iNdEx])
			copy(dAtA[i:], m.AddonServicesSubscribed[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.AddonServicesSubscribed[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.TenantFqdn) > 0 {
		i -= len(m.TenantFqdn)
		copy(dAtA[i:], m.TenantFqdn)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TenantFqdn)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.CompanyName) > 0 {
		i -= len(m.CompanyName)
		copy(dAtA[i:], m.CompanyName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CompanyName)))
		i--
		dAtA[i] = 0x62
	}
	if m.ShapeSharedInstanceAuthKey != nil {
		{
			size, err := m.ShapeSharedInstanceAuthKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.UseGlobalAinVrf {
		i--
		if m.UseGlobalAinVrf {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.DefaultDisablePublicAp {
		i--
		if m.DefaultDisablePublicAp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.ProxyRootCaLatestVersion != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ProxyRootCaLatestVersion))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ProxyRootCas) > 0 {
		for iNdEx := len(m.ProxyRootCas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProxyRootCas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.K8SServerSubCaLatestVersion != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.K8SServerSubCaLatestVersion))
		i--
		dAtA[i] = 0x30
	}
	if len(m.K8SServerSubCas) > 0 {
		for iNdEx := len(m.K8SServerSubCas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.K8SServerSubCas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SharedPublicVip) > 0 {
		for iNdEx := len(m.SharedPublicVip) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SharedPublicVip[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TgwAsnOffset != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TgwAsnOffset))
		i--
		dAtA[i] = 0x18
	}
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.PublicVip) > 0 {
		i -= len(m.PublicVip)
		copy(dAtA[i:], m.PublicVip)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PublicVip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CredentialsExpiry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialsExpiry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialsExpiry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxKubeConfigExpiryDays != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxKubeConfigExpiryDays))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxApiTokenExpiryDays != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxApiTokenExpiryDays))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxApiCertificateExpiryDays != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxApiCertificateExpiryDays))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubCA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CaName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SubCAPEM)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovTypes(uint64(m.Version))
	}
	return n
}

func (m *CA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Pem)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovTypes(uint64(m.Version))
	}
	return n
}

func (m *EncryptedPassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovTypes(uint64(m.Version))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicVip)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Deleted {
		n += 2
	}
	if m.TgwAsnOffset != 0 {
		n += 1 + sovTypes(uint64(m.TgwAsnOffset))
	}
	if len(m.SharedPublicVip) > 0 {
		for _, e := range m.SharedPublicVip {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.K8SServerSubCas) > 0 {
		for _, e := range m.K8SServerSubCas {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.K8SServerSubCaLatestVersion != 0 {
		n += 1 + sovTypes(uint64(m.K8SServerSubCaLatestVersion))
	}
	if len(m.ProxyRootCas) > 0 {
		for _, e := range m.ProxyRootCas {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ProxyRootCaLatestVersion != 0 {
		n += 1 + sovTypes(uint64(m.ProxyRootCaLatestVersion))
	}
	if m.DefaultDisablePublicAp {
		n += 2
	}
	if m.UseGlobalAinVrf {
		n += 2
	}
	if m.ShapeSharedInstanceAuthKey != nil {
		l = m.ShapeSharedInstanceAuthKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CompanyName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TenantFqdn)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AddonServicesSubscribed) > 0 {
		for _, s := range m.AddonServicesSubscribed {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CredentialsExpiry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxApiCertificateExpiryDays != 0 {
		n += 1 + sovTypes(uint64(m.MaxApiCertificateExpiryDays))
	}
	if m.MaxApiTokenExpiryDays != 0 {
		n += 1 + sovTypes(uint64(m.MaxApiTokenExpiryDays))
	}
	if m.MaxKubeConfigExpiryDays != 0 {
		n += 1 + sovTypes(uint64(m.MaxKubeConfigExpiryDays))
	}
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SubCA) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubCA{`,
		`CaName:` + fmt.Sprintf("%v", this.CaName) + `,`,
		`SubCAPEM:` + fmt.Sprintf("%v", this.SubCAPEM) + `,`,
		`Password:` + strings.Replace(this.Password.String(), "EncryptedPassword", "EncryptedPassword", 1) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CA) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CA{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Pem:` + fmt.Sprintf("%v", this.Pem) + `,`,
		`Password:` + strings.Replace(this.Password.String(), "EncryptedPassword", "EncryptedPassword", 1) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EncryptedPassword) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EncryptedPassword{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSharedPublicVip := "[]*ObjectRefType{"
	for _, f := range this.SharedPublicVip {
		repeatedStringForSharedPublicVip += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForSharedPublicVip += "}"
	repeatedStringForK8SServerSubCas := "[]*SubCA{"
	for _, f := range this.K8SServerSubCas {
		repeatedStringForK8SServerSubCas += strings.Replace(f.String(), "SubCA", "SubCA", 1) + ","
	}
	repeatedStringForK8SServerSubCas += "}"
	repeatedStringForProxyRootCas := "[]*CA{"
	for _, f := range this.ProxyRootCas {
		repeatedStringForProxyRootCas += strings.Replace(f.String(), "CA", "CA", 1) + ","
	}
	repeatedStringForProxyRootCas += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`PublicVip:` + fmt.Sprintf("%v", this.PublicVip) + `,`,
		`Deleted:` + fmt.Sprintf("%v", this.Deleted) + `,`,
		`TgwAsnOffset:` + fmt.Sprintf("%v", this.TgwAsnOffset) + `,`,
		`SharedPublicVip:` + repeatedStringForSharedPublicVip + `,`,
		`K8SServerSubCas:` + repeatedStringForK8SServerSubCas + `,`,
		`K8SServerSubCaLatestVersion:` + fmt.Sprintf("%v", this.K8SServerSubCaLatestVersion) + `,`,
		`ProxyRootCas:` + repeatedStringForProxyRootCas + `,`,
		`ProxyRootCaLatestVersion:` + fmt.Sprintf("%v", this.ProxyRootCaLatestVersion) + `,`,
		`DefaultDisablePublicAp:` + fmt.Sprintf("%v", this.DefaultDisablePublicAp) + `,`,
		`UseGlobalAinVrf:` + fmt.Sprintf("%v", this.UseGlobalAinVrf) + `,`,
		`ShapeSharedInstanceAuthKey:` + strings.Replace(fmt.Sprintf("%v", this.ShapeSharedInstanceAuthKey), "SecretType", "schema.SecretType", 1) + `,`,
		`CompanyName:` + fmt.Sprintf("%v", this.CompanyName) + `,`,
		`TenantFqdn:` + fmt.Sprintf("%v", this.TenantFqdn) + `,`,
		`AddonServicesSubscribed:` + fmt.Sprintf("%v", this.AddonServicesSubscribed) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CredentialsExpiry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CredentialsExpiry{`,
		`MaxApiCertificateExpiryDays:` + fmt.Sprintf("%v", this.MaxApiCertificateExpiryDays) + `,`,
		`MaxApiTokenExpiryDays:` + fmt.Sprintf("%v", this.MaxApiTokenExpiryDays) + `,`,
		`MaxKubeConfigExpiryDays:` + fmt.Sprintf("%v", this.MaxKubeConfigExpiryDays) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Empty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Empty{`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SubCA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubCA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubCA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubCAPEM", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubCAPEM = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Password == nil {
				m.Password = &EncryptedPassword{}
			}
			if err := m.Password.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Password == nil {
				m.Password = &EncryptedPassword{}
			}
			if err := m.Password.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncryptedPassword) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncryptedPassword: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncryptedPassword: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicVip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicVip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TgwAsnOffset", wireType)
			}
			m.TgwAsnOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TgwAsnOffset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedPublicVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharedPublicVip = append(m.SharedPublicVip, &schema.ObjectRefType{})
			if err := m.SharedPublicVip[len(m.SharedPublicVip)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SServerSubCas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K8SServerSubCas = append(m.K8SServerSubCas, &SubCA{})
			if err := m.K8SServerSubCas[len(m.K8SServerSubCas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SServerSubCaLatestVersion", wireType)
			}
			m.K8SServerSubCaLatestVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.K8SServerSubCaLatestVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyRootCas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyRootCas = append(m.ProxyRootCas, &CA{})
			if err := m.ProxyRootCas[len(m.ProxyRootCas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyRootCaLatestVersion", wireType)
			}
			m.ProxyRootCaLatestVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyRootCaLatestVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDisablePublicAp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultDisablePublicAp = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseGlobalAinVrf", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseGlobalAinVrf = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShapeSharedInstanceAuthKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShapeSharedInstanceAuthKey == nil {
				m.ShapeSharedInstanceAuthKey = &schema.SecretType{}
			}
			if err := m.ShapeSharedInstanceAuthKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantFqdn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantFqdn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddonServicesSubscribed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddonServicesSubscribed = append(m.AddonServicesSubscribed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialsExpiry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialsExpiry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialsExpiry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxApiCertificateExpiryDays", wireType)
			}
			m.MaxApiCertificateExpiryDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxApiCertificateExpiryDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxApiTokenExpiryDays", wireType)
			}
			m.MaxApiTokenExpiryDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxApiTokenExpiryDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxKubeConfigExpiryDays", wireType)
			}
			m.MaxKubeConfigExpiryDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxKubeConfigExpiryDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
