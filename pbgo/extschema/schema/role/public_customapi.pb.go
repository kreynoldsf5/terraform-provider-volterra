// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/role/public_customapi.proto

// Role
//
// x-displayName: "Role"
// Defines the role that user has in a namespace. There are two kinds of roles:
// * user defined roles - each tenant can define a set of roles suiting their needs.
// * built-in roles - volterra defined roles based on common user story available to all tenants.
// tenant admins are free to use built-in roles but can't amend them nor can they remove them.

package role

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CustomListRequest
//
// x-displayName: "Custom List Request"
// Custom request to list the role objects and api groups which the role has access to.
type CustomListRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "system"
	// Namespace fo the roles to be retrieved.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *CustomListRequest) Reset()      { *m = CustomListRequest{} }
func (*CustomListRequest) ProtoMessage() {}
func (*CustomListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b010d9b29cd8d246, []int{0}
}
func (m *CustomListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomListRequest.Merge(m, src)
}
func (m *CustomListRequest) XXX_Size() int {
	return m.Size()
}
func (m *CustomListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CustomListRequest proto.InternalMessageInfo

func (m *CustomListRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// Role
//
// x-displayName: "Role"
// Role entity.
type Role struct {
	// tenant
	//
	// x-displayName: "Tenant"
	// x-example: "acmecorp"
	// The tenant this item belongs to
	Tenant string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// namespace
	//
	// x-displayName: "Namespace"
	// x-example: "ns1"
	// The namespace this item belongs to
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// name
	//
	// x-displayName: "Name"
	// x-example: "name"
	// The name of this role
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// uid
	//
	// x-displayName: "UID"
	// x-example: "d27938ba-967e-40a7-9709-57b8627f9f75"
	// The unique uid of this role
	Uid string `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	// disabled
	//
	// x-displayName: "Disabled"
	// x-example: false
	// Representation if role is disabled.
	Disabled bool `protobuf:"varint,5,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// get_spec
	//
	// x-displayName: "Get Specification"
	// If ListRequest has any specified report_fields, it will appear in object
	GetSpec *GetSpecType `protobuf:"bytes,6,opt,name=get_spec,json=getSpec,proto3" json:"get_spec,omitempty"`
	// API Group
	//
	// x-displayName: "API Groups"
	// x-example: "[f5xc-billing]"
	// The API groups that the role can access.
	ApiGroups []string `protobuf:"bytes,7,rep,name=api_groups,json=apiGroups,proto3" json:"api_groups,omitempty"`
}

func (m *Role) Reset()      { *m = Role{} }
func (*Role) ProtoMessage() {}
func (*Role) Descriptor() ([]byte, []int) {
	return fileDescriptor_b010d9b29cd8d246, []int{1}
}
func (m *Role) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Role) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Role.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Role) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Role.Merge(m, src)
}
func (m *Role) XXX_Size() int {
	return m.Size()
}
func (m *Role) XXX_DiscardUnknown() {
	xxx_messageInfo_Role.DiscardUnknown(m)
}

var xxx_messageInfo_Role proto.InternalMessageInfo

func (m *Role) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *Role) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Role) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Role) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Role) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *Role) GetGetSpec() *GetSpecType {
	if m != nil {
		return m.GetSpec
	}
	return nil
}

func (m *Role) GetApiGroups() []string {
	if m != nil {
		return m.ApiGroups
	}
	return nil
}

// CustomListResponse
//
// x-displayName: "Custom List Response"
// Response for CustomList API.
type CustomListResponse struct {
	// Role
	//
	// x-displayName: "Role"
	// x-example: "[{role_object}]"
	// The list of the roles for specific request.
	Items []*Role `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *CustomListResponse) Reset()      { *m = CustomListResponse{} }
func (*CustomListResponse) ProtoMessage() {}
func (*CustomListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b010d9b29cd8d246, []int{2}
}
func (m *CustomListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomListResponse.Merge(m, src)
}
func (m *CustomListResponse) XXX_Size() int {
	return m.Size()
}
func (m *CustomListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CustomListResponse proto.InternalMessageInfo

func (m *CustomListResponse) GetItems() []*Role {
	if m != nil {
		return m.Items
	}
	return nil
}

// CustomGetRequest
//
// x-displayName: "Custom Get Request"
// Custom request to get the role object and api groups which the role has access to.
type CustomGetRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "value"
	// Namespace fo the role to be retrieved
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "value"
	// Name of the role
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CustomGetRequest) Reset()      { *m = CustomGetRequest{} }
func (*CustomGetRequest) ProtoMessage() {}
func (*CustomGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b010d9b29cd8d246, []int{3}
}
func (m *CustomGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomGetRequest.Merge(m, src)
}
func (m *CustomGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *CustomGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CustomGetRequest proto.InternalMessageInfo

func (m *CustomGetRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CustomGetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// CustomGetResponse
//
// x-displayName: "Custom Get Response"
// Response for CustomGet API.
type CustomGetResponse struct {
	// Object
	//
	// x-displayName: "Object"
	// Role Object
	Object *Object `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	// API Group
	//
	// x-displayName: "API Groups"
	// x-example: "value"
	// The API groups that the role can access.
	ApiGroups []string `protobuf:"bytes,2,rep,name=api_groups,json=apiGroups,proto3" json:"api_groups,omitempty"`
}

func (m *CustomGetResponse) Reset()      { *m = CustomGetResponse{} }
func (*CustomGetResponse) ProtoMessage() {}
func (*CustomGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b010d9b29cd8d246, []int{4}
}
func (m *CustomGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomGetResponse.Merge(m, src)
}
func (m *CustomGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *CustomGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CustomGetResponse proto.InternalMessageInfo

func (m *CustomGetResponse) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *CustomGetResponse) GetApiGroups() []string {
	if m != nil {
		return m.ApiGroups
	}
	return nil
}

// CustomCreateRequest
//
// x-displayName: "Custom Create Request"
// Custom request to create role object and rbac_policy object.
type CustomCreateRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "value"
	// Namespace.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Metadata
	//
	// x-displayName: "Metadata"
	// Common attributes that can be set during create for all configuration objects like name, labels etc.
	Metadata *schema.ObjectCreateMetaType `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// A specification of the configuration object to be created.
	Spec *CreateSpecType `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// API Groups
	//
	// x-displayName: "ApiGroups"
	// x-example: "value"
	// API Groups the role has access to.
	ApiGroups []string `protobuf:"bytes,4,rep,name=api_groups,json=apiGroups,proto3" json:"api_groups,omitempty"`
}

func (m *CustomCreateRequest) Reset()      { *m = CustomCreateRequest{} }
func (*CustomCreateRequest) ProtoMessage() {}
func (*CustomCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b010d9b29cd8d246, []int{5}
}
func (m *CustomCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomCreateRequest.Merge(m, src)
}
func (m *CustomCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CustomCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CustomCreateRequest proto.InternalMessageInfo

func (m *CustomCreateRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CustomCreateRequest) GetMetadata() *schema.ObjectCreateMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CustomCreateRequest) GetSpec() *CreateSpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CustomCreateRequest) GetApiGroups() []string {
	if m != nil {
		return m.ApiGroups
	}
	return nil
}

// CustomeReplaceRequest
//
// x-displayName: "Custom Replace Request"
// Custom request to update a role object.
type CustomReplaceRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "value"
	// Namespace.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "value"
	// Name of the role.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// spec
	//
	// x-displayName: "Spec"
	// A specification of the configuration object to be replaced.
	Spec *ReplaceSpecType `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// API Groups
	//
	// x-displayName: "ApiGroups"
	// x-example: "value"
	// API Groups the role has access to.
	ApiGroups []string `protobuf:"bytes,4,rep,name=api_groups,json=apiGroups,proto3" json:"api_groups,omitempty"`
}

func (m *CustomReplaceRequest) Reset()      { *m = CustomReplaceRequest{} }
func (*CustomReplaceRequest) ProtoMessage() {}
func (*CustomReplaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b010d9b29cd8d246, []int{6}
}
func (m *CustomReplaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomReplaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomReplaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomReplaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomReplaceRequest.Merge(m, src)
}
func (m *CustomReplaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *CustomReplaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomReplaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CustomReplaceRequest proto.InternalMessageInfo

func (m *CustomReplaceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CustomReplaceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CustomReplaceRequest) GetSpec() *ReplaceSpecType {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CustomReplaceRequest) GetApiGroups() []string {
	if m != nil {
		return m.ApiGroups
	}
	return nil
}

func init() {
	proto.RegisterType((*CustomListRequest)(nil), "ves.io.schema.role.CustomListRequest")
	golang_proto.RegisterType((*CustomListRequest)(nil), "ves.io.schema.role.CustomListRequest")
	proto.RegisterType((*Role)(nil), "ves.io.schema.role.Role")
	golang_proto.RegisterType((*Role)(nil), "ves.io.schema.role.Role")
	proto.RegisterType((*CustomListResponse)(nil), "ves.io.schema.role.CustomListResponse")
	golang_proto.RegisterType((*CustomListResponse)(nil), "ves.io.schema.role.CustomListResponse")
	proto.RegisterType((*CustomGetRequest)(nil), "ves.io.schema.role.CustomGetRequest")
	golang_proto.RegisterType((*CustomGetRequest)(nil), "ves.io.schema.role.CustomGetRequest")
	proto.RegisterType((*CustomGetResponse)(nil), "ves.io.schema.role.CustomGetResponse")
	golang_proto.RegisterType((*CustomGetResponse)(nil), "ves.io.schema.role.CustomGetResponse")
	proto.RegisterType((*CustomCreateRequest)(nil), "ves.io.schema.role.CustomCreateRequest")
	golang_proto.RegisterType((*CustomCreateRequest)(nil), "ves.io.schema.role.CustomCreateRequest")
	proto.RegisterType((*CustomReplaceRequest)(nil), "ves.io.schema.role.CustomReplaceRequest")
	golang_proto.RegisterType((*CustomReplaceRequest)(nil), "ves.io.schema.role.CustomReplaceRequest")
}

func init() {
	proto.RegisterFile("ves.io/schema/role/public_customapi.proto", fileDescriptor_b010d9b29cd8d246)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/role/public_customapi.proto", fileDescriptor_b010d9b29cd8d246)
}

var fileDescriptor_b010d9b29cd8d246 = []byte{
	// 854 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0x77, 0x76, 0xb7, 0xdb, 0x64, 0x52, 0x44, 0x19, 0x10, 0x72, 0x4d, 0x71, 0x17, 0x97,
	0xd2, 0xa5, 0x60, 0x1b, 0x16, 0x50, 0xa5, 0x5c, 0x10, 0x69, 0xa5, 0x2d, 0x12, 0x08, 0x64, 0xe0,
	0x02, 0x48, 0xd1, 0xd8, 0xfb, 0xe2, 0x98, 0xae, 0x3d, 0x83, 0x67, 0xbc, 0xb4, 0x42, 0x91, 0x50,
	0xfe, 0x02, 0x10, 0x37, 0xfe, 0x02, 0x8e, 0xc0, 0x01, 0x81, 0x7a, 0xc9, 0xad, 0x3d, 0xa1, 0x08,
	0x2e, 0x45, 0xe2, 0x40, 0x1c, 0x0e, 0x1c, 0xfb, 0x27, 0xa0, 0x9d, 0xf1, 0x6e, 0xd6, 0x8b, 0xd3,
	0xa6, 0xe9, 0x6d, 0x66, 0xde, 0x77, 0xde, 0x7c, 0xde, 0x2f, 0x1b, 0xbf, 0x38, 0x06, 0xe1, 0xc6,
	0xcc, 0x13, 0xe1, 0x26, 0x24, 0xd4, 0xcb, 0xd8, 0x08, 0x3c, 0x9e, 0x07, 0xa3, 0x38, 0x5c, 0x0f,
	0x73, 0x21, 0x59, 0x42, 0x79, 0xec, 0xf2, 0x8c, 0x49, 0x46, 0x88, 0x96, 0xba, 0x5a, 0xea, 0x4e,
	0xa4, 0xa6, 0x13, 0xc5, 0x72, 0x33, 0x0f, 0xdc, 0x90, 0x25, 0x5e, 0xc4, 0x22, 0xe6, 0x29, 0x69,
	0x90, 0x6f, 0xa8, 0x9d, 0xda, 0xa8, 0x95, 0x76, 0x61, 0x9e, 0x8d, 0x18, 0x8b, 0x46, 0xe0, 0x51,
	0x1e, 0x7b, 0x34, 0x4d, 0x99, 0xa4, 0x32, 0x66, 0xa9, 0x28, 0xad, 0xcf, 0x54, 0x59, 0x18, 0x9f,
	0x37, 0x9e, 0xab, 0x01, 0x65, 0xc1, 0x67, 0x10, 0xca, 0x52, 0x60, 0xd5, 0x08, 0xe4, 0x4d, 0x0e,
	0x53, 0x07, 0x67, 0xaa, 0xf6, 0x79, 0x93, 0x5d, 0x35, 0x8d, 0x41, 0x40, 0x3a, 0xae, 0xbe, 0x6f,
	0xbf, 0x8a, 0x9f, 0xb8, 0xa2, 0x12, 0xf2, 0x4e, 0x2c, 0xa4, 0x0f, 0x9f, 0xe7, 0x20, 0x24, 0x39,
	0x8b, 0x97, 0x53, 0x9a, 0x80, 0xe0, 0x34, 0x04, 0x03, 0x75, 0x51, 0x6f, 0xd9, 0x3f, 0x38, 0xb0,
	0xff, 0x44, 0xb8, 0xed, 0xb3, 0x11, 0x90, 0xa7, 0x71, 0x47, 0x42, 0x4a, 0x53, 0x59, 0x6a, 0xca,
	0x5d, 0xf5, 0x7a, 0x73, 0xe1, 0x3a, 0x21, 0xb8, 0x3d, 0xd9, 0x18, 0x2d, 0x65, 0x50, 0x6b, 0x72,
	0x1a, 0xb7, 0xf2, 0x78, 0x68, 0xb4, 0xd5, 0xd1, 0x64, 0x49, 0x4c, 0xbc, 0x34, 0x8c, 0x05, 0x0d,
	0x46, 0x30, 0x34, 0x4e, 0x74, 0x51, 0x6f, 0xc9, 0x9f, 0xed, 0xc9, 0x2a, 0x5e, 0x8a, 0x40, 0xae,
	0x0b, 0x0e, 0xa1, 0xd1, 0xe9, 0xa2, 0xde, 0x4a, 0xff, 0x9c, 0xfb, 0xff, 0x22, 0xba, 0x03, 0x90,
	0x1f, 0x70, 0x08, 0x3f, 0xbc, 0xc9, 0xc1, 0x3f, 0x19, 0xe9, 0x0d, 0x79, 0x16, 0x63, 0xca, 0xe3,
	0xf5, 0x28, 0x63, 0x39, 0x17, 0xc6, 0xc9, 0x6e, 0x6b, 0x02, 0x47, 0x79, 0x3c, 0x50, 0x07, 0xf6,
	0x55, 0x4c, 0xe6, 0xd3, 0x21, 0x38, 0x4b, 0x05, 0x10, 0x17, 0x9f, 0x88, 0x25, 0x24, 0xc2, 0x68,
	0x76, 0x5b, 0xbd, 0x95, 0xbe, 0x51, 0xf7, 0xda, 0x24, 0x23, 0xbe, 0x96, 0xd9, 0x57, 0xf1, 0x69,
	0xed, 0x65, 0x00, 0x47, 0xcb, 0xe9, 0x2c, 0x29, 0xcd, 0x83, 0xa4, 0xd8, 0xd7, 0xa7, 0xa5, 0x51,
	0x5e, 0x4a, 0x94, 0xcb, 0xb8, 0xa3, 0xdb, 0x43, 0xf9, 0x58, 0xe9, 0x9b, 0x75, 0x2c, 0xef, 0x29,
	0xc5, 0x5a, 0x6b, 0x67, 0x0b, 0xf9, 0xa5, 0x7c, 0x21, 0xf0, 0xe6, 0x62, 0xe0, 0x7f, 0x21, 0xfc,
	0xa4, 0x7e, 0xed, 0x4a, 0x06, 0x54, 0xc2, 0xd1, 0xb0, 0xdf, 0xc4, 0x4b, 0x09, 0x48, 0x3a, 0xa4,
	0x92, 0x2a, 0xf4, 0x95, 0xfe, 0xf9, 0x05, 0x1e, 0x8d, 0xa2, 0x7d, 0xbe, 0x0b, 0x92, 0xaa, 0x6a,
	0xcc, 0x2e, 0x91, 0x01, 0x6e, 0xab, 0x32, 0xb6, 0xd4, 0x65, 0xbb, 0x2e, 0x18, 0x7d, 0x77, 0x5a,
	0xc9, 0xb5, 0xc7, 0xbf, 0xdb, 0x3a, 0x35, 0xb9, 0xe2, 0x46, 0xa1, 0xea, 0x00, 0x5f, 0x39, 0x58,
	0x08, 0xaf, 0xbd, 0x18, 0xde, 0x8f, 0x08, 0x3f, 0xa5, 0xc3, 0xf3, 0x81, 0x8f, 0x68, 0x08, 0xc7,
	0x2e, 0x0b, 0xb9, 0x56, 0x41, 0x3e, 0x5f, 0xdb, 0x0b, 0xfa, 0x8d, 0x47, 0x63, 0xee, 0x7f, 0xd3,
	0xc1, 0xcb, 0x9a, 0xf9, 0xad, 0xf7, 0xdf, 0x26, 0x3f, 0x21, 0x8c, 0x0f, 0x5a, 0x93, 0x5c, 0xa8,
	0x4d, 0xd5, 0xe2, 0x24, 0x9b, 0x2f, 0x3c, 0x48, 0xa6, 0xdb, 0xca, 0xfe, 0xe8, 0xce, 0x2f, 0x4d,
	0x54, 0xdc, 0x36, 0xcc, 0x8d, 0x37, 0x6e, 0x84, 0x4e, 0x40, 0x05, 0xbc, 0xdc, 0x1d, 0x83, 0x70,
	0x62, 0xe6, 0xe4, 0x34, 0x71, 0x32, 0xa0, 0xc3, 0xed, 0x3f, 0xfe, 0xf9, 0xb6, 0xe9, 0x90, 0x97,
	0xca, 0xef, 0xa8, 0xa7, 0xbf, 0xa3, 0xde, 0x2c, 0x59, 0xc2, 0xfb, 0x72, 0xb6, 0xde, 0x52, 0xdf,
	0x29, 0x41, 0x7e, 0x46, 0xd3, 0x10, 0x06, 0x20, 0xc9, 0xf3, 0x87, 0xc3, 0x1c, 0x0c, 0x8a, 0x79,
	0xe1, 0x01, 0xaa, 0x92, 0xf8, 0xd3, 0x23, 0x12, 0xbf, 0x4e, 0xfa, 0x0f, 0x41, 0xac, 0x4f, 0xb6,
	0xc8, 0x0f, 0x08, 0x9f, 0x9a, 0x1f, 0x07, 0x72, 0xf1, 0x70, 0xaa, 0xca, 0xc0, 0x98, 0xf7, 0x19,
	0x48, 0xfb, 0x93, 0xe2, 0xb6, 0xf1, 0x5c, 0x3d, 0x2f, 0x1d, 0x26, 0x71, 0xea, 0x7c, 0x91, 0xc5,
	0x12, 0x14, 0xf6, 0x2b, 0xf6, 0xc3, 0x24, 0x7a, 0x15, 0x5d, 0x22, 0xbf, 0x22, 0xfc, 0x58, 0xa5,
	0xc5, 0x49, 0xef, 0x70, 0xe6, 0xea, 0x14, 0xdc, 0x17, 0x3a, 0x38, 0x3a, 0xf4, 0x65, 0xf3, 0x18,
	0xb9, 0x5e, 0x45, 0x97, 0xcc, 0x8b, 0x3b, 0xb7, 0x50, 0xeb, 0xf7, 0x5b, 0xe8, 0xcc, 0xa1, 0x18,
	0xdb, 0xbf, 0x19, 0xcd, 0x4d, 0xb4, 0xb6, 0x8d, 0x76, 0xf7, 0xac, 0xc6, 0xdd, 0x3d, 0xab, 0x71,
	0x6f, 0xcf, 0x42, 0x5f, 0x15, 0x16, 0xfa, 0xbe, 0xb0, 0xd0, 0x9d, 0xc2, 0x42, 0xbb, 0x85, 0x85,
	0xfe, 0x2e, 0x2c, 0xf4, 0x6f, 0x61, 0x35, 0xee, 0x15, 0x16, 0xfa, 0x7a, 0xdf, 0x6a, 0xec, 0xec,
	0x5b, 0x68, 0x77, 0xdf, 0x6a, 0xdc, 0xdd, 0xb7, 0x1a, 0x1f, 0x5f, 0x8b, 0x18, 0xbf, 0x1e, 0xb9,
	0x63, 0x36, 0x92, 0x90, 0x65, 0xd4, 0xcd, 0x85, 0xa7, 0x16, 0x1b, 0x2c, 0x4b, 0x1c, 0x9e, 0xb1,
	0x71, 0x3c, 0x84, 0xcc, 0x99, 0x9a, 0x3d, 0x1e, 0x44, 0xcc, 0x83, 0x1b, 0xb2, 0xfc, 0x79, 0xce,
	0xfd, 0x7e, 0x83, 0x8e, 0xfa, 0x75, 0xbe, 0xf6, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x59, 0x4a,
	0x67, 0xfd, 0x65, 0x08, 0x00, 0x00,
}

func (this *CustomListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomListRequest)
	if !ok {
		that2, ok := that.(CustomListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *Role) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Role)
	if !ok {
		that2, ok := that.(Role)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tenant != that1.Tenant {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Disabled != that1.Disabled {
		return false
	}
	if !this.GetSpec.Equal(that1.GetSpec) {
		return false
	}
	if len(this.ApiGroups) != len(that1.ApiGroups) {
		return false
	}
	for i := range this.ApiGroups {
		if this.ApiGroups[i] != that1.ApiGroups[i] {
			return false
		}
	}
	return true
}
func (this *CustomListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomListResponse)
	if !ok {
		that2, ok := that.(CustomListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *CustomGetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomGetRequest)
	if !ok {
		that2, ok := that.(CustomGetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *CustomGetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomGetResponse)
	if !ok {
		that2, ok := that.(CustomGetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Object.Equal(that1.Object) {
		return false
	}
	if len(this.ApiGroups) != len(that1.ApiGroups) {
		return false
	}
	for i := range this.ApiGroups {
		if this.ApiGroups[i] != that1.ApiGroups[i] {
			return false
		}
	}
	return true
}
func (this *CustomCreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomCreateRequest)
	if !ok {
		that2, ok := that.(CustomCreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if len(this.ApiGroups) != len(that1.ApiGroups) {
		return false
	}
	for i := range this.ApiGroups {
		if this.ApiGroups[i] != that1.ApiGroups[i] {
			return false
		}
	}
	return true
}
func (this *CustomReplaceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomReplaceRequest)
	if !ok {
		that2, ok := that.(CustomReplaceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if len(this.ApiGroups) != len(that1.ApiGroups) {
		return false
	}
	for i := range this.ApiGroups {
		if this.ApiGroups[i] != that1.ApiGroups[i] {
			return false
		}
	}
	return true
}
func (this *CustomListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&role.CustomListRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Role) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&role.Role{")
	s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Disabled: "+fmt.Sprintf("%#v", this.Disabled)+",\n")
	if this.GetSpec != nil {
		s = append(s, "GetSpec: "+fmt.Sprintf("%#v", this.GetSpec)+",\n")
	}
	s = append(s, "ApiGroups: "+fmt.Sprintf("%#v", this.ApiGroups)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&role.CustomListResponse{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomGetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&role.CustomGetRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomGetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&role.CustomGetResponse{")
	if this.Object != nil {
		s = append(s, "Object: "+fmt.Sprintf("%#v", this.Object)+",\n")
	}
	s = append(s, "ApiGroups: "+fmt.Sprintf("%#v", this.ApiGroups)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomCreateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&role.CustomCreateRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "ApiGroups: "+fmt.Sprintf("%#v", this.ApiGroups)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomReplaceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&role.CustomReplaceRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "ApiGroups: "+fmt.Sprintf("%#v", this.ApiGroups)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// CustomList
	//
	// x-displayName: "Custom List Roles"
	// List the Role objects with all API groups which the role can access to.
	CustomList(ctx context.Context, in *CustomListRequest, opts ...grpc.CallOption) (*CustomListResponse, error)
	// CustomGet
	//
	// x-displayName: "Custom Get Role"
	// Get the Role objects with all API groups which the role can access to.
	CustomGet(ctx context.Context, in *CustomGetRequest, opts ...grpc.CallOption) (*CustomGetResponse, error)
	// CustomCreateRequest
	//
	// x-displayName: "Custom Create Role"
	// Create a role object and the rbac_policy object which the role associated with.
	CustomCreate(ctx context.Context, in *CustomCreateRequest, opts ...grpc.CallOption) (*Object, error)
	// CustomReplaceRequest
	//
	// x-displayName: "Custom Replace Role"
	// Update the role object with new api groups.
	CustomReplace(ctx context.Context, in *CustomReplaceRequest, opts ...grpc.CallOption) (*Object, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) CustomList(ctx context.Context, in *CustomListRequest, opts ...grpc.CallOption) (*CustomListResponse, error) {
	out := new(CustomListResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.role.CustomAPI/CustomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) CustomGet(ctx context.Context, in *CustomGetRequest, opts ...grpc.CallOption) (*CustomGetResponse, error) {
	out := new(CustomGetResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.role.CustomAPI/CustomGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) CustomCreate(ctx context.Context, in *CustomCreateRequest, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := c.cc.Invoke(ctx, "/ves.io.schema.role.CustomAPI/CustomCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) CustomReplace(ctx context.Context, in *CustomReplaceRequest, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := c.cc.Invoke(ctx, "/ves.io.schema.role.CustomAPI/CustomReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// CustomList
	//
	// x-displayName: "Custom List Roles"
	// List the Role objects with all API groups which the role can access to.
	CustomList(context.Context, *CustomListRequest) (*CustomListResponse, error)
	// CustomGet
	//
	// x-displayName: "Custom Get Role"
	// Get the Role objects with all API groups which the role can access to.
	CustomGet(context.Context, *CustomGetRequest) (*CustomGetResponse, error)
	// CustomCreateRequest
	//
	// x-displayName: "Custom Create Role"
	// Create a role object and the rbac_policy object which the role associated with.
	CustomCreate(context.Context, *CustomCreateRequest) (*Object, error)
	// CustomReplaceRequest
	//
	// x-displayName: "Custom Replace Role"
	// Update the role object with new api groups.
	CustomReplace(context.Context, *CustomReplaceRequest) (*Object, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) CustomList(ctx context.Context, req *CustomListRequest) (*CustomListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomList not implemented")
}
func (*UnimplementedCustomAPIServer) CustomGet(ctx context.Context, req *CustomGetRequest) (*CustomGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomGet not implemented")
}
func (*UnimplementedCustomAPIServer) CustomCreate(ctx context.Context, req *CustomCreateRequest) (*Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomCreate not implemented")
}
func (*UnimplementedCustomAPIServer) CustomReplace(ctx context.Context, req *CustomReplaceRequest) (*Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomReplace not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_CustomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).CustomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.role.CustomAPI/CustomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).CustomList(ctx, req.(*CustomListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_CustomGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).CustomGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.role.CustomAPI/CustomGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).CustomGet(ctx, req.(*CustomGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_CustomCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).CustomCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.role.CustomAPI/CustomCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).CustomCreate(ctx, req.(*CustomCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_CustomReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).CustomReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.role.CustomAPI/CustomReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).CustomReplace(ctx, req.(*CustomReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.role.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CustomList",
			Handler:    _CustomAPI_CustomList_Handler,
		},
		{
			MethodName: "CustomGet",
			Handler:    _CustomAPI_CustomGet_Handler,
		},
		{
			MethodName: "CustomCreate",
			Handler:    _CustomAPI_CustomCreate_Handler,
		},
		{
			MethodName: "CustomReplace",
			Handler:    _CustomAPI_CustomReplace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/role/public_customapi.proto",
}

func (m *CustomListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Role) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Role) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Role) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiGroups) > 0 {
		for iNdEx := len(m.ApiGroups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ApiGroups[iNdEx])
			copy(dAtA[i:], m.ApiGroups[iNdEx])
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ApiGroups[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.GetSpec != nil {
		{
			size, err := m.GetSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Disabled {
		i--
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CustomListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *CustomGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CustomGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiGroups) > 0 {
		for iNdEx := len(m.ApiGroups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ApiGroups[iNdEx])
			copy(dAtA[i:], m.ApiGroups[iNdEx])
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ApiGroups[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CustomCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiGroups) > 0 {
		for iNdEx := len(m.ApiGroups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ApiGroups[iNdEx])
			copy(dAtA[i:], m.ApiGroups[iNdEx])
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ApiGroups[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CustomReplaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomReplaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomReplaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiGroups) > 0 {
		for iNdEx := len(m.ApiGroups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ApiGroups[iNdEx])
			copy(dAtA[i:], m.ApiGroups[iNdEx])
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.ApiGroups[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CustomListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *Role) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Disabled {
		n += 2
	}
	if m.GetSpec != nil {
		l = m.GetSpec.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.ApiGroups) > 0 {
		for _, s := range m.ApiGroups {
			l = len(s)
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *CustomListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *CustomGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *CustomGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.ApiGroups) > 0 {
		for _, s := range m.ApiGroups {
			l = len(s)
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *CustomCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.ApiGroups) > 0 {
		for _, s := range m.ApiGroups {
			l = len(s)
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *CustomReplaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if len(m.ApiGroups) > 0 {
		for _, s := range m.ApiGroups {
			l = len(s)
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CustomListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomListRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Role) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Role{`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Disabled:` + fmt.Sprintf("%v", this.Disabled) + `,`,
		`GetSpec:` + strings.Replace(fmt.Sprintf("%v", this.GetSpec), "GetSpecType", "GetSpecType", 1) + `,`,
		`ApiGroups:` + fmt.Sprintf("%v", this.ApiGroups) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomListResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*Role{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "Role", "Role", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&CustomListResponse{`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomGetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomGetRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomGetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomGetResponse{`,
		`Object:` + strings.Replace(fmt.Sprintf("%v", this.Object), "Object", "Object", 1) + `,`,
		`ApiGroups:` + fmt.Sprintf("%v", this.ApiGroups) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomCreateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomCreateRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "ObjectCreateMetaType", "schema.ObjectCreateMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "CreateSpecType", "CreateSpecType", 1) + `,`,
		`ApiGroups:` + fmt.Sprintf("%v", this.ApiGroups) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomReplaceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomReplaceRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "ReplaceSpecType", "ReplaceSpecType", 1) + `,`,
		`ApiGroups:` + fmt.Sprintf("%v", this.ApiGroups) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CustomListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Role) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Role: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Role: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetSpec == nil {
				m.GetSpec = &GetSpecType{}
			}
			if err := m.GetSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroups = append(m.ApiGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Role{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroups = append(m.ApiGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.ObjectCreateMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &CreateSpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroups = append(m.ApiGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomReplaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomReplaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomReplaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &ReplaceSpecType{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroups = append(m.ApiGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)
