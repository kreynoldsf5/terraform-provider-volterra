// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/dns_zone/dnssec.proto

package dns_zone

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DNSSEC
//
// x-displayName: "DNSSEC"
// DNSSEC details.
type DNSSECStatus struct {
	// DNSSEC Mode
	//
	// x-displayName: "DNSSEC Mode"
	Mode *DNSSECMode `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// DNSSEC DS Records
	//
	// x-displayName: "DS Records"
	DsRecords []*DSRecord `protobuf:"bytes,3,rep,name=ds_records,json=dsRecords,proto3" json:"ds_records,omitempty"`
}

func (m *DNSSECStatus) Reset()      { *m = DNSSECStatus{} }
func (*DNSSECStatus) ProtoMessage() {}
func (*DNSSECStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a88586f619124e2c, []int{0}
}
func (m *DNSSECStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSSECStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSSECStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSSECStatus.Merge(m, src)
}
func (m *DNSSECStatus) XXX_Size() int {
	return m.Size()
}
func (m *DNSSECStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSSECStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DNSSECStatus proto.InternalMessageInfo

func (m *DNSSECStatus) GetMode() *DNSSECMode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (m *DNSSECStatus) GetDsRecords() []*DSRecord {
	if m != nil {
		return m.DsRecords
	}
	return nil
}

// DNSSEC Mode Disable
//
// x-displayName: "Disable"
type DNSSECMode struct {
	// DNSSEC Mode
	//
	// x-displayName: "DNSSEC Mode"
	// x-required
	// DNSSEC Mode of operation
	//
	// Types that are valid to be assigned to Mode:
	//	*DNSSECMode_Disable
	//	*DNSSECMode_Enable
	Mode isDNSSECMode_Mode `protobuf_oneof:"mode"`
}

func (m *DNSSECMode) Reset()      { *m = DNSSECMode{} }
func (*DNSSECMode) ProtoMessage() {}
func (*DNSSECMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_a88586f619124e2c, []int{1}
}
func (m *DNSSECMode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSSECMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSSECMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSSECMode.Merge(m, src)
}
func (m *DNSSECMode) XXX_Size() int {
	return m.Size()
}
func (m *DNSSECMode) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSSECMode.DiscardUnknown(m)
}

var xxx_messageInfo_DNSSECMode proto.InternalMessageInfo

type isDNSSECMode_Mode interface {
	isDNSSECMode_Mode()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DNSSECMode_Disable struct {
	Disable *schema.Empty `protobuf:"bytes,2,opt,name=disable,proto3,oneof" json:"disable,omitempty"`
}
type DNSSECMode_Enable struct {
	Enable *DNSSECModeEnable `protobuf:"bytes,3,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
}

func (*DNSSECMode_Disable) isDNSSECMode_Mode() {}
func (*DNSSECMode_Enable) isDNSSECMode_Mode()  {}

func (m *DNSSECMode) GetMode() isDNSSECMode_Mode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (m *DNSSECMode) GetDisable() *schema.Empty {
	if x, ok := m.GetMode().(*DNSSECMode_Disable); ok {
		return x.Disable
	}
	return nil
}

func (m *DNSSECMode) GetEnable() *DNSSECModeEnable {
	if x, ok := m.GetMode().(*DNSSECMode_Enable); ok {
		return x.Enable
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DNSSECMode) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DNSSECMode_Disable)(nil),
		(*DNSSECMode_Enable)(nil),
	}
}

// Enable
//
// x-displayName: "Enable"
// DNSSEC enable
type DNSSECModeEnable struct {
}

func (m *DNSSECModeEnable) Reset()      { *m = DNSSECModeEnable{} }
func (*DNSSECModeEnable) ProtoMessage() {}
func (*DNSSECModeEnable) Descriptor() ([]byte, []int) {
	return fileDescriptor_a88586f619124e2c, []int{2}
}
func (m *DNSSECModeEnable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSSECModeEnable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DNSSECModeEnable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSSECModeEnable.Merge(m, src)
}
func (m *DNSSECModeEnable) XXX_Size() int {
	return m.Size()
}
func (m *DNSSECModeEnable) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSSECModeEnable.DiscardUnknown(m)
}

var xxx_messageInfo_DNSSECModeEnable proto.InternalMessageInfo

// DS Record
//
// x-displayName: "DS Record"
// DNSSEC Record details
type DSRecord struct {
	// DNSSEC Key Tag
	//
	// x-displayName: "DNSSEC Key Tag"
	// x-required
	// DNSSEC Key Tag https://datatracker.ietf.org/doc/html/rfc2535#section-3.2
	KeyTag uint32 `protobuf:"varint,1,opt,name=key_tag,json=keyTag,proto3" json:"key_tag,omitempty"`
	// DNSSEC Algorithm
	//
	// x-displayName: "DNSSEC Algorithm"
	// x-required
	// DNSSEC Algorithm
	// https://datatracker.ietf.org/doc/html/rfc2535#section-3.2
	Algorithm string `protobuf:"bytes,2,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	// DNSSEC Digest Type
	//
	// x-displayName: "DNSSEC Digest Type"
	// x-required
	// DNSSEC Digest Type
	// https://datatracker.ietf.org/doc/html/rfc4034#appendix-A.2
	DigestType string `protobuf:"bytes,3,opt,name=digest_type,json=digestType,proto3" json:"digest_type,omitempty"`
	// DNSSEC Digest
	//
	// x-displayName: "DNSSEC Digest"
	// x-required
	// DNSSEC Digest https://datatracker.ietf.org/doc/html/rfc4034#section-5.1.4
	Digest string `protobuf:"bytes,4,opt,name=digest,proto3" json:"digest,omitempty"`
	// DNSSEC Flags
	//
	// x-displayName: "DNSSEC Flags"
	// x-required
	// DNSSEC Flags https://datatracker.ietf.org/doc/html/rfc4034#section-2.1.1
	Flags uint32 `protobuf:"varint,5,opt,name=flags,proto3" json:"flags,omitempty"`
	// DNSSEC Public Key
	//
	// x-displayName: "DNSSEC Public Key"
	// DNSSEC Public Key https://datatracker.ietf.org/doc/html/rfc4034#section-2
	PublicKey string `protobuf:"bytes,6,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// DNSSEC TTL
	//
	// x-displayName: "DNSSEC TTL"
	// x-required
	// DNSSEC TTL https://datatracker.ietf.org/doc/html/rfc4034#section-5.1.4
	Ttl uint32 `protobuf:"varint,7,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (m *DSRecord) Reset()      { *m = DSRecord{} }
func (*DSRecord) ProtoMessage() {}
func (*DSRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_a88586f619124e2c, []int{3}
}
func (m *DSRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DSRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DSRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DSRecord.Merge(m, src)
}
func (m *DSRecord) XXX_Size() int {
	return m.Size()
}
func (m *DSRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DSRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DSRecord proto.InternalMessageInfo

func (m *DSRecord) GetKeyTag() uint32 {
	if m != nil {
		return m.KeyTag
	}
	return 0
}

func (m *DSRecord) GetAlgorithm() string {
	if m != nil {
		return m.Algorithm
	}
	return ""
}

func (m *DSRecord) GetDigestType() string {
	if m != nil {
		return m.DigestType
	}
	return ""
}

func (m *DSRecord) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *DSRecord) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *DSRecord) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *DSRecord) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func init() {
	proto.RegisterType((*DNSSECStatus)(nil), "ves.io.schema.dns_zone.DNSSECStatus")
	golang_proto.RegisterType((*DNSSECStatus)(nil), "ves.io.schema.dns_zone.DNSSECStatus")
	proto.RegisterType((*DNSSECMode)(nil), "ves.io.schema.dns_zone.DNSSECMode")
	golang_proto.RegisterType((*DNSSECMode)(nil), "ves.io.schema.dns_zone.DNSSECMode")
	proto.RegisterType((*DNSSECModeEnable)(nil), "ves.io.schema.dns_zone.DNSSECModeEnable")
	golang_proto.RegisterType((*DNSSECModeEnable)(nil), "ves.io.schema.dns_zone.DNSSECModeEnable")
	proto.RegisterType((*DSRecord)(nil), "ves.io.schema.dns_zone.DSRecord")
	golang_proto.RegisterType((*DSRecord)(nil), "ves.io.schema.dns_zone.DSRecord")
}

func init() {
	proto.RegisterFile("ves.io/schema/dns_zone/dnssec.proto", fileDescriptor_a88586f619124e2c)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/dns_zone/dnssec.proto", fileDescriptor_a88586f619124e2c)
}

var fileDescriptor_a88586f619124e2c = []byte{
	// 577 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0x3f, 0x6f, 0xda, 0x40,
	0x18, 0xc6, 0x7d, 0x98, 0xf0, 0xe7, 0x68, 0x15, 0x74, 0x8d, 0x12, 0x37, 0x6d, 0x4f, 0x88, 0x2e,
	0x0c, 0xc1, 0x6e, 0x89, 0xc2, 0x5a, 0x41, 0x82, 0x84, 0xd2, 0x3f, 0xaa, 0xec, 0x4c, 0x5d, 0x2c,
	0x1b, 0x1f, 0xc6, 0xc2, 0xe6, 0x2c, 0xdf, 0x41, 0xeb, 0x4e, 0x9d, 0x2b, 0x55, 0xea, 0x57, 0xe8,
	0xd6, 0xef, 0xc0, 0x92, 0xb1, 0x23, 0x23, 0xca, 0x54, 0xcc, 0xd2, 0x31, 0x1f, 0xa1, 0xe2, 0x0c,
	0x8a, 0x40, 0xad, 0xb2, 0xbd, 0xaf, 0x9f, 0xdf, 0xf3, 0xfa, 0x9e, 0xf3, 0x6b, 0xf8, 0x7c, 0x42,
	0x98, 0xea, 0x51, 0x8d, 0xf5, 0x06, 0x24, 0xb0, 0x34, 0x67, 0xc4, 0xcc, 0xcf, 0x74, 0x44, 0x56,
	0x05, 0x23, 0x3d, 0x35, 0x8c, 0x28, 0xa7, 0xe8, 0x30, 0x85, 0xd4, 0x14, 0x52, 0x37, 0xd0, 0x71,
	0xdd, 0xf5, 0xf8, 0x60, 0x6c, 0xab, 0x3d, 0x1a, 0x68, 0x2e, 0x75, 0xa9, 0x26, 0x70, 0x7b, 0xdc,
	0x17, 0x9d, 0x68, 0x44, 0x95, 0x8e, 0x39, 0x7e, 0xb2, 0xfd, 0x2e, 0x1a, 0x72, 0x8f, 0x8e, 0xd8,
	0x5a, 0x7c, 0xbc, 0x2d, 0xf2, 0x38, 0x24, 0x1b, 0xe9, 0xe9, 0xb6, 0x34, 0xb1, 0x7c, 0xcf, 0xb1,
	0x38, 0x59, 0xab, 0x95, 0x1d, 0xd5, 0x23, 0x1f, 0xcd, 0xad, 0xd1, 0xd5, 0x6f, 0x00, 0x3e, 0xb8,
	0x78, 0x67, 0x18, 0x9d, 0x73, 0x83, 0x5b, 0x7c, 0xcc, 0x50, 0x13, 0x66, 0x03, 0xea, 0x10, 0x05,
	0x54, 0x40, 0xad, 0xd4, 0xa8, 0xaa, 0xff, 0x8e, 0xa7, 0xa6, 0x9e, 0xb7, 0xd4, 0x21, 0xba, 0xe0,
	0xd1, 0x2b, 0x08, 0x1d, 0x66, 0x46, 0xa4, 0x47, 0x23, 0x87, 0x29, 0x72, 0x45, 0xae, 0x95, 0x1a,
	0x95, 0xff, 0xba, 0x0d, 0x5d, 0x80, 0x7a, 0xd1, 0x61, 0x69, 0xc5, 0x2e, 0xb3, 0x85, 0x4c, 0x59,
	0xae, 0xfe, 0x00, 0x10, 0xde, 0xcd, 0x46, 0x2f, 0x60, 0xde, 0xf1, 0x98, 0x65, 0xfb, 0x44, 0xc9,
	0x88, 0x03, 0x1d, 0xec, 0x8c, 0xec, 0x04, 0x21, 0x8f, 0xbb, 0x92, 0xbe, 0xc1, 0x50, 0x1b, 0xe6,
	0xc8, 0x48, 0x18, 0x64, 0x61, 0xa8, 0xdd, 0x9f, 0xa0, 0x23, 0xf8, 0xae, 0xa4, 0xaf, 0x9d, 0xed,
	0xa3, 0xf4, 0x0e, 0xd0, 0xfe, 0xf5, 0x14, 0x64, 0x66, 0x53, 0x00, 0x92, 0x29, 0x90, 0x1b, 0x27,
	0xa7, 0x97, 0xd9, 0x02, 0x28, 0x67, 0xaa, 0x08, 0x96, 0x77, 0xcd, 0xd5, 0x25, 0x80, 0x85, 0x4d,
	0x2a, 0x74, 0x04, 0xf3, 0x43, 0x12, 0x9b, 0xdc, 0x72, 0xc5, 0x35, 0x3e, 0xd4, 0x73, 0x43, 0x12,
	0x5f, 0x59, 0x2e, 0x7a, 0x09, 0x8b, 0x96, 0xef, 0xd2, 0xc8, 0xe3, 0x83, 0x40, 0x04, 0x2a, 0xb6,
	0x1f, 0xdd, 0x4c, 0xc1, 0x7e, 0xe7, 0xfc, 0xc2, 0x68, 0xbd, 0x6f, 0x9c, 0x35, 0x8d, 0x6e, 0xab,
	0x71, 0xd6, 0xd4, 0xef, 0x28, 0x74, 0x02, 0x4b, 0x8e, 0xe7, 0x12, 0xc6, 0xcd, 0xd5, 0x67, 0x17,
	0xa1, 0x8a, 0xed, 0xd2, 0xcd, 0x14, 0xe4, 0x8d, 0x6e, 0xcb, 0x5c, 0xc1, 0x30, 0xd5, 0xaf, 0xe2,
	0x90, 0xa0, 0x43, 0x98, 0x4b, 0x3b, 0x25, 0xbb, 0x02, 0xf5, 0x75, 0x87, 0x0e, 0xe0, 0x5e, 0xdf,
	0xb7, 0x5c, 0xa6, 0xec, 0x89, 0xf3, 0xa4, 0x0d, 0x7a, 0x06, 0x61, 0x38, 0xb6, 0x7d, 0xaf, 0x67,
	0x0e, 0x49, 0xac, 0xe4, 0x84, 0xa3, 0x98, 0x3e, 0x79, 0x4d, 0x62, 0x54, 0x86, 0x32, 0xe7, 0xbe,
	0x92, 0x17, 0x96, 0x55, 0xd9, 0xfe, 0x0a, 0x66, 0x0b, 0x2c, 0xcd, 0x17, 0x58, 0xba, 0x5d, 0x60,
	0xf0, 0x25, 0xc1, 0xe0, 0x67, 0x82, 0xc1, 0xaf, 0x04, 0x83, 0x59, 0x82, 0xc1, 0x3c, 0xc1, 0xe0,
	0x77, 0x82, 0xc1, 0x9f, 0x04, 0x4b, 0xb7, 0x09, 0x06, 0xdf, 0x97, 0x58, 0xba, 0x5e, 0x62, 0x30,
	0x5b, 0x62, 0x69, 0xbe, 0xc4, 0xd2, 0x87, 0x37, 0x2e, 0x0d, 0x87, 0xae, 0x3a, 0xa1, 0x3e, 0x27,
	0x51, 0x64, 0xa9, 0x63, 0xa6, 0x89, 0xa2, 0x4f, 0xa3, 0xa0, 0x1e, 0x46, 0x74, 0xe2, 0x39, 0x24,
	0xaa, 0x6f, 0x64, 0x2d, 0xb4, 0x5d, 0xaa, 0x91, 0x4f, 0x7c, 0xbd, 0xbd, 0x3b, 0xbf, 0xa1, 0x9d,
	0x13, 0x1b, 0x7c, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0x88, 0x80, 0x4c, 0x8d, 0xa7, 0x03, 0x00,
	0x00,
}

func (this *DNSSECStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSSECStatus)
	if !ok {
		that2, ok := that.(DNSSECStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Mode.Equal(that1.Mode) {
		return false
	}
	if len(this.DsRecords) != len(that1.DsRecords) {
		return false
	}
	for i := range this.DsRecords {
		if !this.DsRecords[i].Equal(that1.DsRecords[i]) {
			return false
		}
	}
	return true
}
func (this *DNSSECMode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSSECMode)
	if !ok {
		that2, ok := that.(DNSSECMode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Mode == nil {
		if this.Mode != nil {
			return false
		}
	} else if this.Mode == nil {
		return false
	} else if !this.Mode.Equal(that1.Mode) {
		return false
	}
	return true
}
func (this *DNSSECMode_Disable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSSECMode_Disable)
	if !ok {
		that2, ok := that.(DNSSECMode_Disable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disable.Equal(that1.Disable) {
		return false
	}
	return true
}
func (this *DNSSECMode_Enable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSSECMode_Enable)
	if !ok {
		that2, ok := that.(DNSSECMode_Enable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Enable.Equal(that1.Enable) {
		return false
	}
	return true
}
func (this *DNSSECModeEnable) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DNSSECModeEnable)
	if !ok {
		that2, ok := that.(DNSSECModeEnable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DSRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DSRecord)
	if !ok {
		that2, ok := that.(DSRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.KeyTag != that1.KeyTag {
		return false
	}
	if this.Algorithm != that1.Algorithm {
		return false
	}
	if this.DigestType != that1.DigestType {
		return false
	}
	if this.Digest != that1.Digest {
		return false
	}
	if this.Flags != that1.Flags {
		return false
	}
	if this.PublicKey != that1.PublicKey {
		return false
	}
	if this.Ttl != that1.Ttl {
		return false
	}
	return true
}
func (this *DNSSECStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSSECStatus{")
	if this.Mode != nil {
		s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	}
	if this.DsRecords != nil {
		s = append(s, "DsRecords: "+fmt.Sprintf("%#v", this.DsRecords)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSSECMode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dns_zone.DNSSECMode{")
	if this.Mode != nil {
		s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DNSSECMode_Disable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.DNSSECMode_Disable{` +
		`Disable:` + fmt.Sprintf("%#v", this.Disable) + `}`}, ", ")
	return s
}
func (this *DNSSECMode_Enable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dns_zone.DNSSECMode_Enable{` +
		`Enable:` + fmt.Sprintf("%#v", this.Enable) + `}`}, ", ")
	return s
}
func (this *DNSSECModeEnable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dns_zone.DNSSECModeEnable{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DSRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dns_zone.DSRecord{")
	s = append(s, "KeyTag: "+fmt.Sprintf("%#v", this.KeyTag)+",\n")
	s = append(s, "Algorithm: "+fmt.Sprintf("%#v", this.Algorithm)+",\n")
	s = append(s, "DigestType: "+fmt.Sprintf("%#v", this.DigestType)+",\n")
	s = append(s, "Digest: "+fmt.Sprintf("%#v", this.Digest)+",\n")
	s = append(s, "Flags: "+fmt.Sprintf("%#v", this.Flags)+",\n")
	s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	s = append(s, "Ttl: "+fmt.Sprintf("%#v", this.Ttl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDnssec(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DNSSECStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSSECStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSSECStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DsRecords) > 0 {
		for iNdEx := len(m.DsRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DsRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDnssec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Mode != nil {
		{
			size, err := m.Mode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDnssec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DNSSECMode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSSECMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSSECMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mode != nil {
		{
			size := m.Mode.Size()
			i -= size
			if _, err := m.Mode.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DNSSECMode_Disable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSSECMode_Disable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disable != nil {
		{
			size, err := m.Disable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDnssec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DNSSECMode_Enable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSSECMode_Enable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Enable != nil {
		{
			size, err := m.Enable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDnssec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DNSSECModeEnable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSSECModeEnable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DNSSECModeEnable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DSRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DSRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DSRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ttl != 0 {
		i = encodeVarintDnssec(dAtA, i, uint64(m.Ttl))
		i--
		dAtA[i] = 0x38
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintDnssec(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x32
	}
	if m.Flags != 0 {
		i = encodeVarintDnssec(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Digest) > 0 {
		i -= len(m.Digest)
		copy(dAtA[i:], m.Digest)
		i = encodeVarintDnssec(dAtA, i, uint64(len(m.Digest)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DigestType) > 0 {
		i -= len(m.DigestType)
		copy(dAtA[i:], m.DigestType)
		i = encodeVarintDnssec(dAtA, i, uint64(len(m.DigestType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Algorithm) > 0 {
		i -= len(m.Algorithm)
		copy(dAtA[i:], m.Algorithm)
		i = encodeVarintDnssec(dAtA, i, uint64(len(m.Algorithm)))
		i--
		dAtA[i] = 0x12
	}
	if m.KeyTag != 0 {
		i = encodeVarintDnssec(dAtA, i, uint64(m.KeyTag))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDnssec(dAtA []byte, offset int, v uint64) int {
	offset -= sovDnssec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DNSSECStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mode != nil {
		l = m.Mode.Size()
		n += 1 + l + sovDnssec(uint64(l))
	}
	if len(m.DsRecords) > 0 {
		for _, e := range m.DsRecords {
			l = e.Size()
			n += 1 + l + sovDnssec(uint64(l))
		}
	}
	return n
}

func (m *DNSSECMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mode != nil {
		n += m.Mode.Size()
	}
	return n
}

func (m *DNSSECMode_Disable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disable != nil {
		l = m.Disable.Size()
		n += 1 + l + sovDnssec(uint64(l))
	}
	return n
}
func (m *DNSSECMode_Enable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enable != nil {
		l = m.Enable.Size()
		n += 1 + l + sovDnssec(uint64(l))
	}
	return n
}
func (m *DNSSECModeEnable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DSRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyTag != 0 {
		n += 1 + sovDnssec(uint64(m.KeyTag))
	}
	l = len(m.Algorithm)
	if l > 0 {
		n += 1 + l + sovDnssec(uint64(l))
	}
	l = len(m.DigestType)
	if l > 0 {
		n += 1 + l + sovDnssec(uint64(l))
	}
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovDnssec(uint64(l))
	}
	if m.Flags != 0 {
		n += 1 + sovDnssec(uint64(m.Flags))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovDnssec(uint64(l))
	}
	if m.Ttl != 0 {
		n += 1 + sovDnssec(uint64(m.Ttl))
	}
	return n
}

func sovDnssec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDnssec(x uint64) (n int) {
	return sovDnssec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DNSSECStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDsRecords := "[]*DSRecord{"
	for _, f := range this.DsRecords {
		repeatedStringForDsRecords += strings.Replace(f.String(), "DSRecord", "DSRecord", 1) + ","
	}
	repeatedStringForDsRecords += "}"
	s := strings.Join([]string{`&DNSSECStatus{`,
		`Mode:` + strings.Replace(this.Mode.String(), "DNSSECMode", "DNSSECMode", 1) + `,`,
		`DsRecords:` + repeatedStringForDsRecords + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSSECMode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSSECMode{`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSSECMode_Disable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSSECMode_Disable{`,
		`Disable:` + strings.Replace(fmt.Sprintf("%v", this.Disable), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSSECMode_Enable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSSECMode_Enable{`,
		`Enable:` + strings.Replace(fmt.Sprintf("%v", this.Enable), "DNSSECModeEnable", "DNSSECModeEnable", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSSECModeEnable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSSECModeEnable{`,
		`}`,
	}, "")
	return s
}
func (this *DSRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DSRecord{`,
		`KeyTag:` + fmt.Sprintf("%v", this.KeyTag) + `,`,
		`Algorithm:` + fmt.Sprintf("%v", this.Algorithm) + `,`,
		`DigestType:` + fmt.Sprintf("%v", this.DigestType) + `,`,
		`Digest:` + fmt.Sprintf("%v", this.Digest) + `,`,
		`Flags:` + fmt.Sprintf("%v", this.Flags) + `,`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`Ttl:` + fmt.Sprintf("%v", this.Ttl) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDnssec(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DNSSECStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDnssec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSSECStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSSECStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDnssec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDnssec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDnssec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mode == nil {
				m.Mode = &DNSSECMode{}
			}
			if err := m.Mode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DsRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDnssec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDnssec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDnssec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DsRecords = append(m.DsRecords, &DSRecord{})
			if err := m.DsRecords[len(m.DsRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDnssec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDnssec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDnssec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSSECMode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDnssec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSSECMode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSSECMode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDnssec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDnssec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDnssec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Mode = &DNSSECMode_Disable{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDnssec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDnssec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDnssec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSSECModeEnable{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Mode = &DNSSECMode_Enable{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDnssec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDnssec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDnssec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSSECModeEnable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDnssec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSSECModeEnable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSSECModeEnable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDnssec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDnssec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDnssec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DSRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDnssec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DSRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DSRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyTag", wireType)
			}
			m.KeyTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDnssec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyTag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDnssec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDnssec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDnssec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Algorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DigestType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDnssec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDnssec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDnssec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DigestType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDnssec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDnssec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDnssec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDnssec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDnssec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDnssec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDnssec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDnssec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ttl |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDnssec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDnssec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDnssec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDnssec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDnssec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDnssec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDnssec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDnssec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDnssec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDnssec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDnssec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDnssec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDnssec = fmt.Errorf("proto: unexpected end of group")
)
