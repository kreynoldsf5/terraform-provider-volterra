// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/vesenv/all_addon_services.proto

package vesenv

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AddonServiceName
//
// x-displayName: "Addon Service Name"
// Full set of addon services pre-approved names to be used as unique identifier/key.
// Every addon service is required to associate to one of the key in this list.
// Eywa to use this during addon service config object creation for metdata.name validation.
type AddonServiceName int32

const (
	// volterra_base
	//
	// x-displayName: "Volterra Base"
	// Full set of current volterra console services including native and non-native which are enabled by default.
	// for supporting legacy services before addon service migration purpose only.
	AS_VOLTERRA_BASE AddonServiceName = 0
	// shape_device_id
	//
	// x-displayName: "Shape Device ID"
	AS_SHAPE_DEVICE_ID AddonServiceName = 51
	// shape_client_side_defense
	//
	// x-displayName: "Shape Client Side Defense"
	AS_SHAPE_CLIENT_SIDE_DEFENSE AddonServiceName = 52
	// shape_safe_analyst
	//
	// x-displayName: "Shape Safe Analyst"
	AS_SHAPE_SAFE_ANALYST AddonServiceName = 53
	// BFDP service
	// x-displayName: "BFDP"
	AS_AI_DATA_BFDP AddonServiceName = 54
)

var AddonServiceName_name = map[int32]string{
	0:  "AS_VOLTERRA_BASE",
	51: "AS_SHAPE_DEVICE_ID",
	52: "AS_SHAPE_CLIENT_SIDE_DEFENSE",
	53: "AS_SHAPE_SAFE_ANALYST",
	54: "AS_AI_DATA_BFDP",
}

var AddonServiceName_value = map[string]int32{
	"AS_VOLTERRA_BASE":             0,
	"AS_SHAPE_DEVICE_ID":           51,
	"AS_SHAPE_CLIENT_SIDE_DEFENSE": 52,
	"AS_SHAPE_SAFE_ANALYST":        53,
	"AS_AI_DATA_BFDP":              54,
}

func (AddonServiceName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24b1043c1548ccb0, []int{0}
}

// NavigationTileName
//
// x-displayName: "Navigation Tile Name"
// Full set of Navigation Tile Names pre-approved names to be used as unique identifier/key.
// Eywa to use this during navigation tile config object creation for metdata.name validation.
type NavigationTileName int32

const (
	// cloud_and_edge_sites
	//
	// x-displayName: "Cloud And Edge Sites"
	//
	NT_CLOUD_AND_EDGE_SITES NavigationTileName = 0
	// shape_device_id
	//
	// x-displayName: "Shape Device ID"
	NT_SHAPE_DEVICE_ID NavigationTileName = 21
	// shape_client_side_defense
	//
	// x-displayName: "Shape Client Side Defense"
	NT_SHAPE_CLIENT_SIDE_DEFENSE NavigationTileName = 22
	// shape_safe_analyst
	//
	// x-displayName: "Shape Safe Analyst"
	NT_SHAPE_SAFE_ANALYST NavigationTileName = 23
	// BFDP
	//
	// x-displayName: "BFDP"
	NT_AI_DATA_BFDP NavigationTileName = 24
)

var NavigationTileName_name = map[int32]string{
	0:  "NT_CLOUD_AND_EDGE_SITES",
	21: "NT_SHAPE_DEVICE_ID",
	22: "NT_SHAPE_CLIENT_SIDE_DEFENSE",
	23: "NT_SHAPE_SAFE_ANALYST",
	24: "NT_AI_DATA_BFDP",
}

var NavigationTileName_value = map[string]int32{
	"NT_CLOUD_AND_EDGE_SITES":      0,
	"NT_SHAPE_DEVICE_ID":           21,
	"NT_SHAPE_CLIENT_SIDE_DEFENSE": 22,
	"NT_SHAPE_SAFE_ANALYST":        23,
	"NT_AI_DATA_BFDP":              24,
}

func (NavigationTileName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_24b1043c1548ccb0, []int{1}
}

// AddonServiceChoice enumerates all the well-known addon_service.Objects in a VES environment
type AddonServiceChoice struct {
	// Types that are valid to be assigned to Choice:
	//	*AddonServiceChoice_VesIoVolterraDefault
	//	*AddonServiceChoice_ShapeBot
	//	*AddonServiceChoice_ShapeRecognize
	Choice isAddonServiceChoice_Choice `protobuf_oneof:"choice"`
}

func (m *AddonServiceChoice) Reset()      { *m = AddonServiceChoice{} }
func (*AddonServiceChoice) ProtoMessage() {}
func (*AddonServiceChoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_24b1043c1548ccb0, []int{0}
}
func (m *AddonServiceChoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddonServiceChoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddonServiceChoice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddonServiceChoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddonServiceChoice.Merge(m, src)
}
func (m *AddonServiceChoice) XXX_Size() int {
	return m.Size()
}
func (m *AddonServiceChoice) XXX_DiscardUnknown() {
	xxx_messageInfo_AddonServiceChoice.DiscardUnknown(m)
}

var xxx_messageInfo_AddonServiceChoice proto.InternalMessageInfo

type isAddonServiceChoice_Choice interface {
	isAddonServiceChoice_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AddonServiceChoice_VesIoVolterraDefault struct {
	VesIoVolterraDefault bool `protobuf:"varint,1,opt,name=ves_io_volterra_default,json=vesIoVolterraDefault,proto3,oneof" json:"ves_io_volterra_default,omitempty"`
}
type AddonServiceChoice_ShapeBot struct {
	ShapeBot bool `protobuf:"varint,2,opt,name=shape_bot,json=shapeBot,proto3,oneof" json:"shape_bot,omitempty"`
}
type AddonServiceChoice_ShapeRecognize struct {
	ShapeRecognize bool `protobuf:"varint,3,opt,name=shape_recognize,json=shapeRecognize,proto3,oneof" json:"shape_recognize,omitempty"`
}

func (*AddonServiceChoice_VesIoVolterraDefault) isAddonServiceChoice_Choice() {}
func (*AddonServiceChoice_ShapeBot) isAddonServiceChoice_Choice()             {}
func (*AddonServiceChoice_ShapeRecognize) isAddonServiceChoice_Choice()       {}

func (m *AddonServiceChoice) GetChoice() isAddonServiceChoice_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *AddonServiceChoice) GetVesIoVolterraDefault() bool {
	if x, ok := m.GetChoice().(*AddonServiceChoice_VesIoVolterraDefault); ok {
		return x.VesIoVolterraDefault
	}
	return false
}

func (m *AddonServiceChoice) GetShapeBot() bool {
	if x, ok := m.GetChoice().(*AddonServiceChoice_ShapeBot); ok {
		return x.ShapeBot
	}
	return false
}

func (m *AddonServiceChoice) GetShapeRecognize() bool {
	if x, ok := m.GetChoice().(*AddonServiceChoice_ShapeRecognize); ok {
		return x.ShapeRecognize
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AddonServiceChoice) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AddonServiceChoice_VesIoVolterraDefault)(nil),
		(*AddonServiceChoice_ShapeBot)(nil),
		(*AddonServiceChoice_ShapeRecognize)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.vesenv.AddonServiceName", AddonServiceName_name, AddonServiceName_value)
	proto.RegisterEnum("ves.io.schema.vesenv.NavigationTileName", NavigationTileName_name, NavigationTileName_value)
	proto.RegisterType((*AddonServiceChoice)(nil), "ves.io.schema.vesenv.AddonServiceChoice")
}

func init() {
	proto.RegisterFile("ves.io/schema/vesenv/all_addon_services.proto", fileDescriptor_24b1043c1548ccb0)
}

var fileDescriptor_24b1043c1548ccb0 = []byte{
	// 641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xc7, 0xed, 0x7e, 0x52, 0xd5, 0x6f, 0x16, 0x34, 0x1a, 0x7a, 0x09, 0x05, 0x59, 0x55, 0xd5,
	0x05, 0xaa, 0x34, 0xb9, 0xdb, 0x89, 0xc5, 0x6a, 0x12, 0xbb, 0x4d, 0x20, 0x72, 0xab, 0xd8, 0x54,
	0x82, 0xcd, 0x68, 0xc6, 0x9e, 0xa4, 0x16, 0x49, 0x26, 0xb2, 0x5d, 0x0b, 0x58, 0x75, 0xc1, 0x03,
	0x20, 0xb6, 0xbc, 0x00, 0xef, 0xd0, 0x5d, 0x57, 0x2c, 0xbb, 0xec, 0x92, 0x26, 0x1b, 0x96, 0x7d,
	0x04, 0xe4, 0x4b, 0x23, 0x8a, 0xba, 0xb3, 0xce, 0xfc, 0xce, 0x7f, 0x7e, 0x1e, 0x9d, 0x03, 0x50,
	0xcc, 0xc3, 0x92, 0x2f, 0xca, 0xa1, 0x7b, 0xc6, 0x27, 0xb4, 0x1c, 0xf3, 0x90, 0x4f, 0xe3, 0x32,
	0x1d, 0x8f, 0x09, 0xf5, 0x3c, 0x31, 0x25, 0x21, 0x0f, 0x62, 0xdf, 0xe5, 0x61, 0x69, 0x16, 0x88,
	0x48, 0xc0, 0x8d, 0x0c, 0x2f, 0x65, 0x78, 0x29, 0xc3, 0x77, 0xf6, 0x1e, 0x0d, 0x11, 0xb3, 0xc8,
	0x17, 0xd3, 0xbc, 0x73, 0x6f, 0xb1, 0x02, 0x20, 0x4e, 0x22, 0xed, 0x2c, 0xb1, 0x73, 0x26, 0x7c,
	0x97, 0xc3, 0x2f, 0x32, 0xd8, 0x8e, 0x79, 0x48, 0x7c, 0x41, 0x62, 0x31, 0x8e, 0x78, 0x10, 0x50,
	0xe2, 0xf1, 0x21, 0x3d, 0x1f, 0x47, 0x45, 0x79, 0x57, 0x7e, 0xb9, 0xd6, 0x7e, 0x73, 0x75, 0x59,
	0x3c, 0x4a, 0x21, 0xe4, 0x0b, 0x74, 0x0f, 0xa1, 0x1c, 0x82, 0xfb, 0x4d, 0xda, 0xa4, 0x1e, 0x6b,
	0xa9, 0x48, 0xd3, 0x58, 0x15, 0x35, 0xbc, 0x6a, 0x1d, 0x31, 0xd6, 0xa4, 0xa8, 0xea, 0xf2, 0x66,
	0x4b, 0x6f, 0x56, 0x5a, 0x9a, 0x56, 0xd9, 0x59, 0x0d, 0x3f, 0x85, 0x11, 0x9f, 0x74, 0xa5, 0x41,
	0xf2, 0x07, 0x3d, 0x71, 0x9a, 0xc7, 0x18, 0x79, 0x8a, 0x03, 0xfe, 0x0f, 0xcf, 0xe8, 0x8c, 0x13,
	0x26, 0xa2, 0xe2, 0x4a, 0x7a, 0xaf, 0x7a, 0x75, 0x59, 0xac, 0xe6, 0x65, 0xc4, 0x44, 0x04, 0xf7,
	0x2b, 0x35, 0x55, 0x65, 0x0d, 0x4f, 0x47, 0x7a, 0x8b, 0xe9, 0xa8, 0x51, 0xd3, 0x5b, 0x48, 0x57,
	0x1b, 0x4d, 0x54, 0xd7, 0xb4, 0x4a, 0x4d, 0x65, 0x2d, 0xc6, 0x28, 0xeb, 0x4a, 0x83, 0xb5, 0xb4,
	0xa5, 0x2d, 0x22, 0x38, 0x04, 0xeb, 0x59, 0x6a, 0xc0, 0x5d, 0x31, 0x9a, 0xfa, 0x9f, 0x79, 0xf1,
	0xbf, 0x34, 0xfb, 0xd5, 0xd5, 0x65, 0xb1, 0x99, 0x1f, 0xa2, 0xe5, 0x21, 0xdc, 0xd7, 0x5d, 0x97,
	0xb6, 0x86, 0x9a, 0x87, 0xb4, 0xa1, 0x5a, 0x47, 0x8d, 0x6a, 0x63, 0x88, 0x74, 0xad, 0x46, 0x11,
	0x67, 0x35, 0x4d, 0x75, 0x2b, 0x95, 0xda, 0xb0, 0xa6, 0x75, 0xa5, 0xc1, 0x93, 0xb4, 0x71, 0x70,
	0xdf, 0xd7, 0x5e, 0x03, 0xab, 0x6e, 0xfa, 0x9c, 0x07, 0xdf, 0x64, 0x50, 0xf8, 0xfb, 0x95, 0x2d,
	0x3a, 0xe1, 0x70, 0x03, 0x14, 0xb0, 0x4d, 0x4e, 0x8f, 0xfb, 0x8e, 0x39, 0x18, 0x60, 0xd2, 0xc6,
	0xb6, 0x59, 0x90, 0xe0, 0x16, 0x80, 0xd8, 0x26, 0x76, 0x17, 0x9f, 0x98, 0xc4, 0x30, 0x4f, 0x7b,
	0x1d, 0x93, 0xf4, 0x8c, 0x42, 0x1d, 0xee, 0x82, 0x17, 0xcb, 0x7a, 0xa7, 0xdf, 0x33, 0x2d, 0x87,
	0xd8, 0x3d, 0x23, 0x61, 0x0e, 0x4d, 0xcb, 0x36, 0x0b, 0x0d, 0xf8, 0x0c, 0x6c, 0x2e, 0x09, 0x1b,
	0x1f, 0x9a, 0x04, 0x5b, 0xb8, 0xff, 0xce, 0x76, 0x0a, 0x2a, 0x7c, 0x0a, 0xd6, 0xb1, 0x4d, 0x70,
	0x8f, 0x18, 0xd8, 0xc1, 0xa4, 0x7d, 0x68, 0x9c, 0x14, 0xb4, 0x83, 0xef, 0x32, 0x80, 0x16, 0x8d,
	0xfd, 0x11, 0x4d, 0x06, 0xc2, 0xf1, 0xc7, 0x99, 0xd6, 0x73, 0xb0, 0x6d, 0x39, 0xa4, 0xd3, 0x3f,
	0x7e, 0x6b, 0x10, 0x6c, 0x19, 0xc4, 0x34, 0x8e, 0x4c, 0x62, 0xf7, 0x1c, 0xd3, 0xce, 0xec, 0x92,
	0x8b, 0xff, 0xb1, 0xdb, 0x4c, 0xec, 0x96, 0xf5, 0xc7, 0xec, 0xb6, 0x12, 0xbb, 0x25, 0xf1, 0xc0,
	0x6e, 0x3b, 0xb1, 0xb3, 0x9c, 0x87, 0x76, 0xc5, 0xf6, 0x85, 0x7c, 0x7d, 0xab, 0x48, 0x37, 0xb7,
	0x8a, 0x74, 0x77, 0xab, 0xc8, 0x17, 0x73, 0x45, 0xfe, 0x31, 0x57, 0xe4, 0x9f, 0x73, 0x45, 0xbe,
	0x9e, 0x2b, 0xf2, 0xaf, 0xb9, 0x22, 0xff, 0x9e, 0x2b, 0xd2, 0xdd, 0x5c, 0x91, 0xbf, 0x2e, 0x14,
	0xe9, 0x7a, 0xa1, 0x48, 0x37, 0x0b, 0x45, 0x7a, 0xff, 0x7a, 0x24, 0x66, 0x1f, 0x46, 0xa5, 0xfb,
	0x79, 0x2c, 0x9d, 0x87, 0xe5, 0xf4, 0x63, 0x28, 0x82, 0x09, 0x9a, 0x05, 0x22, 0xf6, 0x3d, 0x1e,
	0x2c, 0xc7, 0xb5, 0x3c, 0x63, 0x23, 0x51, 0xe6, 0x1f, 0xa3, 0x7c, 0x45, 0x1e, 0x6c, 0x0a, 0x5b,
	0x4d, 0x57, 0xa4, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x72, 0xec, 0x97, 0x8d, 0x03, 0x00,
	0x00,
}

func (x AddonServiceName) String() string {
	s, ok := AddonServiceName_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NavigationTileName) String() string {
	s, ok := NavigationTileName_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *AddonServiceChoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddonServiceChoice)
	if !ok {
		that2, ok := that.(AddonServiceChoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *AddonServiceChoice_VesIoVolterraDefault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddonServiceChoice_VesIoVolterraDefault)
	if !ok {
		that2, ok := that.(AddonServiceChoice_VesIoVolterraDefault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VesIoVolterraDefault != that1.VesIoVolterraDefault {
		return false
	}
	return true
}
func (this *AddonServiceChoice_ShapeBot) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddonServiceChoice_ShapeBot)
	if !ok {
		that2, ok := that.(AddonServiceChoice_ShapeBot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ShapeBot != that1.ShapeBot {
		return false
	}
	return true
}
func (this *AddonServiceChoice_ShapeRecognize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddonServiceChoice_ShapeRecognize)
	if !ok {
		that2, ok := that.(AddonServiceChoice_ShapeRecognize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ShapeRecognize != that1.ShapeRecognize {
		return false
	}
	return true
}
func (this *AddonServiceChoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&vesenv.AddonServiceChoice{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddonServiceChoice_VesIoVolterraDefault) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.AddonServiceChoice_VesIoVolterraDefault{` +
		`VesIoVolterraDefault:` + fmt.Sprintf("%#v", this.VesIoVolterraDefault) + `}`}, ", ")
	return s
}
func (this *AddonServiceChoice_ShapeBot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.AddonServiceChoice_ShapeBot{` +
		`ShapeBot:` + fmt.Sprintf("%#v", this.ShapeBot) + `}`}, ", ")
	return s
}
func (this *AddonServiceChoice_ShapeRecognize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&vesenv.AddonServiceChoice_ShapeRecognize{` +
		`ShapeRecognize:` + fmt.Sprintf("%#v", this.ShapeRecognize) + `}`}, ", ")
	return s
}
func valueToGoStringAllAddonServices(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AddonServiceChoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddonServiceChoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddonServiceChoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddonServiceChoice_VesIoVolterraDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddonServiceChoice_VesIoVolterraDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.VesIoVolterraDefault {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *AddonServiceChoice_ShapeBot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddonServiceChoice_ShapeBot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.ShapeBot {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *AddonServiceChoice_ShapeRecognize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddonServiceChoice_ShapeRecognize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.ShapeRecognize {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func encodeVarintAllAddonServices(dAtA []byte, offset int, v uint64) int {
	offset -= sovAllAddonServices(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddonServiceChoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *AddonServiceChoice_VesIoVolterraDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *AddonServiceChoice_ShapeBot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *AddonServiceChoice_ShapeRecognize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}

func sovAllAddonServices(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAllAddonServices(x uint64) (n int) {
	return sovAllAddonServices(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AddonServiceChoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddonServiceChoice{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddonServiceChoice_VesIoVolterraDefault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddonServiceChoice_VesIoVolterraDefault{`,
		`VesIoVolterraDefault:` + fmt.Sprintf("%v", this.VesIoVolterraDefault) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddonServiceChoice_ShapeBot) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddonServiceChoice_ShapeBot{`,
		`ShapeBot:` + fmt.Sprintf("%v", this.ShapeBot) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddonServiceChoice_ShapeRecognize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddonServiceChoice_ShapeRecognize{`,
		`ShapeRecognize:` + fmt.Sprintf("%v", this.ShapeRecognize) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAllAddonServices(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AddonServiceChoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllAddonServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddonServiceChoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddonServiceChoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesIoVolterraDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllAddonServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &AddonServiceChoice_VesIoVolterraDefault{b}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShapeBot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllAddonServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &AddonServiceChoice_ShapeBot{b}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShapeRecognize", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllAddonServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Choice = &AddonServiceChoice_ShapeRecognize{b}
		default:
			iNdEx = preIndex
			skippy, err := skipAllAddonServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAllAddonServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAllAddonServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAllAddonServices(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAllAddonServices
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllAddonServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllAddonServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAllAddonServices
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAllAddonServices
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAllAddonServices
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAllAddonServices        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAllAddonServices          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAllAddonServices = fmt.Errorf("proto: unexpected end of group")
)
