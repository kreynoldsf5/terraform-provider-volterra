//
// Copyright (c) 2018 Volterra, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package vesenv

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *AddonServiceChoice) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *AddonServiceChoice) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *AddonServiceChoice) DeepCopy() *AddonServiceChoice {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &AddonServiceChoice{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *AddonServiceChoice) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *AddonServiceChoice) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return AddonServiceChoiceValidator().Validate(ctx, m, opts...)
}

type ValidateAddonServiceChoice struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAddonServiceChoice) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*AddonServiceChoice)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *AddonServiceChoice got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetChoice().(type) {
	case *AddonServiceChoice_VesIoVolterraDefault:
		if fv, exists := v.FldValidators["choice.ves_io_volterra_default"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_VesIoVolterraDefault).VesIoVolterraDefault
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("ves_io_volterra_default"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_ShapeBot:
		if fv, exists := v.FldValidators["choice.shape_bot"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_ShapeBot).ShapeBot
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("shape_bot"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *AddonServiceChoice_ShapeRecognize:
		if fv, exists := v.FldValidators["choice.shape_recognize"]; exists {
			val := m.GetChoice().(*AddonServiceChoice_ShapeRecognize).ShapeRecognize
			vOpts := append(opts,
				db.WithValidateField("choice"),
				db.WithValidateField("shape_recognize"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAddonServiceChoiceValidator = func() *ValidateAddonServiceChoice {
	v := &ValidateAddonServiceChoice{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func AddonServiceChoiceValidator() db.Validator {
	return DefaultAddonServiceChoiceValidator
}
