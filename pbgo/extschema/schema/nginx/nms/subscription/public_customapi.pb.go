// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/nginx/nms/subscription/public_customapi.proto

// NGINX Management Suite Subscription API
//
// x-displayName: "NGINX Management Suite Subscription API"
// Use this API to subscribe to NGINX Management Suite

package subscription

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("ves.io/schema/nginx/nms/subscription/public_customapi.proto", fileDescriptor_07bd81f7d4a996ec)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/nginx/nms/subscription/public_customapi.proto", fileDescriptor_07bd81f7d4a996ec)
}

var fileDescriptor_07bd81f7d4a996ec = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xbd, 0x6e, 0x13, 0x41,
	0x10, 0xc7, 0x6f, 0xb1, 0x84, 0x14, 0xa7, 0xbb, 0x2a, 0x32, 0x68, 0x0b, 0x0b, 0x09, 0x81, 0xb8,
	0x5d, 0x04, 0x12, 0x9f, 0x15, 0x50, 0xd1, 0x21, 0x10, 0x4d, 0x1a, 0x74, 0x77, 0x19, 0x6f, 0x56,
	0x78, 0x77, 0x96, 0x9b, 0xdd, 0x53, 0xd2, 0xa1, 0x3c, 0x01, 0x12, 0x3c, 0x04, 0xef, 0x40, 0x93,
	0x0e, 0x2a, 0x64, 0x89, 0xc6, 0x25, 0x5e, 0x53, 0xa0, 0x54, 0x79, 0x04, 0xc4, 0xda, 0x8e, 0xce,
	0x4d, 0xe4, 0xa4, 0x9b, 0x8f, 0xfb, 0xfd, 0x6f, 0xfe, 0xb3, 0xd3, 0x7f, 0xda, 0x02, 0x09, 0x8d,
	0x92, 0xea, 0x7d, 0x30, 0xa5, 0xb4, 0x4a, 0xdb, 0x03, 0x69, 0x0d, 0x49, 0x0a, 0x15, 0xd5, 0x8d,
	0x76, 0x5e, 0xa3, 0x95, 0x2e, 0x54, 0x63, 0x5d, 0xbf, 0xab, 0x03, 0x79, 0x34, 0xa5, 0xd3, 0xc2,
	0x35, 0xe8, 0x31, 0xbf, 0xb1, 0x80, 0xc5, 0x02, 0x16, 0x09, 0x16, 0xd6, 0x90, 0xe8, 0xc2, 0x83,
	0x42, 0x69, 0xbf, 0x1f, 0x2a, 0x51, 0xa3, 0x91, 0x0a, 0x15, 0xca, 0x04, 0x57, 0x61, 0x94, 0xb2,
	0x94, 0xa4, 0x68, 0x21, 0x3a, 0xb8, 0xae, 0x10, 0xd5, 0x18, 0x64, 0xe9, 0xb4, 0x2c, 0xad, 0x45,
	0x5f, 0xfe, 0x57, 0xa1, 0x65, 0xf7, 0xee, 0x46, 0xf3, 0xfa, 0x43, 0x07, 0x2b, 0xe2, 0xda, 0x3a,
	0x81, 0xae, 0x2b, 0x37, 0x5c, 0x6f, 0xb6, 0x40, 0x60, 0xdb, 0xf5, 0x6f, 0xee, 0x9d, 0xf4, 0xfa,
	0x5b, 0x2f, 0x92, 0xf3, 0x67, 0xaf, 0x5e, 0xe6, 0x91, 0xf5, 0xb7, 0xde, 0x2c, 0xfe, 0x55, 0x41,
	0xfe, 0x40, 0x6c, 0xb2, 0x02, 0x71, 0x06, 0xbc, 0x86, 0x0f, 0x01, 0xc8, 0x0f, 0x1e, 0x5e, 0x98,
	0x23, 0x87, 0x96, 0x60, 0xb8, 0x17, 0xbf, 0xef, 0x88, 0x16, 0xc7, 0xbe, 0x46, 0x4b, 0x38, 0x86,
	0x22, 0x91, 0x85, 0x51, 0xc6, 0x17, 0x14, 0xb4, 0x87, 0xa2, 0x2b, 0x90, 0xea, 0x47, 0xbf, 0xfe,
	0x7c, 0xbe, 0x72, 0x67, 0x78, 0x73, 0xf9, 0x8a, 0x69, 0x5b, 0xb6, 0x34, 0x40, 0xae, 0xac, 0x81,
	0x24, 0x1d, 0x92, 0x07, 0xb3, 0xda, 0x5f, 0x05, 0x4f, 0xd8, 0xed, 0xfc, 0x84, 0xf5, 0xb7, 0xdf,
	0xda, 0xb3, 0x52, 0xfe, 0x68, 0xb3, 0x71, 0x3b, 0xc8, 0xca, 0xe8, 0xe3, 0x4b, 0x90, 0x4b, 0xab,
	0xa3, 0x4b, 0x5a, 0x15, 0xc3, 0x5b, 0xe7, 0x5b, 0x0d, 0xb6, 0x6b, 0x76, 0xb0, 0x7d, 0xfc, 0x8d,
	0xf5, 0x8e, 0x7e, 0xee, 0xf4, 0xa6, 0x8c, 0x3d, 0xff, 0xc2, 0x26, 0x33, 0x9e, 0x4d, 0x67, 0x3c,
	0x3b, 0x9d, 0x71, 0xf6, 0x31, 0x72, 0xf6, 0x35, 0x72, 0xf6, 0x23, 0x72, 0x36, 0x89, 0x9c, 0xfd,
	0x8e, 0x9c, 0xfd, 0x8d, 0x3c, 0x3b, 0x8d, 0x9c, 0x7d, 0x9a, 0xf3, 0xec, 0x78, 0xce, 0xd9, 0x64,
	0xce, 0xb3, 0xe9, 0x9c, 0x67, 0xbb, 0xbb, 0x0a, 0xdd, 0x7b, 0x95, 0x26, 0x86, 0xa6, 0x29, 0x45,
	0x20, 0x99, 0x82, 0x11, 0x36, 0xa6, 0x70, 0x0d, 0xb6, 0x7a, 0x0f, 0x9a, 0x62, 0xd5, 0x96, 0xae,
	0x52, 0x28, 0xe1, 0xc0, 0x2f, 0x4f, 0xef, 0xdc, 0x83, 0xae, 0xae, 0xa6, 0x53, 0xbc, 0xff, 0x2f,
	0x00, 0x00, 0xff, 0xff, 0x50, 0xd7, 0xa2, 0x67, 0xaf, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Subscribe
	//
	// x-displayName: "Subscribe to NGINX Management Suite"
	// Subscribe to NGINX Management Suite
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	// Unsubscribe
	//
	// x-displayName: "Unsubscribe to NGINX Management Suite"
	// Unsubscribe to NGINX Management Suite
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.nginx.nms.subscription.CustomAPI/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	out := new(UnsubscribeResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.nginx.nms.subscription.CustomAPI/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Subscribe
	//
	// x-displayName: "Subscribe to NGINX Management Suite"
	// Subscribe to NGINX Management Suite
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	// Unsubscribe
	//
	// x-displayName: "Unsubscribe to NGINX Management Suite"
	// Unsubscribe to NGINX Management Suite
	Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) Subscribe(ctx context.Context, req *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedCustomAPIServer) Unsubscribe(ctx context.Context, req *UnsubscribeRequest) (*UnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.nginx.nms.subscription.CustomAPI/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.nginx.nms.subscription.CustomAPI/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.nginx.nms.subscription.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _CustomAPI_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _CustomAPI_Unsubscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/nginx/nms/subscription/public_customapi.proto",
}
