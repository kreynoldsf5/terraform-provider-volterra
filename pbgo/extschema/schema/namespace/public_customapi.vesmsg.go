//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package namespace

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *APIItem) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIItem) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIItem) DeepCopy() *APIItem {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIItem{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIItem) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIItem) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIItemValidator().Validate(ctx, m, opts...)
}

type ValidateAPIItem struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIItem) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIItem)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIItem got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["method"]; exists {

		vOpts := append(opts, db.WithValidateField("method"))
		if err := fv(ctx, m.GetMethod(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["path"]; exists {

		vOpts := append(opts, db.WithValidateField("path"))
		if err := fv(ctx, m.GetPath(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["result"]; exists {

		vOpts := append(opts, db.WithValidateField("result"))
		if err := fv(ctx, m.GetResult(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIItemValidator = func() *ValidateAPIItem {
	v := &ValidateAPIItem{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIItemValidator() db.Validator {
	return DefaultAPIItemValidator
}

// augmented methods on protoc/std generated struct

func (m *APIItemList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *APIItemList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *APIItemList) DeepCopy() *APIItemList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &APIItemList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *APIItemList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *APIItemList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return APIItemListValidator().Validate(ctx, m, opts...)
}

type ValidateAPIItemList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateAPIItemList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*APIItemList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *APIItemList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["items"]; exists {

		vOpts := append(opts, db.WithValidateField("items"))
		for idx, item := range m.GetItems() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["list_id"]; exists {

		vOpts := append(opts, db.WithValidateField("list_id"))
		if err := fv(ctx, m.GetListId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["result"]; exists {

		vOpts := append(opts, db.WithValidateField("result"))
		if err := fv(ctx, m.GetResult(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultAPIItemListValidator = func() *ValidateAPIItemList {
	v := &ValidateAPIItemList{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func APIItemListValidator() db.Validator {
	return DefaultAPIItemListValidator
}

// augmented methods on protoc/std generated struct

func (m *CascadeDeleteItemType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CascadeDeleteItemType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CascadeDeleteItemType) DeepCopy() *CascadeDeleteItemType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CascadeDeleteItemType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CascadeDeleteItemType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CascadeDeleteItemType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CascadeDeleteItemTypeValidator().Validate(ctx, m, opts...)
}

type ValidateCascadeDeleteItemType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCascadeDeleteItemType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CascadeDeleteItemType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CascadeDeleteItemType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["error_message"]; exists {

		vOpts := append(opts, db.WithValidateField("error_message"))
		if err := fv(ctx, m.GetErrorMessage(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["object_name"]; exists {

		vOpts := append(opts, db.WithValidateField("object_name"))
		if err := fv(ctx, m.GetObjectName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["object_type"]; exists {

		vOpts := append(opts, db.WithValidateField("object_type"))
		if err := fv(ctx, m.GetObjectType(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["object_uid"]; exists {

		vOpts := append(opts, db.WithValidateField("object_uid"))
		if err := fv(ctx, m.GetObjectUid(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCascadeDeleteItemTypeValidator = func() *ValidateCascadeDeleteItemType {
	v := &ValidateCascadeDeleteItemType{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func CascadeDeleteItemTypeValidator() db.Validator {
	return DefaultCascadeDeleteItemTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *CascadeDeleteRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CascadeDeleteRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CascadeDeleteRequest) DeepCopy() *CascadeDeleteRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CascadeDeleteRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CascadeDeleteRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CascadeDeleteRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CascadeDeleteRequestValidator().Validate(ctx, m, opts...)
}

type ValidateCascadeDeleteRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCascadeDeleteRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CascadeDeleteRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CascadeDeleteRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCascadeDeleteRequestValidator = func() *ValidateCascadeDeleteRequest {
	v := &ValidateCascadeDeleteRequest{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func CascadeDeleteRequestValidator() db.Validator {
	return DefaultCascadeDeleteRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *CascadeDeleteResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CascadeDeleteResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CascadeDeleteResponse) DeepCopy() *CascadeDeleteResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CascadeDeleteResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CascadeDeleteResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CascadeDeleteResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CascadeDeleteResponseValidator().Validate(ctx, m, opts...)
}

type ValidateCascadeDeleteResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCascadeDeleteResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CascadeDeleteResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CascadeDeleteResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["items"]; exists {

		vOpts := append(opts, db.WithValidateField("items"))
		for idx, item := range m.GetItems() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCascadeDeleteResponseValidator = func() *ValidateCascadeDeleteResponse {
	v := &ValidateCascadeDeleteResponse{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func CascadeDeleteResponseValidator() db.Validator {
	return DefaultCascadeDeleteResponseValidator
}

// augmented methods on protoc/std generated struct

func (m *EvaluateAPIAccessReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *EvaluateAPIAccessReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *EvaluateAPIAccessReq) DeepCopy() *EvaluateAPIAccessReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &EvaluateAPIAccessReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *EvaluateAPIAccessReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *EvaluateAPIAccessReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EvaluateAPIAccessReqValidator().Validate(ctx, m, opts...)
}

type ValidateEvaluateAPIAccessReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEvaluateAPIAccessReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*EvaluateAPIAccessReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *EvaluateAPIAccessReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["item_lists"]; exists {

		vOpts := append(opts, db.WithValidateField("item_lists"))
		for idx, item := range m.GetItemLists() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEvaluateAPIAccessReqValidator = func() *ValidateEvaluateAPIAccessReq {
	v := &ValidateEvaluateAPIAccessReq{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func EvaluateAPIAccessReqValidator() db.Validator {
	return DefaultEvaluateAPIAccessReqValidator
}

// augmented methods on protoc/std generated struct

func (m *EvaluateAPIAccessResp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *EvaluateAPIAccessResp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *EvaluateAPIAccessResp) DeepCopy() *EvaluateAPIAccessResp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &EvaluateAPIAccessResp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *EvaluateAPIAccessResp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *EvaluateAPIAccessResp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return EvaluateAPIAccessRespValidator().Validate(ctx, m, opts...)
}

type ValidateEvaluateAPIAccessResp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateEvaluateAPIAccessResp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*EvaluateAPIAccessResp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *EvaluateAPIAccessResp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["item_lists"]; exists {

		vOpts := append(opts, db.WithValidateField("item_lists"))
		for idx, item := range m.GetItemLists() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultEvaluateAPIAccessRespValidator = func() *ValidateEvaluateAPIAccessResp {
	v := &ValidateEvaluateAPIAccessResp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func EvaluateAPIAccessRespValidator() db.Validator {
	return DefaultEvaluateAPIAccessRespValidator
}

// augmented methods on protoc/std generated struct

func (m *UpdateAllowAdvertiseOnPublicReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UpdateAllowAdvertiseOnPublicReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UpdateAllowAdvertiseOnPublicReq) DeepCopy() *UpdateAllowAdvertiseOnPublicReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UpdateAllowAdvertiseOnPublicReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UpdateAllowAdvertiseOnPublicReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UpdateAllowAdvertiseOnPublicReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UpdateAllowAdvertiseOnPublicReqValidator().Validate(ctx, m, opts...)
}

type ValidateUpdateAllowAdvertiseOnPublicReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUpdateAllowAdvertiseOnPublicReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UpdateAllowAdvertiseOnPublicReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UpdateAllowAdvertiseOnPublicReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["allow_advertise_on_public"]; exists {

		vOpts := append(opts, db.WithValidateField("allow_advertise_on_public"))
		if err := fv(ctx, m.GetAllowAdvertiseOnPublic(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["namespace"]; exists {

		vOpts := append(opts, db.WithValidateField("namespace"))
		if err := fv(ctx, m.GetNamespace(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUpdateAllowAdvertiseOnPublicReqValidator = func() *ValidateUpdateAllowAdvertiseOnPublicReq {
	v := &ValidateUpdateAllowAdvertiseOnPublicReq{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func UpdateAllowAdvertiseOnPublicReqValidator() db.Validator {
	return DefaultUpdateAllowAdvertiseOnPublicReqValidator
}

// augmented methods on protoc/std generated struct

func (m *UpdateAllowAdvertiseOnPublicResp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UpdateAllowAdvertiseOnPublicResp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UpdateAllowAdvertiseOnPublicResp) DeepCopy() *UpdateAllowAdvertiseOnPublicResp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UpdateAllowAdvertiseOnPublicResp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UpdateAllowAdvertiseOnPublicResp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UpdateAllowAdvertiseOnPublicResp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UpdateAllowAdvertiseOnPublicRespValidator().Validate(ctx, m, opts...)
}

type ValidateUpdateAllowAdvertiseOnPublicResp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUpdateAllowAdvertiseOnPublicResp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UpdateAllowAdvertiseOnPublicResp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UpdateAllowAdvertiseOnPublicResp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["result"]; exists {

		vOpts := append(opts, db.WithValidateField("result"))
		if err := fv(ctx, m.GetResult(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUpdateAllowAdvertiseOnPublicRespValidator = func() *ValidateUpdateAllowAdvertiseOnPublicResp {
	v := &ValidateUpdateAllowAdvertiseOnPublicResp{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func UpdateAllowAdvertiseOnPublicRespValidator() db.Validator {
	return DefaultUpdateAllowAdvertiseOnPublicRespValidator
}
