//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package allowed_tenant

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *GetTenantAccessReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetTenantAccessReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetTenantAccessReq) DeepCopy() *GetTenantAccessReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetTenantAccessReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetTenantAccessReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetTenantAccessReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetTenantAccessReqValidator().Validate(ctx, m, opts...)
}

type ValidateGetTenantAccessReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetTenantAccessReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetTenantAccessReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetTenantAccessReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetTenantAccessReqValidator = func() *ValidateGetTenantAccessReq {
	v := &ValidateGetTenantAccessReq{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GetTenantAccessReqValidator() db.Validator {
	return DefaultGetTenantAccessReqValidator
}

// augmented methods on protoc/std generated struct

func (m *GetTenantAccessResp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetTenantAccessResp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetTenantAccessResp) DeepCopy() *GetTenantAccessResp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetTenantAccessResp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetTenantAccessResp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetTenantAccessResp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetTenantAccessRespValidator().Validate(ctx, m, opts...)
}

func (m *GetTenantAccessResp) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetAccessConfigDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetTenantAccessResp) GetAccessConfigDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAccessConfig() == nil {
		return nil, nil
	}

	drInfos, err := m.GetAccessConfig().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetAccessConfig().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "access_config." + dri.DRField
	}
	return drInfos, err

}

type ValidateGetTenantAccessResp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetTenantAccessResp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetTenantAccessResp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetTenantAccessResp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_config"]; exists {

		vOpts := append(opts, db.WithValidateField("access_config"))
		if err := fv(ctx, m.GetAccessConfig(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetTenantAccessRespValidator = func() *ValidateGetTenantAccessResp {
	v := &ValidateGetTenantAccessResp{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["access_config"] = AllowedAccessConfigValidator().Validate

	return v
}()

func GetTenantAccessRespValidator() db.Validator {
	return DefaultGetTenantAccessRespValidator
}

// augmented methods on protoc/std generated struct

func (m *UpdateSupportTenantAccessReq) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UpdateSupportTenantAccessReq) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UpdateSupportTenantAccessReq) DeepCopy() *UpdateSupportTenantAccessReq {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UpdateSupportTenantAccessReq{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UpdateSupportTenantAccessReq) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UpdateSupportTenantAccessReq) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UpdateSupportTenantAccessReqValidator().Validate(ctx, m, opts...)
}

func (m *UpdateSupportTenantAccessReq) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetAccessConfigDRefInfo()

}

// GetDRefInfo for the field's type
func (m *UpdateSupportTenantAccessReq) GetAccessConfigDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAccessConfig() == nil {
		return nil, nil
	}

	drInfos, err := m.GetAccessConfig().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetAccessConfig().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "access_config." + dri.DRField
	}
	return drInfos, err

}

type ValidateUpdateSupportTenantAccessReq struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUpdateSupportTenantAccessReq) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UpdateSupportTenantAccessReq)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UpdateSupportTenantAccessReq got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_config"]; exists {

		vOpts := append(opts, db.WithValidateField("access_config"))
		if err := fv(ctx, m.GetAccessConfig(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUpdateSupportTenantAccessReqValidator = func() *ValidateUpdateSupportTenantAccessReq {
	v := &ValidateUpdateSupportTenantAccessReq{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["access_config"] = AllowedAccessConfigValidator().Validate

	return v
}()

func UpdateSupportTenantAccessReqValidator() db.Validator {
	return DefaultUpdateSupportTenantAccessReqValidator
}

// augmented methods on protoc/std generated struct

func (m *UpdateSupportTenantAccessResp) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *UpdateSupportTenantAccessResp) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *UpdateSupportTenantAccessResp) DeepCopy() *UpdateSupportTenantAccessResp {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &UpdateSupportTenantAccessResp{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *UpdateSupportTenantAccessResp) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *UpdateSupportTenantAccessResp) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return UpdateSupportTenantAccessRespValidator().Validate(ctx, m, opts...)
}

func (m *UpdateSupportTenantAccessResp) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetAccessConfigDRefInfo()

}

// GetDRefInfo for the field's type
func (m *UpdateSupportTenantAccessResp) GetAccessConfigDRefInfo() ([]db.DRefInfo, error) {
	if m.GetAccessConfig() == nil {
		return nil, nil
	}

	drInfos, err := m.GetAccessConfig().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetAccessConfig().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "access_config." + dri.DRField
	}
	return drInfos, err

}

type ValidateUpdateSupportTenantAccessResp struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateUpdateSupportTenantAccessResp) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*UpdateSupportTenantAccessResp)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *UpdateSupportTenantAccessResp got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["access_config"]; exists {

		vOpts := append(opts, db.WithValidateField("access_config"))
		if err := fv(ctx, m.GetAccessConfig(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultUpdateSupportTenantAccessRespValidator = func() *ValidateUpdateSupportTenantAccessResp {
	v := &ValidateUpdateSupportTenantAccessResp{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["access_config"] = AllowedAccessConfigValidator().Validate

	return v
}()

func UpdateSupportTenantAccessRespValidator() db.Validator {
	return DefaultUpdateSupportTenantAccessRespValidator
}
