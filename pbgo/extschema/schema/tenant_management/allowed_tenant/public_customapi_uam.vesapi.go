//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package allowed_tenant

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomAPI GRPC Client satisfying server.CustomClient
type CustomAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomAPIGrpcClient) doRPCGetSupportTenantAccess(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &GetSupportTenantAccessReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.tenant_management.allowed_tenant.GetSupportTenantAccessReq", yamlReq)
	}
	rsp, err := c.grpcClient.GetSupportTenantAccess(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) doRPCUpdateSupportTenantAccess(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &UpdateSupportTenantAccessReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.tenant_management.allowed_tenant.UpdateSupportTenantAccessReq", yamlReq)
	}
	rsp, err := c.grpcClient.UpdateSupportTenantAccess(ctx, req, opts...)
	return rsp, err
}

func (c *CustomAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["GetSupportTenantAccess"] = ccl.doRPCGetSupportTenantAccess

	rpcFns["UpdateSupportTenantAccess"] = ccl.doRPCUpdateSupportTenantAccess

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomAPI REST Client satisfying server.CustomClient
type CustomAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomAPIRestClient) doRPCGetSupportTenantAccess(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &GetSupportTenantAccessReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.tenant_management.allowed_tenant.GetSupportTenantAccessReq: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("name", fmt.Sprintf("%v", req.Name))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &GetSupportTenantAccessResp{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.tenant_management.allowed_tenant.GetSupportTenantAccessResp", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) doRPCUpdateSupportTenantAccess(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &UpdateSupportTenantAccessReq{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.tenant_management.allowed_tenant.UpdateSupportTenantAccessReq: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("access_config", fmt.Sprintf("%v", req.AccessConfig))
		q.Add("name", fmt.Sprintf("%v", req.Name))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &UpdateSupportTenantAccessResp{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.tenant_management.allowed_tenant.UpdateSupportTenantAccessResp", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["GetSupportTenantAccess"] = ccl.doRPCGetSupportTenantAccess

	rpcFns["UpdateSupportTenantAccess"] = ccl.doRPCUpdateSupportTenantAccess

	ccl.rpcFns = rpcFns

	return ccl
}

// Create customAPIInprocClient

// INPROC Client (satisfying CustomAPIClient interface)
type customAPIInprocClient struct {
	CustomAPIServer
}

func (c *customAPIInprocClient) GetSupportTenantAccess(ctx context.Context, in *GetSupportTenantAccessReq, opts ...grpc.CallOption) (*GetSupportTenantAccessResp, error) {
	return c.CustomAPIServer.GetSupportTenantAccess(ctx, in)
}
func (c *customAPIInprocClient) UpdateSupportTenantAccess(ctx context.Context, in *UpdateSupportTenantAccessReq, opts ...grpc.CallOption) (*UpdateSupportTenantAccessResp, error) {
	return c.CustomAPIServer.UpdateSupportTenantAccess(ctx, in)
}

func NewCustomAPIInprocClient(svc svcfw.Service) CustomAPIClient {
	return &customAPIInprocClient{CustomAPIServer: NewCustomAPIServer(svc)}
}

// RegisterGwCustomAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomAPIHandlerClient(ctx, mux, NewCustomAPIInprocClient(s))
}

// Create customAPISrv

// SERVER (satisfying CustomAPIServer interface)
type customAPISrv struct {
	svc svcfw.Service
}

func (s *customAPISrv) GetSupportTenantAccess(ctx context.Context, in *GetSupportTenantAccessReq) (*GetSupportTenantAccessResp, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.tenant_management.allowed_tenant.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *GetSupportTenantAccessResp
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.tenant_management.allowed_tenant.GetSupportTenantAccessReq", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.GetSupportTenantAccess' operation on 'allowed_tenant'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.tenant_management.allowed_tenant.CustomAPI.GetSupportTenantAccess"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetSupportTenantAccess(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.tenant_management.allowed_tenant.GetSupportTenantAccessResp", rsp)...)

	return rsp, nil
}
func (s *customAPISrv) UpdateSupportTenantAccess(ctx context.Context, in *UpdateSupportTenantAccessReq) (*UpdateSupportTenantAccessResp, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.tenant_management.allowed_tenant.CustomAPI")
	cah, ok := ah.(CustomAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomAPIServer", ah)
	}

	var (
		rsp *UpdateSupportTenantAccessResp
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.tenant_management.allowed_tenant.UpdateSupportTenantAccessReq", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomAPI.UpdateSupportTenantAccess' operation on 'allowed_tenant'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()
	if err := s.svc.CustomAPIProcessDRef(ctx, in); err != nil {
		return nil, err
	}

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.tenant_management.allowed_tenant.CustomAPI.UpdateSupportTenantAccess"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.UpdateSupportTenantAccess(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.tenant_management.allowed_tenant.UpdateSupportTenantAccessResp", rsp)...)

	return rsp, nil
}

func NewCustomAPIServer(svc svcfw.Service) CustomAPIServer {
	return &customAPISrv{svc: svc}
}

var CustomAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "Allowed Tenant",
        "description": "Additional public APIs for allowed_tenant config object.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {},
    "definitions": {
        "allowed_tenantAllowedAccessConfig": {
            "type": "object",
            "description": "x-displayName: \"Access Config\"\nShape for storing access config for a tenant.\ndefault field options - disable, read-only, read_write provided for easy acccess controls\nand underlying allowed groups corresponding to each usecase will be updated accordingly.\nmainly used for storing state for support related tenant access.",
            "title": "AccessConfig",
            "properties": {
                "custom": {
                    "description": "x-displayName: \"Custom Access\"\nUse custom if more granular access control is required.\nadmin has option to choose specific namespaces and corresponding roles that are allowed in that namespace.",
                    "title": "custom",
                    "$ref": "#/definitions/allowed_tenantCustomAccess"
                },
                "disable": {
                    "type": "boolean",
                    "description": "x-displayName: \"Disable Access\"\nby default access will be enabled.",
                    "title": "Disable",
                    "format": "boolean"
                },
                "read_only": {
                    "description": "x-displayName: \"Read Only\"\nUser will be able perform read operations into tenant in all namespaces.",
                    "title": "read_only",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "read_write_all": {
                    "description": "x-displayName: \"Read Write All\"\nUser will be able perform read and write operations into tenant in all namespaces.",
                    "title": "read_write_all",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "read_write_ns": {
                    "description": "x-displayName: \"Namespace Read Write Access\"\nSet list of namespaces if read write access needs to be retricted exact list of namesapces provided.",
                    "title": "read_write_ns",
                    "$ref": "#/definitions/allowed_tenantNsReadWriteAccess"
                }
            }
        },
        "allowed_tenantCustomAccess": {
            "type": "object",
            "description": "x-displayName: \"Custom Access\"\nshape of custom read write access control for support tenant access",
            "title": "CustomAccess",
            "properties": {
                "groups": {
                    "type": "array",
                    "description": "x-displayName: \"Groups\"\nList of references to groups entries.\nAdmin can use this option to set any custom user group thats already created under the tenant.",
                    "title": "groups",
                    "items": {
                        "$ref": "#/definitions/schemaviewsObjectRefType"
                    }
                }
            }
        },
        "allowed_tenantGetSupportTenantAccessResp": {
            "type": "object",
            "description": "x-displayName: \"Get Support Tenant Access Response\"\nResponse to get access control configurations for a support tenant.",
            "title": "GetSupportTenantAccessResp",
            "properties": {
                "access_config": {
                    "description": "x-displayName: \"Access Config\"\nAllowed access configuration details for the tenant.",
                    "title": "access_config",
                    "$ref": "#/definitions/allowed_tenantAllowedAccessConfig"
                }
            }
        },
        "allowed_tenantNsReadWriteAccess": {
            "type": "object",
            "description": "x-displayName: \"Namespce Read Write Access\"\nshape of read write access control for namespaces",
            "title": "NsReadWriteAccess",
            "properties": {
                "namespaces": {
                    "type": "array",
                    "description": "x-displayName: \"List of namespaces\"\nx-example: \"ns1\"\nList of namespace name read/write access needs to be restricted to.",
                    "title": "namespaces",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "allowed_tenantUpdateSupportTenantAccessReq": {
            "type": "object",
            "description": "x-displayName: \"Support Tenant Access Update Request\"\nRequest to update access control configurations for a support tenant.",
            "title": "UpdateSupportTenantAccessReq",
            "properties": {
                "access_config": {
                    "description": "x-displayName: \"Access Config\"\nAllowed access configuration details for the tenant.",
                    "title": "access_config",
                    "$ref": "#/definitions/allowed_tenantAllowedAccessConfig"
                },
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-example: \"l1-support\"\nwell-known name of the support tenant config object.",
                    "title": "Name"
                }
            }
        },
        "allowed_tenantUpdateSupportTenantAccessResp": {
            "type": "object",
            "description": "x-displayName: \"Support Tenant Access Update Response\"\nResponse to update access control configurations for a support tenant.",
            "title": "UpdateSupportTenantAccessResp",
            "properties": {
                "access_config": {
                    "description": "x-displayName: \"Access Config\"\nAllowed access configuration details for the tenant.",
                    "title": "access_config",
                    "$ref": "#/definitions/allowed_tenantAllowedAccessConfig"
                }
            }
        },
        "ioschemaEmpty": {
            "type": "object",
            "description": "x-displayName: \"Empty\"\nThis can be used for messages where no values are needed",
            "title": "Empty"
        },
        "schemaviewsObjectRefType": {
            "type": "object",
            "description": "x-displayName: \"Object reference\"\nThis type establishes a direct reference from one object(the referrer) to another(the referred).\nSuch a reference is in form of tenant/namespace/name",
            "title": "ObjectRefType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-example: \"contacts-route\"\nx-required\nWhen a configuration object(e.g. virtual_host) refers to another(e.g route)\nthen name will hold the referred object's(e.g. route's) name.",
                    "title": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": "x-displayName: \"Namespace\"\nx-example: \"ns1\"\nWhen a configuration object(e.g. virtual_host) refers to another(e.g route)\nthen namespace will hold the referred object's(e.g. route's) namespace.",
                    "title": "namespace"
                },
                "tenant": {
                    "type": "string",
                    "description": "x-displayName: \"Tenant\"\nx-example: \"acmecorp\"\nWhen a configuration object(e.g. virtual_host) refers to another(e.g route)\nthen tenant will hold the referred object's(e.g. route's) tenant.",
                    "title": "tenant"
                }
            }
        }
    },
    "x-displayname": "Allowed Tenant",
    "x-ves-proto-file": "ves.io/schema/tenant_management/allowed_tenant/public_customapi_uam.proto"
}`
