// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/tenant_management/allowed_tenant/types.proto

package allowed_tenant

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/tenant_management"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NsReadWriteAccess
//
// x-displayName: "Namespce Read Write Access"
// shape of read write access control for namespaces
type NsReadWriteAccess struct {
	// namespaces
	//
	// x-displayName: "List of namespaces"
	// x-example: "ns1"
	// List of namespace name read/write access needs to be restricted to.
	Namespaces []string `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
}

func (m *NsReadWriteAccess) Reset()      { *m = NsReadWriteAccess{} }
func (*NsReadWriteAccess) ProtoMessage() {}
func (*NsReadWriteAccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb65dc0b4627eaf6, []int{0}
}
func (m *NsReadWriteAccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NsReadWriteAccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NsReadWriteAccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NsReadWriteAccess.Merge(m, src)
}
func (m *NsReadWriteAccess) XXX_Size() int {
	return m.Size()
}
func (m *NsReadWriteAccess) XXX_DiscardUnknown() {
	xxx_messageInfo_NsReadWriteAccess.DiscardUnknown(m)
}

var xxx_messageInfo_NsReadWriteAccess proto.InternalMessageInfo

func (m *NsReadWriteAccess) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

// CustomAccess
//
// x-displayName: "Custom Access"
// shape of custom read write access control for support tenant access
type CustomAccess struct {
	// groups
	//
	// x-displayName: "Groups"
	// List of references to groups entries.
	// Admin can use this option to set any custom user group thats already created under the tenant.
	Groups []*views.ObjectRefType `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *CustomAccess) Reset()      { *m = CustomAccess{} }
func (*CustomAccess) ProtoMessage() {}
func (*CustomAccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb65dc0b4627eaf6, []int{1}
}
func (m *CustomAccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomAccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomAccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomAccess.Merge(m, src)
}
func (m *CustomAccess) XXX_Size() int {
	return m.Size()
}
func (m *CustomAccess) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomAccess.DiscardUnknown(m)
}

var xxx_messageInfo_CustomAccess proto.InternalMessageInfo

func (m *CustomAccess) GetGroups() []*views.ObjectRefType {
	if m != nil {
		return m.Groups
	}
	return nil
}

// AccessConfig
//
// x-displayName: "Access Config"
// Shape for storing access config for a tenant.
// default field options - disable, read-only, read_write provided for easy acccess controls
// and underlying allowed groups corresponding to each usecase will be updated accordingly.
// mainly used for storing state for support related tenant access.
type AllowedAccessConfig struct {
	// Disable
	//
	// x-displayName: "Disable Access"
	// by default access will be enabled.
	Disable bool `protobuf:"varint,1,opt,name=disable,proto3" json:"disable,omitempty"`
	// access_type_choice
	//
	// x-displayName: "Acess Type Configuration"
	// Choose what kind of access user from allowed tenant is allowed to perform.
	//
	// Types that are valid to be assigned to AccessTypeChoice:
	//	*AllowedAccessConfig_ReadOnly
	//	*AllowedAccessConfig_ReadWriteAll
	//	*AllowedAccessConfig_ReadWriteNs
	//	*AllowedAccessConfig_Custom
	AccessTypeChoice isAllowedAccessConfig_AccessTypeChoice `protobuf_oneof:"access_type_choice"`
}

func (m *AllowedAccessConfig) Reset()      { *m = AllowedAccessConfig{} }
func (*AllowedAccessConfig) ProtoMessage() {}
func (*AllowedAccessConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb65dc0b4627eaf6, []int{2}
}
func (m *AllowedAccessConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllowedAccessConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AllowedAccessConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedAccessConfig.Merge(m, src)
}
func (m *AllowedAccessConfig) XXX_Size() int {
	return m.Size()
}
func (m *AllowedAccessConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedAccessConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedAccessConfig proto.InternalMessageInfo

type isAllowedAccessConfig_AccessTypeChoice interface {
	isAllowedAccessConfig_AccessTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AllowedAccessConfig_ReadOnly struct {
	ReadOnly *schema.Empty `protobuf:"bytes,3,opt,name=read_only,json=readOnly,proto3,oneof" json:"read_only,omitempty"`
}
type AllowedAccessConfig_ReadWriteAll struct {
	ReadWriteAll *schema.Empty `protobuf:"bytes,4,opt,name=read_write_all,json=readWriteAll,proto3,oneof" json:"read_write_all,omitempty"`
}
type AllowedAccessConfig_ReadWriteNs struct {
	ReadWriteNs *NsReadWriteAccess `protobuf:"bytes,5,opt,name=read_write_ns,json=readWriteNs,proto3,oneof" json:"read_write_ns,omitempty"`
}
type AllowedAccessConfig_Custom struct {
	Custom *CustomAccess `protobuf:"bytes,6,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
}

func (*AllowedAccessConfig_ReadOnly) isAllowedAccessConfig_AccessTypeChoice()     {}
func (*AllowedAccessConfig_ReadWriteAll) isAllowedAccessConfig_AccessTypeChoice() {}
func (*AllowedAccessConfig_ReadWriteNs) isAllowedAccessConfig_AccessTypeChoice()  {}
func (*AllowedAccessConfig_Custom) isAllowedAccessConfig_AccessTypeChoice()       {}

func (m *AllowedAccessConfig) GetAccessTypeChoice() isAllowedAccessConfig_AccessTypeChoice {
	if m != nil {
		return m.AccessTypeChoice
	}
	return nil
}

func (m *AllowedAccessConfig) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

func (m *AllowedAccessConfig) GetReadOnly() *schema.Empty {
	if x, ok := m.GetAccessTypeChoice().(*AllowedAccessConfig_ReadOnly); ok {
		return x.ReadOnly
	}
	return nil
}

func (m *AllowedAccessConfig) GetReadWriteAll() *schema.Empty {
	if x, ok := m.GetAccessTypeChoice().(*AllowedAccessConfig_ReadWriteAll); ok {
		return x.ReadWriteAll
	}
	return nil
}

func (m *AllowedAccessConfig) GetReadWriteNs() *NsReadWriteAccess {
	if x, ok := m.GetAccessTypeChoice().(*AllowedAccessConfig_ReadWriteNs); ok {
		return x.ReadWriteNs
	}
	return nil
}

func (m *AllowedAccessConfig) GetCustom() *CustomAccess {
	if x, ok := m.GetAccessTypeChoice().(*AllowedAccessConfig_Custom); ok {
		return x.Custom
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AllowedAccessConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AllowedAccessConfig_ReadOnly)(nil),
		(*AllowedAccessConfig_ReadWriteAll)(nil),
		(*AllowedAccessConfig_ReadWriteNs)(nil),
		(*AllowedAccessConfig_Custom)(nil),
	}
}

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of allowed_tenant in the storage backend.
type GlobalSpecType struct {
	// tenant_id
	//
	// x-displayName: "Tenant ID"
	// x-example: "msp-apac-s4543dsa"
	// Specify the Tenant ID of the Original Tenant which is allowed to manage.
	// NOTE: this is the name of the tenant configuration obj. not UID.
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// allowed_groups
	//
	// x-displayName: "Allowed Groups"
	// List of references to allowed user_group objects for access in to tenant.
	// Admin can use this to control API access by users from from original tenant into an allowed tenant.
	// User access from original tenant into an allowed tenant will be associated to underlying roles in this user_group.
	AllowedGroups []*views.ObjectRefType `protobuf:"bytes,2,rep,name=allowed_groups,json=allowedGroups,proto3" json:"allowed_groups,omitempty"`
	// internal_config
	//
	// x-displayName: "Internal Config"
	// Allowed tenant access related configuration for system provided tenant management features.
	// For internal purposes only.
	//
	// Types that are valid to be assigned to InternalConfig:
	//	*GlobalSpecType_SupportTenant
	InternalConfig isGlobalSpecType_InternalConfig `protobuf_oneof:"internal_config"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb65dc0b4627eaf6, []int{3}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_InternalConfig interface {
	isGlobalSpecType_InternalConfig()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_SupportTenant struct {
	SupportTenant *AllowedAccessConfig `protobuf:"bytes,1001,opt,name=support_tenant,json=supportTenant,proto3,oneof" json:"support_tenant,omitempty"`
}

func (*GlobalSpecType_SupportTenant) isGlobalSpecType_InternalConfig() {}

func (m *GlobalSpecType) GetInternalConfig() isGlobalSpecType_InternalConfig {
	if m != nil {
		return m.InternalConfig
	}
	return nil
}

func (m *GlobalSpecType) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *GlobalSpecType) GetAllowedGroups() []*views.ObjectRefType {
	if m != nil {
		return m.AllowedGroups
	}
	return nil
}

func (m *GlobalSpecType) GetSupportTenant() *AllowedAccessConfig {
	if x, ok := m.GetInternalConfig().(*GlobalSpecType_SupportTenant); ok {
		return x.SupportTenant
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_SupportTenant)(nil),
	}
}

// Create Allowed Tenant
//
// x-displayName: "Create Allowed Tenant"
// Creates a allowed_tenant config instance. Name of the object is name of the tenant that is allowed to manage.
type CreateSpecType struct {
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	AllowedGroups []*views.ObjectRefType `protobuf:"bytes,2,rep,name=allowed_groups,json=allowedGroups,proto3" json:"allowed_groups,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb65dc0b4627eaf6, []int{4}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *CreateSpecType) GetAllowedGroups() []*views.ObjectRefType {
	if m != nil {
		return m.AllowedGroups
	}
	return nil
}

// Replace Allowed Tenant
//
// x-displayName: "Replace Allowed Tenant"
// Replaces attributes of a allowed_tenant instance including its metadata like labels, description etc.
type ReplaceSpecType struct {
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	AllowedGroups []*views.ObjectRefType `protobuf:"bytes,2,rep,name=allowed_groups,json=allowedGroups,proto3" json:"allowed_groups,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb65dc0b4627eaf6, []int{5}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *ReplaceSpecType) GetAllowedGroups() []*views.ObjectRefType {
	if m != nil {
		return m.AllowedGroups
	}
	return nil
}

// Get Allowed Tenant
//
// x-displayName: "Get Allowed Tenant"
// Get allowed_tenant reads a given object from storage backend for metadata.namespace.
type GetSpecType struct {
	TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	AllowedGroups []*views.ObjectRefType `protobuf:"bytes,2,rep,name=allowed_groups,json=allowedGroups,proto3" json:"allowed_groups,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb65dc0b4627eaf6, []int{6}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *GetSpecType) GetAllowedGroups() []*views.ObjectRefType {
	if m != nil {
		return m.AllowedGroups
	}
	return nil
}

func init() {
	proto.RegisterType((*NsReadWriteAccess)(nil), "ves.io.schema.tenant_management.allowed_tenant.NsReadWriteAccess")
	golang_proto.RegisterType((*NsReadWriteAccess)(nil), "ves.io.schema.tenant_management.allowed_tenant.NsReadWriteAccess")
	proto.RegisterType((*CustomAccess)(nil), "ves.io.schema.tenant_management.allowed_tenant.CustomAccess")
	golang_proto.RegisterType((*CustomAccess)(nil), "ves.io.schema.tenant_management.allowed_tenant.CustomAccess")
	proto.RegisterType((*AllowedAccessConfig)(nil), "ves.io.schema.tenant_management.allowed_tenant.AllowedAccessConfig")
	golang_proto.RegisterType((*AllowedAccessConfig)(nil), "ves.io.schema.tenant_management.allowed_tenant.AllowedAccessConfig")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.tenant_management.allowed_tenant.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.tenant_management.allowed_tenant.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.tenant_management.allowed_tenant.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.tenant_management.allowed_tenant.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.tenant_management.allowed_tenant.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.tenant_management.allowed_tenant.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.tenant_management.allowed_tenant.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.tenant_management.allowed_tenant.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/tenant_management/allowed_tenant/types.proto", fileDescriptor_fb65dc0b4627eaf6)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/tenant_management/allowed_tenant/types.proto", fileDescriptor_fb65dc0b4627eaf6)
}

var fileDescriptor_fb65dc0b4627eaf6 = []byte{
	// 794 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0x4f, 0x6f, 0xe3, 0x44,
	0x1c, 0xf5, 0xc4, 0xdb, 0x38, 0x9d, 0x6e, 0xb3, 0x5d, 0x2f, 0xd2, 0x9a, 0x2e, 0x1a, 0xb2, 0xbe,
	0x50, 0x44, 0x6b, 0x8b, 0x16, 0x38, 0xac, 0x56, 0x95, 0x9a, 0x0a, 0x35, 0xec, 0x61, 0x57, 0x72,
	0x57, 0x20, 0x71, 0xb1, 0x26, 0xf6, 0xc4, 0x35, 0x8c, 0x3d, 0x96, 0x67, 0x92, 0x92, 0xc3, 0x4a,
	0xfb, 0x11, 0xd0, 0x8a, 0x0f, 0x80, 0x38, 0x21, 0x0e, 0x20, 0xae, 0xe4, 0x92, 0x23, 0xda, 0x53,
	0x8e, 0x39, 0x52, 0xe7, 0x92, 0xdc, 0x2a, 0x3e, 0x01, 0xca, 0xd8, 0xa9, 0xf2, 0x87, 0x3f, 0xed,
	0x09, 0xb8, 0x79, 0xfc, 0x9b, 0xf7, 0x7b, 0x4f, 0xef, 0x3d, 0x69, 0xe0, 0xa3, 0x0e, 0xe1, 0x56,
	0xc8, 0x6c, 0xee, 0x9d, 0x91, 0x08, 0xdb, 0x82, 0xc4, 0x38, 0x16, 0x6e, 0x84, 0x63, 0x1c, 0x90,
	0x88, 0xc4, 0xc2, 0xc6, 0x94, 0xb2, 0x73, 0xe2, 0xbb, 0xf9, 0xc4, 0x16, 0xdd, 0x84, 0x70, 0x2b,
	0x49, 0x99, 0x60, 0xba, 0x95, 0x63, 0xad, 0x1c, 0x6b, 0xad, 0x60, 0xad, 0x45, 0xec, 0xf6, 0x5e,
	0x10, 0x8a, 0xb3, 0x76, 0xd3, 0xf2, 0x58, 0x64, 0x07, 0x2c, 0x60, 0xb6, 0x5c, 0xd3, 0x6c, 0xb7,
	0xe4, 0x49, 0x1e, 0xe4, 0x57, 0xbe, 0x7e, 0xfb, 0xc1, 0xa2, 0x34, 0x96, 0x88, 0x90, 0xc5, 0x05,
	0xf7, 0xf6, 0x7b, 0xff, 0xa4, 0x7b, 0x4e, 0xe8, 0xf6, 0x9b, 0x4b, 0x97, 0xe7, 0x46, 0x6f, 0x2d,
	0x8e, 0x3a, 0x98, 0x86, 0x3e, 0x16, 0xa4, 0x98, 0xd6, 0x96, 0xa6, 0x21, 0x39, 0x77, 0x17, 0x75,
	0xbc, 0xbd, 0x7a, 0x83, 0xcf, 0x13, 0x98, 0xa7, 0xf0, 0xee, 0x53, 0xee, 0x10, 0xec, 0x7f, 0x96,
	0x86, 0x82, 0x1c, 0x79, 0x1e, 0xe1, 0x5c, 0x3f, 0x84, 0x30, 0xc6, 0x11, 0xe1, 0x09, 0xf6, 0x08,
	0x37, 0x40, 0x4d, 0xdd, 0x59, 0xaf, 0xa3, 0x5f, 0x26, 0x7d, 0x15, 0xbe, 0x02, 0x9a, 0xb9, 0x96,
	0xaa, 0xc6, 0xcb, 0xd2, 0xfc, 0xf1, 0xdb, 0x12, 0x70, 0xe6, 0x10, 0xa6, 0x07, 0x6f, 0x1f, 0xb7,
	0xb9, 0x60, 0x51, 0xb1, 0xef, 0x14, 0x96, 0x83, 0x94, 0xb5, 0x93, 0x7c, 0xd7, 0xc6, 0xbe, 0xb9,
	0x14, 0x8d, 0x94, 0x65, 0x3d, 0x6b, 0x7e, 0x41, 0x3c, 0xe1, 0x90, 0xd6, 0xf3, 0x6e, 0x42, 0xea,
	0xf7, 0x7f, 0x78, 0x01, 0xdb, 0x9c, 0xa4, 0xae, 0x44, 0x4e, 0xd9, 0xd6, 0x5e, 0x81, 0xd2, 0x56,
	0xcd, 0x29, 0x56, 0x99, 0xdf, 0xa8, 0xf0, 0xde, 0x51, 0x9e, 0x60, 0x4e, 0x73, 0xcc, 0xe2, 0x56,
	0x18, 0xe8, 0x06, 0xd4, 0xfc, 0x90, 0xe3, 0x26, 0x25, 0x06, 0xa8, 0x81, 0x9d, 0x8a, 0x33, 0x3b,
	0xea, 0x07, 0x70, 0x3d, 0x25, 0xd8, 0x77, 0x59, 0x4c, 0xbb, 0x86, 0x5a, 0x03, 0x3b, 0x1b, 0xfb,
	0x6f, 0x2c, 0x29, 0xf9, 0x38, 0x4a, 0x44, 0xb7, 0xa1, 0x38, 0x95, 0xe9, 0xc5, 0x67, 0x31, 0xed,
	0xea, 0x8f, 0x61, 0x55, 0x82, 0xce, 0xa7, 0xfe, 0xb8, 0x98, 0x52, 0xe3, 0xd6, 0xdf, 0x22, 0x6f,
	0xa7, 0x57, 0x66, 0x52, 0xaa, 0x07, 0x70, 0x73, 0x0e, 0x1d, 0x73, 0x63, 0x4d, 0x82, 0x8f, 0x6e,
	0xd8, 0x4d, 0x6b, 0x25, 0xa3, 0x86, 0xe2, 0x6c, 0x5c, 0x31, 0x3d, 0xe5, 0xfa, 0xa7, 0xb0, 0xec,
	0x49, 0xcb, 0x8d, 0xb2, 0x64, 0x78, 0x7c, 0x53, 0x86, 0xf9, 0xc0, 0x1a, 0x8a, 0x53, 0x6c, 0xab,
	0xbf, 0x0b, 0x75, 0x2c, 0xff, 0xb9, 0xd3, 0xd6, 0xb8, 0xde, 0x19, 0x0b, 0x3d, 0xa2, 0xdf, 0xeb,
	0xf7, 0x80, 0x3a, 0xe8, 0x81, 0x52, 0xd6, 0x03, 0xda, 0xc1, 0xee, 0x07, 0xbb, 0x1f, 0xee, 0x7e,
	0xf4, 0xe4, 0x56, 0xa5, 0xb4, 0xa5, 0x9a, 0xaf, 0x4b, 0xb0, 0x7a, 0x42, 0x59, 0x13, 0xd3, 0xd3,
	0x84, 0x78, 0xd3, 0x28, 0xf5, 0x77, 0xe0, 0x7a, 0x41, 0x1f, 0xfa, 0x32, 0x93, 0xf5, 0x3a, 0x94,
	0x81, 0xca, 0x22, 0x39, 0x95, 0x7c, 0xf8, 0x89, 0xaf, 0x53, 0x58, 0x9d, 0xa9, 0x2a, 0xfa, 0x52,
	0xba, 0x76, 0x5f, 0x1e, 0xfe, 0x45, 0x5f, 0x66, 0x5f, 0x06, 0x70, 0x36, 0x8b, 0xe5, 0x27, 0x72,
	0xb7, 0xde, 0x81, 0x55, 0xde, 0x4e, 0x12, 0x96, 0x8a, 0xc2, 0x03, 0x63, 0xa2, 0x49, 0xef, 0x8e,
	0x6f, 0xea, 0xdd, 0x9f, 0xd4, 0xb0, 0xae, 0x0d, 0x5f, 0x80, 0x71, 0x0f, 0x80, 0x86, 0xe2, 0x6c,
	0x16, 0x34, 0xcf, 0xe5, 0xed, 0xfa, 0x43, 0x78, 0x27, 0x8c, 0x05, 0x49, 0x63, 0x4c, 0x5d, 0x2f,
	0xef, 0x6c, 0xb5, 0xdf, 0x03, 0x13, 0x6d, 0xd0, 0x03, 0x63, 0xed, 0xb2, 0x07, 0xc0, 0x93, 0x72,
	0x65, 0xac, 0x6d, 0x4d, 0x34, 0xf3, 0x47, 0x00, 0xab, 0xc7, 0x29, 0xc1, 0x82, 0x5c, 0x99, 0xf9,
	0x60, 0xc5, 0xcc, 0x7f, 0xcb, 0xc0, 0x47, 0x77, 0x5f, 0x1f, 0x2e, 0x45, 0x6d, 0xfe, 0x04, 0xe0,
	0x1d, 0x87, 0x24, 0x14, 0x7b, 0xff, 0x17, 0xc5, 0x3f, 0x03, 0xb8, 0x71, 0x42, 0xc4, 0x7f, 0x51,
	0xed, 0xfd, 0x15, 0xb5, 0xbf, 0x1f, 0xaa, 0xef, 0xef, 0xee, 0xd7, 0xbf, 0x03, 0x83, 0x0b, 0xa4,
	0x0c, 0x2f, 0x90, 0x72, 0x79, 0x81, 0xc0, 0xcb, 0x0c, 0x81, 0xef, 0x33, 0x04, 0x7e, 0xcd, 0x10,
	0x18, 0x64, 0x08, 0x0c, 0x33, 0x04, 0x7e, 0xcb, 0x10, 0x18, 0x67, 0x48, 0xb9, 0xcc, 0x10, 0xf8,
	0x7a, 0x84, 0x94, 0xfe, 0x08, 0x81, 0xc1, 0x08, 0x29, 0xc3, 0x11, 0x52, 0x3e, 0xf7, 0x03, 0x96,
	0x7c, 0x19, 0x58, 0x1d, 0x46, 0x05, 0x49, 0x53, 0x6c, 0xb5, 0xb9, 0x2d, 0x3f, 0x5a, 0x2c, 0x8d,
	0xf6, 0x92, 0x94, 0x75, 0x42, 0x9f, 0xa4, 0x7b, 0xb3, 0xb1, 0x9d, 0x34, 0x03, 0x66, 0x93, 0xaf,
	0x44, 0xf1, 0x86, 0x5c, 0xf3, 0x29, 0x6e, 0x96, 0xe5, 0x03, 0x73, 0xf0, 0x47, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x53, 0xc6, 0x33, 0x54, 0xc3, 0x07, 0x00, 0x00,
}

func (this *NsReadWriteAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NsReadWriteAccess)
	if !ok {
		that2, ok := that.(NsReadWriteAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	return true
}
func (this *CustomAccess) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomAccess)
	if !ok {
		that2, ok := that.(CustomAccess)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *AllowedAccessConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllowedAccessConfig)
	if !ok {
		that2, ok := that.(AllowedAccessConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Disable != that1.Disable {
		return false
	}
	if that1.AccessTypeChoice == nil {
		if this.AccessTypeChoice != nil {
			return false
		}
	} else if this.AccessTypeChoice == nil {
		return false
	} else if !this.AccessTypeChoice.Equal(that1.AccessTypeChoice) {
		return false
	}
	return true
}
func (this *AllowedAccessConfig_ReadOnly) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllowedAccessConfig_ReadOnly)
	if !ok {
		that2, ok := that.(AllowedAccessConfig_ReadOnly)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReadOnly.Equal(that1.ReadOnly) {
		return false
	}
	return true
}
func (this *AllowedAccessConfig_ReadWriteAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllowedAccessConfig_ReadWriteAll)
	if !ok {
		that2, ok := that.(AllowedAccessConfig_ReadWriteAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReadWriteAll.Equal(that1.ReadWriteAll) {
		return false
	}
	return true
}
func (this *AllowedAccessConfig_ReadWriteNs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllowedAccessConfig_ReadWriteNs)
	if !ok {
		that2, ok := that.(AllowedAccessConfig_ReadWriteNs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReadWriteNs.Equal(that1.ReadWriteNs) {
		return false
	}
	return true
}
func (this *AllowedAccessConfig_Custom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllowedAccessConfig_Custom)
	if !ok {
		that2, ok := that.(AllowedAccessConfig_Custom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Custom.Equal(that1.Custom) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if len(this.AllowedGroups) != len(that1.AllowedGroups) {
		return false
	}
	for i := range this.AllowedGroups {
		if !this.AllowedGroups[i].Equal(that1.AllowedGroups[i]) {
			return false
		}
	}
	if that1.InternalConfig == nil {
		if this.InternalConfig != nil {
			return false
		}
	} else if this.InternalConfig == nil {
		return false
	} else if !this.InternalConfig.Equal(that1.InternalConfig) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SupportTenant) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SupportTenant)
	if !ok {
		that2, ok := that.(GlobalSpecType_SupportTenant)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SupportTenant.Equal(that1.SupportTenant) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if len(this.AllowedGroups) != len(that1.AllowedGroups) {
		return false
	}
	for i := range this.AllowedGroups {
		if !this.AllowedGroups[i].Equal(that1.AllowedGroups[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if len(this.AllowedGroups) != len(that1.AllowedGroups) {
		return false
	}
	for i := range this.AllowedGroups {
		if !this.AllowedGroups[i].Equal(that1.AllowedGroups[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if len(this.AllowedGroups) != len(that1.AllowedGroups) {
		return false
	}
	for i := range this.AllowedGroups {
		if !this.AllowedGroups[i].Equal(that1.AllowedGroups[i]) {
			return false
		}
	}
	return true
}
func (this *NsReadWriteAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&allowed_tenant.NsReadWriteAccess{")
	s = append(s, "Namespaces: "+fmt.Sprintf("%#v", this.Namespaces)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomAccess) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&allowed_tenant.CustomAccess{")
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllowedAccessConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&allowed_tenant.AllowedAccessConfig{")
	s = append(s, "Disable: "+fmt.Sprintf("%#v", this.Disable)+",\n")
	if this.AccessTypeChoice != nil {
		s = append(s, "AccessTypeChoice: "+fmt.Sprintf("%#v", this.AccessTypeChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllowedAccessConfig_ReadOnly) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&allowed_tenant.AllowedAccessConfig_ReadOnly{` +
		`ReadOnly:` + fmt.Sprintf("%#v", this.ReadOnly) + `}`}, ", ")
	return s
}
func (this *AllowedAccessConfig_ReadWriteAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&allowed_tenant.AllowedAccessConfig_ReadWriteAll{` +
		`ReadWriteAll:` + fmt.Sprintf("%#v", this.ReadWriteAll) + `}`}, ", ")
	return s
}
func (this *AllowedAccessConfig_ReadWriteNs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&allowed_tenant.AllowedAccessConfig_ReadWriteNs{` +
		`ReadWriteNs:` + fmt.Sprintf("%#v", this.ReadWriteNs) + `}`}, ", ")
	return s
}
func (this *AllowedAccessConfig_Custom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&allowed_tenant.AllowedAccessConfig_Custom{` +
		`Custom:` + fmt.Sprintf("%#v", this.Custom) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&allowed_tenant.GlobalSpecType{")
	s = append(s, "TenantId: "+fmt.Sprintf("%#v", this.TenantId)+",\n")
	if this.AllowedGroups != nil {
		s = append(s, "AllowedGroups: "+fmt.Sprintf("%#v", this.AllowedGroups)+",\n")
	}
	if this.InternalConfig != nil {
		s = append(s, "InternalConfig: "+fmt.Sprintf("%#v", this.InternalConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_SupportTenant) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&allowed_tenant.GlobalSpecType_SupportTenant{` +
		`SupportTenant:` + fmt.Sprintf("%#v", this.SupportTenant) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&allowed_tenant.CreateSpecType{")
	s = append(s, "TenantId: "+fmt.Sprintf("%#v", this.TenantId)+",\n")
	if this.AllowedGroups != nil {
		s = append(s, "AllowedGroups: "+fmt.Sprintf("%#v", this.AllowedGroups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&allowed_tenant.ReplaceSpecType{")
	s = append(s, "TenantId: "+fmt.Sprintf("%#v", this.TenantId)+",\n")
	if this.AllowedGroups != nil {
		s = append(s, "AllowedGroups: "+fmt.Sprintf("%#v", this.AllowedGroups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&allowed_tenant.GetSpecType{")
	s = append(s, "TenantId: "+fmt.Sprintf("%#v", this.TenantId)+",\n")
	if this.AllowedGroups != nil {
		s = append(s, "AllowedGroups: "+fmt.Sprintf("%#v", this.AllowedGroups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *NsReadWriteAccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NsReadWriteAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NsReadWriteAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for iNdEx := len(m.Namespaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Namespaces[iNdEx])
			copy(dAtA[i:], m.Namespaces[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Namespaces[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CustomAccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AllowedAccessConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllowedAccessConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowedAccessConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccessTypeChoice != nil {
		{
			size := m.AccessTypeChoice.Size()
			i -= size
			if _, err := m.AccessTypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Disable {
		i--
		if m.Disable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AllowedAccessConfig_ReadOnly) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowedAccessConfig_ReadOnly) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReadOnly != nil {
		{
			size, err := m.ReadOnly.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *AllowedAccessConfig_ReadWriteAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowedAccessConfig_ReadWriteAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReadWriteAll != nil {
		{
			size, err := m.ReadWriteAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AllowedAccessConfig_ReadWriteNs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowedAccessConfig_ReadWriteNs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReadWriteNs != nil {
		{
			size, err := m.ReadWriteNs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *AllowedAccessConfig_Custom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowedAccessConfig_Custom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Custom != nil {
		{
			size, err := m.Custom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InternalConfig != nil {
		{
			size := m.InternalConfig.Size()
			i -= size
			if _, err := m.InternalConfig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.AllowedGroups) > 0 {
		for iNdEx := len(m.AllowedGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowedGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_SupportTenant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SupportTenant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SupportTenant != nil {
		{
			size, err := m.SupportTenant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedGroups) > 0 {
		for iNdEx := len(m.AllowedGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowedGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedGroups) > 0 {
		for iNdEx := len(m.AllowedGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowedGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedGroups) > 0 {
		for iNdEx := len(m.AllowedGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowedGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NsReadWriteAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for _, s := range m.Namespaces {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CustomAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *AllowedAccessConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disable {
		n += 2
	}
	if m.AccessTypeChoice != nil {
		n += m.AccessTypeChoice.Size()
	}
	return n
}

func (m *AllowedAccessConfig_ReadOnly) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReadOnly != nil {
		l = m.ReadOnly.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AllowedAccessConfig_ReadWriteAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReadWriteAll != nil {
		l = m.ReadWriteAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AllowedAccessConfig_ReadWriteNs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReadWriteNs != nil {
		l = m.ReadWriteNs.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AllowedAccessConfig_Custom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Custom != nil {
		l = m.Custom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AllowedGroups) > 0 {
		for _, e := range m.AllowedGroups {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.InternalConfig != nil {
		n += m.InternalConfig.Size()
	}
	return n
}

func (m *GlobalSpecType_SupportTenant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SupportTenant != nil {
		l = m.SupportTenant.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AllowedGroups) > 0 {
		for _, e := range m.AllowedGroups {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AllowedGroups) > 0 {
		for _, e := range m.AllowedGroups {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.AllowedGroups) > 0 {
		for _, e := range m.AllowedGroups {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NsReadWriteAccess) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NsReadWriteAccess{`,
		`Namespaces:` + fmt.Sprintf("%v", this.Namespaces) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomAccess) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGroups := "[]*ObjectRefType{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForGroups += "}"
	s := strings.Join([]string{`&CustomAccess{`,
		`Groups:` + repeatedStringForGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllowedAccessConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllowedAccessConfig{`,
		`Disable:` + fmt.Sprintf("%v", this.Disable) + `,`,
		`AccessTypeChoice:` + fmt.Sprintf("%v", this.AccessTypeChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllowedAccessConfig_ReadOnly) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllowedAccessConfig_ReadOnly{`,
		`ReadOnly:` + strings.Replace(fmt.Sprintf("%v", this.ReadOnly), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllowedAccessConfig_ReadWriteAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllowedAccessConfig_ReadWriteAll{`,
		`ReadWriteAll:` + strings.Replace(fmt.Sprintf("%v", this.ReadWriteAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllowedAccessConfig_ReadWriteNs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllowedAccessConfig_ReadWriteNs{`,
		`ReadWriteNs:` + strings.Replace(fmt.Sprintf("%v", this.ReadWriteNs), "NsReadWriteAccess", "NsReadWriteAccess", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllowedAccessConfig_Custom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllowedAccessConfig_Custom{`,
		`Custom:` + strings.Replace(fmt.Sprintf("%v", this.Custom), "CustomAccess", "CustomAccess", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAllowedGroups := "[]*ObjectRefType{"
	for _, f := range this.AllowedGroups {
		repeatedStringForAllowedGroups += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForAllowedGroups += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`AllowedGroups:` + repeatedStringForAllowedGroups + `,`,
		`InternalConfig:` + fmt.Sprintf("%v", this.InternalConfig) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SupportTenant) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SupportTenant{`,
		`SupportTenant:` + strings.Replace(fmt.Sprintf("%v", this.SupportTenant), "AllowedAccessConfig", "AllowedAccessConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAllowedGroups := "[]*ObjectRefType{"
	for _, f := range this.AllowedGroups {
		repeatedStringForAllowedGroups += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForAllowedGroups += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`AllowedGroups:` + repeatedStringForAllowedGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAllowedGroups := "[]*ObjectRefType{"
	for _, f := range this.AllowedGroups {
		repeatedStringForAllowedGroups += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForAllowedGroups += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`AllowedGroups:` + repeatedStringForAllowedGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAllowedGroups := "[]*ObjectRefType{"
	for _, f := range this.AllowedGroups {
		repeatedStringForAllowedGroups += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForAllowedGroups += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`AllowedGroups:` + repeatedStringForAllowedGroups + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NsReadWriteAccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NsReadWriteAccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NsReadWriteAccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomAccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomAccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomAccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &views.ObjectRefType{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllowedAccessConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllowedAccessConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllowedAccessConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadOnly", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AccessTypeChoice = &AllowedAccessConfig_ReadOnly{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadWriteAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AccessTypeChoice = &AllowedAccessConfig_ReadWriteAll{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadWriteNs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NsReadWriteAccess{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AccessTypeChoice = &AllowedAccessConfig_ReadWriteNs{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Custom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomAccess{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AccessTypeChoice = &AllowedAccessConfig_Custom{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedGroups = append(m.AllowedGroups, &views.ObjectRefType{})
			if err := m.AllowedGroups[len(m.AllowedGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportTenant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AllowedAccessConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.InternalConfig = &GlobalSpecType_SupportTenant{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedGroups = append(m.AllowedGroups, &views.ObjectRefType{})
			if err := m.AllowedGroups[len(m.AllowedGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedGroups = append(m.AllowedGroups, &views.ObjectRefType{})
			if err := m.AllowedGroups[len(m.AllowedGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedGroups = append(m.AllowedGroups, &views.ObjectRefType{})
			if err := m.AllowedGroups[len(m.AllowedGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
