// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/tenant_management/managed_tenant/public_customapi.proto

// Managed Tenant
//
// x-displayName: "Managed Tenant"
// Additional public APIs for managed_tenant config object.

package managed_tenant

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetManagedTenantListReq
//
// x-displayName: "Get Managed Tenant List Request"
// Request to get list of managed tenants
type GetManagedTenantListReq struct {
	// Search Keyword
	//
	// x-displayName: "SearchKeyword"
	// x-example: "value"
	// Search Keyword for filtering the Managed Tenant List.
	SearchKeyword string `protobuf:"bytes,1,opt,name=search_keyword,json=searchKeyword,proto3" json:"search_keyword,omitempty"`
	// Page Start
	//
	// x-displayName: "PageStart"
	// x-example: "c5776a8e-bcae-4392-98d3-3556f4b9df1b"
	// PageStart will hold the UUID of the first item in the requested page.
	// Response will contain items upto count specified in PageLimit starting from  PageStart.
	// If this is empty then first page will be served.
	PageStart string `protobuf:"bytes,2,opt,name=page_start,json=pageStart,proto3" json:"page_start,omitempty"`
	// Page Limit
	//
	// x-displayName: "PageLimit"
	// x-example: "100"
	// PageLimit will hold the limit of items required per query.
	// Default value is set as 100
	PageLimit int32 `protobuf:"varint,3,opt,name=page_limit,json=pageLimit,proto3" json:"page_limit,omitempty"`
}

func (m *GetManagedTenantListReq) Reset()      { *m = GetManagedTenantListReq{} }
func (*GetManagedTenantListReq) ProtoMessage() {}
func (*GetManagedTenantListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e784c86731a79d97, []int{0}
}
func (m *GetManagedTenantListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetManagedTenantListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetManagedTenantListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetManagedTenantListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetManagedTenantListReq.Merge(m, src)
}
func (m *GetManagedTenantListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetManagedTenantListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetManagedTenantListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetManagedTenantListReq proto.InternalMessageInfo

func (m *GetManagedTenantListReq) GetSearchKeyword() string {
	if m != nil {
		return m.SearchKeyword
	}
	return ""
}

func (m *GetManagedTenantListReq) GetPageStart() string {
	if m != nil {
		return m.PageStart
	}
	return ""
}

func (m *GetManagedTenantListReq) GetPageLimit() int32 {
	if m != nil {
		return m.PageLimit
	}
	return 0
}

// GetManagedTenantListResp
//
// x-displayName: "Get Managed Tenant Access Response"
// Response to get list of managed tenant access.
type GetManagedTenantListResp struct {
	// access_config
	//
	// x-displayName: "Access Config"
	// Allowed access configuration details for the tenant.
	AccessConfig []*AccessInfo `protobuf:"bytes,1,rep,name=access_config,json=accessConfig,proto3" json:"access_config,omitempty"`
	// total_access_config_count
	//
	// x-displayName: "TotalAccessConfigCount"
	// TotalAccessConfigCount holds total count of access config.
	TotalAccessConfigCount int32 `protobuf:"varint,2,opt,name=total_access_config_count,json=totalAccessConfigCount,proto3" json:"total_access_config_count,omitempty"`
	// next_page
	//
	// x-displayName: "NextPage"
	// NextPage contains the UUID of the first item of the next page.
	// This value can be passed back as the PageStart in the next request.
	// If this empty means current one is the last page.
	NextPage string `protobuf:"bytes,3,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
}

func (m *GetManagedTenantListResp) Reset()      { *m = GetManagedTenantListResp{} }
func (*GetManagedTenantListResp) ProtoMessage() {}
func (*GetManagedTenantListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e784c86731a79d97, []int{1}
}
func (m *GetManagedTenantListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetManagedTenantListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetManagedTenantListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetManagedTenantListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetManagedTenantListResp.Merge(m, src)
}
func (m *GetManagedTenantListResp) XXX_Size() int {
	return m.Size()
}
func (m *GetManagedTenantListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetManagedTenantListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetManagedTenantListResp proto.InternalMessageInfo

func (m *GetManagedTenantListResp) GetAccessConfig() []*AccessInfo {
	if m != nil {
		return m.AccessConfig
	}
	return nil
}

func (m *GetManagedTenantListResp) GetTotalAccessConfigCount() int32 {
	if m != nil {
		return m.TotalAccessConfigCount
	}
	return 0
}

func (m *GetManagedTenantListResp) GetNextPage() string {
	if m != nil {
		return m.NextPage
	}
	return ""
}

func init() {
	proto.RegisterType((*GetManagedTenantListReq)(nil), "ves.io.schema.tenant_management.managed_tenant.GetManagedTenantListReq")
	golang_proto.RegisterType((*GetManagedTenantListReq)(nil), "ves.io.schema.tenant_management.managed_tenant.GetManagedTenantListReq")
	proto.RegisterType((*GetManagedTenantListResp)(nil), "ves.io.schema.tenant_management.managed_tenant.GetManagedTenantListResp")
	golang_proto.RegisterType((*GetManagedTenantListResp)(nil), "ves.io.schema.tenant_management.managed_tenant.GetManagedTenantListResp")
}

func init() {
	proto.RegisterFile("ves.io/schema/tenant_management/managed_tenant/public_customapi.proto", fileDescriptor_e784c86731a79d97)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/tenant_management/managed_tenant/public_customapi.proto", fileDescriptor_e784c86731a79d97)
}

var fileDescriptor_e784c86731a79d97 = []byte{
	// 673 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0xbf, 0x6f, 0xd3, 0x4c,
	0x18, 0xc7, 0x73, 0x89, 0xfa, 0xbe, 0x6f, 0xfc, 0x52, 0x06, 0x0b, 0x81, 0x9b, 0x96, 0x23, 0x0a,
	0x02, 0x75, 0x20, 0x76, 0x7f, 0x4c, 0x94, 0xa9, 0xad, 0x50, 0xa9, 0x28, 0xa2, 0x0a, 0xb0, 0xb0,
	0x58, 0x67, 0xe7, 0x89, 0x63, 0x6a, 0xdf, 0x1d, 0x77, 0xe7, 0xb4, 0xd9, 0x50, 0x17, 0x26, 0x24,
	0x24, 0x76, 0xc4, 0x08, 0x7f, 0x43, 0x97, 0x6e, 0x30, 0xa1, 0x8a, 0x2e, 0x15, 0x13, 0x75, 0x18,
	0x18, 0xfb, 0x27, 0x20, 0x9f, 0x53, 0x29, 0x49, 0x8b, 0xd4, 0x4a, 0x1d, 0xd8, 0xee, 0x9e, 0xcf,
	0xf3, 0x7c, 0xfd, 0x7c, 0x1f, 0xdf, 0x9d, 0x71, 0xbf, 0x03, 0xd2, 0x0e, 0x99, 0x23, 0xfd, 0x36,
	0xc4, 0xc4, 0x51, 0x40, 0x09, 0x55, 0x6e, 0x4c, 0x28, 0x09, 0x20, 0x06, 0xaa, 0x9c, 0x7c, 0xd9,
	0x74, 0x73, 0xe2, 0xf0, 0xc4, 0x8b, 0x42, 0xdf, 0xf5, 0x13, 0xa9, 0x58, 0x4c, 0x78, 0x68, 0x73,
	0xc1, 0x14, 0x33, 0xed, 0x5c, 0xc6, 0xce, 0x65, 0xec, 0x13, 0x32, 0xf6, 0xb0, 0x4c, 0xa5, 0x1e,
	0x84, 0xaa, 0x9d, 0x78, 0xb6, 0xcf, 0x62, 0x27, 0x60, 0x01, 0x73, 0xb4, 0x8c, 0x97, 0xb4, 0xf4,
	0x4e, 0x6f, 0xf4, 0x2a, 0x97, 0xaf, 0x4c, 0x05, 0x8c, 0x05, 0x11, 0x38, 0x84, 0x87, 0x0e, 0xa1,
	0x94, 0x29, 0xa2, 0x42, 0x46, 0x65, 0x9f, 0x4e, 0x0e, 0x7b, 0x60, 0x7c, 0x10, 0x2e, 0x9c, 0xd3,
	0xa0, 0xea, 0x72, 0x38, 0xae, 0x9d, 0x18, 0xa9, 0x1d, 0x40, 0x53, 0xc3, 0xa8, 0x43, 0xa2, 0xb0,
	0x49, 0x14, 0xf4, 0x69, 0x6d, 0x84, 0x82, 0x04, 0xda, 0x19, 0x69, 0xac, 0x3a, 0x92, 0x13, 0xc2,
	0xa6, 0x3b, 0x9c, 0x71, 0xe3, 0x64, 0x86, 0x1c, 0x6c, 0xa2, 0xf6, 0x1a, 0x19, 0xd7, 0x56, 0x40,
	0x3d, 0xca, 0x1d, 0x3c, 0xd5, 0x06, 0xd6, 0x42, 0xa9, 0x1a, 0xf0, 0xd2, 0xbc, 0x65, 0x5c, 0x96,
	0x40, 0x84, 0xdf, 0x76, 0x37, 0xa0, 0xbb, 0xc9, 0x44, 0xd3, 0x42, 0x55, 0x34, 0x5d, 0x6e, 0x8c,
	0xe7, 0xd1, 0x87, 0x79, 0xd0, 0xbc, 0x6e, 0x18, 0x9c, 0x04, 0xe0, 0x4a, 0x45, 0x84, 0xb2, 0x8a,
	0x3a, 0xa5, 0x9c, 0x45, 0x9e, 0x64, 0x01, 0xf3, 0x76, 0x1f, 0x47, 0x61, 0x1c, 0x2a, 0xab, 0x54,
	0x45, 0xd3, 0x63, 0x4b, 0xff, 0x7e, 0xdf, 0x41, 0xa5, 0xd9, 0x99, 0x99, 0x3c, 0x6f, 0x2d, 0x23,
	0xb5, 0x7d, 0x64, 0x58, 0xa7, 0x77, 0x22, 0xb9, 0xe9, 0x1a, 0xe3, 0xc4, 0xf7, 0x41, 0x4a, 0xd7,
	0x67, 0xb4, 0x15, 0x06, 0x16, 0xaa, 0x96, 0xa6, 0xff, 0x9f, 0x5b, 0x38, 0xe7, 0xa1, 0xb1, 0x17,
	0xb5, 0xc8, 0x2a, 0x6d, 0xb1, 0xc6, 0xa5, 0x5c, 0x70, 0x59, 0xeb, 0x99, 0x77, 0x8d, 0x09, 0xc5,
	0x14, 0x89, 0xdc, 0xa1, 0xcf, 0xb8, 0x3e, 0x4b, 0x68, 0xee, 0x69, 0xac, 0x71, 0x55, 0x27, 0x2c,
	0x0e, 0x54, 0x2d, 0x67, 0xd4, 0x9c, 0x34, 0xca, 0x14, 0xb6, 0x94, 0x9b, 0x59, 0xd1, 0xfe, 0xca,
	0x8d, 0xff, 0xb2, 0xc0, 0x3a, 0x09, 0x60, 0xee, 0xcd, 0x98, 0x51, 0x5e, 0xd6, 0x27, 0x7d, 0x71,
	0x7d, 0xd5, 0xfc, 0x50, 0x34, 0xae, 0x9c, 0xe6, 0xd1, 0x5c, 0x39, 0xaf, 0x91, 0x3f, 0xfc, 0xb3,
	0xca, 0x83, 0x8b, 0x11, 0x92, 0xbc, 0x96, 0xa4, 0x9f, 0xad, 0x7b, 0x1d, 0x16, 0x29, 0x9f, 0x51,
	0xc9, 0x22, 0xa8, 0xe7, 0x05, 0xf5, 0x38, 0x88, 0x55, 0x5d, 0x00, 0x69, 0xde, 0xa9, 0x0e, 0x52,
	0x99, 0x70, 0xce, 0xc4, 0x00, 0xde, 0xde, 0xff, 0xf9, 0xae, 0x38, 0x63, 0xda, 0xfd, 0xfb, 0xee,
	0x50, 0x12, 0x83, 0xe4, 0xc4, 0x07, 0xe9, 0xc8, 0xae, 0x54, 0x10, 0x8f, 0x5c, 0x1b, 0xe9, 0x46,
	0xd9, 0x24, 0x3e, 0x15, 0x8d, 0xca, 0x69, 0x3d, 0x2d, 0x75, 0x9f, 0x49, 0x10, 0x7f, 0xe3, 0xa0,
	0xb6, 0x2e, 0x62, 0x50, 0xf3, 0xe6, 0xec, 0xd9, 0x07, 0xe5, 0x75, 0xdd, 0x44, 0x82, 0xa8, 0xcc,
	0xee, 0xee, 0xa0, 0xd2, 0xb7, 0x1d, 0x74, 0x73, 0xd8, 0xca, 0x48, 0xe3, 0x8f, 0xbd, 0x17, 0xe0,
	0xab, 0xed, 0xaf, 0x56, 0xb1, 0x8d, 0x96, 0xde, 0xa3, 0xbd, 0x43, 0x5c, 0x38, 0x38, 0xc4, 0x85,
	0xa3, 0x43, 0x8c, 0x5e, 0xa5, 0x18, 0x7d, 0x4c, 0x31, 0xfa, 0x92, 0x62, 0xb4, 0x97, 0x62, 0xf4,
	0x23, 0xc5, 0xe8, 0x57, 0x8a, 0x0b, 0x47, 0x29, 0x46, 0x6f, 0x7b, 0xb8, 0xb0, 0xdb, 0xc3, 0x68,
	0xaf, 0x87, 0x0b, 0x07, 0x3d, 0x5c, 0x78, 0xde, 0x0c, 0x18, 0xdf, 0x08, 0xec, 0xcc, 0x0b, 0x08,
	0x41, 0xec, 0x44, 0x3a, 0x7a, 0xd1, 0x62, 0x22, 0xae, 0x73, 0xc1, 0x3a, 0x61, 0x13, 0x44, 0xfd,
	0x18, 0x3b, 0xdc, 0x0b, 0x98, 0x03, 0x5b, 0xaa, 0xff, 0xf4, 0x9c, 0xf1, 0xf1, 0xf4, 0xfe, 0xd1,
	0xef, 0xd2, 0xfc, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0d, 0xb5, 0x6b, 0x52, 0x56, 0x06, 0x00,
	0x00,
}

func (this *GetManagedTenantListReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetManagedTenantListReq)
	if !ok {
		that2, ok := that.(GetManagedTenantListReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SearchKeyword != that1.SearchKeyword {
		return false
	}
	if this.PageStart != that1.PageStart {
		return false
	}
	if this.PageLimit != that1.PageLimit {
		return false
	}
	return true
}
func (this *GetManagedTenantListResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetManagedTenantListResp)
	if !ok {
		that2, ok := that.(GetManagedTenantListResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AccessConfig) != len(that1.AccessConfig) {
		return false
	}
	for i := range this.AccessConfig {
		if !this.AccessConfig[i].Equal(that1.AccessConfig[i]) {
			return false
		}
	}
	if this.TotalAccessConfigCount != that1.TotalAccessConfigCount {
		return false
	}
	if this.NextPage != that1.NextPage {
		return false
	}
	return true
}
func (this *GetManagedTenantListReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&managed_tenant.GetManagedTenantListReq{")
	s = append(s, "SearchKeyword: "+fmt.Sprintf("%#v", this.SearchKeyword)+",\n")
	s = append(s, "PageStart: "+fmt.Sprintf("%#v", this.PageStart)+",\n")
	s = append(s, "PageLimit: "+fmt.Sprintf("%#v", this.PageLimit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetManagedTenantListResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&managed_tenant.GetManagedTenantListResp{")
	if this.AccessConfig != nil {
		s = append(s, "AccessConfig: "+fmt.Sprintf("%#v", this.AccessConfig)+",\n")
	}
	s = append(s, "TotalAccessConfigCount: "+fmt.Sprintf("%#v", this.TotalAccessConfigCount)+",\n")
	s = append(s, "NextPage: "+fmt.Sprintf("%#v", this.NextPage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// GetManagedTenantList
	//
	// x-displayName: "Get List of Managed Tenant"
	// Get full list of managed tenants access details.
	// This response will contain full list of managed tenant based on the configuration
	// and is not filtered by requesting user's group membership that enable access.
	GetManagedTenantList(ctx context.Context, in *GetManagedTenantListReq, opts ...grpc.CallOption) (*GetManagedTenantListResp, error)
	// GetManagedTenantListByUser
	//
	// x-displayName: "Get List of Managed Tenant By User"
	// Get list of managed tenants that user have access to based on assingned membership.
	// This is an optimized list generated based on the requesting user's current group assignments
	// that will allow access to managed tenant.
	GetManagedTenantListByUser(ctx context.Context, in *GetManagedTenantListReq, opts ...grpc.CallOption) (*GetManagedTenantListResp, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) GetManagedTenantList(ctx context.Context, in *GetManagedTenantListReq, opts ...grpc.CallOption) (*GetManagedTenantListResp, error) {
	out := new(GetManagedTenantListResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant_management.managed_tenant.CustomAPI/GetManagedTenantList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetManagedTenantListByUser(ctx context.Context, in *GetManagedTenantListReq, opts ...grpc.CallOption) (*GetManagedTenantListResp, error) {
	out := new(GetManagedTenantListResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant_management.managed_tenant.CustomAPI/GetManagedTenantListByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// GetManagedTenantList
	//
	// x-displayName: "Get List of Managed Tenant"
	// Get full list of managed tenants access details.
	// This response will contain full list of managed tenant based on the configuration
	// and is not filtered by requesting user's group membership that enable access.
	GetManagedTenantList(context.Context, *GetManagedTenantListReq) (*GetManagedTenantListResp, error)
	// GetManagedTenantListByUser
	//
	// x-displayName: "Get List of Managed Tenant By User"
	// Get list of managed tenants that user have access to based on assingned membership.
	// This is an optimized list generated based on the requesting user's current group assignments
	// that will allow access to managed tenant.
	GetManagedTenantListByUser(context.Context, *GetManagedTenantListReq) (*GetManagedTenantListResp, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) GetManagedTenantList(ctx context.Context, req *GetManagedTenantListReq) (*GetManagedTenantListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagedTenantList not implemented")
}
func (*UnimplementedCustomAPIServer) GetManagedTenantListByUser(ctx context.Context, req *GetManagedTenantListReq) (*GetManagedTenantListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagedTenantListByUser not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_GetManagedTenantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagedTenantListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetManagedTenantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant_management.managed_tenant.CustomAPI/GetManagedTenantList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetManagedTenantList(ctx, req.(*GetManagedTenantListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetManagedTenantListByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagedTenantListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetManagedTenantListByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant_management.managed_tenant.CustomAPI/GetManagedTenantListByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetManagedTenantListByUser(ctx, req.(*GetManagedTenantListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.tenant_management.managed_tenant.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetManagedTenantList",
			Handler:    _CustomAPI_GetManagedTenantList_Handler,
		},
		{
			MethodName: "GetManagedTenantListByUser",
			Handler:    _CustomAPI_GetManagedTenantListByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/tenant_management/managed_tenant/public_customapi.proto",
}

func (m *GetManagedTenantListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetManagedTenantListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetManagedTenantListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageLimit != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.PageLimit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PageStart) > 0 {
		i -= len(m.PageStart)
		copy(dAtA[i:], m.PageStart)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.PageStart)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SearchKeyword) > 0 {
		i -= len(m.SearchKeyword)
		copy(dAtA[i:], m.SearchKeyword)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.SearchKeyword)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetManagedTenantListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetManagedTenantListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetManagedTenantListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPage) > 0 {
		i -= len(m.NextPage)
		copy(dAtA[i:], m.NextPage)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.NextPage)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TotalAccessConfigCount != 0 {
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(m.TotalAccessConfigCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AccessConfig) > 0 {
		for iNdEx := len(m.AccessConfig) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccessConfig[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetManagedTenantListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SearchKeyword)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.PageStart)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.PageLimit != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.PageLimit))
	}
	return n
}

func (m *GetManagedTenantListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccessConfig) > 0 {
		for _, e := range m.AccessConfig {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	if m.TotalAccessConfigCount != 0 {
		n += 1 + sovPublicCustomapi(uint64(m.TotalAccessConfigCount))
	}
	l = len(m.NextPage)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetManagedTenantListReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetManagedTenantListReq{`,
		`SearchKeyword:` + fmt.Sprintf("%v", this.SearchKeyword) + `,`,
		`PageStart:` + fmt.Sprintf("%v", this.PageStart) + `,`,
		`PageLimit:` + fmt.Sprintf("%v", this.PageLimit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetManagedTenantListResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAccessConfig := "[]*AccessInfo{"
	for _, f := range this.AccessConfig {
		repeatedStringForAccessConfig += strings.Replace(fmt.Sprintf("%v", f), "AccessInfo", "AccessInfo", 1) + ","
	}
	repeatedStringForAccessConfig += "}"
	s := strings.Join([]string{`&GetManagedTenantListResp{`,
		`AccessConfig:` + repeatedStringForAccessConfig + `,`,
		`TotalAccessConfigCount:` + fmt.Sprintf("%v", this.TotalAccessConfigCount) + `,`,
		`NextPage:` + fmt.Sprintf("%v", this.NextPage) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetManagedTenantListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetManagedTenantListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetManagedTenantListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchKeyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchKeyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageStart", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageStart = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageLimit", wireType)
			}
			m.PageLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetManagedTenantListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetManagedTenantListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetManagedTenantListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessConfig = append(m.AccessConfig, &AccessInfo{})
			if err := m.AccessConfig[len(m.AccessConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAccessConfigCount", wireType)
			}
			m.TotalAccessConfigCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalAccessConfigCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)
