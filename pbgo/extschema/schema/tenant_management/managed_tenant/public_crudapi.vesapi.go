//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package managed_tenant

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	google_protobuf "github.com/gogo/protobuf/types"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	multierror "github.com/hashicorp/go-multierror"
	"go.uber.org/zap"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/client/configapi"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/flags"
	"gopkg.volterra.us/stdlib/log"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

const (
	// CreateRequestFQN is the fully-qualified-name of the CreateRequest message
	CreateRequestFQN = "ves.io.schema.tenant_management.managed_tenant.CreateRequest"
	// CreateResponseFQN is the fully-qualified-name of the CreateResponse message
	CreateResponseFQN = "ves.io.schema.tenant_management.managed_tenant.CreateResponse"
	// ReplaceRequestFQN is the fully-qualified-name of the ReplaceRequest message
	ReplaceRequestFQN = "ves.io.schema.tenant_management.managed_tenant.ReplaceRequest"
	// ReplaceResponseFQN is the fully-qualified-name of the ReplaceResponse message
	ReplaceResponseFQN = "ves.io.schema.tenant_management.managed_tenant.ReplaceResponse"
	// GetRequestFQN is the fully-qualified-name of the GetRequest message
	GetRequestFQN = "ves.io.schema.tenant_management.managed_tenant.GetRequest"
	// GetResponseFQN is the fully-qualified-name of the GetResponse message
	GetResponseFQN = "ves.io.schema.tenant_management.managed_tenant.GetResponse"
	// ListRequestFQN is the fully-qualified-name of the ListRequest message
	ListRequestFQN = "ves.io.schema.tenant_management.managed_tenant.ListRequest"
	// ListResponseFQN is the fully-qualified-name of the ListResponse message
	ListResponseFQN = "ves.io.schema.tenant_management.managed_tenant.ListResponse"
	// DeleteRequestFQN is the fully-qualified-name of the DeleteRequest message
	DeleteRequestFQN = "ves.io.schema.tenant_management.managed_tenant.DeleteRequest"
	// DeleteResponseFQN is the fully-qualified-name of the DeleteResponse message
	DeleteResponseFQN = "ves.io.schema.tenant_management.managed_tenant.DeleteResponse"
)

// CLIENT side
func NewCreateRequest(e db.Entry) (*CreateRequest, error) {
	r := &CreateRequest{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	return r, nil
}

func NewReplaceRequest(e db.Entry) (*ReplaceRequest, error) {
	r := &ReplaceRequest{}
	if e == nil {
		return r, nil
	}
	r.FromObject(e)
	return r, nil
}

func NewGetRequest(key string, opts ...server.CRUDCallOpt) (*GetRequest, error) {
	strs := strings.Split(key, "/")
	if len(strs) != 2 {
		return nil, fmt.Errorf("key must have namespace and name separated by /, but found %s", key)
	}
	ccOpts := server.NewCRUDCallOpts()
	for _, o := range opts {
		o(ccOpts)
	}
	var rspFmt GetResponseFormatCode
	switch ccOpts.ResponseFormat {
	case server.DefaultForm:
		rspFmt = GET_RSP_FORMAT_DEFAULT
	case server.CreateRequestForm:
		rspFmt = GET_RSP_FORMAT_FOR_CREATE
	case server.ReplaceRequestForm:
		rspFmt = GET_RSP_FORMAT_FOR_REPLACE
	case server.StatusForm:
		rspFmt = GET_RSP_FORMAT_STATUS
	case server.GetSpecForm:
		rspFmt = GET_RSP_FORMAT_READ
	default:
		return nil, fmt.Errorf("Unsupported Response Format %s", ccOpts.ResponseFormat)
	}
	return &GetRequest{Namespace: strs[0], Name: strs[1], ResponseFormat: rspFmt}, nil
}
func (m *GetRequest) ResponseFormatString() string {
	return m.GetResponseFormat().String()
}

func NewListRequest(opts ...server.CRUDCallOpt) *ListRequest {
	ccOpts := server.NewCRUDCallOpts()
	for _, o := range opts {
		o(ccOpts)
	}
	return &ListRequest{Namespace: ccOpts.Namespace}
}

func NewDeleteRequest(key string) (*DeleteRequest, error) {
	strs := strings.Split(key, "/")
	if len(strs) != 2 {
		return nil, fmt.Errorf("key must have namespace and name separated by /, but found %s", key)
	}
	return &DeleteRequest{Namespace: strs[0], Name: strs[1]}, nil
}

// GRPC Client
type crudAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient APIClient
}

func (c *crudAPIGrpcClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *CreateRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*CreateRequest)
		if !ok {
			return nil, fmt.Errorf("%T is not *CreateRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Create")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return nil, err
			}
		}
	}

	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Create(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	obj := NewDBObject(nil)
	rsp.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rsp, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIGrpcClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *ReplaceRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*ReplaceRequest)
		if !ok {
			return fmt.Errorf("%T is not *ReplaceRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewReplaceRequest(e)
		if err != nil {
			return errors.Wrap(err, "Replace")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return err
			}
		}
	}

	ctx = client.AddHdrsToCtx(cco.Headers, ctx)
	req.ResourceVersion = cco.ResourceVersion

	rsp, err := c.grpcClient.Replace(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return nil

}

func (c *crudAPIGrpcClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}
	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Get(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIGrpcClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(obj)
		}
		return obj, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(respDetail.Entry)
		}
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}
	return nil, err

}

func (c *crudAPIGrpcClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIGrpcClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIGrpcClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	req := NewListRequest(opts...)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		req.LabelFilter = cco.LabelFilter[0]
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}
	req.ReportFields = cco.ReportFields
	req.ReportStatusFields = cco.ReportStatusFields
	rsp, err := c.grpcClient.List(ctx, req, cco.GrpcCallOpts...)
	if err != nil {
		return nil, err
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIGrpcClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIGrpcClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	req, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := c.grpcClient.Delete(ctx, req, cco.GrpcCallOpts...)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func NewCRUDAPIGrpcClient(cc *grpc.ClientConn) server.CRUDClient {
	ccl := &crudAPIGrpcClient{cc, NewAPIClient(cc)}
	return ccl
}

// REST Client
type crudAPIRestClient struct {
	baseURL string
	client  http.Client
}

func (c *crudAPIRestClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var req *CreateRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*CreateRequest)
		if !ok {
			return nil, fmt.Errorf("%T is not *CreateRequest", cco.RequestProto)
		}
		req = r
	} else {
		r, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new create request")
		}
		req = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, req); err != nil {
				return nil, err
			}
		}
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/managed_tenants", c.baseURL, req.Metadata.GetNamespace())
	jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
	if err != nil {
		return nil, errors.Wrap(err, "RestClient Create")
	}

	hReq, err := http.NewRequest("POST", url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	client.AddHdrsToReq(cco.Headers, hReq)
	hReq.Header.Set("Content-Type", "application/json")

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful POST at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}
	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient create")
	}

	rspo := &CreateResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	configapi.TranscribeCall(ctx, req, rspo)
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}

	obj := NewDBObject(nil)
	rspo.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rspo, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIRestClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	var rReq *ReplaceRequest
	if cco.RequestProto != nil {
		r, ok := cco.RequestProto.(*ReplaceRequest)
		if !ok {
			return fmt.Errorf("%T is not *ReplaceRequest", cco.RequestProto)
		}
		rReq = r
	} else {
		r, err := NewReplaceRequest(e)
		if err != nil {
			return errors.Wrap(err, "Creating new replace request")
		}
		rReq = r
		if cco.ObjToMsgConverter != nil {
			if err := cco.ObjToMsgConverter(e, rReq); err != nil {
				return err
			}
		}
	}

	got := 0
	if e != nil {
		got++
	}
	if cco.RequestProto != nil {
		got++
	}
	if cco.ReplaceJSONReq != "" {
		got++
	}
	if got != 1 {
		return fmt.Errorf("Only one of entry, WithRequestProto() or WithReplaceJSONRequest() should be specified")
	}
	if e == nil && cco.RequestProto == nil && cco.ReplaceJSONReq == "" {
		return fmt.Errorf("Neither entry nor WithRequestProto() nor WithReplaceJSONRequest() specified")
	}

	var jsn, namespace, name string
	var err error
	_ = namespace
	if e != nil || cco.RequestProto != nil {
		rReq.ResourceVersion = cco.ResourceVersion
		jsn, err = codec.ToJSON(rReq, codec.ToWithUseProtoFieldName())
		if err != nil {
			return errors.Wrap(err, "RestClient Replace")
		}
		namespace = rReq.GetMetadata().GetNamespace()
		name = rReq.GetMetadata().GetName()
	} else {
		jsn = cco.ReplaceJSONReq
		reqMap := make(map[string]interface{})
		if err := json.Unmarshal([]byte(jsn), &reqMap); err != nil {
			return errors.Wrapf(err, "Unmarshaling ReplaceJSONReq")
		}
		md, ok := reqMap["metadata"].(map[string]interface{})
		if !ok {
			return fmt.Errorf("ReplaceJSONReq does not have 'metadata'")
		}
		if val, ok := md["namespace"].(string); ok {
			namespace = val
		}
		if val, ok := md["name"].(string); ok {
			name = val
		}
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/managed_tenants/%s", c.baseURL, namespace, name)

	hReq, err := http.NewRequest(http.MethodPut, url, bytes.NewBuffer([]byte(jsn)))
	if err != nil {
		return errors.Wrap(err, "RestClient replace")
	}
	hReq = hReq.WithContext(ctx)
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return fmt.Errorf("Unsuccessful PUT at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}

	if _, err := ioutil.ReadAll(rsp.Body); err != nil {
		return errors.Wrap(err, "RestClient replace")
	}

	configapi.TranscribeCall(ctx, rReq, nil)
	return nil

}

func (c *crudAPIRestClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/managed_tenants/%s", c.baseURL, req.Namespace, req.Name)
	hReq, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	q := hReq.URL.Query()
	q.Add("response_format", fmt.Sprintf("%d", req.ResponseFormat))
	hReq.URL.RawQuery += q.Encode()

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful GET at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}
	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient Get")
	}

	rspo := &GetResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rspo.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	configapi.TranscribeCall(ctx, req, rspo)
	return rspo, nil
}

func (c *crudAPIRestClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(obj)
		}
		return obj, err
	}
	return nil, err

}

func (c *crudAPIRestClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(respDetail.Entry)
		}
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}

	return nil, err

}

func (c *crudAPIRestClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIRestClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIRestClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	req := NewListRequest(opts...)
	_ = req
	url := fmt.Sprintf("%s/public/namespaces/%s/managed_tenants", c.baseURL, req.Namespace)

	hReq, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	q := hReq.URL.Query()
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		q.Add("label_filter", cco.LabelFilter[0])
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}

	for _, fName := range cco.ReportFields {
		q.Add("report_fields", fName)
	}
	for _, fName := range cco.ReportStatusFields {
		q.Add("report_status_fields", fName)
	}

	hReq.URL.RawQuery += q.Encode()
	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()
	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful List at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}
	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "RestClient List")
	}

	rspo := &ListResponse{}
	if err := codec.FromJSON(string(body), rspo); err != nil {
		return nil, errors.Wrap(err, "Converting json to response protobuf message")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rspo
		cco.OutCallResponse.JSON = string(body)
	}
	configapi.TranscribeCall(ctx, req, rspo)
	return rspo, nil
}

func (c *crudAPIRestClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIRestClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	dReq, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	url := fmt.Sprintf("%s/public/namespaces/%s/managed_tenants/%s", c.baseURL, dReq.Namespace, dReq.Name)
	hReq, err := http.NewRequest(http.MethodDelete, url, nil)
	if err != nil {
		return errors.Wrap(err, "RestClient delete")
	}
	hReq = hReq.WithContext(ctx)

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	client.AddHdrsToReq(cco.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return err
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return fmt.Errorf("Unsuccessful DELETE at URL %s, status code %d, body %s, err %s", url, rsp.StatusCode, body, err)
	}

	_, err = ioutil.ReadAll(rsp.Body)
	if err != nil {
		return errors.Wrap(err, "RestClient delete")
	}
	configapi.TranscribeCall(ctx, dReq, nil)

	return nil

}

func NewCRUDAPIRestClient(baseURL string, cl http.Client) server.CRUDClient {
	crcl := &crudAPIRestClient{baseURL, cl}
	return crcl
}

// INPROC Client (satisfying APIClient interface)
type APIInprocClient struct {
	crudCl *crudAPIInprocClient
}

func (c *APIInprocClient) Create(ctx context.Context, req *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.tenant_management.managed_tenant.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.tenant_management.managed_tenant")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	rsp, err := oah.Create(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) Replace(ctx context.Context, req *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.tenant_management.managed_tenant.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.tenant_management.managed_tenant")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	if rsp, err := oah.Replace(ctx, req); err != nil {
		return rsp, err
	}
	return NewObjectReplaceRsp(nil)
}

func (c *APIInprocClient) Get(ctx context.Context, req *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.tenant_management.managed_tenant.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.tenant_management.managed_tenant")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	rsp, err := oah.Get(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) List(ctx context.Context, req *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.tenant_management.managed_tenant.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.tenant_management.managed_tenant")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	rsp, err := oah.List(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func (c *APIInprocClient) Delete(ctx context.Context, req *DeleteRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	ah := c.crudCl.svc.GetAPIHandler("ves.io.schema.tenant_management.managed_tenant.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		err := fmt.Errorf("No CRUD Server for ves.io.schema.tenant_management.managed_tenant")
		return nil, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}
	rsp, err := oah.Delete(ctx, req)
	if err != nil {
		return rsp, err
	}
	return rsp, nil
}

func NewAPIInprocClient(svc svcfw.Service) APIClient {
	crudCl := newCRUDAPIInprocClient(svc)
	return &APIInprocClient{crudCl}
}

// INPROC CRUD Client (satisfying server.CRUDClient interface)
type crudAPIInprocClient struct {
	svc svcfw.Service
}

func (c *crudAPIInprocClient) Create(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) (db.Entry, error) {

	ah := c.svc.GetAPIHandler("ves.io.schema.tenant_management.managed_tenant.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.tenant_management.managed_tenant")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewCreateRequest(e)
	if err != nil {
		return nil, errors.Wrap(err, "Creating new create request")
	}
	if cco.ObjToMsgConverter != nil {
		if err := cco.ObjToMsgConverter(e, req); err != nil {
			return nil, err
		}
	}

	rsp, err := oah.Create(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	if err != nil {
		return nil, err
	}
	obj := NewDBObject(nil)
	rsp.ToObject(obj)
	if cco.MsgToObjConverter != nil {
		if err := cco.MsgToObjConverter(rsp, obj); err != nil {
			return nil, err
		}
	}
	return obj, nil

}

func (c *crudAPIInprocClient) Replace(ctx context.Context, e db.Entry, opts ...server.CRUDCallOpt) error {

	ah := c.svc.GetAPIHandler("ves.io.schema.tenant_management.managed_tenant.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return fmt.Errorf("No CRUD Server for ves.io.schema.tenant_management.managed_tenant")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewReplaceRequest(e)
	if err != nil {
		return errors.Wrap(err, "Creating new replace request")
	}
	if cco.ObjToMsgConverter != nil {
		if err := cco.ObjToMsgConverter(e, req); err != nil {
			return err
		}
	}

	req.ResourceVersion = cco.ResourceVersion

	rsp, err := oah.Replace(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func (c *crudAPIInprocClient) GetRaw(ctx context.Context, key string, opts ...server.CRUDCallOpt) (*GetResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.tenant_management.managed_tenant.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.tenant_management.managed_tenant")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	req, err := NewGetRequest(key, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "Get")
	}
	rsp, err := oah.Get(ctx, req)
	if err != nil {
		return nil, err
	}
	if cco.OutResourceVersion != nil {
		*cco.OutResourceVersion = rsp.ResourceVersion
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func (c *crudAPIInprocClient) Get(ctx context.Context, key string, opts ...server.CRUDCallOpt) (db.Entry, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	if gRsp != nil {
		obj := NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(obj)
		}
		return obj, err
	}
	return nil, err

}

func (c *crudAPIInprocClient) GetDetail(ctx context.Context, key string, nef db.NewEntryFunc, opts ...server.CRUDCallOpt) (*server.GetResponse, error) {

	gRsp, err := c.GetRaw(ctx, key, opts...)
	respDetail := server.GetResponse{}
	if gRsp != nil {
		respDetail.Entry = NewDBObject(gRsp.Object)
		if gRsp.Object == nil {
			gRsp.ToObject(respDetail.Entry)
		}
		for _, status := range gRsp.Status {
			respDetail.BackRefs = append(respDetail.BackRefs, NewDBStatusObject(status))
		}

		return &respDetail, err
	}

	return nil, err

}

func (c *crudAPIInprocClient) ListIDs(ctx context.Context, opts ...server.CRUDCallOpt) ([]string, error) {

	idSet := []string{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return idSet, err
	}
	for _, li := range listRsp.GetItems() {
		idSet = append(idSet, li.GetUid())
	}
	return idSet, err

}

func (c *crudAPIInprocClient) ListItems(ctx context.Context, opts ...server.CRUDCallOpt) ([]server.ListItem, error) {

	sliSet := []server.ListItem{}
	listRsp, err := c.List(ctx, opts...)
	if listRsp == nil {
		return sliSet, err
	}
	for _, li := range listRsp.GetItems() {
		sliSet = append(sliSet, li)
	}
	return sliSet, err

}

func (c *crudAPIInprocClient) List(ctx context.Context, opts ...server.CRUDCallOpt) (*ListResponse, error) {
	ah := c.svc.GetAPIHandler("ves.io.schema.tenant_management.managed_tenant.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return nil, fmt.Errorf("No CRUD Server for ves.io.schema.tenant_management.managed_tenant")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req := NewListRequest(opts...)
	switch len(cco.LabelFilter) {
	case 0:
	case 1:
		req.LabelFilter = cco.LabelFilter[0]
	default:
		return nil, fmt.Errorf("Only one label selector expression can be provided, got %d: %s", len(cco.LabelFilter), cco.LabelFilter)
	}

	rsp, err := oah.List(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, err
}

func (c *crudAPIInprocClient) ListStream(ctx context.Context, opts ...server.CRUDCallOpt) (server.ListStreamRsp, error) {
	return nil, fmt.Errorf("Not implemented")
}

func (c *crudAPIInprocClient) Delete(ctx context.Context, key string, opts ...server.CRUDCallOpt) error {

	ah := c.svc.GetAPIHandler("ves.io.schema.tenant_management.managed_tenant.API")
	oah, ok := ah.(*APISrv)
	if !ok {
		return fmt.Errorf("No CRUD Server for ves.io.schema.tenant_management.managed_tenant")
	}

	cco := server.NewCRUDCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	req, err := NewDeleteRequest(key)
	if err != nil {
		return errors.Wrap(err, "Delete")
	}

	rsp, err := oah.Delete(ctx, req)

	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return err

}

func newCRUDAPIInprocClient(svc svcfw.Service) *crudAPIInprocClient {
	crcl := &crudAPIInprocClient{svc: svc}
	return crcl
}

func NewCRUDAPIInprocClient(svc svcfw.Service) server.CRUDClient {
	return newCRUDAPIInprocClient(svc)
}

// SERVER side
type APISrv struct {
	oType   string
	tblName string
	sf      svcfw.Service

	opts *server.CrudServerOpts
	// derived from opts
	apiWrapper *server.DBAPIWrapper

	// resource handler function pointers
}

func (s *APISrv) validateTransport(ctx context.Context) error {
	if s.sf.IsTransportNotSupported("ves.io.schema.tenant_management.managed_tenant.API", server.TransportFromContext(ctx)) {
		userMsg := fmt.Sprintf("ves.io.schema.tenant_management.managed_tenant.API not allowed in transport '%s'", server.TransportFromContext(ctx))
		err := svcfw.NewPermissionDeniedError(userMsg, fmt.Errorf(userMsg))
		return server.GRPCStatusFromError(err).Err()
	}
	return nil
}

func (s *APISrv) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if err := svcfw.FillOneofDefaultChoice(ctx, s.sf, req); err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.tenant_management.managed_tenant.API.Create"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.tenant_management.managed_tenant.API.Create"), zap.Error(err))
			}
		}
	}
	reqMsgFQN := "ves.io.schema.tenant_management.managed_tenant.CreateRequest"
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, reqMsgFQN, req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	obj := NewDBObject(nil)
	req.ToObject(obj)
	if conv, exists := s.sf.Config().MsgToObjConverters[reqMsgFQN]; exists {
		if err := conv(req, obj); err != nil {
			return nil, err
		}
	}
	obj.SystemMetadata = &ves_io_schema.SystemObjectMetaType{}
	rsrcReq := &server.ResourceCreateRequest{Entry: obj}
	rsrcRsp, err := s.opts.RsrcHandler.CreateFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "CreateResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectCreateRsp(rsrcRsp.Entry)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "CreateResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rspMsgFQN := "ves.io.schema.tenant_management.managed_tenant.CreateResponse"
	if conv, exists := s.sf.Config().ObjToMsgConverters[rspMsgFQN]; exists {
		if err := conv(rsrcRsp.Entry, rsp); err != nil {
			return nil, err
		}
	}
	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.sf, "ves.io.schema.tenant_management.managed_tenant.API.CreateResponse", rsp)...)
	return rsp, nil
}

func (s *APISrv) Replace(ctx context.Context, req *ReplaceRequest) (*ReplaceResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if req.Spec == nil {
		err := fmt.Errorf("Nil spec in Replace Request")
		return nil, svcfw.NewInvalidInputError(err.Error(), err)
	}
	if err := svcfw.FillOneofDefaultChoice(ctx, s.sf, req); err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.tenant_management.managed_tenant.API.Replace"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.tenant_management.managed_tenant.API.Replace"), zap.Error(err))
			}
		}
	}
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, "ves.io.schema.tenant_management.managed_tenant.API.ReplaceRequest", req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	rsrcReq := &server.ResourceReplaceRequest{RequestMsg: req}
	rsrcRsp, err := s.opts.RsrcHandler.ReplaceFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "ReplaceResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectReplaceRsp(rsrcRsp.Entry)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "ReplaceResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.sf, "ves.io.schema.tenant_management.managed_tenant.API.ReplaceResponse", rsp)...)
	return rsp, nil
}

func (s *APISrv) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.tenant_management.managed_tenant.API.Get"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}
	tenant := server.TenantFromContext(ctx)
	rsrcReq := &server.ResourceGetRequest{IsPublic: true, Tenant: tenant, Namespace: req.GetNamespace(), Name: req.GetName()}
	switch req.ResponseFormat {
	case GET_RSP_FORMAT_FOR_CREATE:
		rsrcReq.RspInCreateForm = true

	case GET_RSP_FORMAT_FOR_REPLACE:
		rsrcReq.RspInReplaceForm = true

	case GET_RSP_FORMAT_READ:
		rsrcReq.RspInReadForm = true

	case GET_RSP_FORMAT_STATUS:
		rsrcReq.RspInStatusForm = true

	case GET_RSP_FORMAT_REFERRING_OBJECTS:
		rsrcReq.RspInReferringObjectsForm = true

	}

	rsrcRsp, err := s.opts.RsrcHandler.GetFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "GetResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rsp, err := NewObjectGetRsp(ctx, s.sf, req, rsrcRsp)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "GetResponse"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	rspMsgFQN := "ves.io.schema.tenant_management.managed_tenant.GetResponse"
	if conv, exists := s.sf.Config().ObjToMsgConverters[rspMsgFQN]; exists {
		if err := conv(rsrcRsp.Entry, rsp); err != nil {
			return nil, err
		}
	}
	return rsp, nil
}

func (s *APISrv) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.tenant_management.managed_tenant.API.List"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}
	var merr *multierror.Error
	rsrcReq := &server.ResourceListRequest{
		Namespace:   req.Namespace,
		LabelFilter: req.LabelFilter,
		RspStreamed: false,
	}
	if len(req.ReportStatusFields) > 0 {
		rsrcReq.ReportStatusFields = &req.ReportStatusFields
	}
	rsrcRsp, err := s.opts.RsrcHandler.ListFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "ListResource"))
	}
	rsp, err := NewListResponse(ctx, req, s.sf, rsrcRsp)
	if err != nil {
		merr = multierror.Append(merr, errors.Wrap(err, "ListResponse allocation failed"))
	}
	if merr != nil {
		if rsp == nil {
			return nil, merr
		}
		rsp.Errors = append(rsp.Errors, &ves_io_schema.ErrorType{
			Code:    ves_io_schema.EINTERNAL,
			Message: merr.Error(),
		})

	}
	return rsp, nil
}

func (s *APISrv) Delete(ctx context.Context, req *DeleteRequest) (*google_protobuf.Empty, error) {
	if err := s.validateTransport(ctx); err != nil {
		return nil, err
	}
	if s.sf.Config().EnableAPIValidation {
		if rvFn := s.sf.GetRPCValidator("ves.io.schema.tenant_management.managed_tenant.API.Delete"); rvFn != nil {
			if err := rvFn(ctx, req); err != nil {
				if !server.NoReqValidateFromContext(ctx) {
					err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "Validating Request"))
					return nil, server.GRPCStatusFromError(err).Err()
				}
				s.sf.Logger().Warn(server.NoReqValidateAcceptLog, zap.String("rpc_fqn", "ves.io.schema.tenant_management.managed_tenant.API.Delete"), zap.Error(err))
			}
		}
	}
	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.sf, "ves.io.schema.tenant_management.managed_tenant.API.DeleteRequest", req)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
	}()

	tenant := server.TenantFromContext(ctx)
	key := fmt.Sprintf("%s/%s/%s", tenant, req.GetNamespace(), req.GetName())
	rsrcReq := &server.ResourceDeleteRequest{Key: key}
	rsrcReq.FailIfReferred = req.FailIfReferred
	_, err := s.opts.RsrcHandler.DeleteFn(ctx, rsrcReq, s.apiWrapper)
	if err != nil {
		err := server.MaybePublicRestError(ctx, errors.Wrapf(err, "DeleteResource"))
		return nil, server.GRPCStatusFromError(err).Err()
	}
	return &google_protobuf.Empty{}, nil
}

// Assert that APISrv implements the generated gRPC APIServer interface
var _ APIServer = &APISrv{}

func NewCRUDAPIServer(oType string, tblName string, sf svcfw.Service, opts ...server.CRUDServerOpt) (server.APIHandler, string) {
	// convert ves.io.examplesvc.objectone.Object to
	//         ves.io.examplesvc.objectone.API
	sl := strings.Split(oType, ".")
	csOpts := server.NewCRUDServerOpts()
	for _, o := range opts {
		o(csOpts)
	}
	wrapper := server.NewDBAPIWrapper(csOpts.APIWrapperOpts...)
	s := &APISrv{
		oType:      oType,
		tblName:    tblName,
		sf:         sf,
		opts:       csOpts,
		apiWrapper: wrapper,
	}
	return s, fmt.Sprintf("%s.API", strings.Join(sl[:len(sl)-1], "."))
}

func (r *Object) Key() string {
	m := r.GetMetadata()
	if m == nil {
		return ""
	}
	return strings.Join([]string{m.Namespace, m.Name}, "/")
}

func (r *Object) Uid() string {
	return r.SystemMetadata.Uid
}

func (r *ListResponse) GetKeys() []string {
	var ret []string
	for _, i := range r.Items {
		ret = append(ret, i.Namespace+"/"+i.Name)
	}
	return ret
}

// Implement server.SROListItem interface on ListResponseItem
func (l *ListResponseItem) GetObjUid() string {
	return l.Uid
}

func (l *ListResponseItem) GetObjTenant() string {
	return l.Tenant
}

func (l *ListResponseItem) GetObjNamespace() string {
	return l.Namespace
}

func (l *ListResponseItem) GetObjName() string {
	return l.Name
}

func (l *ListResponseItem) GetObjLabels() map[string]string {
	return l.Labels
}

func NewObjectCreateRsp(e db.Entry) (*CreateResponse, error) {
	switch e.(type) {
	case nil:
		return nil, nil
	case *DBObject:
		rsp := &CreateResponse{}
		rsp.FromObject(e)
		return rsp, nil
	}
	return nil, fmt.Errorf("Entry not of type *DBObject in NewObjectCreateRsp")
}

func NewObjectReplaceRsp(e db.Entry) (*ReplaceResponse, error) {
	return &ReplaceResponse{}, nil
}

func NewObjectGetRsp(ctx context.Context, sf svcfw.Service, req *GetRequest, rsrcRsp *server.ResourceGetResponse) (*GetResponse, error) {
	rsp := &GetResponse{}
	e := rsrcRsp.Entry
	if e == nil {
		return rsp, nil
	}
	o, ok := e.(*DBObject)
	if !ok {
		return nil, fmt.Errorf("entry not of type *DBObject in NewObjectGetRsp")
	}

	rsp.ResourceVersion = rsrcRsp.ResourceVersion
	var merr *multierror.Error
	buildReadForm := func() {
		rsp.Metadata = &ves_io_schema.ObjectGetMetaType{}
		rsp.Metadata.FromObjectMetaType(o.Metadata)
		rsp.SystemMetadata = &ves_io_schema.SystemObjectGetMetaType{}
		rsp.SystemMetadata.FromSystemObjectMetaType(o.SystemMetadata)
		rsp.Spec = &GetSpecType{}
		rsp.Spec.FromGlobalSpecType(o.Spec.GcSpec)

	}
	_ = buildReadForm
	buildStatusForm := func() {
		for _, statusEnt := range rsrcRsp.BackRefs {
			statusObj, ok := statusEnt.ToStore().(*StatusObject)
			if !ok {
				merr = multierror.Append(merr, fmt.Errorf("%T is not *StatusObject", statusEnt))
				continue
			}
			rsp.Status = append(rsp.Status, statusObj)
		}

	}
	_ = buildStatusForm
	buildReferringObjectsForm := func() {
		for _, br := range rsrcRsp.ReferringObjects {
			rsp.ReferringObjects = append(rsp.ReferringObjects, &ves_io_schema.ObjectRefType{
				Kind:      db.KindForEntryType(br.Type),
				Uid:       br.UID,
				Tenant:    br.Tenant,
				Namespace: br.Namespace,
				Name:      br.Name,
			})
		}

	}
	_ = buildReferringObjectsForm

	switch req.ResponseFormat {

	case GET_RSP_FORMAT_FOR_CREATE:
		createReq, err := NewCreateRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Building CreateRequest from entry")
		}
		// Name has to be specified for a new create
		createReq.Metadata.Name = ""
		rsp.CreateForm = createReq

	case GET_RSP_FORMAT_FOR_REPLACE:
		replaceReq, err := NewReplaceRequest(e)
		if err != nil {
			return nil, errors.Wrap(err, "Building ReplaceRequest from entry")
		}
		rsp.ReplaceForm = replaceReq

	case GET_RSP_FORMAT_STATUS:
		buildStatusForm()

	case GET_RSP_FORMAT_READ:
		buildReadForm()

	case GET_RSP_FORMAT_REFERRING_OBJECTS:
		buildReferringObjectsForm()

	default:
		noDBForm, _ := flags.GetEnvGetRspNoDBForm()
		if !noDBForm {
			rsp.Object = o.Object
			sf.Logger().Alert(svcfw.GetResponseInDBForm,
				log.MinorAlert,
				zap.String("user", server.UserFromContext(ctx)),
				zap.String("useragent", server.UseragentStrFromContext(ctx)),
				zap.String("operation", "Get"),
			)
			buildReadForm()

		} else {
			buildReadForm()

		}
		buildStatusForm()
	}

	return rsp, errors.ErrOrNil(merr)
}

func NewListResponse(ctx context.Context, req *ListRequest, sf svcfw.Service, rsrcRsp *server.ResourceListResponse) (*ListResponse, error) {
	if req == nil {
		return nil, fmt.Errorf("Nil ListRequest")
	}
	if rsrcRsp == nil {
		return nil, fmt.Errorf("Nil ResourceResponse")
	}

	errStrs := []string{}
	resp := &ListResponse{}
	resp.Items = []*ListResponseItem{}

	for _, rsrcItem := range rsrcRsp.Items {
		if rsrcItem == nil {
			errStrs = append(errStrs, fmt.Sprintf("Nil ResourceListResponseItem"))
			continue
		}

		e := rsrcItem.Entry
		o, ok := e.(*DBObject)
		if !ok {
			resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
				Code:    ves_io_schema.EINTERNAL,
				Message: fmt.Sprintf("Entry %T not of type *DBObject in NewListResponse", e),
			})

			continue
		}
		item := &ListResponseItem{
			Tenant:    o.GetSystemMetadata().GetTenant(),
			Namespace: o.GetMetadata().GetNamespace(),
			Name:      o.GetMetadata().GetName(),
			Uid:       o.GetMetadata().GetUid(),
			OwnerView: o.GetSystemMetadata().GetOwnerView(),
			Labels:    o.GetMetadata().GetLabels(),
		}

		item.Description = o.GetMetadata().GetDescription()
		item.Annotations = o.GetMetadata().GetAnnotations()
		item.Disabled = o.GetMetadata().GetDisable()

		if len(req.ReportFields) > 0 {
			noDBForm, _ := flags.GetEnvGetRspNoDBForm()
			if !noDBForm {
				item.Object = o.Object
				sf.Logger().Alert(svcfw.GetResponseInDBForm,
					log.MinorAlert,
					zap.String("user", server.UserFromContext(ctx)),
					zap.String("useragent", server.UseragentStrFromContext(ctx)),
					zap.String("operation", "List"),
				)
			}

			item.Metadata = &ves_io_schema.ObjectGetMetaType{}
			item.Metadata.FromObjectMetaType(o.Metadata)
			item.SystemMetadata = &ves_io_schema.SystemObjectGetMetaType{}
			item.SystemMetadata.FromSystemObjectMetaType(o.SystemMetadata)

			if o.Object != nil && o.Object.GetSpec().GetGcSpec() != nil {
				msgFQN := "ves.io.schema.tenant_management.managed_tenant.GetResponse"
				if conv, exists := sf.Config().ObjToMsgConverters[msgFQN]; exists {
					getSpec := &GetSpecType{}
					getSpec.FromGlobalSpecType(o.Spec.GcSpec)
					getRsp := &GetResponse{Spec: getSpec}
					if err := conv(o, getRsp); err != nil {
						resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
							Code:    ves_io_schema.EINTERNAL,
							Message: fmt.Sprintf("Converting entry to getResponse: %s", err),
						})

						continue
					}
					item.GetSpec = getRsp.Spec
				} else {
					item.GetSpec = &GetSpecType{}
					item.GetSpec.FromGlobalSpecType(o.Spec.GcSpec)
				}
			}

		}

		if len(req.ReportStatusFields) > 0 {
			for _, sroStatus := range rsrcItem.StatusSet {
				statusDBO, ok := sroStatus.(*DBStatusObject)
				if !ok {
					resp.Errors = append(resp.Errors, &ves_io_schema.ErrorType{
						Code:    ves_io_schema.EINTERNAL,
						Message: fmt.Sprintf("sro.Status %T is not of type *DBStatusObject in NewListResponse", sroStatus),
					})

					continue
				}
				item.StatusSet = append(item.StatusSet, statusDBO.StatusObject)
			}
		}

		resp.Items = append(resp.Items, item)
	}
	return resp, nil
}

func RegisterGwAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterAPIHandlerClient(ctx, mux, NewAPIInprocClient(s))
}

var APISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "managed tenant object",
        "description": "\nManaged tenant objects are required for declaring intent to manage a tenant.\nThe tenant which is being managed is called a -Managed Tenant- or -MT-- and\nthe tenant which is initiating the management is called -Original Tenant- or -OT-.\n\nA tenant can manage one or more tenants and tenant itself could be managed by other allowed tenant.\nExplicit configuration is required to establish or allow management - ie, request to manage via\nmanaged_tenant object configuration in OT and allowed to manage declaration via allowed_tenant \nconfiguration in MT. This means reflexive and transitive relation are *NOT* supported or\nsuch assumptions cannot be made.\n  Reflexive - tenant A (OT) -\u003e tenant B (MT) ==\u003e Tenant B manage Tenant A\n  Transitive - tenant A (OT) -\u003e tenant B (MT) , tenant B (OT) -\u003e tenant C (MT) ==\u003e Tenant A manage Tenant C\n\nWhile creating a managed_tenant configuration object, admin can choose existing\nuser group instance from the tenant and map it to groups in the managed tenant by specifying\nmanaged tenant's group names. User in original tenant needs to be member of group specified in managed_tenant\nconfiguration. Access into managed tenant will be granted once admin of managed tenant creates an allowed tenant\nconfiguration including one or more groups specified in managed_tenant configuration.\nUntil admin of an MT creates corresponding allowed_tenant configuration, RBAC will deny access.\n\nWhen User from OT tries to access managed tenant, group memberships will be taken from OT and\ncorresponding groups will be identified via the map configuration; and underlying roles for each\nmapped group will be looked up from managed_tenant (MT) and evaluated for the API access.\n\nThis gives admin of managed tenant ability to have granular RBAC(Role Based Access Control) for all\nuser access from original tenant and admin of original tenant to control which user has access into\nwhich managed tenant based on group assignment/membership.\n\nThis feature may not be enabled by default and will require subscribing to additional addon service\n-Tenant Manangement- depending upon the tenant's plan",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {},
    "definitions": {
        "ioschemaEmpty": {
            "type": "object",
            "description": "x-displayName: \"Empty\"\nThis can be used for messages where no values are needed",
            "title": "Empty"
        },
        "ioschemaObjectRefType": {
            "type": "object",
            "description": "x-displayName: \"Object reference\"\nThis type establishes a 'direct reference' from one object(the referrer) to another(the referred).\nSuch a reference is in form of tenant/namespace/name for public API and Uid for private API\nThis type of reference is called direct because the relation is explicit and concrete (as opposed\nto selector reference which builds a group based on labels of selectee objects)",
            "title": "ObjectRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "x-displayName: \"Kind\"\nx-example: \"virtual_site\"\nWhen a configuration object(e.g. virtual_host) refers to another(e.g route)\nthen kind will hold the referred object's kind (e.g. \"route\")",
                    "title": "kind"
                },
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-example: \"contactus-route\"\nWhen a configuration object(e.g. virtual_host) refers to another(e.g route)\nthen name will hold the referred object's(e.g. route's) name.",
                    "title": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": "x-displayName: \"Namespace\"\nx-example: \"ns1\"\nWhen a configuration object(e.g. virtual_host) refers to another(e.g route)\nthen namespace will hold the referred object's(e.g. route's) namespace.",
                    "title": "namespace"
                },
                "tenant": {
                    "type": "string",
                    "description": "x-displayName: \"Tenant\"\nx-example: \"acmecorp\"\nWhen a configuration object(e.g. virtual_host) refers to another(e.g route)\nthen tenant will hold the referred object's(e.g. route's) tenant.",
                    "title": "tenant"
                },
                "uid": {
                    "type": "string",
                    "description": "x-displayName: \"UID\"\nx-example: \"d15f1fad-4d37-48c0-8706-df1824d76d31\"\nWhen a configuration object(e.g. virtual_host) refers to another(e.g route)\nthen uid will hold the referred object's(e.g. route's) uid.",
                    "title": "uid"
                }
            }
        },
        "managed_tenantCreateRequest": {
            "type": "object",
            "description": "x-displayName: \"Create Request\"\nThis is the input message of the 'Create' RPC",
            "title": "CreateRequest is used to create an instance of managed_tenant",
            "properties": {
                "metadata": {
                    "description": "x-displayName: \"Metadata\"\nCommon attributes that can be set during create for all configuration objects like name, labels etc.",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectCreateMetaType"
                },
                "spec": {
                    "description": "x-displayName: \"Spec\"\nA specification of the configuration object to be created",
                    "title": "spec",
                    "$ref": "#/definitions/managed_tenantCreateSpecType"
                }
            }
        },
        "managed_tenantCreateResponse": {
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "x-displayName: \"Metadata\"\nCommon attributes of the object like name, labels etc.",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType"
                },
                "spec": {
                    "description": "x-displayName: \"Spec\"\nA specification of the configuration object created",
                    "title": "spec",
                    "$ref": "#/definitions/managed_tenantGetSpecType"
                },
                "system_metadata": {
                    "description": "x-displayName: \"System Metadata\"\nSystem generated attributes all this object.",
                    "title": "system metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType"
                }
            }
        },
        "managed_tenantCreateSpecType": {
            "type": "object",
            "description": "x-displayName: \"Create Managed Tenant\"\nCreates a managed_tenant config instance. Name of the object is name of the tenant that is allowed to manage.",
            "title": "Create Managed Tenant",
            "properties": {
                "all_tenants": {
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/managed_tenantGroupAssignmentType"
                    }
                },
                "tenant_id": {
                    "type": "string"
                },
                "tenant_regex": {
                    "type": "string"
                }
            }
        },
        "managed_tenantDeleteRequest": {
            "type": "object",
            "description": "x-displayName: \"Delete Request\"\nThis is the input message of the 'Delete' RPC.",
            "title": "DeleteRequest is used to delete a managed_tenant",
            "properties": {
                "fail_if_referred": {
                    "type": "boolean",
                    "description": "x-displayName: \"Fail-If-Referred\"\nFail the delete operation if this object is being referred by other objects",
                    "title": "fail_if_referred",
                    "format": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-example: \"name\"\nName of the configuration object",
                    "title": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": "x-displayName: \"Namespace\"\nx-example: \"ns1\"\nNamespace in which the configuration object is present",
                    "title": "namespace"
                }
            }
        },
        "managed_tenantGetResponse": {
            "type": "object",
            "description": "x-displayName: \"Get Response\"\nThis is the output message of the 'Get' RPC",
            "title": "GetResponse is the shape of a read managed_tenant",
            "properties": {
                "create_form": {
                    "description": "x-displayName: \"CreateRequest Format\"\nFormat used to create a new similar object",
                    "title": "create_form",
                    "$ref": "#/definitions/managed_tenantCreateRequest"
                },
                "metadata": {
                    "description": "x-displayName: \"Metadata\"\nCommon attributes of the object like name, labels etc.",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType"
                },
                "object": {
                    "description": "x-displayName: \"Object\"",
                    "title": "object",
                    "$ref": "#/definitions/managed_tenantObject"
                },
                "referring_objects": {
                    "type": "array",
                    "description": "x-displayName: \"Referring Objects\"\nThe set of objects that are referring to this object in their spec",
                    "title": "referring_objects",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    }
                },
                "replace_form": {
                    "description": "x-displayName: \"ReplaceRequest Format\"\nFormat to replace changeable values in object",
                    "title": "replace_form",
                    "$ref": "#/definitions/managed_tenantReplaceRequest"
                },
                "resource_version": {
                    "type": "string",
                    "description": "x-displayName: \"Resource Version\"\nx-example: \"42\"\nVersion of the object",
                    "title": "resource_version"
                },
                "spec": {
                    "description": "x-displayName: \"Spec\"\nA specification of the configuration object read",
                    "title": "spec",
                    "$ref": "#/definitions/managed_tenantGetSpecType"
                },
                "status": {
                    "type": "array",
                    "description": "x-displayName: \"Status\"\nThe status reported by different services for this configuration object",
                    "title": "status",
                    "items": {
                        "$ref": "#/definitions/managed_tenantStatusObject"
                    }
                },
                "system_metadata": {
                    "description": "x-displayName: \"System Metadata\"\nSystem generated attributes of this object.",
                    "title": "system metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType"
                }
            }
        },
        "managed_tenantGetResponseFormatCode": {
            "type": "string",
            "description": "x-displayName: \"Get Response Format\"\nThis is the various forms that can be requested to be sent in the GetResponse\n\n - GET_RSP_FORMAT_DEFAULT: x-displayName: \"Default Format\"\nDefault format of returned resource\n - GET_RSP_FORMAT_FOR_CREATE: x-displayName: \"Create request Format\"\nResponse should be in CreateRequest format\n - GET_RSP_FORMAT_FOR_REPLACE: x-displayName: \"Replace request format\"\nResponse should be in ReplaceRequest format\n - GET_RSP_FORMAT_STATUS: x-displayName: \"Status format\"\nResponse should be in StatusObject(s) format\n - GET_RSP_FORMAT_READ: x-displayName: \"GetSpecType format\"\nResponse should be in format of GetSpecType\n - GET_RSP_FORMAT_REFERRING_OBJECTS: x-displayName: \"Referring Objects\"\nResponse should have other objects referring to this object",
            "title": "GetResponseFormatCode",
            "enum": [
                "GET_RSP_FORMAT_DEFAULT",
                "GET_RSP_FORMAT_FOR_CREATE",
                "GET_RSP_FORMAT_FOR_REPLACE",
                "GET_RSP_FORMAT_STATUS",
                "GET_RSP_FORMAT_READ",
                "GET_RSP_FORMAT_REFERRING_OBJECTS"
            ],
            "default": "GET_RSP_FORMAT_DEFAULT"
        },
        "managed_tenantGetSpecType": {
            "type": "object",
            "description": "x-displayName: \"Get Managed Tenant\"\nGet managed_tenant reads a given object from storage backend for metadata.namespace.",
            "title": "Get managed tenant",
            "properties": {
                "all_tenants": {
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/managed_tenantGroupAssignmentType"
                    }
                },
                "tenant_id": {
                    "type": "string"
                },
                "tenant_regex": {
                    "type": "string"
                }
            }
        },
        "managed_tenantGlobalSpecType": {
            "type": "object",
            "description": "x-displayName: \"Specification\"\nShape of managed_tenant in the storage backend.",
            "title": "GlobalSpecType",
            "properties": {
                "all_tenants": {
                    "description": "x-displayName: \"All Tenants\"\nChoice to manage all tenants.\nInternal option only.",
                    "title": "all_tenants",
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "groups": {
                    "type": "array",
                    "description": "x-displayName: \"Groups\"\nList of local user group association to user groups in the managed tenant specified in the tenant_choice.",
                    "title": "groups",
                    "items": {
                        "$ref": "#/definitions/managed_tenantGroupAssignmentType"
                    }
                },
                "tenant_id": {
                    "type": "string",
                    "description": "x-displayName: \"Tenant ID\"\nx-example: \"company-s4543dsa\"\nSpecify the Tenant ID of the tenant which needs to be managed. \nNOTE: this is the name of the tenant configuration obj. not UID.",
                    "title": "tenant_id"
                },
                "tenant_regex": {
                    "type": "string",
                    "description": "x-displayName: \"Tenant Regex\"\nx-example: \"eu-tenant.*'\"\nSpecify regex pattern to target range of Tenant IDs.\nInternal option only.",
                    "title": "tenant_regex"
                }
            }
        },
        "managed_tenantGroupAssignmentType": {
            "type": "object",
            "description": "x-displayName: \"Group to Assign\"\nShape for specifying user group assosciation to user groups in a managed tenant.",
            "title": "GroupAssignmentType",
            "properties": {
                "group": {
                    "description": "x-displayName: \"Group\"\nAssosciate existing local user group which will be used to map groups in managed tenant.\nUser should be member of this group to gain access into managed tenant.",
                    "title": "group",
                    "$ref": "#/definitions/schemaviewsObjectRefType"
                },
                "managed_tenant_groups": {
                    "type": "array",
                    "description": "x-displayName: \"Managed Tenant Groups\"\nx-example: \"user-group1\"\nList of group names in managed tenant (MT).\nNote - To properly establish access, admin of managed tenant need to create corresponding Allowed Tenant\nconfiguration object with access to use same group names. Once it's setup, when user from original tenant \naccess managed tenant, underlying roles from managed tenant will be applied to user.",
                    "title": "managed_tenant_groups",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "managed_tenantListResponse": {
            "type": "object",
            "description": "x-displayName: \"List Response\"\nThis is the output message of 'List' RPC.",
            "title": "ListResponse is the collection of managed_tenant",
            "properties": {
                "errors": {
                    "type": "array",
                    "description": "x-displayName: \"Errors\"\nErrors(if any) while listing items from collection",
                    "title": "errors",
                    "items": {
                        "$ref": "#/definitions/schemaErrorType"
                    }
                },
                "items": {
                    "type": "array",
                    "description": "x-displayName: \"Items\"\nitems represents the collection in response",
                    "title": "items",
                    "items": {
                        "$ref": "#/definitions/managed_tenantListResponseItem"
                    }
                }
            }
        },
        "managed_tenantListResponseItem": {
            "type": "object",
            "description": "x-displayName: \"List Item\"\nBy default a summary of managed_tenant is returned in 'List'. By setting\n'report_fields' in the ListRequest more details of each item can be got.",
            "title": "ListResponseItem is an individual item in a collection of managed_tenant",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": "x-displayName: \"Annotations\"\nThe set of annotations present on this managed_tenant",
                    "title": "annotations"
                },
                "description": {
                    "type": "string",
                    "description": "x-displayName: \"Description\"\nThe description set for this managed_tenant",
                    "title": "description"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "x-displayName: \"Disabled\"\nA value of true indicates managed_tenant is administratively disabled",
                    "title": "disabled",
                    "format": "boolean"
                },
                "get_spec": {
                    "description": "x-displayName: \"Get Specification\"\nIf ListRequest has any specified report_fields, it will appear in object",
                    "title": "get_spec",
                    "$ref": "#/definitions/managed_tenantGetSpecType"
                },
                "labels": {
                    "type": "object",
                    "description": "x-displayName: \"Labels\"\nThe set of labels present on this managed_tenant",
                    "title": "labels"
                },
                "metadata": {
                    "description": "x-displayName: \"Metadata\"\nIf list request has report_fields set then metadata will\ncontain all the metadata associated with the object.",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectGetMetaType"
                },
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-example: \"name\"\nThe name of this managed_tenant",
                    "title": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": "x-displayName: \"Namespace\"\nx-example: \"ns1\"\nThe namespace this item belongs to",
                    "title": "namespace"
                },
                "object": {
                    "description": "x-displayName: \"Object\"\nIf ListRequest has any specified report_fields, it will appear in object\nDEPRECATED by get_spec, metadata and system_metadata",
                    "title": "object",
                    "$ref": "#/definitions/managed_tenantObject"
                },
                "owner_view": {
                    "description": "x-displayName: \"Owner View\"\nReference to the view object that owns this object.\nIf there is no view owner, this field will be nil.\nIf not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType"
                },
                "status_set": {
                    "type": "array",
                    "description": "x-displayName: \"Status\"\nThe status reported by different services for this configuration object",
                    "title": "status",
                    "items": {
                        "$ref": "#/definitions/managed_tenantStatusObject"
                    }
                },
                "system_metadata": {
                    "description": "x-displayName: \"System Metadata\"\nIf list request has report_fields set then system_metadata will\ncontain all the system generated details of this object.",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectGetMetaType"
                },
                "tenant": {
                    "type": "string",
                    "description": "x-displayName: \"Tenant\"\nx-example: \"acmecorp\"\nThe tenant this item belongs to",
                    "title": "tenant"
                },
                "uid": {
                    "type": "string",
                    "description": "x-displayName: \"UID\"\nx-example: \"d27938ba-967e-40a7-9709-57b8627f9f75\"\nThe unique uid of this managed_tenant",
                    "title": "uid"
                }
            }
        },
        "managed_tenantObject": {
            "type": "object",
            "description": "x-displayName: \"Managed Tenant\"\nManaged Tenant object",
            "title": "Managed Tenant Object",
            "properties": {
                "metadata": {
                    "description": "x-displayName: \"Metadata\"\nStandard object's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectMetaType"
                },
                "spec": {
                    "description": "x-displayName: \"Spec\"\nSpecification of the desired behavior of the managed_tenant",
                    "title": "spec",
                    "$ref": "#/definitions/managed_tenantSpecType"
                },
                "system_metadata": {
                    "description": "x-displayName: \"System Metadata\"\nSystem generated object's metadata",
                    "title": "system_metadata",
                    "$ref": "#/definitions/schemaSystemObjectMetaType"
                }
            }
        },
        "managed_tenantReplaceRequest": {
            "type": "object",
            "description": "x-displayName: \"Replace Request\"\nThis is the input message of the 'Replace' RPC",
            "title": "ReplaceRequest is used to replace contents of a managed_tenant",
            "properties": {
                "metadata": {
                    "description": "x-displayName: \"Metadata\"\nCommon attributes that can be set during replace for all configuration objects like labels etc.",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaObjectReplaceMetaType"
                },
                "resource_version": {
                    "type": "string",
                    "description": "x-displayName: \"Resource Version\"\nx-example: \"42\"\nIf provided, do the replace operation if the configuration object is still at 'resource_version'",
                    "title": "resource_version"
                },
                "spec": {
                    "description": "x-displayName: \"Spec\"\nA specification of the configuration object to be replaced",
                    "title": "spec",
                    "$ref": "#/definitions/managed_tenantReplaceSpecType"
                }
            }
        },
        "managed_tenantReplaceResponse": {
            "type": "object"
        },
        "managed_tenantReplaceSpecType": {
            "type": "object",
            "description": "x-displayName: \"Replace Managed Tenant\"\nReplaces attributes of a managed_tenant instance including its metadata like labels, description etc.",
            "title": "Replace Managed Tenant",
            "properties": {
                "all_tenants": {
                    "$ref": "#/definitions/ioschemaEmpty"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/managed_tenantGroupAssignmentType"
                    }
                },
                "tenant_id": {
                    "type": "string"
                },
                "tenant_regex": {
                    "type": "string"
                }
            }
        },
        "managed_tenantSpecType": {
            "type": "object",
            "description": "x-displayName: \"Specification\"\nShape of the managed_tenant specification",
            "title": "Specification for Managed Tenant",
            "properties": {
                "gc_spec": {
                    "description": "x-displayName: \"GC Spec\"",
                    "title": "gc_spec",
                    "$ref": "#/definitions/managed_tenantGlobalSpecType"
                }
            }
        },
        "managed_tenantStatusObject": {
            "type": "object",
            "description": "x-displayName: \"Managed Tenant\"\nMost recently observed status of object",
            "title": "Status for Managed Tenant",
            "properties": {
                "conditions": {
                    "type": "array",
                    "description": "x-displayName: \"Conditions\"\nConditions",
                    "title": "conditions",
                    "items": {
                        "$ref": "#/definitions/schemaConditionType"
                    }
                },
                "metadata": {
                    "description": "x-displayName: \"Metadata\"\nStandard status's metadata",
                    "title": "metadata",
                    "$ref": "#/definitions/schemaStatusMetaType"
                },
                "object_refs": {
                    "type": "array",
                    "description": "x-displayName: \"Config Object\"\nObject reference",
                    "title": "object_refs",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    }
                }
            }
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "schemaConditionType": {
            "type": "object",
            "description": "x-displayName: \"Status Condition\"\nConditions are used in the object status to describe the current state of the\nobject, e.g. Ready, Succeeded, etc.",
            "title": "ConditionType",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": "x-displayName: \"Hostname\"\nHostname of the instance of the site that sent the status",
                    "title": "hostname"
                },
                "last_update_time": {
                    "type": "string",
                    "description": "x-displayName: \"Last Updated\"\nLast time the condition was updated",
                    "title": "last_update_time",
                    "format": "date-time"
                },
                "reason": {
                    "type": "string",
                    "description": "x-displayName: \"Reason\"\nx-example: \"value\"\nx-reason: \"Insufficient memory in data plane\"\nA human readable string explaining the reason for reaching this condition",
                    "title": "reason"
                },
                "service_name": {
                    "type": "string",
                    "description": "x-displayName: \"Service Name\"\nName of the service that sent the status",
                    "title": "service name"
                },
                "status": {
                    "type": "string",
                    "description": "x-displayName: \"Status\"\nx-example: \"Failed\"\nStatus of the condition\n\"Success\" Validtion has succeded. Requested operation was successful.\n\"Failed\"  Validation has failed.\n\"Incomplete\" Validation of configuration has failed due to missing configuration.\n\"Installed\" Validation has passed and configuration has been installed in data path or K8s\n\"Down\" Configuration is operationally down. e.g. down interface\n\"Disabled\" Configuration is administratively disabled i.e. ObjectMetaType.Disable = true.\n\"NotApplicable\" Configuration is not applicable e.g. tenant service_policy_set(s) in system namespace are not applicable on REs",
                    "title": "status"
                },
                "type": {
                    "type": "string",
                    "description": "x-displayName: \"Type\"\nx-example: \"Operational\"\nType of the condition\n\"Validation\" represents validation user given configuration object\n\"Operational\" represents operational status of a given configuration object",
                    "title": "type"
                }
            }
        },
        "schemaErrorCode": {
            "type": "string",
            "description": "x-displayName: \"Error Code\"\nUnion of all possible error-codes from system\n\n - EOK: No error\n - EPERMS: Permissions error\n - EBADINPUT: Input is not correct\n - ENOTFOUND: Not found\n - EEXISTS: Already exists\n - EUNKNOWN: Unknown/catchall error\n - ESERIALIZE: Error in serializing/de-serializing\n - EINTERNAL: Server error",
            "title": "ErrorCode",
            "enum": [
                "EOK",
                "EPERMS",
                "EBADINPUT",
                "ENOTFOUND",
                "EEXISTS",
                "EUNKNOWN",
                "ESERIALIZE",
                "EINTERNAL"
            ],
            "default": "EOK"
        },
        "schemaErrorType": {
            "type": "object",
            "description": "x-displayName: \"Error Type\"\nInformation about a error in API operation",
            "title": "ErrorType",
            "properties": {
                "code": {
                    "description": "x-displayName: \"Code\"\nA simple general code by category",
                    "title": "code",
                    "$ref": "#/definitions/schemaErrorCode"
                },
                "error_obj": {
                    "description": "x-displayName: \"Error Object\"\nA structured error object for machine parsing",
                    "title": "error_obj",
                    "$ref": "#/definitions/protobufAny"
                },
                "message": {
                    "type": "string",
                    "description": "x-displayName: \"Message\"\nx-example: \"value\"\nA human readable string of the error",
                    "title": "message"
                }
            }
        },
        "schemaInitializerType": {
            "type": "object",
            "description": "x-displayName: \"Initializer\"\nInitializer is information about an initializer that has not yet completed.",
            "title": "InitializerType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nname of the service that is responsible for initializing this object.",
                    "title": "name"
                }
            }
        },
        "schemaInitializersType": {
            "type": "object",
            "description": "x-displayName: \"Initializers\"\nInitializers tracks the progress of initialization of a configuration object",
            "title": "InitializersType",
            "properties": {
                "pending": {
                    "type": "array",
                    "description": "x-displayName: \"Pending\"\nPending is a list of initializers that must execute in order before this object is initialized.\nWhen the last pending initializer is removed, and no failing result is set, the initializers\nstruct will be set to nil and the object is considered as initialized and visible to all\nclients.",
                    "title": "pending",
                    "items": {
                        "$ref": "#/definitions/schemaInitializerType"
                    }
                },
                "result": {
                    "description": "x-displayName: \"Result\"\nIf result is set with the Failure field, the object will be persisted to storage and then deleted,\nensuring that other clients can observe the deletion.",
                    "title": "result",
                    "$ref": "#/definitions/schemaStatusType"
                }
            }
        },
        "schemaObjectCreateMetaType": {
            "type": "object",
            "description": "x-displayName: \"Create Metadata\"\nObjectCreateMetaType is metadata that can be specified in Create request of an object.",
            "title": "ObjectCreateMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": "x-displayName: \"Annotation\"\nAnnotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.",
                    "title": "annotations"
                },
                "description": {
                    "type": "string",
                    "description": "x-displayName: \"Description\"\nx-example: \"Virtual Host for acmecorp website\"\nHuman readable description for the object",
                    "title": "description"
                },
                "disable": {
                    "type": "boolean",
                    "description": "x-displayName: \"Disable\"\nA value of true will administratively disable the object",
                    "title": "disable",
                    "format": "boolean"
                },
                "labels": {
                    "type": "object",
                    "description": "x-displayName: \"Labels\"\nMap of string keys and values that can be used to organize and categorize\n(scope and select) objects as chosen by the user. Values specified here will be used\nby selector expression",
                    "title": "labels"
                },
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-example: \"acmecorp-web\"\nx-required\nThe configuration object will be created with name. It has to be unique within the namespace.\nThe value of name has to follow DNS-1035 format.",
                    "title": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": "x-displayName: \"Namespace\"\nx-example: \"staging\"\nThis defines the workspace within which each the configuration object is to be created.\nMust be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"",
                    "title": "namespace"
                }
            }
        },
        "schemaObjectGetMetaType": {
            "type": "object",
            "description": "x-displayName: \"Get Metadata\"\nObjectGetMetaType is metadata that can be specified in Get/Create response of an object.",
            "title": "ObjectGetMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": "x-displayName: \"Annotation\"\nx-example: \"value\"\nAnnotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.",
                    "title": "annotations"
                },
                "description": {
                    "type": "string",
                    "description": "x-displayName: \"Description\"\nx-example: \"Virtual Host for acmecorp website\"\nHuman readable description for the object",
                    "title": "description"
                },
                "disable": {
                    "type": "boolean",
                    "description": "x-displayName: \"Disable\"\nx-example: \"true\"\nA value of true will administratively disable the object",
                    "title": "disable",
                    "format": "boolean"
                },
                "labels": {
                    "type": "object",
                    "description": "x-displayName: \"Labels\"\nx-example: \"value\"\nMap of string keys and values that can be used to organize and categorize\n(scope and select) objects as chosen by the user. Values specified here will be used\nby selector expression",
                    "title": "labels"
                },
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-example: \"acmecorp-web\"\nx-required\nThe configuration object will be created with name. It has to be unique within the namespace.\nThe value of name has to follow DNS-1035 format.",
                    "title": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": "x-displayName: \"Namespace\"\nx-example: \"staging\"\nThis defines the workspace within which each the configuration object is to be created.\nMust be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"",
                    "title": "namespace"
                }
            }
        },
        "schemaObjectMetaType": {
            "type": "object",
            "description": "x-displayName: \"Metadata\"\nObjectMetaType is metadata(common attributes) of an object that all configuration objects will have.\nThe information in this type can be specified by user during create and replace APIs.",
            "title": "ObjectMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": "x-displayName: \"Annotations\"\nx-example: \"value\"\nAnnotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.",
                    "title": "annotations"
                },
                "description": {
                    "type": "string",
                    "description": "x-displayName: \"Description\"\nx-example: \"Virtual Host for acmecorp website\"\nHuman readable description for the object",
                    "title": "description"
                },
                "disable": {
                    "type": "boolean",
                    "description": "x-displayName: \"Disable\"\nx-example: \"true\"\nA value of true will administratively disable the object",
                    "title": "disable",
                    "format": "boolean"
                },
                "labels": {
                    "type": "object",
                    "description": "x-displayName: \"Labels\"\nx-example: \"value\"\nMap of string keys and values that can be used to organize and categorize\n(scope and select) objects as chosen by the user. Values specified here will be used\nby selector expression",
                    "title": "labels"
                },
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-example: \"acmecorp-web\"\nx-required\nThis is the name of configuration object. It has to be unique within the namespace.\nIt can only be specified during create API and cannot be changed during replace API.\nThe value of name has to follow DNS-1035 format.",
                    "title": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": "x-displayName: \"Namespace\"\nx-example: \"staging\"\nThis defines the workspace within which each the configuration object is to be created.\nMust be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"",
                    "title": "namespace"
                },
                "uid": {
                    "type": "string",
                    "description": "x-displayName: \"UID\"\nx-example: \"d15f1fad-4d37-48c0-8706-df1824d76d31\"\nuid is the unique in time and space value for this object. Object create will fail if\nprovided by the client and the value exists in the system. Typically generated by the\nserver on successful creation of an object and is not allowed to change once populated.\nShadowed by SystemObjectMeta's uid field.",
                    "title": "uid"
                }
            }
        },
        "schemaObjectReplaceMetaType": {
            "type": "object",
            "description": "x-displayName: \"Replace Metadata\"\nObjectReplaceMetaType is metadata that can be specified in Replace request of an object.",
            "title": "ObjectReplaceMetaType",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": "x-displayName: \"Annotations\"\nx-example: \"value\"\nAnnotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.",
                    "title": "annotations"
                },
                "description": {
                    "type": "string",
                    "description": "x-displayName: \"Description\"\nx-example: \"Virtual Host for acmecorp website\"\nHuman readable description for the object",
                    "title": "description"
                },
                "disable": {
                    "type": "boolean",
                    "description": "x-displayName: \"Disable\"\nA value of true will administratively disable the object",
                    "title": "disable",
                    "format": "boolean"
                },
                "labels": {
                    "type": "object",
                    "description": "x-displayName: \"Labels\"\nx-example: \"value\"\nMap of string keys and values that can be used to organize and categorize\n(scope and select) objects as chosen by the user. Values specified here will be used\nby selector expression",
                    "title": "labels"
                },
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-example: \"acmecorp-web\"\nThe configuration object to be replaced will be looked up by name",
                    "title": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": "x-displayName: \"Namespace\"\nx-example: \"staging\"\nThis defines the workspace within which each the configuration object is to be created.\nMust be a DNS_LABEL format. For a namespace object itself, namespace value will be \"\"",
                    "title": "namespace"
                }
            }
        },
        "schemaStatusMetaType": {
            "type": "object",
            "description": "x-displayName: \"Metadata\"\nStatusMetaType is metadata that all status must have.",
            "title": "StatusMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": "x-displayName: \"Creation Timestamp\"\ncreation_timestamp is when the status object was created. It is used to find/tie-break\nfor latest status object from same origin",
                    "title": "creation_timestamp",
                    "format": "date-time"
                },
                "creator_class": {
                    "type": "string",
                    "description": "x-displayName: \"Creator Class\"\nx-example: \"ver.re1.int.ves.io\"\nClass of creator which created this StatusObject. This will be service's DNS FQDN.\nThis will be set by the system based on client certificate information.",
                    "title": "creator_class"
                },
                "creator_id": {
                    "type": "string",
                    "description": "x-displayName: \"Creator ID\"\nx-example: \"ver-instance-1\"\nID of creator which created this StatusObject. This will be a concrete identifier for service (e.g.\nidentifying the environment also). This will be set by the system based on client certificate\ninformation",
                    "title": "creator_id"
                },
                "publish": {
                    "description": "x-displayName: \"Publish\"\nDecides wether this status object will be propagated to user.",
                    "title": "publish",
                    "$ref": "#/definitions/schemaStatusPublishType"
                },
                "status_id": {
                    "type": "string",
                    "description": "x-displayName: \"Status ID\"\nstatus_id is a field used by the generator to distinguish (if necessary) between two status\nobjects for the same config object from the same site and same service and potentially same\ndaemon(creator-id)",
                    "title": "status_id"
                },
                "uid": {
                    "type": "string",
                    "description": "x-displayName: \"UID\"\nx-example: \"d15f1fad-4d37-48c0-8706-df1824d76d31\"\nuid is the unique in time and space value for a StatusObject.",
                    "title": "uid"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": "x-displayName: \"VTRP ID\"\nOrigin of this status exchanged by VTRP.",
                    "title": "vtrp_id"
                },
                "vtrp_stale": {
                    "type": "boolean",
                    "description": "x-displayName: \"VTRP Stale\"\nIndicate whether mars deems this object to be stale via graceful restart timer information",
                    "title": "vtrp_stale",
                    "format": "boolean"
                }
            }
        },
        "schemaStatusPublishType": {
            "type": "string",
            "description": "x-displayName: \"Status Publish Type\"\nStatusPublishType is all possible publish operations on a StatusObject\n\n - STATUS_DO_NOT_PUBLISH: Do Not Publish\n\nx-displayName: \"Do Not Publish\"\nDo not propagate this status to user. This could be because status is only informational\n - STATUS_PUBLISH: Publish\n\nx-displayName: \"Publish\"\nPropagate this status up to user as it might be actionable",
            "title": "StatusPublishType",
            "enum": [
                "STATUS_DO_NOT_PUBLISH",
                "STATUS_PUBLISH"
            ],
            "default": "STATUS_DO_NOT_PUBLISH"
        },
        "schemaStatusType": {
            "type": "object",
            "description": "x-displayName: \"Status\"\nStatus is a return value for calls that don't return other objects.",
            "title": "StatusType",
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "x-displayName: \"Code\"\nx-example: \"0\"\nSuggested HTTP return code for this status, 0 if not set.",
                    "title": "code",
                    "format": "int32"
                },
                "reason": {
                    "type": "string",
                    "description": "x-displayName: \"Reason\"\nx-example: \"value\"\nA human-readable description of why this operation is in the\n\"Failure\" status. If this value is empty there\nis no information available.",
                    "title": "reason"
                },
                "status": {
                    "type": "string",
                    "description": "x-displayName: \"Status\"\nx-example: \"value\"\nStatus of the operation.\nOne of: \"Success\" or \"Failure\".",
                    "title": "status"
                }
            }
        },
        "schemaSystemObjectGetMetaType": {
            "type": "object",
            "description": "x-displayName: \"System Metadata\"\nSystemObjectGetMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectGetMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": "x-displayName: \"Creation Timestamp\"\nCreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time"
                },
                "creator_class": {
                    "type": "string",
                    "description": "x-displayName: \"Creator Class\"\nx-example: \"prism\"\nA value identifying the class of the user or service which created this configuration object.",
                    "title": "creator_class"
                },
                "creator_id": {
                    "type": "string",
                    "description": "x-displayName: \"Creator ID\"\nx-example: \"admin@acmecorp.com\"\nA value identifying the exact user or service that created this configuration object",
                    "title": "creator_id"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": "x-displayName: \"Deletion Timestamp\"\nDeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time"
                },
                "finalizers": {
                    "type": "array",
                    "description": "x-displayName: \"Finalizers\"\nx-example: \"value\"\nMust be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    }
                },
                "initializers": {
                    "description": "x-displayName: \"Initializers\"\nAn initializer is a controller which enforces some system invariant at object creation time.\nThis field is a list of initializers that have not yet acted on this object. If nil or empty,\nthis object has been completely initialized. Otherwise, the object is considered uninitialized\nand is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\nobserve uninitialized objects.\n\nWhen an object is created, the system will populate this list with the current set of initializers.\nOnly privileged users may set or modify this list. Once it is empty, it may not be modified further\nby any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType"
                },
                "labels": {
                    "type": "object",
                    "description": "x-displayName: \"Labels\"\nx-example: \"'ves.io/soft-deleted': 'true'\"\nMap of string keys and values that can be used to organize and categorize\n(scope and select) objects as chosen by the operator or software. Values here can be interpreted\nby software(backend or frontend) to enable certain behavior e.g. things marked as soft-deleted(restorable).",
                    "title": "labels"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": "x-displayName: \"Modification Timestamp\"\nModificationTimestamp is a timestamp representing the server time when this object was\nlast modified.",
                    "title": "modification_timestamp",
                    "format": "date-time"
                },
                "object_index": {
                    "type": "integer",
                    "description": "x-displayName: \"Object Index\"\nx-example: \"0\"\nUnique index for the object. Some objects need a unique integer index to be allocated\nfor each object type. This field will be populated for all objects that need it and will\nbe zero otherwise.",
                    "title": "object_index",
                    "format": "int64"
                },
                "owner_view": {
                    "description": "x-displayName: \"Owner View\"\nReference to the view object that owns this object.\nIf there is no view owner, this field will be nil.\nIf not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType"
                },
                "tenant": {
                    "type": "string",
                    "description": "x-displayName: \"Tenant\"\nx-example: \"acmecorp\"\nTenant to which this configuration object belongs to. The value for this is found from\npresented credentials.",
                    "title": "tenant"
                },
                "uid": {
                    "type": "string",
                    "description": "x-displayName: \"UID\"\nx-example: \"d15f1fad-4d37-48c0-8706-df1824d76d31\"\nuid is the unique in time and space value for this object. It is generated by\nthe server on successful creation of an object and is not allowed to change on Replace\nAPI. The value of is taken from uid field of ObjectMetaType, if provided.",
                    "title": "uid"
                }
            }
        },
        "schemaSystemObjectMetaType": {
            "type": "object",
            "description": "x-displayName: \"System Metadata\"\nSystemObjectMetaType is metadata generated or populated by the system for all persisted objects and\ncannot be updated directly by users.",
            "title": "SystemObjectMetaType",
            "properties": {
                "creation_timestamp": {
                    "type": "string",
                    "description": "x-displayName: \"Creation Timestamp\"\nCreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.",
                    "title": "creation_timestamp",
                    "format": "date-time"
                },
                "creator_class": {
                    "type": "string",
                    "description": "x-displayName: \"Creator Class\"\nx-example: \"value\"\nA value identifying the class of the user or service which created this configuration object.",
                    "title": "creator_class"
                },
                "creator_cookie": {
                    "type": "string",
                    "description": "x-displayName: \"Creator Cookie\"\nx-example: \"value\"\nThis can used by the creator of the object for later audit for e.g. by storing the\nversion identifying information of the object so at future it can be determined if\nversion present at remote end is current or stale.",
                    "title": "creator_cookie"
                },
                "creator_id": {
                    "type": "string",
                    "description": "x-displayName: \"Creator ID\"\nx-example: \"value\"\nA value identifying the exact user or service that created this configuration object",
                    "title": "creator_id"
                },
                "deletion_timestamp": {
                    "type": "string",
                    "description": "x-displayName: \"Deletion Timestamp\"\nDeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.",
                    "title": "deletion_timestamp",
                    "format": "date-time"
                },
                "finalizers": {
                    "type": "array",
                    "description": "x-displayName: \"Finalizers\"\nx-example: \"value\"\nMust be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.",
                    "title": "finalizers",
                    "items": {
                        "type": "string"
                    }
                },
                "initializers": {
                    "description": "x-displayName: \"Initializers\"\nAn initializer is a controller which enforces some system invariant at object creation time.\nThis field is a list of initializers that have not yet acted on this object. If nil or empty,\nthis object has been completely initialized. Otherwise, the object is considered uninitialized\nand is hidden (in list/watch and get calls) from clients that haven't explicitly asked to\nobserve uninitialized objects.\n\nWhen an object is created, the system will populate this list with the current set of initializers.\nOnly privileged users may set or modify this list. Once it is empty, it may not be modified further\nby any user.",
                    "title": "initializers",
                    "$ref": "#/definitions/schemaInitializersType"
                },
                "labels": {
                    "type": "object",
                    "description": "x-displayName: \"Labels\"\nx-example: \"'ves.io/soft-deleted': 'true'\"\nMap of string keys and values that can be used to organize and categorize\n(scope and select) objects as chosen by the operator or software. Values here can be interpreted\nby software(backend or frontend) to enable certain behavior e.g. things marked as soft-deleted(restorable).",
                    "title": "labels"
                },
                "modification_timestamp": {
                    "type": "string",
                    "description": "x-displayName: \"Modification Timestamp\"\nModificationTimestamp is a timestamp representing the server time when this object was\nlast modified.",
                    "title": "modification_timestamp",
                    "format": "date-time"
                },
                "namespace": {
                    "type": "array",
                    "description": "x-displayName: \"Namespace Reference\"\nThe namespace this object belongs to. This is populated by the service based on the\nmetadata.namespace field when an object is created.",
                    "title": "namespace",
                    "items": {
                        "$ref": "#/definitions/ioschemaObjectRefType"
                    }
                },
                "object_index": {
                    "type": "integer",
                    "description": "x-displayName: \"Object Index\"\nx-example: \"0\"\nUnique index for the object. Some objects need a unique integer index to be allocated\nfor each object type. This field will be populated for all objects that need it and will\nbe zero otherwise.",
                    "title": "object_index",
                    "format": "int64"
                },
                "owner_view": {
                    "description": "x-displayName: \"Owner View\"\nReference to the view object that owns this object.\nIf there is no view owner, this field will be nil.\nIf not nil, this object can only be edited/deleted through the view",
                    "title": "owner_view",
                    "$ref": "#/definitions/schemaViewRefType"
                },
                "sre_disable": {
                    "type": "boolean",
                    "description": "x-displayName: \"SRE Disable\"\nx-example: \"true\"\nThis should be set to true If VES/SRE operator wants to suppress an object from being\npresented to business-logic of a daemon(e.g. due to bad-form/issue-causing Object).\nThis is meant only to be used in temporary situations for operational continuity till\na fix is rolled out in business-logic.",
                    "title": "sre_disable",
                    "format": "boolean"
                },
                "tenant": {
                    "type": "string",
                    "description": "x-displayName: \"Tenant\"\nx-example: \"acmecorp\"\nTenant to which this configuration object belongs to. The value for this is found from\npresented credentials.",
                    "title": "tenant"
                },
                "trace_info": {
                    "type": "string",
                    "description": "x-displayName: \"Trace Info\"\nx-example: \"value\"\ntrace_info holds information(\u003ctrace-id\u003e:\u003cspan-id\u003e:\u003cparent-span-id\u003e) of the request doing\nthe object modification. This can be used on the watch side to create subsequent spans.\nThis information can be used to co-relate activities across services (modulo state compression)\nfor a synchronous API.",
                    "title": "trace_info"
                },
                "uid": {
                    "type": "string",
                    "description": "x-displayName: \"UID\"\nx-example: \"d15f1fad-4d37-48c0-8706-df1824d76d31\"\nuid is the unique in time and space value for this object. It is generated by\nthe server on successful creation of an object and is not allowed to change on Replace\nAPI. The value of is taken from uid field of ObjectMetaType, if provided.",
                    "title": "uid"
                },
                "vtrp_id": {
                    "type": "string",
                    "description": "x-displayName: \"VTRP ID\"\nIndicate origin of this object.",
                    "title": "vtrp_id"
                },
                "vtrp_stale": {
                    "type": "boolean",
                    "description": "x-displayName: \"VTRP Stale\"\nIndicate whether mars deems this object to be stale via graceful restart timer information",
                    "title": "vtrp_stale",
                    "format": "boolean"
                }
            }
        },
        "schemaViewRefType": {
            "type": "object",
            "description": "x-displayName: \"View Reference\"\nViewRefType represents a reference to a view",
            "title": "ViewRefType",
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "x-displayName: \"Kind\"\nx-example: \"http_proxy\"\nKind of the view object",
                    "title": "kind"
                },
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-example: \"contactus-route\"\nWhen a configuration object(e.g. virtual_host) refers to another(e.g route)\nthen name will hold the referred object's(e.g. route's) name.",
                    "title": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": "x-displayName: \"Namespace\"\nx-example: \"ns1\"\nWhen a configuration object(e.g. virtual_host) refers to another(e.g route)\nthen namespace will hold the referred object's(e.g. route's) namespace.",
                    "title": "namespace"
                },
                "uid": {
                    "type": "string",
                    "description": "x-displayName: \"UID\"\nx-example: \"f3744323-1adf-4aaa-a5dc-0707c1d1bd82\"\nUID of the view object",
                    "title": "uid"
                }
            }
        },
        "schemaviewsObjectRefType": {
            "type": "object",
            "description": "x-displayName: \"Object reference\"\nThis type establishes a direct reference from one object(the referrer) to another(the referred). \nSuch a reference is in form of tenant/namespace/name",
            "title": "ObjectRefType",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-example: \"contacts-route\"\nx-required\nWhen a configuration object(e.g. virtual_host) refers to another(e.g route)\nthen name will hold the referred object's(e.g. route's) name.",
                    "title": "name"
                },
                "namespace": {
                    "type": "string",
                    "description": "x-displayName: \"Namespace\"\nx-example: \"ns1\"\nWhen a configuration object(e.g. virtual_host) refers to another(e.g route)\nthen namespace will hold the referred object's(e.g. route's) namespace.",
                    "title": "namespace"
                },
                "tenant": {
                    "type": "string",
                    "description": "x-displayName: \"Tenant\"\nx-example: \"acmecorp\"\nWhen a configuration object(e.g. virtual_host) refers to another(e.g route)\nthen tenant will hold the referred object's(e.g. route's) tenant.",
                    "title": "tenant"
                }
            }
        }
    },
    "x-displayname": "Managed Tenant",
    "x-ves-proto-file": "ves.io/schema/tenant_management/managed_tenant/public_crudapi.proto"
}`
