// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/tenant_management/public_customapi.proto

// MSP
//
// x-displayName: "Tenant Manangement"
// Public APIs for Tenant Manangement feature.

package tenant_management

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("ves.io/schema/tenant_management/public_customapi.proto", fileDescriptor_58e73d33b54da82c)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/tenant_management/public_customapi.proto", fileDescriptor_58e73d33b54da82c)
}

var fileDescriptor_58e73d33b54da82c = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x3f, 0x6f, 0x13, 0x4f,
	0x10, 0xbd, 0x4d, 0xf4, 0xfb, 0x49, 0x31, 0xdd, 0xd1, 0x04, 0x13, 0x2d, 0xc8, 0x1d, 0xa0, 0xdb,
	0x55, 0x12, 0xfe, 0x48, 0x11, 0x0d, 0x50, 0xd1, 0x21, 0x50, 0x1a, 0x1a, 0x6b, 0xef, 0x3c, 0x59,
	0xaf, 0xb8, 0xdd, 0x59, 0x6e, 0xf7, 0x0e, 0xd2, 0xa1, 0x7c, 0x01, 0x90, 0xf8, 0x12, 0x7c, 0x87,
	0x34, 0xe9, 0xa0, 0x42, 0x96, 0x68, 0x52, 0xe2, 0x33, 0x05, 0x74, 0xae, 0xa9, 0x10, 0x7b, 0xe7,
	0xc8, 0x36, 0x20, 0xcb, 0xdd, 0xcc, 0xbc, 0xf7, 0xee, 0xde, 0x1b, 0xcd, 0x76, 0xee, 0x56, 0xe0,
	0x98, 0x42, 0xee, 0xb2, 0x21, 0x68, 0xc1, 0x3d, 0x18, 0x61, 0x7c, 0x5f, 0x0b, 0x23, 0x24, 0x68,
	0x30, 0x9e, 0xdb, 0x32, 0xcd, 0x55, 0xd6, 0xcf, 0x4a, 0xe7, 0x51, 0x0b, 0xab, 0x98, 0x2d, 0xd0,
	0x63, 0x7c, 0xad, 0xd1, 0xb1, 0x46, 0xc7, 0xfe, 0xd0, 0x75, 0x13, 0xa9, 0xfc, 0xb0, 0x4c, 0x59,
	0x86, 0x9a, 0x4b, 0x94, 0xc8, 0x83, 0x2e, 0x2d, 0x8f, 0x42, 0x17, 0x9a, 0x50, 0x35, 0xdf, 0xeb,
	0xee, 0x48, 0x44, 0x99, 0x03, 0x17, 0x56, 0x71, 0x61, 0x0c, 0x7a, 0xe1, 0x15, 0x1a, 0xd7, 0xa2,
	0x57, 0x17, 0x5d, 0xa2, 0x9d, 0x07, 0x6f, 0xad, 0x8a, 0xe0, 0x8f, 0x2d, 0xcc, 0xc8, 0x57, 0x96,
	0xc8, 0x73, 0xd0, 0xce, 0x22, 0x54, 0x89, 0x5c, 0x0d, 0x84, 0x87, 0x16, 0xed, 0x2d, 0xa1, 0xe0,
	0xc0, 0x54, 0x4b, 0x4e, 0xae, 0x2f, 0x71, 0x14, 0xbc, 0xea, 0x2f, 0x30, 0xf6, 0xa6, 0x9b, 0x9d,
	0xad, 0x47, 0x61, 0x95, 0x0f, 0x9e, 0x3c, 0x8e, 0xc7, 0xa4, 0xb3, 0xf5, 0xac, 0x4c, 0x5d, 0x56,
	0xa8, 0x14, 0xe2, 0x5d, 0xb6, 0x62, 0xa7, 0xec, 0x82, 0xfb, 0x14, 0x5e, 0x96, 0xe0, 0x7c, 0x77,
	0x6f, 0x1d, 0x89, 0xb3, 0x68, 0x1c, 0xf4, 0x74, 0xfd, 0x71, 0xfb, 0x46, 0x85, 0xb9, 0xcf, 0xd0,
	0x38, 0xcc, 0x21, 0x69, 0x44, 0x89, 0x96, 0xda, 0x27, 0xae, 0xa1, 0x07, 0xcf, 0x61, 0x72, 0xf2,
	0xe5, 0xdb, 0xfb, 0x8d, 0x83, 0xde, 0x9d, 0xf6, 0x0e, 0xb8, 0x11, 0x1a, 0x9c, 0x15, 0x19, 0x38,
	0xee, 0x8e, 0x9d, 0x07, 0xfd, 0x97, 0x7d, 0xbb, 0xd9, 0x3f, 0x0f, 0xc8, 0xcd, 0xf8, 0x07, 0xe9,
	0x5c, 0x3a, 0x34, 0x17, 0xa3, 0x78, 0x7f, 0xa5, 0xe5, 0x39, 0xf6, 0x2c, 0xe7, 0xed, 0xf5, 0x44,
	0x6d, 0x52, 0x5c, 0x3f, 0xe9, 0xfd, 0xde, 0xbd, 0x75, 0x92, 0x96, 0x66, 0x3e, 0x6b, 0xf7, 0xf2,
	0xd9, 0x29, 0xd9, 0xfc, 0x79, 0x4a, 0xfe, 0x1b, 0x80, 0xc6, 0xdd, 0x93, 0xcf, 0xdb, 0x1b, 0x43,
	0xf2, 0xf0, 0x2d, 0x19, 0x8d, 0x69, 0x74, 0x3e, 0xa6, 0xd1, 0x74, 0x4c, 0xc9, 0x9b, 0x9a, 0x92,
	0x0f, 0x35, 0x25, 0x9f, 0x6a, 0x4a, 0x46, 0x35, 0x25, 0x5f, 0x6b, 0x4a, 0xbe, 0xd7, 0x34, 0x9a,
	0xd6, 0x94, 0xbc, 0x9b, 0xd0, 0xe8, 0x6c, 0x42, 0xc9, 0x68, 0x42, 0xa3, 0xf3, 0x09, 0x8d, 0x9e,
	0x1f, 0x4a, 0xb4, 0x2f, 0x24, 0xfb, 0x1d, 0x01, 0x8a, 0x42, 0xb0, 0xd2, 0xf1, 0x50, 0x1c, 0x61,
	0xa1, 0x13, 0x5b, 0x60, 0xa5, 0x06, 0x50, 0x24, 0x33, 0x98, 0xdb, 0x54, 0x22, 0x87, 0xd7, 0xbe,
	0x3d, 0xbf, 0x7f, 0xbd, 0x87, 0xf4, 0xff, 0x70, 0x8b, 0xfb, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xae, 0xf3, 0x66, 0x92, 0xfc, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Subscribe
	//
	// x-displayName: "Subscribe MSP Addon Service"
	// Subscribe Management Service Provider addon service feature.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	// Unsubscribe
	//
	// x-displayName: "Unsubscribe MSP Addon Service"
	// unsubscribe Management Service Provider addon service feature.
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant_management.CustomAPI/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	out := new(UnsubscribeResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.tenant_management.CustomAPI/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Subscribe
	//
	// x-displayName: "Subscribe MSP Addon Service"
	// Subscribe Management Service Provider addon service feature.
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	// Unsubscribe
	//
	// x-displayName: "Unsubscribe MSP Addon Service"
	// unsubscribe Management Service Provider addon service feature.
	Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) Subscribe(ctx context.Context, req *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedCustomAPIServer) Unsubscribe(ctx context.Context, req *UnsubscribeRequest) (*UnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant_management.CustomAPI/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.tenant_management.CustomAPI/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.tenant_management.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _CustomAPI_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _CustomAPI_Unsubscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/tenant_management/public_customapi.proto",
}
