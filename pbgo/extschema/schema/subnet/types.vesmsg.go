//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package subnet

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_network_interface "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_interface"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetSiteSubnetParamsDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetSiteSubnetParamsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteSubnetParams() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetSiteSubnetParams() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSiteSubnetParams() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("site_subnet_params[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) SiteSubnetParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*SiteSubnetParametersType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := SiteSubnetParametersTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for site_subnet_params")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SiteSubnetParametersType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SiteSubnetParametersType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated site_subnet_params")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items site_subnet_params")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetConnectionChoice().(type) {
	case *CreateSpecType_ConnectToSlo:
		if fv, exists := v.FldValidators["connection_choice.connect_to_slo"]; exists {
			val := m.GetConnectionChoice().(*CreateSpecType_ConnectToSlo).ConnectToSlo
			vOpts := append(opts,
				db.WithValidateField("connection_choice"),
				db.WithValidateField("connect_to_slo"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_ConnectToSli:
		if fv, exists := v.FldValidators["connection_choice.connect_to_sli"]; exists {
			val := m.GetConnectionChoice().(*CreateSpecType_ConnectToSli).ConnectToSli
			vOpts := append(opts,
				db.WithValidateField("connection_choice"),
				db.WithValidateField("connect_to_sli"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_IsolatedNw:
		if fv, exists := v.FldValidators["connection_choice.isolated_nw"]; exists {
			val := m.GetConnectionChoice().(*CreateSpecType_IsolatedNw).IsolatedNw
			vOpts := append(opts,
				db.WithValidateField("connection_choice"),
				db.WithValidateField("isolated_nw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_subnet_params"]; exists {
		vOpts := append(opts, db.WithValidateField("site_subnet_params"))
		if err := fv(ctx, m.GetSiteSubnetParams(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSiteSubnetParams := v.SiteSubnetParamsValidationRuleHandler
	rulesSiteSubnetParams := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "1",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhSiteSubnetParams(rulesSiteSubnetParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.site_subnet_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_subnet_params"] = vFn

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DHCPNetworkType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DHCPNetworkType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DHCPNetworkType) DeepCopy() *DHCPNetworkType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DHCPNetworkType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DHCPNetworkType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DHCPNetworkType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DHCPNetworkTypeValidator().Validate(ctx, m, opts...)
}

type ValidateDHCPNetworkType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDHCPNetworkType) NetworkPrefixChoiceNetworkPrefixValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	oValidatorFn_NetworkPrefix, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for network_prefix")
	}
	return oValidatorFn_NetworkPrefix, nil
}

func (v *ValidateDHCPNetworkType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DHCPNetworkType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DHCPNetworkType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetNetworkPrefixChoice().(type) {
	case *DHCPNetworkType_NetworkPrefix:
		if fv, exists := v.FldValidators["network_prefix_choice.network_prefix"]; exists {
			val := m.GetNetworkPrefixChoice().(*DHCPNetworkType_NetworkPrefix).NetworkPrefix
			vOpts := append(opts,
				db.WithValidateField("network_prefix_choice"),
				db.WithValidateField("network_prefix"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDHCPNetworkTypeValidator = func() *ValidateDHCPNetworkType {
	v := &ValidateDHCPNetworkType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNetworkPrefixChoiceNetworkPrefix := v.NetworkPrefixChoiceNetworkPrefixValidationRuleHandler
	rulesNetworkPrefixChoiceNetworkPrefix := map[string]string{
		"ves.io.schema.rules.string.ipv4_prefix": "true",
	}
	vFnMap["network_prefix_choice.network_prefix"], err = vrhNetworkPrefixChoiceNetworkPrefix(rulesNetworkPrefixChoiceNetworkPrefix)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for oneof field DHCPNetworkType.network_prefix_choice_network_prefix: %s", err)
		panic(errMsg)
	}

	v.FldValidators["network_prefix_choice.network_prefix"] = vFnMap["network_prefix_choice.network_prefix"]

	return v
}()

func DHCPNetworkTypeValidator() db.Validator {
	return DefaultDHCPNetworkTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *DHCPServerParametersType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *DHCPServerParametersType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *DHCPServerParametersType) DeepCopy() *DHCPServerParametersType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &DHCPServerParametersType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *DHCPServerParametersType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *DHCPServerParametersType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return DHCPServerParametersTypeValidator().Validate(ctx, m, opts...)
}

type ValidateDHCPServerParametersType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateDHCPServerParametersType) DhcpNetworksValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*DHCPNetworkType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := DHCPNetworkTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for dhcp_networks")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*DHCPNetworkType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*DHCPNetworkType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated dhcp_networks")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items dhcp_networks")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateDHCPServerParametersType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*DHCPServerParametersType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *DHCPServerParametersType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["dhcp_networks"]; exists {
		vOpts := append(opts, db.WithValidateField("dhcp_networks"))
		if err := fv(ctx, m.GetDhcpNetworks(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultDHCPServerParametersTypeValidator = func() *ValidateDHCPServerParametersType {
	v := &ValidateDHCPServerParametersType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhDhcpNetworks := v.DhcpNetworksValidationRuleHandler
	rulesDhcpNetworks := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "1",
		"ves.io.schema.rules.repeated.min_items": "1",
		"ves.io.schema.rules.repeated.unique":    "true",
	}
	vFn, err = vrhDhcpNetworks(rulesDhcpNetworks)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for DHCPServerParametersType.dhcp_networks: %s", err)
		panic(errMsg)
	}
	v.FldValidators["dhcp_networks"] = vFn

	return v
}()

func DHCPServerParametersTypeValidator() db.Validator {
	return DefaultDHCPServerParametersTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetSiteSubnetParamsDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetSiteSubnetParamsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteSubnetParams() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetSiteSubnetParams() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSiteSubnetParams() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("site_subnet_params[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) SiteSubnetParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*SiteSubnetParametersType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := SiteSubnetParametersTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for site_subnet_params")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SiteSubnetParametersType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SiteSubnetParametersType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated site_subnet_params")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items site_subnet_params")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetConnectionChoice().(type) {
	case *GetSpecType_ConnectToSlo:
		if fv, exists := v.FldValidators["connection_choice.connect_to_slo"]; exists {
			val := m.GetConnectionChoice().(*GetSpecType_ConnectToSlo).ConnectToSlo
			vOpts := append(opts,
				db.WithValidateField("connection_choice"),
				db.WithValidateField("connect_to_slo"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_ConnectToSli:
		if fv, exists := v.FldValidators["connection_choice.connect_to_sli"]; exists {
			val := m.GetConnectionChoice().(*GetSpecType_ConnectToSli).ConnectToSli
			vOpts := append(opts,
				db.WithValidateField("connection_choice"),
				db.WithValidateField("connect_to_sli"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_IsolatedNw:
		if fv, exists := v.FldValidators["connection_choice.isolated_nw"]; exists {
			val := m.GetConnectionChoice().(*GetSpecType_IsolatedNw).IsolatedNw
			vOpts := append(opts,
				db.WithValidateField("connection_choice"),
				db.WithValidateField("isolated_nw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_subnet_params"]; exists {
		vOpts := append(opts, db.WithValidateField("site_subnet_params"))
		if err := fv(ctx, m.GetSiteSubnetParams(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSiteSubnetParams := v.SiteSubnetParamsValidationRuleHandler
	rulesSiteSubnetParams := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "1",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhSiteSubnetParams(rulesSiteSubnetParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.site_subnet_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_subnet_params"] = vFn

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetSiteDhcpServerParamsInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteDhcpServerParamsInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSiteSubnetParamsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteSubnetParamsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetSiteDhcpServerParamsInternalDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteDhcpServerParamsInternal() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetSiteDhcpServerParamsInternal() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSiteDhcpServerParamsInternal() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("site_dhcp_server_params_internal[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetSiteSubnetParamsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteSubnetParams() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetSiteSubnetParams() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSiteSubnetParams() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("site_subnet_params[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) SiteSubnetParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*SiteSubnetParametersType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := SiteSubnetParametersTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for site_subnet_params")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SiteSubnetParametersType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SiteSubnetParametersType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated site_subnet_params")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items site_subnet_params")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) SiteDhcpServerParamsInternalValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*SubnetDHCPServerParametersType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := SubnetDHCPServerParametersTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for site_dhcp_server_params_internal")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SubnetDHCPServerParametersType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SubnetDHCPServerParametersType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated site_dhcp_server_params_internal")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items site_dhcp_server_params_internal")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetConnectionChoice().(type) {
	case *GlobalSpecType_ConnectToSlo:
		if fv, exists := v.FldValidators["connection_choice.connect_to_slo"]; exists {
			val := m.GetConnectionChoice().(*GlobalSpecType_ConnectToSlo).ConnectToSlo
			vOpts := append(opts,
				db.WithValidateField("connection_choice"),
				db.WithValidateField("connect_to_slo"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_ConnectToSli:
		if fv, exists := v.FldValidators["connection_choice.connect_to_sli"]; exists {
			val := m.GetConnectionChoice().(*GlobalSpecType_ConnectToSli).ConnectToSli
			vOpts := append(opts,
				db.WithValidateField("connection_choice"),
				db.WithValidateField("connect_to_sli"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_IsolatedNw:
		if fv, exists := v.FldValidators["connection_choice.isolated_nw"]; exists {
			val := m.GetConnectionChoice().(*GlobalSpecType_IsolatedNw).IsolatedNw
			vOpts := append(opts,
				db.WithValidateField("connection_choice"),
				db.WithValidateField("isolated_nw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_dhcp_server_params_internal"]; exists {
		vOpts := append(opts, db.WithValidateField("site_dhcp_server_params_internal"))
		if err := fv(ctx, m.GetSiteDhcpServerParamsInternal(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["site_subnet_params"]; exists {
		vOpts := append(opts, db.WithValidateField("site_subnet_params"))
		if err := fv(ctx, m.GetSiteSubnetParams(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSiteSubnetParams := v.SiteSubnetParamsValidationRuleHandler
	rulesSiteSubnetParams := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "1",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhSiteSubnetParams(rulesSiteSubnetParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.site_subnet_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_subnet_params"] = vFn

	vrhSiteDhcpServerParamsInternal := v.SiteDhcpServerParamsInternalValidationRuleHandler
	rulesSiteDhcpServerParamsInternal := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "1",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhSiteDhcpServerParamsInternal(rulesSiteDhcpServerParamsInternal)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.site_dhcp_server_params_internal: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_dhcp_server_params_internal"] = vFn

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetSiteSubnetParamsDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetSiteSubnetParamsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSiteSubnetParams() == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	for idx, e := range m.GetSiteSubnetParams() {
		driSet, err := e.GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetSiteSubnetParams() GetDRefInfo() FAILED")
		}
		for i := range driSet {
			dri := &driSet[i]
			dri.DRField = fmt.Sprintf("site_subnet_params[%v].%s", idx, dri.DRField)
		}
		drInfos = append(drInfos, driSet...)
	}
	return drInfos, nil

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) SiteSubnetParamsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*SiteSubnetParametersType, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := SiteSubnetParametersTypeValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for site_subnet_params")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*SiteSubnetParametersType)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*SiteSubnetParametersType, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated site_subnet_params")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items site_subnet_params")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	switch m.GetConnectionChoice().(type) {
	case *ReplaceSpecType_ConnectToSlo:
		if fv, exists := v.FldValidators["connection_choice.connect_to_slo"]; exists {
			val := m.GetConnectionChoice().(*ReplaceSpecType_ConnectToSlo).ConnectToSlo
			vOpts := append(opts,
				db.WithValidateField("connection_choice"),
				db.WithValidateField("connect_to_slo"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_ConnectToSli:
		if fv, exists := v.FldValidators["connection_choice.connect_to_sli"]; exists {
			val := m.GetConnectionChoice().(*ReplaceSpecType_ConnectToSli).ConnectToSli
			vOpts := append(opts,
				db.WithValidateField("connection_choice"),
				db.WithValidateField("connect_to_sli"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_IsolatedNw:
		if fv, exists := v.FldValidators["connection_choice.isolated_nw"]; exists {
			val := m.GetConnectionChoice().(*ReplaceSpecType_IsolatedNw).IsolatedNw
			vOpts := append(opts,
				db.WithValidateField("connection_choice"),
				db.WithValidateField("isolated_nw"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["site_subnet_params"]; exists {
		vOpts := append(opts, db.WithValidateField("site_subnet_params"))
		if err := fv(ctx, m.GetSiteSubnetParams(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSiteSubnetParams := v.SiteSubnetParamsValidationRuleHandler
	rulesSiteSubnetParams := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "1",
		"ves.io.schema.rules.repeated.min_items": "1",
	}
	vFn, err = vrhSiteSubnetParams(rulesSiteSubnetParams)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.site_subnet_params: %s", err)
		panic(errMsg)
	}
	v.FldValidators["site_subnet_params"] = vFn

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SiteSubnetParametersType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SiteSubnetParametersType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SiteSubnetParametersType) DeepCopy() *SiteSubnetParametersType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SiteSubnetParametersType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SiteSubnetParametersType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SiteSubnetParametersType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SiteSubnetParametersTypeValidator().Validate(ctx, m, opts...)
}

func (m *SiteSubnetParametersType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetSiteDRefInfo()

}

func (m *SiteSubnetParametersType) GetSiteDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetSite()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("site.Object")
	dri := db.DRefInfo{
		RefdType:   "site.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "site",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetSiteDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *SiteSubnetParametersType) GetSiteDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "site.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: site")
	}

	vref := m.GetSite()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "site.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateSiteSubnetParametersType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSiteSubnetParametersType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SiteSubnetParametersType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SiteSubnetParametersType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["site"]; exists {

		vOpts := append(opts, db.WithValidateField("site"))
		if err := fv(ctx, m.GetSite(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["subnet_dhcp_server_params"]; exists {

		vOpts := append(opts, db.WithValidateField("subnet_dhcp_server_params"))
		if err := fv(ctx, m.GetSubnetDhcpServerParams(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSiteSubnetParametersTypeValidator = func() *ValidateSiteSubnetParametersType {
	v := &ValidateSiteSubnetParametersType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["site"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["subnet_dhcp_server_params"] = DHCPServerParametersTypeValidator().Validate

	return v
}()

func SiteSubnetParametersTypeValidator() db.Validator {
	return DefaultSiteSubnetParametersTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *SubnetDHCPServerParametersType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *SubnetDHCPServerParametersType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *SubnetDHCPServerParametersType) DeepCopy() *SubnetDHCPServerParametersType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &SubnetDHCPServerParametersType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *SubnetDHCPServerParametersType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *SubnetDHCPServerParametersType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return SubnetDHCPServerParametersTypeValidator().Validate(ctx, m, opts...)
}

func (m *SubnetDHCPServerParametersType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetSiteDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSiteDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetSubnetDhcpServerParamsDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetSubnetDhcpServerParamsDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

func (m *SubnetDHCPServerParametersType) GetSiteDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetSite()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("site.Object")
	dri := db.DRefInfo{
		RefdType:   "site.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "site",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetSiteDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *SubnetDHCPServerParametersType) GetSiteDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "site.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: site")
	}

	vref := m.GetSite()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "site.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

// GetDRefInfo for the field's type
func (m *SubnetDHCPServerParametersType) GetSubnetDhcpServerParamsDRefInfo() ([]db.DRefInfo, error) {
	if m.GetSubnetDhcpServerParams() == nil {
		return nil, nil
	}

	drInfos, err := m.GetSubnetDhcpServerParams().GetDRefInfo()
	if err != nil {
		return nil, errors.Wrap(err, "GetSubnetDhcpServerParams().GetDRefInfo() FAILED")
	}
	for i := range drInfos {
		dri := &drInfos[i]
		dri.DRField = "subnet_dhcp_server_params." + dri.DRField
	}
	return drInfos, err

}

type ValidateSubnetDHCPServerParametersType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateSubnetDHCPServerParametersType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*SubnetDHCPServerParametersType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *SubnetDHCPServerParametersType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["site"]; exists {

		vOpts := append(opts, db.WithValidateField("site"))
		if err := fv(ctx, m.GetSite(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["subnet_dhcp_server_params"]; exists {

		vOpts := append(opts, db.WithValidateField("subnet_dhcp_server_params"))
		if err := fv(ctx, m.GetSubnetDhcpServerParams(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultSubnetDHCPServerParametersTypeValidator = func() *ValidateSubnetDHCPServerParametersType {
	v := &ValidateSubnetDHCPServerParametersType{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["site"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	v.FldValidators["subnet_dhcp_server_params"] = ves_io_schema_network_interface.DHCPServerParametersTypeValidator().Validate

	return v
}()

func SubnetDHCPServerParametersTypeValidator() db.Validator {
	return DefaultSubnetDHCPServerParametersTypeValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetConnectionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ConnectionChoice.(type) {
	case nil:
		o.ConnectionChoice = nil

	case *CreateSpecType_ConnectToSli:
		o.ConnectionChoice = &GlobalSpecType_ConnectToSli{ConnectToSli: of.ConnectToSli}

	case *CreateSpecType_ConnectToSlo:
		o.ConnectionChoice = &GlobalSpecType_ConnectToSlo{ConnectToSlo: of.ConnectToSlo}

	case *CreateSpecType_IsolatedNw:
		o.ConnectionChoice = &GlobalSpecType_IsolatedNw{IsolatedNw: of.IsolatedNw}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetConnectionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ConnectionChoice.(type) {
	case nil:
		r.ConnectionChoice = nil

	case *GlobalSpecType_ConnectToSli:
		r.ConnectionChoice = &CreateSpecType_ConnectToSli{ConnectToSli: of.ConnectToSli}

	case *GlobalSpecType_ConnectToSlo:
		r.ConnectionChoice = &CreateSpecType_ConnectToSlo{ConnectToSlo: of.ConnectToSlo}

	case *GlobalSpecType_IsolatedNw:
		r.ConnectionChoice = &CreateSpecType_IsolatedNw{IsolatedNw: of.IsolatedNw}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetConnectionChoiceFromGlobalSpecType(f)
	m.SiteSubnetParams = f.GetSiteSubnetParams()
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetConnectionChoiceToGlobalSpecType(f)
	f.SiteSubnetParams = m1.SiteSubnetParams
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetConnectionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ConnectionChoice.(type) {
	case nil:
		o.ConnectionChoice = nil

	case *GetSpecType_ConnectToSli:
		o.ConnectionChoice = &GlobalSpecType_ConnectToSli{ConnectToSli: of.ConnectToSli}

	case *GetSpecType_ConnectToSlo:
		o.ConnectionChoice = &GlobalSpecType_ConnectToSlo{ConnectToSlo: of.ConnectToSlo}

	case *GetSpecType_IsolatedNw:
		o.ConnectionChoice = &GlobalSpecType_IsolatedNw{IsolatedNw: of.IsolatedNw}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetConnectionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ConnectionChoice.(type) {
	case nil:
		r.ConnectionChoice = nil

	case *GlobalSpecType_ConnectToSli:
		r.ConnectionChoice = &GetSpecType_ConnectToSli{ConnectToSli: of.ConnectToSli}

	case *GlobalSpecType_ConnectToSlo:
		r.ConnectionChoice = &GetSpecType_ConnectToSlo{ConnectToSlo: of.ConnectToSlo}

	case *GlobalSpecType_IsolatedNw:
		r.ConnectionChoice = &GetSpecType_IsolatedNw{IsolatedNw: of.IsolatedNw}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetConnectionChoiceFromGlobalSpecType(f)
	m.SiteSubnetParams = f.GetSiteSubnetParams()
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetConnectionChoiceToGlobalSpecType(f)
	f.SiteSubnetParams = m1.SiteSubnetParams
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetConnectionChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.ConnectionChoice.(type) {
	case nil:
		o.ConnectionChoice = nil

	case *ReplaceSpecType_ConnectToSli:
		o.ConnectionChoice = &GlobalSpecType_ConnectToSli{ConnectToSli: of.ConnectToSli}

	case *ReplaceSpecType_ConnectToSlo:
		o.ConnectionChoice = &GlobalSpecType_ConnectToSlo{ConnectToSlo: of.ConnectToSlo}

	case *ReplaceSpecType_IsolatedNw:
		o.ConnectionChoice = &GlobalSpecType_IsolatedNw{IsolatedNw: of.IsolatedNw}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetConnectionChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.ConnectionChoice.(type) {
	case nil:
		r.ConnectionChoice = nil

	case *GlobalSpecType_ConnectToSli:
		r.ConnectionChoice = &ReplaceSpecType_ConnectToSli{ConnectToSli: of.ConnectToSli}

	case *GlobalSpecType_ConnectToSlo:
		r.ConnectionChoice = &ReplaceSpecType_ConnectToSlo{ConnectToSlo: of.ConnectToSlo}

	case *GlobalSpecType_IsolatedNw:
		r.ConnectionChoice = &ReplaceSpecType_IsolatedNw{IsolatedNw: of.IsolatedNw}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetConnectionChoiceFromGlobalSpecType(f)
	m.SiteSubnetParams = f.GetSiteSubnetParams()
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetConnectionChoiceToGlobalSpecType(f)
	f.SiteSubnetParams = m1.SiteSubnetParams
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}
