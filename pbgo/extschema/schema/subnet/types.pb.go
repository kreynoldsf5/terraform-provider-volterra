// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/subnet/types.proto

package subnet

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	network_interface "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/network_interface"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SubnetDHCPServerParametersType
//
// x-displayName: "Subnet DHCP server parameters"
// Subnet object DHCP server parameters. This is only stored
// in the db and is not used in the CreateSpec. The CreateSpec
// will contain a subset of the DHCP parameters in this
// message, which corresponds to the parameters currently
// supported by the subnet object.
type SubnetDHCPServerParametersType struct {
	// site reference
	//
	// x-displayName: "Site"
	// Site that the DHCP paramaters are for
	Site *views.ObjectRefType `protobuf:"bytes,1,opt,name=site,proto3" json:"site,omitempty"`
	// Site DHCP server parameters
	//
	// x-displayName: "Site DHCP server paramaters"
	// DHCP parameters for a subnet on a site. This reuses the
	// DHCPServerParametersType from network_interface.
	SubnetDhcpServerParams *network_interface.DHCPServerParametersType `protobuf:"bytes,2,opt,name=subnet_dhcp_server_params,json=subnetDhcpServerParams,proto3" json:"subnet_dhcp_server_params,omitempty"`
}

func (m *SubnetDHCPServerParametersType) Reset()      { *m = SubnetDHCPServerParametersType{} }
func (*SubnetDHCPServerParametersType) ProtoMessage() {}
func (*SubnetDHCPServerParametersType) Descriptor() ([]byte, []int) {
	return fileDescriptor_964a9ec4edc9fd55, []int{0}
}
func (m *SubnetDHCPServerParametersType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubnetDHCPServerParametersType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SubnetDHCPServerParametersType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetDHCPServerParametersType.Merge(m, src)
}
func (m *SubnetDHCPServerParametersType) XXX_Size() int {
	return m.Size()
}
func (m *SubnetDHCPServerParametersType) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetDHCPServerParametersType.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetDHCPServerParametersType proto.InternalMessageInfo

func (m *SubnetDHCPServerParametersType) GetSite() *views.ObjectRefType {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *SubnetDHCPServerParametersType) GetSubnetDhcpServerParams() *network_interface.DHCPServerParametersType {
	if m != nil {
		return m.SubnetDhcpServerParams
	}
	return nil
}

// DHCPNetworkType
//
// x-displayName: "DHCP Network"
// DHCPNetworkType will be a subset of network_interface.DHCPNetworkType
type DHCPNetworkType struct {
	// Network Prefix choice
	//
	// x-displayName: "Subnet Network Prefix"
	// DHCP network prefix for subnet
	//
	// Types that are valid to be assigned to NetworkPrefixChoice:
	//	*DHCPNetworkType_NetworkPrefix
	NetworkPrefixChoice isDHCPNetworkType_NetworkPrefixChoice `protobuf_oneof:"network_prefix_choice"`
}

func (m *DHCPNetworkType) Reset()      { *m = DHCPNetworkType{} }
func (*DHCPNetworkType) ProtoMessage() {}
func (*DHCPNetworkType) Descriptor() ([]byte, []int) {
	return fileDescriptor_964a9ec4edc9fd55, []int{1}
}
func (m *DHCPNetworkType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPNetworkType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DHCPNetworkType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPNetworkType.Merge(m, src)
}
func (m *DHCPNetworkType) XXX_Size() int {
	return m.Size()
}
func (m *DHCPNetworkType) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPNetworkType.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPNetworkType proto.InternalMessageInfo

type isDHCPNetworkType_NetworkPrefixChoice interface {
	isDHCPNetworkType_NetworkPrefixChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DHCPNetworkType_NetworkPrefix struct {
	NetworkPrefix string `protobuf:"bytes,2,opt,name=network_prefix,json=networkPrefix,proto3,oneof" json:"network_prefix,omitempty"`
}

func (*DHCPNetworkType_NetworkPrefix) isDHCPNetworkType_NetworkPrefixChoice() {}

func (m *DHCPNetworkType) GetNetworkPrefixChoice() isDHCPNetworkType_NetworkPrefixChoice {
	if m != nil {
		return m.NetworkPrefixChoice
	}
	return nil
}

func (m *DHCPNetworkType) GetNetworkPrefix() string {
	if x, ok := m.GetNetworkPrefixChoice().(*DHCPNetworkType_NetworkPrefix); ok {
		return x.NetworkPrefix
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DHCPNetworkType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DHCPNetworkType_NetworkPrefix)(nil),
	}
}

// DHCPServerParametersType
//
// x-displayName: "Subnet DHCP parameters"
// Subnet DHCP parameters will be a subset of network_interface.DHCPServerParametersType as all
// features in network_interface.DHCPServerParametersType may not be supported in a subnet.
type DHCPServerParametersType struct {
	// Subnet DHCP Networks
	//
	// x-displayName: "Subnet DHCP Networks"
	// x-required
	// List of networks from which DHCP server can allocate ip addresses
	DhcpNetworks []*DHCPNetworkType `protobuf:"bytes,1,rep,name=dhcp_networks,json=dhcpNetworks,proto3" json:"dhcp_networks,omitempty"`
}

func (m *DHCPServerParametersType) Reset()      { *m = DHCPServerParametersType{} }
func (*DHCPServerParametersType) ProtoMessage() {}
func (*DHCPServerParametersType) Descriptor() ([]byte, []int) {
	return fileDescriptor_964a9ec4edc9fd55, []int{2}
}
func (m *DHCPServerParametersType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPServerParametersType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DHCPServerParametersType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPServerParametersType.Merge(m, src)
}
func (m *DHCPServerParametersType) XXX_Size() int {
	return m.Size()
}
func (m *DHCPServerParametersType) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPServerParametersType.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPServerParametersType proto.InternalMessageInfo

func (m *DHCPServerParametersType) GetDhcpNetworks() []*DHCPNetworkType {
	if m != nil {
		return m.DhcpNetworks
	}
	return nil
}

// Subnet object create spec type
//
// x-displayName: "Create site subnet object"
// Subnet create config for a site
type SiteSubnetParametersType struct {
	// site reference
	//
	// x-displayName: "Site"
	// Site that the DHCP paramaters are for
	Site *views.ObjectRefType `protobuf:"bytes,1,opt,name=site,proto3" json:"site,omitempty"`
	// Subnet DHCP server parameters
	//
	// x-displayName: "Site DHCP server paramaters"
	// DHCP parameters for a subnet on a site
	SubnetDhcpServerParams *DHCPServerParametersType `protobuf:"bytes,2,opt,name=subnet_dhcp_server_params,json=subnetDhcpServerParams,proto3" json:"subnet_dhcp_server_params,omitempty"`
}

func (m *SiteSubnetParametersType) Reset()      { *m = SiteSubnetParametersType{} }
func (*SiteSubnetParametersType) ProtoMessage() {}
func (*SiteSubnetParametersType) Descriptor() ([]byte, []int) {
	return fileDescriptor_964a9ec4edc9fd55, []int{3}
}
func (m *SiteSubnetParametersType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SiteSubnetParametersType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SiteSubnetParametersType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SiteSubnetParametersType.Merge(m, src)
}
func (m *SiteSubnetParametersType) XXX_Size() int {
	return m.Size()
}
func (m *SiteSubnetParametersType) XXX_DiscardUnknown() {
	xxx_messageInfo_SiteSubnetParametersType.DiscardUnknown(m)
}

var xxx_messageInfo_SiteSubnetParametersType proto.InternalMessageInfo

func (m *SiteSubnetParametersType) GetSite() *views.ObjectRefType {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *SiteSubnetParametersType) GetSubnetDhcpServerParams() *DHCPServerParametersType {
	if m != nil {
		return m.SubnetDhcpServerParams
	}
	return nil
}

// Subnet object global spec
//
// x-displayName: "Global Specification"
// Subnet configuration is applied to an interface of a pod/VM.
type GlobalSpecType struct {
	// Site DHCP server parameters internal structure
	//
	// x-displayName: "Site DHCP server parameters internal"
	// x-required
	// Site DHCP server parameters internal structure is stored
	// in the db and exists to reuse the network_interface
	// DHCPServerParametersType message. Not all fields of the
	// network_interface DHCPServerParametersType object may be
	// relevant to a subnet, so we will always have a separate
	// object for the subnet DHCP server parameters.
	SiteDhcpServerParamsInternal []*SubnetDHCPServerParametersType `protobuf:"bytes,1000,rep,name=site_dhcp_server_params_internal,json=siteDhcpServerParamsInternal,proto3" json:"site_dhcp_server_params_internal,omitempty"`
	// Site subnet parameters that are used by the Create Spec
	//
	// x-displayName: "Site subnet parameters"
	// x-required
	// Only one site can be specified at the moment
	SiteSubnetParams []*SiteSubnetParametersType `protobuf:"bytes,2,rep,name=site_subnet_params,json=siteSubnetParams,proto3" json:"site_subnet_params,omitempty"`
	// Connection Choice
	//
	// x-displayName: "Select Network Connection Type"
	// Select the networks this subnet should optionally be conected to.
	//
	// Types that are valid to be assigned to ConnectionChoice:
	//	*GlobalSpecType_ConnectToSlo
	//	*GlobalSpecType_ConnectToSli
	//	*GlobalSpecType_IsolatedNw
	ConnectionChoice isGlobalSpecType_ConnectionChoice `protobuf_oneof:"connection_choice"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_964a9ec4edc9fd55, []int{4}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_ConnectionChoice interface {
	isGlobalSpecType_ConnectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_ConnectToSlo struct {
	ConnectToSlo *schema.Empty `protobuf:"bytes,4,opt,name=connect_to_slo,json=connectToSlo,proto3,oneof" json:"connect_to_slo,omitempty"`
}
type GlobalSpecType_ConnectToSli struct {
	ConnectToSli *schema.Empty `protobuf:"bytes,5,opt,name=connect_to_sli,json=connectToSli,proto3,oneof" json:"connect_to_sli,omitempty"`
}
type GlobalSpecType_IsolatedNw struct {
	IsolatedNw *schema.Empty `protobuf:"bytes,6,opt,name=isolated_nw,json=isolatedNw,proto3,oneof" json:"isolated_nw,omitempty"`
}

func (*GlobalSpecType_ConnectToSlo) isGlobalSpecType_ConnectionChoice() {}
func (*GlobalSpecType_ConnectToSli) isGlobalSpecType_ConnectionChoice() {}
func (*GlobalSpecType_IsolatedNw) isGlobalSpecType_ConnectionChoice()   {}

func (m *GlobalSpecType) GetConnectionChoice() isGlobalSpecType_ConnectionChoice {
	if m != nil {
		return m.ConnectionChoice
	}
	return nil
}

func (m *GlobalSpecType) GetSiteDhcpServerParamsInternal() []*SubnetDHCPServerParametersType {
	if m != nil {
		return m.SiteDhcpServerParamsInternal
	}
	return nil
}

func (m *GlobalSpecType) GetSiteSubnetParams() []*SiteSubnetParametersType {
	if m != nil {
		return m.SiteSubnetParams
	}
	return nil
}

func (m *GlobalSpecType) GetConnectToSlo() *schema.Empty {
	if x, ok := m.GetConnectionChoice().(*GlobalSpecType_ConnectToSlo); ok {
		return x.ConnectToSlo
	}
	return nil
}

func (m *GlobalSpecType) GetConnectToSli() *schema.Empty {
	if x, ok := m.GetConnectionChoice().(*GlobalSpecType_ConnectToSli); ok {
		return x.ConnectToSli
	}
	return nil
}

func (m *GlobalSpecType) GetIsolatedNw() *schema.Empty {
	if x, ok := m.GetConnectionChoice().(*GlobalSpecType_IsolatedNw); ok {
		return x.IsolatedNw
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_ConnectToSlo)(nil),
		(*GlobalSpecType_ConnectToSli)(nil),
		(*GlobalSpecType_IsolatedNw)(nil),
	}
}

// Create subnet
//
// x-displayName: "Create Subnet"
// Subnet object contains configuration for an interface of a VM/pod.
// It is created in user or shared namespace.
type CreateSpecType struct {
	// Site subnet parameters
	//
	// x-displayName: "Site subnet parameters"
	// x-required
	// Only one site can be specified at the moment
	SiteSubnetParams []*SiteSubnetParametersType `protobuf:"bytes,1,rep,name=site_subnet_params,json=siteSubnetParams,proto3" json:"site_subnet_params,omitempty"`
	// Connection Choice
	//
	// x-displayName: "Select Network Connection Type"
	// Select the networks this subnet should optionally be conected to.
	//
	// Types that are valid to be assigned to ConnectionChoice:
	//	*CreateSpecType_ConnectToSlo
	//	*CreateSpecType_ConnectToSli
	//	*CreateSpecType_IsolatedNw
	ConnectionChoice isCreateSpecType_ConnectionChoice `protobuf_oneof:"connection_choice"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_964a9ec4edc9fd55, []int{5}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_ConnectionChoice interface {
	isCreateSpecType_ConnectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_ConnectToSlo struct {
	ConnectToSlo *schema.Empty `protobuf:"bytes,4,opt,name=connect_to_slo,json=connectToSlo,proto3,oneof" json:"connect_to_slo,omitempty"`
}
type CreateSpecType_ConnectToSli struct {
	ConnectToSli *schema.Empty `protobuf:"bytes,5,opt,name=connect_to_sli,json=connectToSli,proto3,oneof" json:"connect_to_sli,omitempty"`
}
type CreateSpecType_IsolatedNw struct {
	IsolatedNw *schema.Empty `protobuf:"bytes,6,opt,name=isolated_nw,json=isolatedNw,proto3,oneof" json:"isolated_nw,omitempty"`
}

func (*CreateSpecType_ConnectToSlo) isCreateSpecType_ConnectionChoice() {}
func (*CreateSpecType_ConnectToSli) isCreateSpecType_ConnectionChoice() {}
func (*CreateSpecType_IsolatedNw) isCreateSpecType_ConnectionChoice()   {}

func (m *CreateSpecType) GetConnectionChoice() isCreateSpecType_ConnectionChoice {
	if m != nil {
		return m.ConnectionChoice
	}
	return nil
}

func (m *CreateSpecType) GetSiteSubnetParams() []*SiteSubnetParametersType {
	if m != nil {
		return m.SiteSubnetParams
	}
	return nil
}

func (m *CreateSpecType) GetConnectToSlo() *schema.Empty {
	if x, ok := m.GetConnectionChoice().(*CreateSpecType_ConnectToSlo); ok {
		return x.ConnectToSlo
	}
	return nil
}

func (m *CreateSpecType) GetConnectToSli() *schema.Empty {
	if x, ok := m.GetConnectionChoice().(*CreateSpecType_ConnectToSli); ok {
		return x.ConnectToSli
	}
	return nil
}

func (m *CreateSpecType) GetIsolatedNw() *schema.Empty {
	if x, ok := m.GetConnectionChoice().(*CreateSpecType_IsolatedNw); ok {
		return x.IsolatedNw
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_ConnectToSlo)(nil),
		(*CreateSpecType_ConnectToSli)(nil),
		(*CreateSpecType_IsolatedNw)(nil),
	}
}

// GetSpecType
//
// x-displayName: "Get Subnet"
// Shape of subnet specification
type GetSpecType struct {
	// x-required
	SiteSubnetParams []*SiteSubnetParametersType `protobuf:"bytes,1,rep,name=site_subnet_params,json=siteSubnetParams,proto3" json:"site_subnet_params,omitempty"`
	// Connection Choice
	//
	// x-displayName: "Select Network Connection Type"
	// Select the networks this subnet should optionally be conected to.
	//
	// Types that are valid to be assigned to ConnectionChoice:
	//	*GetSpecType_ConnectToSlo
	//	*GetSpecType_ConnectToSli
	//	*GetSpecType_IsolatedNw
	ConnectionChoice isGetSpecType_ConnectionChoice `protobuf_oneof:"connection_choice"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_964a9ec4edc9fd55, []int{6}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_ConnectionChoice interface {
	isGetSpecType_ConnectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_ConnectToSlo struct {
	ConnectToSlo *schema.Empty `protobuf:"bytes,4,opt,name=connect_to_slo,json=connectToSlo,proto3,oneof" json:"connect_to_slo,omitempty"`
}
type GetSpecType_ConnectToSli struct {
	ConnectToSli *schema.Empty `protobuf:"bytes,5,opt,name=connect_to_sli,json=connectToSli,proto3,oneof" json:"connect_to_sli,omitempty"`
}
type GetSpecType_IsolatedNw struct {
	IsolatedNw *schema.Empty `protobuf:"bytes,6,opt,name=isolated_nw,json=isolatedNw,proto3,oneof" json:"isolated_nw,omitempty"`
}

func (*GetSpecType_ConnectToSlo) isGetSpecType_ConnectionChoice() {}
func (*GetSpecType_ConnectToSli) isGetSpecType_ConnectionChoice() {}
func (*GetSpecType_IsolatedNw) isGetSpecType_ConnectionChoice()   {}

func (m *GetSpecType) GetConnectionChoice() isGetSpecType_ConnectionChoice {
	if m != nil {
		return m.ConnectionChoice
	}
	return nil
}

func (m *GetSpecType) GetSiteSubnetParams() []*SiteSubnetParametersType {
	if m != nil {
		return m.SiteSubnetParams
	}
	return nil
}

func (m *GetSpecType) GetConnectToSlo() *schema.Empty {
	if x, ok := m.GetConnectionChoice().(*GetSpecType_ConnectToSlo); ok {
		return x.ConnectToSlo
	}
	return nil
}

func (m *GetSpecType) GetConnectToSli() *schema.Empty {
	if x, ok := m.GetConnectionChoice().(*GetSpecType_ConnectToSli); ok {
		return x.ConnectToSli
	}
	return nil
}

func (m *GetSpecType) GetIsolatedNw() *schema.Empty {
	if x, ok := m.GetConnectionChoice().(*GetSpecType_IsolatedNw); ok {
		return x.IsolatedNw
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_ConnectToSlo)(nil),
		(*GetSpecType_ConnectToSli)(nil),
		(*GetSpecType_IsolatedNw)(nil),
	}
}

// ReplaceSpecType
//
// x-displayName: "Replace Subnet"
// Shape of subnet specification
type ReplaceSpecType struct {
	// Site subnet parameters
	//
	// x-displayName: "Site subnet parameters"
	// x-required
	// Only one site can be specified at the moment
	SiteSubnetParams []*SiteSubnetParametersType `protobuf:"bytes,1,rep,name=site_subnet_params,json=siteSubnetParams,proto3" json:"site_subnet_params,omitempty"`
	// Connection Choice
	//
	// x-displayName: "Select Network Connection Type"
	// Select the networks this subnet should optionally be conected to.
	//
	// Types that are valid to be assigned to ConnectionChoice:
	//	*ReplaceSpecType_ConnectToSlo
	//	*ReplaceSpecType_ConnectToSli
	//	*ReplaceSpecType_IsolatedNw
	ConnectionChoice isReplaceSpecType_ConnectionChoice `protobuf_oneof:"connection_choice"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_964a9ec4edc9fd55, []int{7}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_ConnectionChoice interface {
	isReplaceSpecType_ConnectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_ConnectToSlo struct {
	ConnectToSlo *schema.Empty `protobuf:"bytes,4,opt,name=connect_to_slo,json=connectToSlo,proto3,oneof" json:"connect_to_slo,omitempty"`
}
type ReplaceSpecType_ConnectToSli struct {
	ConnectToSli *schema.Empty `protobuf:"bytes,5,opt,name=connect_to_sli,json=connectToSli,proto3,oneof" json:"connect_to_sli,omitempty"`
}
type ReplaceSpecType_IsolatedNw struct {
	IsolatedNw *schema.Empty `protobuf:"bytes,6,opt,name=isolated_nw,json=isolatedNw,proto3,oneof" json:"isolated_nw,omitempty"`
}

func (*ReplaceSpecType_ConnectToSlo) isReplaceSpecType_ConnectionChoice() {}
func (*ReplaceSpecType_ConnectToSli) isReplaceSpecType_ConnectionChoice() {}
func (*ReplaceSpecType_IsolatedNw) isReplaceSpecType_ConnectionChoice()   {}

func (m *ReplaceSpecType) GetConnectionChoice() isReplaceSpecType_ConnectionChoice {
	if m != nil {
		return m.ConnectionChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetSiteSubnetParams() []*SiteSubnetParametersType {
	if m != nil {
		return m.SiteSubnetParams
	}
	return nil
}

func (m *ReplaceSpecType) GetConnectToSlo() *schema.Empty {
	if x, ok := m.GetConnectionChoice().(*ReplaceSpecType_ConnectToSlo); ok {
		return x.ConnectToSlo
	}
	return nil
}

func (m *ReplaceSpecType) GetConnectToSli() *schema.Empty {
	if x, ok := m.GetConnectionChoice().(*ReplaceSpecType_ConnectToSli); ok {
		return x.ConnectToSli
	}
	return nil
}

func (m *ReplaceSpecType) GetIsolatedNw() *schema.Empty {
	if x, ok := m.GetConnectionChoice().(*ReplaceSpecType_IsolatedNw); ok {
		return x.IsolatedNw
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_ConnectToSlo)(nil),
		(*ReplaceSpecType_ConnectToSli)(nil),
		(*ReplaceSpecType_IsolatedNw)(nil),
	}
}

func init() {
	proto.RegisterType((*SubnetDHCPServerParametersType)(nil), "ves.io.schema.subnet.SubnetDHCPServerParametersType")
	golang_proto.RegisterType((*SubnetDHCPServerParametersType)(nil), "ves.io.schema.subnet.SubnetDHCPServerParametersType")
	proto.RegisterType((*DHCPNetworkType)(nil), "ves.io.schema.subnet.DHCPNetworkType")
	golang_proto.RegisterType((*DHCPNetworkType)(nil), "ves.io.schema.subnet.DHCPNetworkType")
	proto.RegisterType((*DHCPServerParametersType)(nil), "ves.io.schema.subnet.DHCPServerParametersType")
	golang_proto.RegisterType((*DHCPServerParametersType)(nil), "ves.io.schema.subnet.DHCPServerParametersType")
	proto.RegisterType((*SiteSubnetParametersType)(nil), "ves.io.schema.subnet.SiteSubnetParametersType")
	golang_proto.RegisterType((*SiteSubnetParametersType)(nil), "ves.io.schema.subnet.SiteSubnetParametersType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.subnet.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.subnet.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.subnet.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.subnet.CreateSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.subnet.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.subnet.GetSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.subnet.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.subnet.ReplaceSpecType")
}

func init() { proto.RegisterFile("ves.io/schema/subnet/types.proto", fileDescriptor_964a9ec4edc9fd55) }
func init() {
	golang_proto.RegisterFile("ves.io/schema/subnet/types.proto", fileDescriptor_964a9ec4edc9fd55)
}

var fileDescriptor_964a9ec4edc9fd55 = []byte{
	// 858 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xde, 0xe7, 0x75, 0x4c, 0x18, 0x37, 0xae, 0xb3, 0x32, 0x68, 0x13, 0xda, 0xc1, 0xb2, 0x00,
	0x55, 0xd0, 0xac, 0x45, 0x28, 0x54, 0x44, 0xa8, 0x87, 0x4d, 0x51, 0x43, 0x0e, 0x25, 0xb2, 0x7b,
	0xe2, 0xb2, 0x5a, 0x6f, 0xc6, 0xf6, 0xb6, 0xeb, 0x9d, 0xd5, 0xcc, 0xc4, 0x6e, 0x0e, 0x48, 0x55,
	0x25, 0x7e, 0x1c, 0x11, 0x88, 0x3b, 0x47, 0xc4, 0x9f, 0x80, 0x39, 0x44, 0x9c, 0x50, 0x4e, 0x16,
	0xa7, 0x1c, 0xc9, 0xfa, 0x12, 0x6e, 0x3d, 0x56, 0x9c, 0xd0, 0xce, 0xee, 0x46, 0xf6, 0xda, 0x6e,
	0x01, 0x09, 0xf5, 0x92, 0xdb, 0xec, 0xbe, 0xef, 0x7d, 0xef, 0xbd, 0xef, 0x7b, 0x23, 0x0d, 0xaa,
	0xf6, 0x09, 0x37, 0x5c, 0x5a, 0xe7, 0x4e, 0x97, 0xf4, 0xec, 0x3a, 0x3f, 0x68, 0xf9, 0x44, 0xd4,
	0xc5, 0x61, 0x40, 0xb8, 0x11, 0x30, 0x2a, 0xa8, 0x56, 0x89, 0x11, 0x46, 0x8c, 0x30, 0x62, 0xc4,
	0xfa, 0x46, 0xc7, 0x15, 0xdd, 0x83, 0x96, 0xe1, 0xd0, 0x5e, 0xbd, 0x43, 0x3b, 0xb4, 0x2e, 0xc1,
	0xad, 0x83, 0xb6, 0xfc, 0x92, 0x1f, 0xf2, 0x14, 0x93, 0xac, 0xbf, 0x33, 0x5d, 0xc6, 0x27, 0x62,
	0x40, 0xd9, 0x03, 0xcb, 0xf5, 0x05, 0x61, 0x6d, 0xdb, 0x21, 0x93, 0x15, 0xd7, 0x5f, 0x9b, 0x06,
	0xd3, 0x40, 0xb8, 0xd4, 0x4f, 0x83, 0x6b, 0xd3, 0xc1, 0xc9, 0xbc, 0x2b, 0xd3, 0xa1, 0xbe, 0xed,
	0xb9, 0xfb, 0xb6, 0x20, 0x49, 0x34, 0x33, 0x69, 0xdf, 0x25, 0x03, 0x6b, 0x9a, 0xfa, 0xf5, 0x59,
	0x04, 0x9f, 0x2c, 0x50, 0x1b, 0x03, 0xc2, 0x4d, 0x39, 0xff, 0xed, 0x9d, 0xed, 0xbd, 0x26, 0x61,
	0x7d, 0xc2, 0xf6, 0x6c, 0x66, 0xf7, 0x88, 0x20, 0x8c, 0xdf, 0x3b, 0x0c, 0x88, 0xb6, 0x8d, 0xf2,
	0xdc, 0x15, 0x44, 0x87, 0x2a, 0x5c, 0x2b, 0x6e, 0xd6, 0x8c, 0x69, 0xf1, 0x24, 0xa5, 0xf1, 0x69,
	0xeb, 0x3e, 0x71, 0x44, 0x83, 0xb4, 0xa3, 0x0c, 0xb3, 0xf8, 0xd3, 0xe7, 0x32, 0xe5, 0xd1, 0x2f,
	0x00, 0x0d, 0x79, 0xd2, 0x04, 0x5a, 0x8b, 0x65, 0xb6, 0xf6, 0xbb, 0x4e, 0x60, 0x71, 0x59, 0xc8,
	0x0a, 0xa2, 0x4a, 0x5c, 0xcf, 0x49, 0xe6, 0x0f, 0x33, 0xcc, 0x33, 0x8a, 0x1a, 0x8b, 0x5a, 0x6c,
	0xbc, 0x1a, 0x73, 0xdf, 0xee, 0x3a, 0xc1, 0x44, 0x9c, 0x6f, 0x15, 0x8e, 0x87, 0x90, 0x2b, 0x43,
	0xed, 0x7b, 0x40, 0x97, 0xa3, 0xe4, 0xbb, 0x31, 0xa5, 0x1c, 0xeb, 0x26, 0x2a, 0xa5, 0x15, 0x02,
	0x46, 0xda, 0xee, 0x43, 0xd9, 0xc6, 0xcb, 0x66, 0xe9, 0xe9, 0x10, 0x94, 0x9f, 0xff, 0x3c, 0x52,
	0x97, 0x98, 0xfa, 0x14, 0x60, 0x47, 0x69, 0xac, 0x24, 0xb8, 0x3d, 0x09, 0xdb, 0x7a, 0xe3, 0x78,
	0x08, 0x55, 0x84, 0x51, 0x21, 0xfe, 0x7e, 0xbb, 0x82, 0x34, 0x54, 0xce, 0x92, 0x99, 0x57, 0xd1,
	0x2b, 0xd3, 0x7f, 0x2c, 0xa7, 0x4b, 0x5d, 0x87, 0x68, 0xf9, 0xd1, 0x10, 0x60, 0x37, 0xbf, 0x0c,
	0xe5, 0x5c, 0xed, 0x07, 0x40, 0xfa, 0x42, 0xdd, 0xef, 0xa3, 0x15, 0xa9, 0x55, 0x42, 0xc3, 0x75,
	0xa8, 0xaa, 0xd7, 0x8a, 0x9b, 0x6f, 0x1a, 0xf3, 0xb6, 0xd7, 0xc8, 0x8c, 0x67, 0x62, 0x39, 0xc2,
	0xb7, 0xd1, 0xf8, 0xe9, 0x69, 0xf9, 0xfc, 0xa4, 0x43, 0xe3, 0x52, 0xc4, 0x9d, 0x24, 0xf0, 0x2d,
	0xfd, 0xd7, 0x21, 0x44, 0x73, 0xac, 0x44, 0x34, 0xd5, 0xf4, 0xb7, 0x06, 0xef, 0xd6, 0x7e, 0x07,
	0xa4, 0x37, 0x5d, 0x41, 0xe2, 0x25, 0xf9, 0x3f, 0x56, 0xc3, 0x7d, 0xfe, 0x6a, 0x18, 0x8b, 0x67,
	0xfe, 0x4f, 0xfb, 0xf0, 0x45, 0x1e, 0x95, 0xee, 0x78, 0xb4, 0x65, 0x7b, 0xcd, 0x80, 0x38, 0x72,
	0x94, 0xef, 0x00, 0x55, 0xa3, 0x76, 0xe6, 0x34, 0x11, 0x6f, 0xa0, 0x6f, 0x7b, 0xfa, 0xd9, 0x4b,
	0xd2, 0x82, 0x1b, 0xf3, 0xdb, 0x79, 0xf6, 0x3d, 0x32, 0x2b, 0xf3, 0x1c, 0x69, 0x5c, 0x89, 0x8a,
	0x66, 0x1b, 0xfd, 0x24, 0x29, 0xa8, 0x31, 0xa4, 0xc9, 0xa6, 0x12, 0x81, 0xce, 0x45, 0x51, 0x17,
	0x8b, 0xb2, 0xc8, 0xac, 0x05, 0xf5, 0xcb, 0x7c, 0x1a, 0xcf, 0xb5, 0x8f, 0x50, 0xc9, 0xa1, 0xbe,
	0x4f, 0x1c, 0x61, 0x09, 0x6a, 0x71, 0x8f, 0xea, 0x79, 0x69, 0x42, 0x25, 0x53, 0xef, 0xe3, 0x5e,
	0x20, 0x0e, 0x77, 0x94, 0xc6, 0xa5, 0x04, 0x7d, 0x8f, 0x36, 0x3d, 0x3a, 0x93, 0xed, 0xea, 0x4b,
	0xff, 0x38, 0xdb, 0xd5, 0x6e, 0xa2, 0xa2, 0xcb, 0xa9, 0x67, 0x0b, 0xb2, 0x6f, 0xf9, 0x03, 0xbd,
	0xf0, 0xcc, 0x54, 0x94, 0x42, 0xef, 0x0e, 0x52, 0x67, 0xcd, 0xb7, 0xd0, 0x6a, 0x42, 0xe8, 0x52,
	0x3f, 0xbd, 0x72, 0xab, 0x47, 0x43, 0x28, 0x8c, 0x86, 0xa0, 0x86, 0x43, 0x58, 0xba, 0x71, 0xfd,
	0xfd, 0xeb, 0x1f, 0xec, 0xe6, 0x97, 0xd5, 0x72, 0xbe, 0xf6, 0xa5, 0x8a, 0x4a, 0xdb, 0x8c, 0xd8,
	0x82, 0x9c, 0xef, 0xc1, 0x7c, 0xc5, 0xe1, 0x42, 0xf1, 0xac, 0xe2, 0xab, 0xc7, 0xb7, 0x32, 0x77,
	0xc8, 0xdc, 0x9c, 0x27, 0xfe, 0xd5, 0x44, 0xfc, 0xdc, 0xe3, 0xbf, 0x60, 0x36, 0xbc, 0x9b, 0x5f,
	0xce, 0x95, 0xd5, 0xda, 0x63, 0x15, 0x15, 0xef, 0x10, 0x71, 0xe1, 0xc2, 0xbf, 0x75, 0xa1, 0x32,
	0xe3, 0xc2, 0xd9, 0x2d, 0x30, 0x8d, 0x79, 0x46, 0xac, 0x3d, 0xcf, 0x84, 0xaf, 0x54, 0x74, 0xb9,
	0x41, 0x02, 0xcf, 0x76, 0x2e, 0xae, 0xc3, 0x0b, 0xbd, 0x0e, 0xe6, 0xd7, 0x30, 0x3a, 0xc5, 0xca,
	0xc9, 0x29, 0x56, 0x9e, 0x9c, 0x62, 0x78, 0x14, 0x62, 0xf8, 0x31, 0xc4, 0xf0, 0x5b, 0x88, 0x61,
	0x14, 0x62, 0x38, 0x09, 0x31, 0xfc, 0x11, 0x62, 0x38, 0x0b, 0xb1, 0xf2, 0x24, 0xc4, 0xf0, 0xcd,
	0x18, 0x2b, 0x47, 0x63, 0x0c, 0xa3, 0x31, 0x56, 0x4e, 0xc6, 0x58, 0xf9, 0x6c, 0xb7, 0x43, 0x83,
	0x07, 0x1d, 0xa3, 0x4f, 0x3d, 0x41, 0x18, 0xb3, 0x8d, 0x03, 0x5e, 0x97, 0x87, 0x36, 0x65, 0xbd,
	0x8d, 0x80, 0xd1, 0xbe, 0xbb, 0x4f, 0xd8, 0x46, 0x1a, 0xae, 0x07, 0xad, 0x0e, 0xad, 0x93, 0x87,
	0x22, 0x7d, 0x30, 0x4f, 0xbe, 0x9b, 0x5b, 0x05, 0xf9, 0x4e, 0x7c, 0xef, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xd8, 0xc9, 0x4f, 0xde, 0x56, 0x0b, 0x00, 0x00,
}

func (this *SubnetDHCPServerParametersType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubnetDHCPServerParametersType)
	if !ok {
		that2, ok := that.(SubnetDHCPServerParametersType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	if !this.SubnetDhcpServerParams.Equal(that1.SubnetDhcpServerParams) {
		return false
	}
	return true
}
func (this *DHCPNetworkType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DHCPNetworkType)
	if !ok {
		that2, ok := that.(DHCPNetworkType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.NetworkPrefixChoice == nil {
		if this.NetworkPrefixChoice != nil {
			return false
		}
	} else if this.NetworkPrefixChoice == nil {
		return false
	} else if !this.NetworkPrefixChoice.Equal(that1.NetworkPrefixChoice) {
		return false
	}
	return true
}
func (this *DHCPNetworkType_NetworkPrefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DHCPNetworkType_NetworkPrefix)
	if !ok {
		that2, ok := that.(DHCPNetworkType_NetworkPrefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetworkPrefix != that1.NetworkPrefix {
		return false
	}
	return true
}
func (this *DHCPServerParametersType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DHCPServerParametersType)
	if !ok {
		that2, ok := that.(DHCPServerParametersType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DhcpNetworks) != len(that1.DhcpNetworks) {
		return false
	}
	for i := range this.DhcpNetworks {
		if !this.DhcpNetworks[i].Equal(that1.DhcpNetworks[i]) {
			return false
		}
	}
	return true
}
func (this *SiteSubnetParametersType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SiteSubnetParametersType)
	if !ok {
		that2, ok := that.(SiteSubnetParametersType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(that1.Site) {
		return false
	}
	if !this.SubnetDhcpServerParams.Equal(that1.SubnetDhcpServerParams) {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SiteDhcpServerParamsInternal) != len(that1.SiteDhcpServerParamsInternal) {
		return false
	}
	for i := range this.SiteDhcpServerParamsInternal {
		if !this.SiteDhcpServerParamsInternal[i].Equal(that1.SiteDhcpServerParamsInternal[i]) {
			return false
		}
	}
	if len(this.SiteSubnetParams) != len(that1.SiteSubnetParams) {
		return false
	}
	for i := range this.SiteSubnetParams {
		if !this.SiteSubnetParams[i].Equal(that1.SiteSubnetParams[i]) {
			return false
		}
	}
	if that1.ConnectionChoice == nil {
		if this.ConnectionChoice != nil {
			return false
		}
	} else if this.ConnectionChoice == nil {
		return false
	} else if !this.ConnectionChoice.Equal(that1.ConnectionChoice) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ConnectToSlo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ConnectToSlo)
	if !ok {
		that2, ok := that.(GlobalSpecType_ConnectToSlo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConnectToSlo.Equal(that1.ConnectToSlo) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ConnectToSli) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ConnectToSli)
	if !ok {
		that2, ok := that.(GlobalSpecType_ConnectToSli)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConnectToSli.Equal(that1.ConnectToSli) {
		return false
	}
	return true
}
func (this *GlobalSpecType_IsolatedNw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_IsolatedNw)
	if !ok {
		that2, ok := that.(GlobalSpecType_IsolatedNw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IsolatedNw.Equal(that1.IsolatedNw) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SiteSubnetParams) != len(that1.SiteSubnetParams) {
		return false
	}
	for i := range this.SiteSubnetParams {
		if !this.SiteSubnetParams[i].Equal(that1.SiteSubnetParams[i]) {
			return false
		}
	}
	if that1.ConnectionChoice == nil {
		if this.ConnectionChoice != nil {
			return false
		}
	} else if this.ConnectionChoice == nil {
		return false
	} else if !this.ConnectionChoice.Equal(that1.ConnectionChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_ConnectToSlo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ConnectToSlo)
	if !ok {
		that2, ok := that.(CreateSpecType_ConnectToSlo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConnectToSlo.Equal(that1.ConnectToSlo) {
		return false
	}
	return true
}
func (this *CreateSpecType_ConnectToSli) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ConnectToSli)
	if !ok {
		that2, ok := that.(CreateSpecType_ConnectToSli)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConnectToSli.Equal(that1.ConnectToSli) {
		return false
	}
	return true
}
func (this *CreateSpecType_IsolatedNw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_IsolatedNw)
	if !ok {
		that2, ok := that.(CreateSpecType_IsolatedNw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IsolatedNw.Equal(that1.IsolatedNw) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SiteSubnetParams) != len(that1.SiteSubnetParams) {
		return false
	}
	for i := range this.SiteSubnetParams {
		if !this.SiteSubnetParams[i].Equal(that1.SiteSubnetParams[i]) {
			return false
		}
	}
	if that1.ConnectionChoice == nil {
		if this.ConnectionChoice != nil {
			return false
		}
	} else if this.ConnectionChoice == nil {
		return false
	} else if !this.ConnectionChoice.Equal(that1.ConnectionChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_ConnectToSlo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ConnectToSlo)
	if !ok {
		that2, ok := that.(GetSpecType_ConnectToSlo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConnectToSlo.Equal(that1.ConnectToSlo) {
		return false
	}
	return true
}
func (this *GetSpecType_ConnectToSli) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ConnectToSli)
	if !ok {
		that2, ok := that.(GetSpecType_ConnectToSli)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConnectToSli.Equal(that1.ConnectToSli) {
		return false
	}
	return true
}
func (this *GetSpecType_IsolatedNw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_IsolatedNw)
	if !ok {
		that2, ok := that.(GetSpecType_IsolatedNw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IsolatedNw.Equal(that1.IsolatedNw) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SiteSubnetParams) != len(that1.SiteSubnetParams) {
		return false
	}
	for i := range this.SiteSubnetParams {
		if !this.SiteSubnetParams[i].Equal(that1.SiteSubnetParams[i]) {
			return false
		}
	}
	if that1.ConnectionChoice == nil {
		if this.ConnectionChoice != nil {
			return false
		}
	} else if this.ConnectionChoice == nil {
		return false
	} else if !this.ConnectionChoice.Equal(that1.ConnectionChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ConnectToSlo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ConnectToSlo)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ConnectToSlo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConnectToSlo.Equal(that1.ConnectToSlo) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ConnectToSli) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ConnectToSli)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ConnectToSli)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConnectToSli.Equal(that1.ConnectToSli) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_IsolatedNw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_IsolatedNw)
	if !ok {
		that2, ok := that.(ReplaceSpecType_IsolatedNw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IsolatedNw.Equal(that1.IsolatedNw) {
		return false
	}
	return true
}
func (this *SubnetDHCPServerParametersType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&subnet.SubnetDHCPServerParametersType{")
	if this.Site != nil {
		s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	}
	if this.SubnetDhcpServerParams != nil {
		s = append(s, "SubnetDhcpServerParams: "+fmt.Sprintf("%#v", this.SubnetDhcpServerParams)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DHCPNetworkType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&subnet.DHCPNetworkType{")
	if this.NetworkPrefixChoice != nil {
		s = append(s, "NetworkPrefixChoice: "+fmt.Sprintf("%#v", this.NetworkPrefixChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DHCPNetworkType_NetworkPrefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&subnet.DHCPNetworkType_NetworkPrefix{` +
		`NetworkPrefix:` + fmt.Sprintf("%#v", this.NetworkPrefix) + `}`}, ", ")
	return s
}
func (this *DHCPServerParametersType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&subnet.DHCPServerParametersType{")
	if this.DhcpNetworks != nil {
		s = append(s, "DhcpNetworks: "+fmt.Sprintf("%#v", this.DhcpNetworks)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SiteSubnetParametersType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&subnet.SiteSubnetParametersType{")
	if this.Site != nil {
		s = append(s, "Site: "+fmt.Sprintf("%#v", this.Site)+",\n")
	}
	if this.SubnetDhcpServerParams != nil {
		s = append(s, "SubnetDhcpServerParams: "+fmt.Sprintf("%#v", this.SubnetDhcpServerParams)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&subnet.GlobalSpecType{")
	if this.SiteDhcpServerParamsInternal != nil {
		s = append(s, "SiteDhcpServerParamsInternal: "+fmt.Sprintf("%#v", this.SiteDhcpServerParamsInternal)+",\n")
	}
	if this.SiteSubnetParams != nil {
		s = append(s, "SiteSubnetParams: "+fmt.Sprintf("%#v", this.SiteSubnetParams)+",\n")
	}
	if this.ConnectionChoice != nil {
		s = append(s, "ConnectionChoice: "+fmt.Sprintf("%#v", this.ConnectionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_ConnectToSlo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&subnet.GlobalSpecType_ConnectToSlo{` +
		`ConnectToSlo:` + fmt.Sprintf("%#v", this.ConnectToSlo) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ConnectToSli) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&subnet.GlobalSpecType_ConnectToSli{` +
		`ConnectToSli:` + fmt.Sprintf("%#v", this.ConnectToSli) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_IsolatedNw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&subnet.GlobalSpecType_IsolatedNw{` +
		`IsolatedNw:` + fmt.Sprintf("%#v", this.IsolatedNw) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&subnet.CreateSpecType{")
	if this.SiteSubnetParams != nil {
		s = append(s, "SiteSubnetParams: "+fmt.Sprintf("%#v", this.SiteSubnetParams)+",\n")
	}
	if this.ConnectionChoice != nil {
		s = append(s, "ConnectionChoice: "+fmt.Sprintf("%#v", this.ConnectionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_ConnectToSlo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&subnet.CreateSpecType_ConnectToSlo{` +
		`ConnectToSlo:` + fmt.Sprintf("%#v", this.ConnectToSlo) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ConnectToSli) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&subnet.CreateSpecType_ConnectToSli{` +
		`ConnectToSli:` + fmt.Sprintf("%#v", this.ConnectToSli) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_IsolatedNw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&subnet.CreateSpecType_IsolatedNw{` +
		`IsolatedNw:` + fmt.Sprintf("%#v", this.IsolatedNw) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&subnet.GetSpecType{")
	if this.SiteSubnetParams != nil {
		s = append(s, "SiteSubnetParams: "+fmt.Sprintf("%#v", this.SiteSubnetParams)+",\n")
	}
	if this.ConnectionChoice != nil {
		s = append(s, "ConnectionChoice: "+fmt.Sprintf("%#v", this.ConnectionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_ConnectToSlo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&subnet.GetSpecType_ConnectToSlo{` +
		`ConnectToSlo:` + fmt.Sprintf("%#v", this.ConnectToSlo) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ConnectToSli) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&subnet.GetSpecType_ConnectToSli{` +
		`ConnectToSli:` + fmt.Sprintf("%#v", this.ConnectToSli) + `}`}, ", ")
	return s
}
func (this *GetSpecType_IsolatedNw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&subnet.GetSpecType_IsolatedNw{` +
		`IsolatedNw:` + fmt.Sprintf("%#v", this.IsolatedNw) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&subnet.ReplaceSpecType{")
	if this.SiteSubnetParams != nil {
		s = append(s, "SiteSubnetParams: "+fmt.Sprintf("%#v", this.SiteSubnetParams)+",\n")
	}
	if this.ConnectionChoice != nil {
		s = append(s, "ConnectionChoice: "+fmt.Sprintf("%#v", this.ConnectionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_ConnectToSlo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&subnet.ReplaceSpecType_ConnectToSlo{` +
		`ConnectToSlo:` + fmt.Sprintf("%#v", this.ConnectToSlo) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ConnectToSli) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&subnet.ReplaceSpecType_ConnectToSli{` +
		`ConnectToSli:` + fmt.Sprintf("%#v", this.ConnectToSli) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_IsolatedNw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&subnet.ReplaceSpecType_IsolatedNw{` +
		`IsolatedNw:` + fmt.Sprintf("%#v", this.IsolatedNw) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SubnetDHCPServerParametersType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubnetDHCPServerParametersType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubnetDHCPServerParametersType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubnetDhcpServerParams != nil {
		{
			size, err := m.SubnetDhcpServerParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DHCPNetworkType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPNetworkType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPNetworkType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NetworkPrefixChoice != nil {
		{
			size := m.NetworkPrefixChoice.Size()
			i -= size
			if _, err := m.NetworkPrefixChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DHCPNetworkType_NetworkPrefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPNetworkType_NetworkPrefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.NetworkPrefix)
	copy(dAtA[i:], m.NetworkPrefix)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.NetworkPrefix)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *DHCPServerParametersType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPServerParametersType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPServerParametersType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DhcpNetworks) > 0 {
		for iNdEx := len(m.DhcpNetworks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DhcpNetworks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SiteSubnetParametersType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SiteSubnetParametersType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SiteSubnetParametersType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubnetDhcpServerParams != nil {
		{
			size, err := m.SubnetDhcpServerParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Site != nil {
		{
			size, err := m.Site.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SiteDhcpServerParamsInternal) > 0 {
		for iNdEx := len(m.SiteDhcpServerParamsInternal) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SiteDhcpServerParamsInternal[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.ConnectionChoice != nil {
		{
			size := m.ConnectionChoice.Size()
			i -= size
			if _, err := m.ConnectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.SiteSubnetParams) > 0 {
		for iNdEx := len(m.SiteSubnetParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SiteSubnetParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_ConnectToSlo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ConnectToSlo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConnectToSlo != nil {
		{
			size, err := m.ConnectToSlo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ConnectToSli) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ConnectToSli) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConnectToSli != nil {
		{
			size, err := m.ConnectToSli.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_IsolatedNw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_IsolatedNw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IsolatedNw != nil {
		{
			size, err := m.IsolatedNw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnectionChoice != nil {
		{
			size := m.ConnectionChoice.Size()
			i -= size
			if _, err := m.ConnectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.SiteSubnetParams) > 0 {
		for iNdEx := len(m.SiteSubnetParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SiteSubnetParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_ConnectToSlo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ConnectToSlo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConnectToSlo != nil {
		{
			size, err := m.ConnectToSlo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ConnectToSli) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ConnectToSli) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConnectToSli != nil {
		{
			size, err := m.ConnectToSli.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_IsolatedNw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_IsolatedNw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IsolatedNw != nil {
		{
			size, err := m.IsolatedNw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnectionChoice != nil {
		{
			size := m.ConnectionChoice.Size()
			i -= size
			if _, err := m.ConnectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.SiteSubnetParams) > 0 {
		for iNdEx := len(m.SiteSubnetParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SiteSubnetParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_ConnectToSlo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ConnectToSlo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConnectToSlo != nil {
		{
			size, err := m.ConnectToSlo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ConnectToSli) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ConnectToSli) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConnectToSli != nil {
		{
			size, err := m.ConnectToSli.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_IsolatedNw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_IsolatedNw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IsolatedNw != nil {
		{
			size, err := m.IsolatedNw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnectionChoice != nil {
		{
			size := m.ConnectionChoice.Size()
			i -= size
			if _, err := m.ConnectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.SiteSubnetParams) > 0 {
		for iNdEx := len(m.SiteSubnetParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SiteSubnetParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_ConnectToSlo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ConnectToSlo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConnectToSlo != nil {
		{
			size, err := m.ConnectToSlo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ConnectToSli) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ConnectToSli) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConnectToSli != nil {
		{
			size, err := m.ConnectToSli.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_IsolatedNw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_IsolatedNw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IsolatedNw != nil {
		{
			size, err := m.IsolatedNw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubnetDHCPServerParametersType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SubnetDhcpServerParams != nil {
		l = m.SubnetDhcpServerParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DHCPNetworkType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkPrefixChoice != nil {
		n += m.NetworkPrefixChoice.Size()
	}
	return n
}

func (m *DHCPNetworkType_NetworkPrefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkPrefix)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *DHCPServerParametersType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DhcpNetworks) > 0 {
		for _, e := range m.DhcpNetworks {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SiteSubnetParametersType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Site != nil {
		l = m.Site.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SubnetDhcpServerParams != nil {
		l = m.SubnetDhcpServerParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SiteSubnetParams) > 0 {
		for _, e := range m.SiteSubnetParams {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ConnectionChoice != nil {
		n += m.ConnectionChoice.Size()
	}
	if len(m.SiteDhcpServerParamsInternal) > 0 {
		for _, e := range m.SiteDhcpServerParamsInternal {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType_ConnectToSlo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnectToSlo != nil {
		l = m.ConnectToSlo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ConnectToSli) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnectToSli != nil {
		l = m.ConnectToSli.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_IsolatedNw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsolatedNw != nil {
		l = m.IsolatedNw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SiteSubnetParams) > 0 {
		for _, e := range m.SiteSubnetParams {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ConnectionChoice != nil {
		n += m.ConnectionChoice.Size()
	}
	return n
}

func (m *CreateSpecType_ConnectToSlo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnectToSlo != nil {
		l = m.ConnectToSlo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ConnectToSli) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnectToSli != nil {
		l = m.ConnectToSli.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_IsolatedNw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsolatedNw != nil {
		l = m.IsolatedNw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SiteSubnetParams) > 0 {
		for _, e := range m.SiteSubnetParams {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ConnectionChoice != nil {
		n += m.ConnectionChoice.Size()
	}
	return n
}

func (m *GetSpecType_ConnectToSlo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnectToSlo != nil {
		l = m.ConnectToSlo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ConnectToSli) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnectToSli != nil {
		l = m.ConnectToSli.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_IsolatedNw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsolatedNw != nil {
		l = m.IsolatedNw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SiteSubnetParams) > 0 {
		for _, e := range m.SiteSubnetParams {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ConnectionChoice != nil {
		n += m.ConnectionChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_ConnectToSlo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnectToSlo != nil {
		l = m.ConnectToSlo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ConnectToSli) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnectToSli != nil {
		l = m.ConnectToSli.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_IsolatedNw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsolatedNw != nil {
		l = m.IsolatedNw.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SubnetDHCPServerParametersType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubnetDHCPServerParametersType{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`SubnetDhcpServerParams:` + strings.Replace(fmt.Sprintf("%v", this.SubnetDhcpServerParams), "DHCPServerParametersType", "network_interface.DHCPServerParametersType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DHCPNetworkType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DHCPNetworkType{`,
		`NetworkPrefixChoice:` + fmt.Sprintf("%v", this.NetworkPrefixChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DHCPNetworkType_NetworkPrefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DHCPNetworkType_NetworkPrefix{`,
		`NetworkPrefix:` + fmt.Sprintf("%v", this.NetworkPrefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DHCPServerParametersType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDhcpNetworks := "[]*DHCPNetworkType{"
	for _, f := range this.DhcpNetworks {
		repeatedStringForDhcpNetworks += strings.Replace(f.String(), "DHCPNetworkType", "DHCPNetworkType", 1) + ","
	}
	repeatedStringForDhcpNetworks += "}"
	s := strings.Join([]string{`&DHCPServerParametersType{`,
		`DhcpNetworks:` + repeatedStringForDhcpNetworks + `,`,
		`}`,
	}, "")
	return s
}
func (this *SiteSubnetParametersType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SiteSubnetParametersType{`,
		`Site:` + strings.Replace(fmt.Sprintf("%v", this.Site), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`SubnetDhcpServerParams:` + strings.Replace(this.SubnetDhcpServerParams.String(), "DHCPServerParametersType", "DHCPServerParametersType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSiteSubnetParams := "[]*SiteSubnetParametersType{"
	for _, f := range this.SiteSubnetParams {
		repeatedStringForSiteSubnetParams += strings.Replace(f.String(), "SiteSubnetParametersType", "SiteSubnetParametersType", 1) + ","
	}
	repeatedStringForSiteSubnetParams += "}"
	repeatedStringForSiteDhcpServerParamsInternal := "[]*SubnetDHCPServerParametersType{"
	for _, f := range this.SiteDhcpServerParamsInternal {
		repeatedStringForSiteDhcpServerParamsInternal += strings.Replace(f.String(), "SubnetDHCPServerParametersType", "SubnetDHCPServerParametersType", 1) + ","
	}
	repeatedStringForSiteDhcpServerParamsInternal += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`SiteSubnetParams:` + repeatedStringForSiteSubnetParams + `,`,
		`ConnectionChoice:` + fmt.Sprintf("%v", this.ConnectionChoice) + `,`,
		`SiteDhcpServerParamsInternal:` + repeatedStringForSiteDhcpServerParamsInternal + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ConnectToSlo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ConnectToSlo{`,
		`ConnectToSlo:` + strings.Replace(fmt.Sprintf("%v", this.ConnectToSlo), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ConnectToSli) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ConnectToSli{`,
		`ConnectToSli:` + strings.Replace(fmt.Sprintf("%v", this.ConnectToSli), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_IsolatedNw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_IsolatedNw{`,
		`IsolatedNw:` + strings.Replace(fmt.Sprintf("%v", this.IsolatedNw), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSiteSubnetParams := "[]*SiteSubnetParametersType{"
	for _, f := range this.SiteSubnetParams {
		repeatedStringForSiteSubnetParams += strings.Replace(f.String(), "SiteSubnetParametersType", "SiteSubnetParametersType", 1) + ","
	}
	repeatedStringForSiteSubnetParams += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`SiteSubnetParams:` + repeatedStringForSiteSubnetParams + `,`,
		`ConnectionChoice:` + fmt.Sprintf("%v", this.ConnectionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ConnectToSlo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ConnectToSlo{`,
		`ConnectToSlo:` + strings.Replace(fmt.Sprintf("%v", this.ConnectToSlo), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ConnectToSli) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ConnectToSli{`,
		`ConnectToSli:` + strings.Replace(fmt.Sprintf("%v", this.ConnectToSli), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_IsolatedNw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_IsolatedNw{`,
		`IsolatedNw:` + strings.Replace(fmt.Sprintf("%v", this.IsolatedNw), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSiteSubnetParams := "[]*SiteSubnetParametersType{"
	for _, f := range this.SiteSubnetParams {
		repeatedStringForSiteSubnetParams += strings.Replace(f.String(), "SiteSubnetParametersType", "SiteSubnetParametersType", 1) + ","
	}
	repeatedStringForSiteSubnetParams += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`SiteSubnetParams:` + repeatedStringForSiteSubnetParams + `,`,
		`ConnectionChoice:` + fmt.Sprintf("%v", this.ConnectionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ConnectToSlo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ConnectToSlo{`,
		`ConnectToSlo:` + strings.Replace(fmt.Sprintf("%v", this.ConnectToSlo), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ConnectToSli) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ConnectToSli{`,
		`ConnectToSli:` + strings.Replace(fmt.Sprintf("%v", this.ConnectToSli), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_IsolatedNw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_IsolatedNw{`,
		`IsolatedNw:` + strings.Replace(fmt.Sprintf("%v", this.IsolatedNw), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSiteSubnetParams := "[]*SiteSubnetParametersType{"
	for _, f := range this.SiteSubnetParams {
		repeatedStringForSiteSubnetParams += strings.Replace(f.String(), "SiteSubnetParametersType", "SiteSubnetParametersType", 1) + ","
	}
	repeatedStringForSiteSubnetParams += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`SiteSubnetParams:` + repeatedStringForSiteSubnetParams + `,`,
		`ConnectionChoice:` + fmt.Sprintf("%v", this.ConnectionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ConnectToSlo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ConnectToSlo{`,
		`ConnectToSlo:` + strings.Replace(fmt.Sprintf("%v", this.ConnectToSlo), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ConnectToSli) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ConnectToSli{`,
		`ConnectToSli:` + strings.Replace(fmt.Sprintf("%v", this.ConnectToSli), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_IsolatedNw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_IsolatedNw{`,
		`IsolatedNw:` + strings.Replace(fmt.Sprintf("%v", this.IsolatedNw), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SubnetDHCPServerParametersType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubnetDHCPServerParametersType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubnetDHCPServerParametersType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Site == nil {
				m.Site = &views.ObjectRefType{}
			}
			if err := m.Site.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetDhcpServerParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubnetDhcpServerParams == nil {
				m.SubnetDhcpServerParams = &network_interface.DHCPServerParametersType{}
			}
			if err := m.SubnetDhcpServerParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHCPNetworkType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPNetworkType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPNetworkType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkPrefixChoice = &DHCPNetworkType_NetworkPrefix{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHCPServerParametersType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPServerParametersType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPServerParametersType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DhcpNetworks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DhcpNetworks = append(m.DhcpNetworks, &DHCPNetworkType{})
			if err := m.DhcpNetworks[len(m.DhcpNetworks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SiteSubnetParametersType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SiteSubnetParametersType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SiteSubnetParametersType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Site == nil {
				m.Site = &views.ObjectRefType{}
			}
			if err := m.Site.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetDhcpServerParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubnetDhcpServerParams == nil {
				m.SubnetDhcpServerParams = &DHCPServerParametersType{}
			}
			if err := m.SubnetDhcpServerParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteSubnetParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteSubnetParams = append(m.SiteSubnetParams, &SiteSubnetParametersType{})
			if err := m.SiteSubnetParams[len(m.SiteSubnetParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectToSlo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionChoice = &GlobalSpecType_ConnectToSlo{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectToSli", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionChoice = &GlobalSpecType_ConnectToSli{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsolatedNw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionChoice = &GlobalSpecType_IsolatedNw{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteDhcpServerParamsInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteDhcpServerParamsInternal = append(m.SiteDhcpServerParamsInternal, &SubnetDHCPServerParametersType{})
			if err := m.SiteDhcpServerParamsInternal[len(m.SiteDhcpServerParamsInternal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteSubnetParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteSubnetParams = append(m.SiteSubnetParams, &SiteSubnetParametersType{})
			if err := m.SiteSubnetParams[len(m.SiteSubnetParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectToSlo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionChoice = &CreateSpecType_ConnectToSlo{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectToSli", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionChoice = &CreateSpecType_ConnectToSli{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsolatedNw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionChoice = &CreateSpecType_IsolatedNw{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteSubnetParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteSubnetParams = append(m.SiteSubnetParams, &SiteSubnetParametersType{})
			if err := m.SiteSubnetParams[len(m.SiteSubnetParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectToSlo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionChoice = &GetSpecType_ConnectToSlo{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectToSli", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionChoice = &GetSpecType_ConnectToSli{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsolatedNw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionChoice = &GetSpecType_IsolatedNw{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiteSubnetParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiteSubnetParams = append(m.SiteSubnetParams, &SiteSubnetParametersType{})
			if err := m.SiteSubnetParams[len(m.SiteSubnetParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectToSlo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionChoice = &ReplaceSpecType_ConnectToSlo{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectToSli", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionChoice = &ReplaceSpecType_ConnectToSli{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsolatedNw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionChoice = &ReplaceSpecType_IsolatedNw{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
