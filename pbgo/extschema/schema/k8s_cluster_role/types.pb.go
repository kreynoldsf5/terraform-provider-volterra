// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/k8s_cluster_role/types.proto

package k8s_cluster_role

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// List of Non Resource URL(s)
//
// x-displayName: "List of Non Resource URL(s)"
// permissions for URL(s) that do not represent K8s resource
type NonResourceURLListType struct {
	// Non Resource URL(s)
	//
	// x-displayName: "Non Resource URL(s)"
	// x-example: "value"
	// x-required
	// allowed URL(s) that do not represent any K8s resource. URL can be suffix or regex.
	Urls []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
	// Allowed Verbs
	//
	// x-displayName: "Allowed Verbs"
	// x-example: "get"
	// x-required
	// Allowed list of verbs(operations) on resources. Use VerbAll for all operations
	Verbs []string `protobuf:"bytes,4,rep,name=verbs,proto3" json:"verbs,omitempty"`
}

func (m *NonResourceURLListType) Reset()      { *m = NonResourceURLListType{} }
func (*NonResourceURLListType) ProtoMessage() {}
func (*NonResourceURLListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c228cd8f0ca143, []int{0}
}
func (m *NonResourceURLListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NonResourceURLListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NonResourceURLListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NonResourceURLListType.Merge(m, src)
}
func (m *NonResourceURLListType) XXX_Size() int {
	return m.Size()
}
func (m *NonResourceURLListType) XXX_DiscardUnknown() {
	xxx_messageInfo_NonResourceURLListType.DiscardUnknown(m)
}

var xxx_messageInfo_NonResourceURLListType proto.InternalMessageInfo

func (m *NonResourceURLListType) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

func (m *NonResourceURLListType) GetVerbs() []string {
	if m != nil {
		return m.Verbs
	}
	return nil
}

// Resource List
//
// x-displayName: "Resource List"
// List of resources in terms of api groups/resource types/resource instances and verbs allowed
type ResourceListType struct {
	// API Groups
	//
	// x-displayName: "API Groups"
	// x-example: "rbac.authorization.k8s.io"
	// x-required
	// Allowed list of API group that contains resources, all resources of a given api group
	ApiGroups []string `protobuf:"bytes,1,rep,name=api_groups,json=apiGroups,proto3" json:"api_groups,omitempty"`
	// Resource Type
	//
	// x-displayName: "Resource Types"
	// x-example: "role"
	// x-required
	// Allowed list of resource types within the api groups.
	ResourceTypes []string `protobuf:"bytes,2,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty"`
	// Resource Instances
	//
	// x-displayName: "Resource Instances"
	// x-example: "admin"
	// Allowed list of resource instances within the resource types.
	ResourceInstances []string `protobuf:"bytes,3,rep,name=resource_instances,json=resourceInstances,proto3" json:"resource_instances,omitempty"`
	// Allowed Verbs
	//
	// x-displayName: "Allowed Verbs"
	// x-example: "get"
	// x-required
	// Allowed list of verbs(operations) on resources. Use * for all operations
	Verbs []string `protobuf:"bytes,4,rep,name=verbs,proto3" json:"verbs,omitempty"`
}

func (m *ResourceListType) Reset()      { *m = ResourceListType{} }
func (*ResourceListType) ProtoMessage() {}
func (*ResourceListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c228cd8f0ca143, []int{1}
}
func (m *ResourceListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ResourceListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceListType.Merge(m, src)
}
func (m *ResourceListType) XXX_Size() int {
	return m.Size()
}
func (m *ResourceListType) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceListType.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceListType proto.InternalMessageInfo

func (m *ResourceListType) GetApiGroups() []string {
	if m != nil {
		return m.ApiGroups
	}
	return nil
}

func (m *ResourceListType) GetResourceTypes() []string {
	if m != nil {
		return m.ResourceTypes
	}
	return nil
}

func (m *ResourceListType) GetResourceInstances() []string {
	if m != nil {
		return m.ResourceInstances
	}
	return nil
}

func (m *ResourceListType) GetVerbs() []string {
	if m != nil {
		return m.Verbs
	}
	return nil
}

// Policy Rule
//
// x-displayName: "Policy Rule"
// Rule for role permission
type PolicyRuleType struct {
	// Select Resource URL
	//
	// x-displayName: "Select Resource"
	// x-required
	// Select if this rule is for resource or non resource URL
	//
	// Types that are valid to be assigned to ResourceChoice:
	//	*PolicyRuleType_ResourceList
	//	*PolicyRuleType_NonResourceUrlList
	ResourceChoice isPolicyRuleType_ResourceChoice `protobuf_oneof:"resource_choice"`
}

func (m *PolicyRuleType) Reset()      { *m = PolicyRuleType{} }
func (*PolicyRuleType) ProtoMessage() {}
func (*PolicyRuleType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c228cd8f0ca143, []int{2}
}
func (m *PolicyRuleType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyRuleType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PolicyRuleType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyRuleType.Merge(m, src)
}
func (m *PolicyRuleType) XXX_Size() int {
	return m.Size()
}
func (m *PolicyRuleType) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyRuleType.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyRuleType proto.InternalMessageInfo

type isPolicyRuleType_ResourceChoice interface {
	isPolicyRuleType_ResourceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PolicyRuleType_ResourceList struct {
	ResourceList *ResourceListType `protobuf:"bytes,2,opt,name=resource_list,json=resourceList,proto3,oneof" json:"resource_list,omitempty"`
}
type PolicyRuleType_NonResourceUrlList struct {
	NonResourceUrlList *NonResourceURLListType `protobuf:"bytes,3,opt,name=non_resource_url_list,json=nonResourceUrlList,proto3,oneof" json:"non_resource_url_list,omitempty"`
}

func (*PolicyRuleType_ResourceList) isPolicyRuleType_ResourceChoice()       {}
func (*PolicyRuleType_NonResourceUrlList) isPolicyRuleType_ResourceChoice() {}

func (m *PolicyRuleType) GetResourceChoice() isPolicyRuleType_ResourceChoice {
	if m != nil {
		return m.ResourceChoice
	}
	return nil
}

func (m *PolicyRuleType) GetResourceList() *ResourceListType {
	if x, ok := m.GetResourceChoice().(*PolicyRuleType_ResourceList); ok {
		return x.ResourceList
	}
	return nil
}

func (m *PolicyRuleType) GetNonResourceUrlList() *NonResourceURLListType {
	if x, ok := m.GetResourceChoice().(*PolicyRuleType_NonResourceUrlList); ok {
		return x.NonResourceUrlList
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PolicyRuleType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PolicyRuleType_ResourceList)(nil),
		(*PolicyRuleType_NonResourceUrlList)(nil),
	}
}

// Policy Rule List
//
// x-displayName: "Policy Rule List"
// List of rules for role permissions
type PolicyRuleListType struct {
	// Policy Rule List
	//
	// x-displayName: "Policy Rules"
	// x-required
	// List of rules for role permissions
	PolicyRule []*PolicyRuleType `protobuf:"bytes,1,rep,name=policy_rule,json=policyRule,proto3" json:"policy_rule,omitempty"`
}

func (m *PolicyRuleListType) Reset()      { *m = PolicyRuleListType{} }
func (*PolicyRuleListType) ProtoMessage() {}
func (*PolicyRuleListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c228cd8f0ca143, []int{3}
}
func (m *PolicyRuleListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyRuleListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PolicyRuleListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyRuleListType.Merge(m, src)
}
func (m *PolicyRuleListType) XXX_Size() int {
	return m.Size()
}
func (m *PolicyRuleListType) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyRuleListType.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyRuleListType proto.InternalMessageInfo

func (m *PolicyRuleListType) GetPolicyRule() []*PolicyRuleType {
	if m != nil {
		return m.PolicyRule
	}
	return nil
}

// GlobalSpecType
//
// x-displayName: "Global Configuration Specification"
// Configuration specification for K8s Cluster Role
type GlobalSpecType struct {
	// Rule Type
	//
	// x-displayName: "Rule Type"
	// x-required
	// Select rule type of this role
	//
	// Types that are valid to be assigned to RuleChoice:
	//	*GlobalSpecType_PolicyRuleList
	//	*GlobalSpecType_K8SClusterRoleSelector
	//	*GlobalSpecType_Yaml
	RuleChoice isGlobalSpecType_RuleChoice `protobuf_oneof:"rule_choice"`
	// K8s YAML
	//
	// x-displayName: "K8s YAML"
	// K8s YAML for ClusterRole
	GeneratedYaml string `protobuf:"bytes,1001,opt,name=generated_yaml,json=generatedYaml,proto3" json:"generated_yaml,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c228cd8f0ca143, []int{4}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_RuleChoice interface {
	isGlobalSpecType_RuleChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_PolicyRuleList struct {
	PolicyRuleList *PolicyRuleListType `protobuf:"bytes,2,opt,name=policy_rule_list,json=policyRuleList,proto3,oneof" json:"policy_rule_list,omitempty"`
}
type GlobalSpecType_K8SClusterRoleSelector struct {
	K8SClusterRoleSelector *schema.LabelSelectorType `protobuf:"bytes,3,opt,name=k8s_cluster_role_selector,json=k8sClusterRoleSelector,proto3,oneof" json:"k8s_cluster_role_selector,omitempty"`
}
type GlobalSpecType_Yaml struct {
	Yaml string `protobuf:"bytes,4,opt,name=yaml,proto3,oneof" json:"yaml,omitempty"`
}

func (*GlobalSpecType_PolicyRuleList) isGlobalSpecType_RuleChoice()         {}
func (*GlobalSpecType_K8SClusterRoleSelector) isGlobalSpecType_RuleChoice() {}
func (*GlobalSpecType_Yaml) isGlobalSpecType_RuleChoice()                   {}

func (m *GlobalSpecType) GetRuleChoice() isGlobalSpecType_RuleChoice {
	if m != nil {
		return m.RuleChoice
	}
	return nil
}

func (m *GlobalSpecType) GetPolicyRuleList() *PolicyRuleListType {
	if x, ok := m.GetRuleChoice().(*GlobalSpecType_PolicyRuleList); ok {
		return x.PolicyRuleList
	}
	return nil
}

func (m *GlobalSpecType) GetK8SClusterRoleSelector() *schema.LabelSelectorType {
	if x, ok := m.GetRuleChoice().(*GlobalSpecType_K8SClusterRoleSelector); ok {
		return x.K8SClusterRoleSelector
	}
	return nil
}

func (m *GlobalSpecType) GetYaml() string {
	if x, ok := m.GetRuleChoice().(*GlobalSpecType_Yaml); ok {
		return x.Yaml
	}
	return ""
}

func (m *GlobalSpecType) GetGeneratedYaml() string {
	if m != nil {
		return m.GeneratedYaml
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_PolicyRuleList)(nil),
		(*GlobalSpecType_K8SClusterRoleSelector)(nil),
		(*GlobalSpecType_Yaml)(nil),
	}
}

// Create k8s_cluster_role
//
// x-displayName: "Create Configuration Specification"
// Create k8s_cluster_role will create the object in the storage backend for namespace metadata.namespace
type CreateSpecType struct {
	// Types that are valid to be assigned to RuleChoice:
	//	*CreateSpecType_PolicyRuleList
	//	*CreateSpecType_K8SClusterRoleSelector
	//	*CreateSpecType_Yaml
	RuleChoice isCreateSpecType_RuleChoice `protobuf_oneof:"rule_choice"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c228cd8f0ca143, []int{5}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_RuleChoice interface {
	isCreateSpecType_RuleChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_PolicyRuleList struct {
	PolicyRuleList *PolicyRuleListType `protobuf:"bytes,2,opt,name=policy_rule_list,json=policyRuleList,proto3,oneof" json:"policy_rule_list,omitempty"`
}
type CreateSpecType_K8SClusterRoleSelector struct {
	K8SClusterRoleSelector *schema.LabelSelectorType `protobuf:"bytes,3,opt,name=k8s_cluster_role_selector,json=k8sClusterRoleSelector,proto3,oneof" json:"k8s_cluster_role_selector,omitempty"`
}
type CreateSpecType_Yaml struct {
	Yaml string `protobuf:"bytes,4,opt,name=yaml,proto3,oneof" json:"yaml,omitempty"`
}

func (*CreateSpecType_PolicyRuleList) isCreateSpecType_RuleChoice()         {}
func (*CreateSpecType_K8SClusterRoleSelector) isCreateSpecType_RuleChoice() {}
func (*CreateSpecType_Yaml) isCreateSpecType_RuleChoice()                   {}

func (m *CreateSpecType) GetRuleChoice() isCreateSpecType_RuleChoice {
	if m != nil {
		return m.RuleChoice
	}
	return nil
}

func (m *CreateSpecType) GetPolicyRuleList() *PolicyRuleListType {
	if x, ok := m.GetRuleChoice().(*CreateSpecType_PolicyRuleList); ok {
		return x.PolicyRuleList
	}
	return nil
}

func (m *CreateSpecType) GetK8SClusterRoleSelector() *schema.LabelSelectorType {
	if x, ok := m.GetRuleChoice().(*CreateSpecType_K8SClusterRoleSelector); ok {
		return x.K8SClusterRoleSelector
	}
	return nil
}

func (m *CreateSpecType) GetYaml() string {
	if x, ok := m.GetRuleChoice().(*CreateSpecType_Yaml); ok {
		return x.Yaml
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_PolicyRuleList)(nil),
		(*CreateSpecType_K8SClusterRoleSelector)(nil),
		(*CreateSpecType_Yaml)(nil),
	}
}

// Replace k8s_cluster_role
//
// x-displayName: "Replace Configuration Specification"
// Replacing an k8s_cluster_role object will update the object by replacing the existing spec with the provided one.
// For read-then-write operations a resourceVersion mismatch will occur if the object was modified between the read and write
type ReplaceSpecType struct {
	// Types that are valid to be assigned to RuleChoice:
	//	*ReplaceSpecType_PolicyRuleList
	//	*ReplaceSpecType_K8SClusterRoleSelector
	//	*ReplaceSpecType_Yaml
	RuleChoice isReplaceSpecType_RuleChoice `protobuf_oneof:"rule_choice"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c228cd8f0ca143, []int{6}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_RuleChoice interface {
	isReplaceSpecType_RuleChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_PolicyRuleList struct {
	PolicyRuleList *PolicyRuleListType `protobuf:"bytes,2,opt,name=policy_rule_list,json=policyRuleList,proto3,oneof" json:"policy_rule_list,omitempty"`
}
type ReplaceSpecType_K8SClusterRoleSelector struct {
	K8SClusterRoleSelector *schema.LabelSelectorType `protobuf:"bytes,3,opt,name=k8s_cluster_role_selector,json=k8sClusterRoleSelector,proto3,oneof" json:"k8s_cluster_role_selector,omitempty"`
}
type ReplaceSpecType_Yaml struct {
	Yaml string `protobuf:"bytes,4,opt,name=yaml,proto3,oneof" json:"yaml,omitempty"`
}

func (*ReplaceSpecType_PolicyRuleList) isReplaceSpecType_RuleChoice()         {}
func (*ReplaceSpecType_K8SClusterRoleSelector) isReplaceSpecType_RuleChoice() {}
func (*ReplaceSpecType_Yaml) isReplaceSpecType_RuleChoice()                   {}

func (m *ReplaceSpecType) GetRuleChoice() isReplaceSpecType_RuleChoice {
	if m != nil {
		return m.RuleChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetPolicyRuleList() *PolicyRuleListType {
	if x, ok := m.GetRuleChoice().(*ReplaceSpecType_PolicyRuleList); ok {
		return x.PolicyRuleList
	}
	return nil
}

func (m *ReplaceSpecType) GetK8SClusterRoleSelector() *schema.LabelSelectorType {
	if x, ok := m.GetRuleChoice().(*ReplaceSpecType_K8SClusterRoleSelector); ok {
		return x.K8SClusterRoleSelector
	}
	return nil
}

func (m *ReplaceSpecType) GetYaml() string {
	if x, ok := m.GetRuleChoice().(*ReplaceSpecType_Yaml); ok {
		return x.Yaml
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_PolicyRuleList)(nil),
		(*ReplaceSpecType_K8SClusterRoleSelector)(nil),
		(*ReplaceSpecType_Yaml)(nil),
	}
}

// Get k8s_cluster_role
//
// x-displayName: "Get Configuration Specification"
// Get k8s_cluster_role will get the object from the storage backend for namespace metadata.namespace
type GetSpecType struct {
	// Types that are valid to be assigned to RuleChoice:
	//	*GetSpecType_PolicyRuleList
	//	*GetSpecType_K8SClusterRoleSelector
	//	*GetSpecType_Yaml
	RuleChoice isGetSpecType_RuleChoice `protobuf_oneof:"rule_choice"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c228cd8f0ca143, []int{7}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_RuleChoice interface {
	isGetSpecType_RuleChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_PolicyRuleList struct {
	PolicyRuleList *PolicyRuleListType `protobuf:"bytes,2,opt,name=policy_rule_list,json=policyRuleList,proto3,oneof" json:"policy_rule_list,omitempty"`
}
type GetSpecType_K8SClusterRoleSelector struct {
	K8SClusterRoleSelector *schema.LabelSelectorType `protobuf:"bytes,3,opt,name=k8s_cluster_role_selector,json=k8sClusterRoleSelector,proto3,oneof" json:"k8s_cluster_role_selector,omitempty"`
}
type GetSpecType_Yaml struct {
	Yaml string `protobuf:"bytes,4,opt,name=yaml,proto3,oneof" json:"yaml,omitempty"`
}

func (*GetSpecType_PolicyRuleList) isGetSpecType_RuleChoice()         {}
func (*GetSpecType_K8SClusterRoleSelector) isGetSpecType_RuleChoice() {}
func (*GetSpecType_Yaml) isGetSpecType_RuleChoice()                   {}

func (m *GetSpecType) GetRuleChoice() isGetSpecType_RuleChoice {
	if m != nil {
		return m.RuleChoice
	}
	return nil
}

func (m *GetSpecType) GetPolicyRuleList() *PolicyRuleListType {
	if x, ok := m.GetRuleChoice().(*GetSpecType_PolicyRuleList); ok {
		return x.PolicyRuleList
	}
	return nil
}

func (m *GetSpecType) GetK8SClusterRoleSelector() *schema.LabelSelectorType {
	if x, ok := m.GetRuleChoice().(*GetSpecType_K8SClusterRoleSelector); ok {
		return x.K8SClusterRoleSelector
	}
	return nil
}

func (m *GetSpecType) GetYaml() string {
	if x, ok := m.GetRuleChoice().(*GetSpecType_Yaml); ok {
		return x.Yaml
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_PolicyRuleList)(nil),
		(*GetSpecType_K8SClusterRoleSelector)(nil),
		(*GetSpecType_Yaml)(nil),
	}
}

func init() {
	proto.RegisterType((*NonResourceURLListType)(nil), "ves.io.schema.k8s_cluster_role.NonResourceURLListType")
	golang_proto.RegisterType((*NonResourceURLListType)(nil), "ves.io.schema.k8s_cluster_role.NonResourceURLListType")
	proto.RegisterType((*ResourceListType)(nil), "ves.io.schema.k8s_cluster_role.ResourceListType")
	golang_proto.RegisterType((*ResourceListType)(nil), "ves.io.schema.k8s_cluster_role.ResourceListType")
	proto.RegisterType((*PolicyRuleType)(nil), "ves.io.schema.k8s_cluster_role.PolicyRuleType")
	golang_proto.RegisterType((*PolicyRuleType)(nil), "ves.io.schema.k8s_cluster_role.PolicyRuleType")
	proto.RegisterType((*PolicyRuleListType)(nil), "ves.io.schema.k8s_cluster_role.PolicyRuleListType")
	golang_proto.RegisterType((*PolicyRuleListType)(nil), "ves.io.schema.k8s_cluster_role.PolicyRuleListType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.k8s_cluster_role.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.k8s_cluster_role.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.k8s_cluster_role.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.k8s_cluster_role.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.k8s_cluster_role.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.k8s_cluster_role.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.k8s_cluster_role.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.k8s_cluster_role.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/k8s_cluster_role/types.proto", fileDescriptor_f9c228cd8f0ca143)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/k8s_cluster_role/types.proto", fileDescriptor_f9c228cd8f0ca143)
}

var fileDescriptor_f9c228cd8f0ca143 = []byte{
	// 1730 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x4f, 0x6c, 0x5b, 0x49,
	0x19, 0xf7, 0xd8, 0xce, 0xbf, 0xcf, 0x89, 0x93, 0xbc, 0x74, 0xb3, 0x8e, 0x5b, 0x8c, 0x09, 0x08,
	0x45, 0x51, 0xeb, 0x2c, 0x29, 0x42, 0xab, 0x1c, 0x90, 0x9a, 0x0a, 0xb5, 0x8b, 0x02, 0xaa, 0xbc,
	0xdb, 0x45, 0xcb, 0x01, 0x6b, 0x3c, 0xef, 0xcb, 0xcb, 0x6c, 0xc6, 0x33, 0x6f, 0x67, 0xe6, 0x39,
	0x1b, 0xa4, 0x95, 0x0a, 0x12, 0x20, 0x6e, 0x4b, 0x8f, 0x20, 0x21, 0xc4, 0x89, 0x1b, 0x48, 0x70,
	0x5a, 0xef, 0xa1, 0x02, 0x0e, 0x68, 0xc5, 0xa1, 0xc7, 0x1e, 0x38, 0x50, 0x97, 0xc3, 0xae, 0xb8,
	0xec, 0x11, 0x71, 0x42, 0x33, 0xef, 0x3d, 0xc7, 0xb6, 0x92, 0x6d, 0x8b, 0x10, 0xa7, 0x5e, 0xa2,
	0x37, 0xf3, 0xfd, 0x9d, 0xdf, 0xf7, 0xfb, 0xe6, 0x9b, 0x18, 0xb6, 0xfb, 0x68, 0x5a, 0x5c, 0xed,
	0x18, 0x76, 0x84, 0x3d, 0xba, 0x73, 0xfc, 0xaa, 0xe9, 0x30, 0x91, 0x18, 0x8b, 0xba, 0xa3, 0x95,
	0xc0, 0x1d, 0x7b, 0x1a, 0xa3, 0x69, 0xc5, 0x5a, 0x59, 0x15, 0x34, 0x52, 0xdd, 0x56, 0xaa, 0xdb,
	0x9a, 0xd6, 0xad, 0x5f, 0x8b, 0xb8, 0x3d, 0x4a, 0xba, 0x2d, 0xa6, 0x7a, 0x3b, 0x91, 0x8a, 0xd4,
	0x8e, 0x37, 0xeb, 0x26, 0x87, 0x7e, 0xe5, 0x17, 0xfe, 0x2b, 0x75, 0x57, 0xbf, 0x3c, 0x19, 0x5a,
	0xc5, 0x96, 0x2b, 0x99, 0xc5, 0xaa, 0x6f, 0x4c, 0x0a, 0xc7, 0xd2, 0xa8, 0x5f, 0x99, 0x14, 0xf5,
	0xa9, 0xe0, 0x21, 0xb5, 0x98, 0x49, 0x9b, 0x53, 0x52, 0x8e, 0x27, 0x9d, 0x09, 0xd7, 0x9b, 0x7f,
	0x25, 0xb0, 0xfe, 0x6d, 0x25, 0xdb, 0x68, 0x54, 0xa2, 0x19, 0xde, 0x6d, 0x1f, 0x1c, 0x70, 0x63,
	0xdf, 0x38, 0x8d, 0x31, 0xb8, 0x01, 0xe5, 0x44, 0x0b, 0x53, 0x23, 0xcd, 0xd2, 0xd6, 0xc2, 0xfe,
	0xb5, 0x0f, 0x3e, 0x79, 0x50, 0x82, 0xfb, 0x64, 0x6e, 0x73, 0x46, 0x97, 0xb6, 0xee, 0x15, 0xdd,
	0x72, 0xe6, 0x3e, 0x29, 0xae, 0xac, 0xe4, 0x5f, 0xf3, 0x24, 0xff, 0xaa, 0x91, 0xb6, 0x37, 0x0d,
	0x14, 0xcc, 0xf4, 0x51, 0x77, 0x4d, 0xad, 0xec, 0x7d, 0xbc, 0x35, 0x1c, 0x90, 0x2d, 0x20, 0xdb,
	0x50, 0x8a, 0xd0, 0x42, 0x29, 0x4e, 0x2c, 0x94, 0x63, 0x65, 0x2c, 0xcc, 0xc4, 0xd4, 0xb2, 0x23,
	0x98, 0xd3, 0x18, 0x0b, 0xca, 0x10, 0x4a, 0x89, 0xc1, 0xe7, 0x8b, 0x97, 0xc6, 0xd9, 0xfc, 0xdb,
	0x12, 0xac, 0xe4, 0x67, 0x19, 0x1d, 0xe4, 0x1f, 0x25, 0x00, 0x1a, 0xf3, 0x4e, 0xa4, 0x55, 0x12,
	0xe7, 0xe7, 0xf9, 0x73, 0x69, 0x38, 0x20, 0xf7, 0x4b, 0x2e, 0x9b, 0x2b, 0x34, 0xec, 0x71, 0x63,
	0xb8, 0x92, 0x1a, 0x23, 0x6e, 0xac, 0xa6, 0x0e, 0x21, 0x57, 0xd2, 0x16, 0x57, 0x70, 0x89, 0xc6,
	0x1c, 0xdf, 0xb5, 0x28, 0x8d, 0x87, 0x2d, 0xdb, 0x5d, 0xa7, 0x31, 0x3f, 0x4f, 0xbb, 0x4c, 0xe3,
	0xd8, 0xc0, 0x4b, 0x34, 0xb1, 0x47, 0x28, 0x2d, 0x67, 0x53, 0xae, 0x12, 0x7b, 0xa4, 0x34, 0xff,
	0xfe, 0xc4, 0x6e, 0x85, 0x26, 0x56, 0x19, 0x46, 0x05, 0x97, 0x11, 0xcc, 0x74, 0x3d, 0x12, 0x6b,
	0x0c, 0xb5, 0xe5, 0x87, 0xce, 0x1e, 0x47, 0x31, 0xcb, 0x4c, 0x69, 0x84, 0x35, 0xa6, 0x94, 0x0e,
	0xb9, 0x9c, 0xf0, 0xb1, 0x12, 0x72, 0xc3, 0x54, 0x1f, 0xf5, 0x69, 0xbe, 0xb3, 0x84, 0x7d, 0x94,
	0x76, 0x64, 0x0b, 0x67, 0x47, 0x80, 0x2b, 0x87, 0x42, 0x9d, 0x30, 0x25, 0xad, 0x56, 0xa2, 0x45,
	0x63, 0x6e, 0x50, 0xf7, 0x51, 0xe7, 0x9a, 0x1b, 0x5c, 0x5a, 0xd4, 0x92, 0x9e, 0x23, 0x5a, 0x95,
	0x68, 0x4f, 0x94, 0x3e, 0xe6, 0x32, 0x1a, 0x25, 0x2f, 0x55, 0x88, 0xf9, 0x62, 0x36, 0x56, 0x82,
	0xb3, 0x53, 0xd8, 0xd0, 0x5d, 0xca, 0x5a, 0xe7, 0x1e, 0x76, 0xd5, 0x51, 0x31, 0x4c, 0xc4, 0x98,
	0x8b, 0xaa, 0xb1, 0x4a, 0xd3, 0x28, 0xf7, 0xf2, 0x7c, 0x75, 0x5f, 0xa0, 0x31, 0xbf, 0xe5, 0xeb,
	0x1a, 0xfc, 0x73, 0x0e, 0xaa, 0x3a, 0xab, 0x7d, 0xc7, 0xf7, 0x48, 0xad, 0xe8, 0x4b, 0xfd, 0xa7,
	0xb9, 0xe1, 0x80, 0xfc, 0x6c, 0xce, 0x95, 0x7a, 0xbe, 0xcb, 0x65, 0xc8, 0x65, 0x64, 0x60, 0x95,
	0xa9, 0x5e, 0xac, 0xa4, 0xc3, 0xc8, 0x52, 0x9b, 0x18, 0x34, 0x00, 0x4c, 0xc9, 0x43, 0x1e, 0xf5,
	0x68, 0x6c, 0x60, 0x01, 0x65, 0x18, 0x2b, 0x2e, 0xad, 0x81, 0xd9, 0x14, 0x49, 0xa8, 0x08, 0xde,
	0xe3, 0x56, 0x53, 0x19, 0x39, 0x5d, 0x49, 0x7b, 0x68, 0x62, 0xca, 0xd0, 0xc0, 0x8c, 0xc3, 0xc0,
	0xc0, 0x7a, 0x8c, 0xda, 0x70, 0x63, 0x51, 0xda, 0xbe, 0x12, 0x49, 0x0f, 0x99, 0xa0, 0xbc, 0x67,
	0x60, 0x75, 0x7a, 0xdf, 0x38, 0xd6, 0x87, 0x06, 0x16, 0x63, 0x15, 0x5a, 0xec, 0xc5, 0xc2, 0x15,
	0x19, 0xd6, 0x1d, 0xf9, 0x33, 0xc2, 0x64, 0xc5, 0x11, 0xa8, 0xcd, 0xd9, 0x99, 0xde, 0x49, 0x94,
	0xa5, 0x06, 0xe6, 0x0c, 0x32, 0x8d, 0xd6, 0xc0, 0xb2, 0x2b, 0x0e, 0x67, 0x48, 0x19, 0x53, 0x89,
	0x4b, 0x70, 0x3e, 0xdb, 0x30, 0xf0, 0xb9, 0x5e, 0x62, 0xa9, 0xe5, 0x32, 0x3a, 0xc1, 0xee, 0x91,
	0x52, 0xc7, 0xe9, 0xc1, 0x92, 0x94, 0xaa, 0x06, 0x3e, 0x9f, 0x5d, 0x13, 0x17, 0x2a, 0x6c, 0xb0,
	0xc4, 0x58, 0xd5, 0xcb, 0x23, 0x87, 0x78, 0xc8, 0x25, 0x4f, 0x45, 0x95, 0x8c, 0x15, 0x3e, 0xce,
	0xda, 0x59, 0xa2, 0x1a, 0xfb, 0x3c, 0xa5, 0x17, 0x84, 0x14, 0x7b, 0x4a, 0x1a, 0x97, 0x63, 0x25,
	0xc4, 0x58, 0xa8, 0xd3, 0x5e, 0x0a, 0x60, 0x76, 0x42, 0x2f, 0x59, 0x74, 0xb0, 0xe3, 0x61, 0x22,
	0xd2, 0x95, 0x55, 0xc7, 0x28, 0x9d, 0x0f, 0x3c, 0x31, 0xb0, 0x21, 0x14, 0xa3, 0xc2, 0x24, 0xdd,
	0xb7, 0x91, 0x59, 0xca, 0x18, 0x1a, 0x93, 0x8b, 0x6a, 0x06, 0xc5, 0xe1, 0xb9, 0x92, 0x97, 0xc7,
	0x24, 0x3a, 0x11, 0x38, 0x12, 0x5c, 0x3a, 0xdf, 0x91, 0xe7, 0xa6, 0x92, 0x96, 0x8a, 0x58, 0x85,
	0x79, 0x0b, 0x3a, 0xc0, 0xe7, 0x99, 0x56, 0xf2, 0x6d, 0xd5, 0x35, 0x50, 0xf6, 0x7f, 0xeb, 0xe3,
	0xbd, 0xc8, 0x23, 0xc9, 0x65, 0xa4, 0xf1, 0x9d, 0x04, 0x8d, 0xe3, 0x86, 0x40, 0xea, 0xa8, 0x53,
	0x1d, 0xd1, 0x45, 0x78, 0x60, 0x72, 0xce, 0x2c, 0x78, 0x65, 0xe3, 0x54, 0x2a, 0xae, 0xeb, 0xd2,
	0x8b, 0xd8, 0xc0, 0xe5, 0x58, 0x73, 0xa5, 0xb9, 0x3d, 0x15, 0xd8, 0x47, 0x31, 0x85, 0x7e, 0x35,
	0x33, 0x62, 0x82, 0x7a, 0xcb, 0x31, 0x27, 0xcb, 0x59, 0x07, 0xfa, 0x46, 0xe3, 0x2e, 0xb0, 0x4e,
	0xa4, 0xe5, 0x9e, 0x6b, 0x5e, 0xe1, 0x52, 0xac, 0xc2, 0x90, 0x1b, 0x9d, 0xf8, 0x5b, 0xbe, 0x9b,
	0x84, 0x91, 0x83, 0x77, 0xcd, 0xf1, 0x0d, 0x59, 0xe2, 0x22, 0x8e, 0x4c, 0xd7, 0xb2, 0x79, 0xe5,
	0xc6, 0xd5, 0xa8, 0x2d, 0x16, 0xc7, 0x36, 0x0d, 0x2c, 0x4e, 0xc8, 0x66, 0xd2, 0xcd, 0xe5, 0x3c,
	0xf7, 0x3c, 0x26, 0x30, 0xc3, 0x43, 0xcd, 0xfb, 0x29, 0x78, 0x86, 0xa7, 0xed, 0x90, 0xb7, 0x75,
	0xae, 0xb5, 0x9a, 0x92, 0x9f, 0x5a, 0x4b, 0xd9, 0x91, 0x27, 0xc4, 0xf3, 0x75, 0xfa, 0x52, 0xce,
	0x46, 0x77, 0xa7, 0x9b, 0xa0, 0x0d, 0xc1, 0xa8, 0xd9, 0xb9, 0x34, 0x96, 0x4a, 0x86, 0xa6, 0x56,
	0xf2, 0x0d, 0xff, 0xc5, 0xa7, 0x7a, 0xae, 0x91, 0xf6, 0x6a, 0x6e, 0xfe, 0x5a, 0x6e, 0x1d, 0xfc,
	0x92, 0x4c, 0xce, 0xab, 0x9f, 0x90, 0xe1, 0x80, 0xbc, 0xe9, 0xee, 0x8d, 0x59, 0xa6, 0x91, 0x5a,
	0x4c, 0x07, 0x57, 0x59, 0x70, 0x37, 0xb3, 0x4e, 0xfc, 0x4d, 0x3d, 0x9b, 0xc4, 0x6e, 0xe0, 0xe6,
	0x23, 0x6c, 0x36, 0x44, 0x81, 0x36, 0x9d, 0x60, 0x50, 0x76, 0xd0, 0xc1, 0x3c, 0x3a, 0x66, 0x39,
	0x9d, 0x0a, 0xef, 0xb9, 0xbb, 0x40, 0x49, 0x6a, 0xff, 0xbb, 0xf1, 0xf6, 0xd3, 0x19, 0xa8, 0xde,
	0xf1, 0x77, 0x6c, 0x3b, 0x11, 0x1e, 0x88, 0xe0, 0x3b, 0x30, 0x02, 0xa6, 0xe3, 0xf2, 0xaa, 0x15,
	0x9b, 0x64, 0xab, 0xb2, 0xfb, 0x4a, 0xeb, 0xb3, 0xdf, 0x27, 0xad, 0xe9, 0x29, 0x79, 0xbb, 0xd0,
	0x5e, 0xd4, 0x63, 0x7b, 0xc1, 0x31, 0xbc, 0x24, 0x95, 0xec, 0x8c, 0x9c, 0x27, 0x5a, 0xa4, 0x01,
	0x4a, 0x3e, 0xc0, 0xd7, 0x9e, 0x16, 0xe0, 0xfc, 0x57, 0xc5, 0xed, 0x42, 0x3b, 0x90, 0x63, 0x12,
	0x2d, 0x9c, 0x64, 0xef, 0xc7, 0xa5, 0x8f, 0x06, 0xe4, 0x07, 0x25, 0xf8, 0x16, 0x94, 0x9d, 0xd6,
	0xf6, 0x37, 0xe0, 0x26, 0x34, 0xa6, 0x4e, 0xb6, 0xbb, 0x94, 0x5b, 0x35, 0x9d, 0x0d, 0x7c, 0xe1,
	0x82, 0x04, 0x77, 0xe7, 0xef, 0xb6, 0x0f, 0x52, 0x95, 0xdf, 0x16, 0x01, 0xee, 0x50, 0x4d, 0x7b,
	0x68, 0x51, 0x9b, 0xf6, 0xaf, 0x8a, 0xb0, 0x1d, 0xd4, 0x26, 0x9c, 0xb6, 0xce, 0x1e, 0x06, 0x75,
	0xb8, 0x71, 0xe7, 0xb5, 0x66, 0x3a, 0x4c, 0xb6, 0x8b, 0x2b, 0x65, 0xd8, 0x0d, 0xae, 0x4c, 0xea,
	0x4e, 0x4e, 0x97, 0x7a, 0x75, 0x94, 0x8f, 0xa7, 0xa4, 0xb7, 0xd9, 0x0b, 0x9a, 0x17, 0xd8, 0x8c,
	0x48, 0x5a, 0x0f, 0x46, 0x76, 0x23, 0xea, 0x79, 0xdb, 0xad, 0x60, 0x6d, 0xd2, 0xd6, 0x17, 0xbd,
	0xbe, 0x74, 0x43, 0x08, 0x75, 0x82, 0x61, 0xf3, 0x4d, 0xb7, 0xf4, 0x9a, 0x5f, 0x0e, 0xea, 0xe7,
	0x1e, 0xbd, 0xe5, 0x5e, 0x5d, 0xf5, 0xf2, 0xdd, 0xf6, 0x41, 0xaa, 0xf7, 0x4a, 0x70, 0xf9, 0x7c,
	0xbd, 0x8b, 0x3c, 0xef, 0x6f, 0xc2, 0xf2, 0x48, 0x9b, 0x1d, 0x29, 0xce, 0x30, 0x58, 0x7e, 0x30,
	0x20, 0xc5, 0x87, 0x03, 0xe2, 0x9a, 0xa1, 0xb4, 0x7b, 0xf5, 0xfa, 0x37, 0xcb, 0xf3, 0x64, 0xa5,
	0xb8, 0xf9, 0x23, 0x02, 0xc1, 0x19, 0x17, 0x47, 0x8f, 0x2d, 0x05, 0x95, 0xf4, 0x15, 0xd0, 0x71,
	0x97, 0xb0, 0x7f, 0x6c, 0x55, 0x76, 0x5b, 0x4f, 0x23, 0xcb, 0x24, 0xa9, 0xf7, 0x1b, 0x4f, 0x69,
	0x07, 0x88, 0x47, 0xfa, 0x9b, 0xbf, 0x28, 0x41, 0xf5, 0x96, 0x50, 0x5d, 0x2a, 0x5e, 0x8f, 0x91,
	0xf9, 0x1c, 0xbe, 0x07, 0x2b, 0x63, 0x39, 0x8c, 0xb7, 0xc5, 0xee, 0xb3, 0x27, 0x32, 0xc6, 0xd8,
	0x6a, 0x3c, 0xb1, 0x1b, 0x44, 0xb0, 0x31, 0x6d, 0xd8, 0x31, 0x28, 0x90, 0x59, 0xa5, 0xb3, 0xf6,
	0x68, 0x4e, 0x05, 0x3a, 0xa0, 0x5d, 0x14, 0xaf, 0x67, 0x3a, 0xfe, 0x8c, 0xf3, 0x3f, 0xff, 0x90,
	0x94, 0xa1, 0x58, 0x20, 0xb7, 0x0b, 0xed, 0xf5, 0xe3, 0x57, 0xcd, 0xcd, 0xd4, 0x5b, 0x5b, 0x09,
	0xcc, 0xf5, 0x82, 0x3d, 0x28, 0x9f, 0xd2, 0x9e, 0xa8, 0x95, 0x9b, 0x64, 0x6b, 0x61, 0xff, 0x4b,
	0x0f, 0x06, 0x84, 0xfc, 0x6b, 0x40, 0xca, 0xbf, 0xfe, 0x90, 0xf8, 0x7d, 0x8f, 0x88, 0x2e, 0xd5,
	0xee, 0x35, 0xb3, 0xaf, 0xf7, 0x89, 0xf3, 0xe6, 0x65, 0xc1, 0x4d, 0xa8, 0x46, 0x28, 0x51, 0x53,
	0x8b, 0x61, 0xc7, 0x7b, 0xf9, 0x64, 0xce, 0xbb, 0xb9, 0xfc, 0xe8, 0x3d, 0xf2, 0xf1, 0x80, 0x90,
	0xf3, 0xac, 0xdb, 0x4b, 0x23, 0x9b, 0xb7, 0x68, 0x4f, 0xec, 0xbd, 0xfc, 0xc7, 0x01, 0x59, 0x83,
	0x55, 0x58, 0xcc, 0xb2, 0x6b, 0xba, 0xf4, 0x02, 0xf2, 0x95, 0xfd, 0x26, 0x54, 0x3c, 0xb6, 0x19,
	0x47, 0x56, 0xc7, 0x38, 0x32, 0xb3, 0x7b, 0xf5, 0xfa, 0xd5, 0xaf, 0x66, 0x2c, 0xf9, 0x7d, 0x11,
	0xaa, 0x37, 0xfd, 0xdd, 0xf9, 0x7f, 0xab, 0x8e, 0xfe, 0x5f, 0x54, 0x67, 0xed, 0x83, 0xf7, 0x56,
	0xa6, 0xbd, 0x7c, 0x46, 0xa1, 0x2e, 0x8d, 0x17, 0x2a, 0x2f, 0xc1, 0xde, 0xea, 0x47, 0x5f, 0x9f,
	0xa2, 0xe6, 0x7e, 0x63, 0x12, 0xb7, 0xe5, 0x1f, 0xfe, 0x9b, 0x8c, 0x6f, 0x64, 0xa8, 0xfd, 0xa1,
	0x08, 0xcb, 0xed, 0xf4, 0x7f, 0xa1, 0x17, 0xb0, 0x3d, 0x3b, 0x6c, 0xbf, 0x2b, 0x42, 0xe5, 0x16,
	0xda, 0x17, 0x90, 0x3d, 0x33, 0x64, 0xfb, 0xf7, 0xc9, 0xc3, 0xc7, 0x8d, 0xc2, 0xa3, 0xc7, 0x8d,
	0xc2, 0xa7, 0x8f, 0x1b, 0xe4, 0xde, 0xb0, 0x41, 0x7e, 0x33, 0x6c, 0x90, 0xbf, 0x0c, 0x1b, 0xe4,
	0xe1, 0xb0, 0x41, 0x1e, 0x0d, 0x1b, 0xe4, 0xef, 0xc3, 0x06, 0xf9, 0x78, 0xd8, 0x28, 0x7c, 0x3a,
	0x6c, 0x90, 0xf7, 0x9f, 0x34, 0x0a, 0x0f, 0x9e, 0x34, 0xc8, 0xc3, 0x27, 0x8d, 0xc2, 0xa3, 0x27,
	0x8d, 0xc2, 0x77, 0xdf, 0x88, 0x54, 0x7c, 0x1c, 0xb5, 0xfa, 0x4a, 0xb8, 0x37, 0x23, 0x6d, 0x25,
	0x66, 0xc7, 0x7f, 0x1c, 0x2a, 0xdd, 0xbb, 0x16, 0x6b, 0xd5, 0xe7, 0x21, 0xea, 0x6b, 0xb9, 0x78,
	0x27, 0xee, 0x46, 0x6a, 0x07, 0xdf, 0xb5, 0xd9, 0xef, 0x11, 0x17, 0xfc, 0xce, 0xd2, 0x9d, 0xf5,
	0xbf, 0x4d, 0x5c, 0xff, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x89, 0x05, 0x13, 0x98, 0x90, 0x11,
	0x00, 0x00,
}

func (this *NonResourceURLListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NonResourceURLListType)
	if !ok {
		that2, ok := that.(NonResourceURLListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Urls) != len(that1.Urls) {
		return false
	}
	for i := range this.Urls {
		if this.Urls[i] != that1.Urls[i] {
			return false
		}
	}
	if len(this.Verbs) != len(that1.Verbs) {
		return false
	}
	for i := range this.Verbs {
		if this.Verbs[i] != that1.Verbs[i] {
			return false
		}
	}
	return true
}
func (this *ResourceListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResourceListType)
	if !ok {
		that2, ok := that.(ResourceListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ApiGroups) != len(that1.ApiGroups) {
		return false
	}
	for i := range this.ApiGroups {
		if this.ApiGroups[i] != that1.ApiGroups[i] {
			return false
		}
	}
	if len(this.ResourceTypes) != len(that1.ResourceTypes) {
		return false
	}
	for i := range this.ResourceTypes {
		if this.ResourceTypes[i] != that1.ResourceTypes[i] {
			return false
		}
	}
	if len(this.ResourceInstances) != len(that1.ResourceInstances) {
		return false
	}
	for i := range this.ResourceInstances {
		if this.ResourceInstances[i] != that1.ResourceInstances[i] {
			return false
		}
	}
	if len(this.Verbs) != len(that1.Verbs) {
		return false
	}
	for i := range this.Verbs {
		if this.Verbs[i] != that1.Verbs[i] {
			return false
		}
	}
	return true
}
func (this *PolicyRuleType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyRuleType)
	if !ok {
		that2, ok := that.(PolicyRuleType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ResourceChoice == nil {
		if this.ResourceChoice != nil {
			return false
		}
	} else if this.ResourceChoice == nil {
		return false
	} else if !this.ResourceChoice.Equal(that1.ResourceChoice) {
		return false
	}
	return true
}
func (this *PolicyRuleType_ResourceList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyRuleType_ResourceList)
	if !ok {
		that2, ok := that.(PolicyRuleType_ResourceList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResourceList.Equal(that1.ResourceList) {
		return false
	}
	return true
}
func (this *PolicyRuleType_NonResourceUrlList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyRuleType_NonResourceUrlList)
	if !ok {
		that2, ok := that.(PolicyRuleType_NonResourceUrlList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NonResourceUrlList.Equal(that1.NonResourceUrlList) {
		return false
	}
	return true
}
func (this *PolicyRuleListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyRuleListType)
	if !ok {
		that2, ok := that.(PolicyRuleListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PolicyRule) != len(that1.PolicyRule) {
		return false
	}
	for i := range this.PolicyRule {
		if !this.PolicyRule[i].Equal(that1.PolicyRule[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.RuleChoice == nil {
		if this.RuleChoice != nil {
			return false
		}
	} else if this.RuleChoice == nil {
		return false
	} else if !this.RuleChoice.Equal(that1.RuleChoice) {
		return false
	}
	if this.GeneratedYaml != that1.GeneratedYaml {
		return false
	}
	return true
}
func (this *GlobalSpecType_PolicyRuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_PolicyRuleList)
	if !ok {
		that2, ok := that.(GlobalSpecType_PolicyRuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyRuleList.Equal(that1.PolicyRuleList) {
		return false
	}
	return true
}
func (this *GlobalSpecType_K8SClusterRoleSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_K8SClusterRoleSelector)
	if !ok {
		that2, ok := that.(GlobalSpecType_K8SClusterRoleSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SClusterRoleSelector.Equal(that1.K8SClusterRoleSelector) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Yaml) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Yaml)
	if !ok {
		that2, ok := that.(GlobalSpecType_Yaml)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Yaml != that1.Yaml {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.RuleChoice == nil {
		if this.RuleChoice != nil {
			return false
		}
	} else if this.RuleChoice == nil {
		return false
	} else if !this.RuleChoice.Equal(that1.RuleChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_PolicyRuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_PolicyRuleList)
	if !ok {
		that2, ok := that.(CreateSpecType_PolicyRuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyRuleList.Equal(that1.PolicyRuleList) {
		return false
	}
	return true
}
func (this *CreateSpecType_K8SClusterRoleSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_K8SClusterRoleSelector)
	if !ok {
		that2, ok := that.(CreateSpecType_K8SClusterRoleSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SClusterRoleSelector.Equal(that1.K8SClusterRoleSelector) {
		return false
	}
	return true
}
func (this *CreateSpecType_Yaml) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Yaml)
	if !ok {
		that2, ok := that.(CreateSpecType_Yaml)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Yaml != that1.Yaml {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.RuleChoice == nil {
		if this.RuleChoice != nil {
			return false
		}
	} else if this.RuleChoice == nil {
		return false
	} else if !this.RuleChoice.Equal(that1.RuleChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_PolicyRuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_PolicyRuleList)
	if !ok {
		that2, ok := that.(ReplaceSpecType_PolicyRuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyRuleList.Equal(that1.PolicyRuleList) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_K8SClusterRoleSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_K8SClusterRoleSelector)
	if !ok {
		that2, ok := that.(ReplaceSpecType_K8SClusterRoleSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SClusterRoleSelector.Equal(that1.K8SClusterRoleSelector) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Yaml) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Yaml)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Yaml)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Yaml != that1.Yaml {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.RuleChoice == nil {
		if this.RuleChoice != nil {
			return false
		}
	} else if this.RuleChoice == nil {
		return false
	} else if !this.RuleChoice.Equal(that1.RuleChoice) {
		return false
	}
	return true
}
func (this *GetSpecType_PolicyRuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_PolicyRuleList)
	if !ok {
		that2, ok := that.(GetSpecType_PolicyRuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyRuleList.Equal(that1.PolicyRuleList) {
		return false
	}
	return true
}
func (this *GetSpecType_K8SClusterRoleSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_K8SClusterRoleSelector)
	if !ok {
		that2, ok := that.(GetSpecType_K8SClusterRoleSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.K8SClusterRoleSelector.Equal(that1.K8SClusterRoleSelector) {
		return false
	}
	return true
}
func (this *GetSpecType_Yaml) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Yaml)
	if !ok {
		that2, ok := that.(GetSpecType_Yaml)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Yaml != that1.Yaml {
		return false
	}
	return true
}
func (this *NonResourceURLListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&k8s_cluster_role.NonResourceURLListType{")
	s = append(s, "Urls: "+fmt.Sprintf("%#v", this.Urls)+",\n")
	s = append(s, "Verbs: "+fmt.Sprintf("%#v", this.Verbs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResourceListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&k8s_cluster_role.ResourceListType{")
	s = append(s, "ApiGroups: "+fmt.Sprintf("%#v", this.ApiGroups)+",\n")
	s = append(s, "ResourceTypes: "+fmt.Sprintf("%#v", this.ResourceTypes)+",\n")
	s = append(s, "ResourceInstances: "+fmt.Sprintf("%#v", this.ResourceInstances)+",\n")
	s = append(s, "Verbs: "+fmt.Sprintf("%#v", this.Verbs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PolicyRuleType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&k8s_cluster_role.PolicyRuleType{")
	if this.ResourceChoice != nil {
		s = append(s, "ResourceChoice: "+fmt.Sprintf("%#v", this.ResourceChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PolicyRuleType_ResourceList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role.PolicyRuleType_ResourceList{` +
		`ResourceList:` + fmt.Sprintf("%#v", this.ResourceList) + `}`}, ", ")
	return s
}
func (this *PolicyRuleType_NonResourceUrlList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role.PolicyRuleType_NonResourceUrlList{` +
		`NonResourceUrlList:` + fmt.Sprintf("%#v", this.NonResourceUrlList) + `}`}, ", ")
	return s
}
func (this *PolicyRuleListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&k8s_cluster_role.PolicyRuleListType{")
	if this.PolicyRule != nil {
		s = append(s, "PolicyRule: "+fmt.Sprintf("%#v", this.PolicyRule)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&k8s_cluster_role.GlobalSpecType{")
	if this.RuleChoice != nil {
		s = append(s, "RuleChoice: "+fmt.Sprintf("%#v", this.RuleChoice)+",\n")
	}
	s = append(s, "GeneratedYaml: "+fmt.Sprintf("%#v", this.GeneratedYaml)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_PolicyRuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role.GlobalSpecType_PolicyRuleList{` +
		`PolicyRuleList:` + fmt.Sprintf("%#v", this.PolicyRuleList) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_K8SClusterRoleSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role.GlobalSpecType_K8SClusterRoleSelector{` +
		`K8SClusterRoleSelector:` + fmt.Sprintf("%#v", this.K8SClusterRoleSelector) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Yaml) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role.GlobalSpecType_Yaml{` +
		`Yaml:` + fmt.Sprintf("%#v", this.Yaml) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&k8s_cluster_role.CreateSpecType{")
	if this.RuleChoice != nil {
		s = append(s, "RuleChoice: "+fmt.Sprintf("%#v", this.RuleChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_PolicyRuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role.CreateSpecType_PolicyRuleList{` +
		`PolicyRuleList:` + fmt.Sprintf("%#v", this.PolicyRuleList) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_K8SClusterRoleSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role.CreateSpecType_K8SClusterRoleSelector{` +
		`K8SClusterRoleSelector:` + fmt.Sprintf("%#v", this.K8SClusterRoleSelector) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Yaml) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role.CreateSpecType_Yaml{` +
		`Yaml:` + fmt.Sprintf("%#v", this.Yaml) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&k8s_cluster_role.ReplaceSpecType{")
	if this.RuleChoice != nil {
		s = append(s, "RuleChoice: "+fmt.Sprintf("%#v", this.RuleChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_PolicyRuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role.ReplaceSpecType_PolicyRuleList{` +
		`PolicyRuleList:` + fmt.Sprintf("%#v", this.PolicyRuleList) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_K8SClusterRoleSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role.ReplaceSpecType_K8SClusterRoleSelector{` +
		`K8SClusterRoleSelector:` + fmt.Sprintf("%#v", this.K8SClusterRoleSelector) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Yaml) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role.ReplaceSpecType_Yaml{` +
		`Yaml:` + fmt.Sprintf("%#v", this.Yaml) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&k8s_cluster_role.GetSpecType{")
	if this.RuleChoice != nil {
		s = append(s, "RuleChoice: "+fmt.Sprintf("%#v", this.RuleChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_PolicyRuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role.GetSpecType_PolicyRuleList{` +
		`PolicyRuleList:` + fmt.Sprintf("%#v", this.PolicyRuleList) + `}`}, ", ")
	return s
}
func (this *GetSpecType_K8SClusterRoleSelector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role.GetSpecType_K8SClusterRoleSelector{` +
		`K8SClusterRoleSelector:` + fmt.Sprintf("%#v", this.K8SClusterRoleSelector) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Yaml) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&k8s_cluster_role.GetSpecType_Yaml{` +
		`Yaml:` + fmt.Sprintf("%#v", this.Yaml) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *NonResourceURLListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NonResourceURLListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NonResourceURLListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Verbs) > 0 {
		for iNdEx := len(m.Verbs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Verbs[iNdEx])
			copy(dAtA[i:], m.Verbs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Verbs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Urls) > 0 {
		for iNdEx := len(m.Urls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Urls[iNdEx])
			copy(dAtA[i:], m.Urls[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Urls[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResourceListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Verbs) > 0 {
		for iNdEx := len(m.Verbs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Verbs[iNdEx])
			copy(dAtA[i:], m.Verbs[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Verbs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ResourceInstances) > 0 {
		for iNdEx := len(m.ResourceInstances) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResourceInstances[iNdEx])
			copy(dAtA[i:], m.ResourceInstances[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ResourceInstances[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ResourceTypes) > 0 {
		for iNdEx := len(m.ResourceTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResourceTypes[iNdEx])
			copy(dAtA[i:], m.ResourceTypes[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ResourceTypes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ApiGroups) > 0 {
		for iNdEx := len(m.ApiGroups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ApiGroups[iNdEx])
			copy(dAtA[i:], m.ApiGroups[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ApiGroups[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PolicyRuleType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyRuleType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyRuleType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResourceChoice != nil {
		{
			size := m.ResourceChoice.Size()
			i -= size
			if _, err := m.ResourceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PolicyRuleType_ResourceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyRuleType_ResourceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResourceList != nil {
		{
			size, err := m.ResourceList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PolicyRuleType_NonResourceUrlList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyRuleType_NonResourceUrlList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NonResourceUrlList != nil {
		{
			size, err := m.NonResourceUrlList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyRuleListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyRuleListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyRuleListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PolicyRule) > 0 {
		for iNdEx := len(m.PolicyRule) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PolicyRule[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GeneratedYaml) > 0 {
		i -= len(m.GeneratedYaml)
		copy(dAtA[i:], m.GeneratedYaml)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.GeneratedYaml)))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if m.RuleChoice != nil {
		{
			size := m.RuleChoice.Size()
			i -= size
			if _, err := m.RuleChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_PolicyRuleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_PolicyRuleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyRuleList != nil {
		{
			size, err := m.PolicyRuleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_K8SClusterRoleSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_K8SClusterRoleSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.K8SClusterRoleSelector != nil {
		{
			size, err := m.K8SClusterRoleSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Yaml) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Yaml) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Yaml)
	copy(dAtA[i:], m.Yaml)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Yaml)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RuleChoice != nil {
		{
			size := m.RuleChoice.Size()
			i -= size
			if _, err := m.RuleChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_PolicyRuleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_PolicyRuleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyRuleList != nil {
		{
			size, err := m.PolicyRuleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_K8SClusterRoleSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_K8SClusterRoleSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.K8SClusterRoleSelector != nil {
		{
			size, err := m.K8SClusterRoleSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Yaml) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Yaml) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Yaml)
	copy(dAtA[i:], m.Yaml)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Yaml)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RuleChoice != nil {
		{
			size := m.RuleChoice.Size()
			i -= size
			if _, err := m.RuleChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_PolicyRuleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_PolicyRuleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyRuleList != nil {
		{
			size, err := m.PolicyRuleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_K8SClusterRoleSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_K8SClusterRoleSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.K8SClusterRoleSelector != nil {
		{
			size, err := m.K8SClusterRoleSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Yaml) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Yaml) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Yaml)
	copy(dAtA[i:], m.Yaml)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Yaml)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RuleChoice != nil {
		{
			size := m.RuleChoice.Size()
			i -= size
			if _, err := m.RuleChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_PolicyRuleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_PolicyRuleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyRuleList != nil {
		{
			size, err := m.PolicyRuleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_K8SClusterRoleSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_K8SClusterRoleSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.K8SClusterRoleSelector != nil {
		{
			size, err := m.K8SClusterRoleSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Yaml) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Yaml) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Yaml)
	copy(dAtA[i:], m.Yaml)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.Yaml)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NonResourceURLListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Urls) > 0 {
		for _, s := range m.Urls {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Verbs) > 0 {
		for _, s := range m.Verbs {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ResourceListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApiGroups) > 0 {
		for _, s := range m.ApiGroups {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResourceTypes) > 0 {
		for _, s := range m.ResourceTypes {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResourceInstances) > 0 {
		for _, s := range m.ResourceInstances {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Verbs) > 0 {
		for _, s := range m.Verbs {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *PolicyRuleType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceChoice != nil {
		n += m.ResourceChoice.Size()
	}
	return n
}

func (m *PolicyRuleType_ResourceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceList != nil {
		l = m.ResourceList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyRuleType_NonResourceUrlList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NonResourceUrlList != nil {
		l = m.NonResourceUrlList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyRuleListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PolicyRule) > 0 {
		for _, e := range m.PolicyRule {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RuleChoice != nil {
		n += m.RuleChoice.Size()
	}
	l = len(m.GeneratedYaml)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_PolicyRuleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyRuleList != nil {
		l = m.PolicyRuleList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_K8SClusterRoleSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.K8SClusterRoleSelector != nil {
		l = m.K8SClusterRoleSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Yaml) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Yaml)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RuleChoice != nil {
		n += m.RuleChoice.Size()
	}
	return n
}

func (m *CreateSpecType_PolicyRuleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyRuleList != nil {
		l = m.PolicyRuleList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_K8SClusterRoleSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.K8SClusterRoleSelector != nil {
		l = m.K8SClusterRoleSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Yaml) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Yaml)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RuleChoice != nil {
		n += m.RuleChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_PolicyRuleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyRuleList != nil {
		l = m.PolicyRuleList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_K8SClusterRoleSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.K8SClusterRoleSelector != nil {
		l = m.K8SClusterRoleSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Yaml) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Yaml)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RuleChoice != nil {
		n += m.RuleChoice.Size()
	}
	return n
}

func (m *GetSpecType_PolicyRuleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyRuleList != nil {
		l = m.PolicyRuleList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_K8SClusterRoleSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.K8SClusterRoleSelector != nil {
		l = m.K8SClusterRoleSelector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Yaml) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Yaml)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NonResourceURLListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NonResourceURLListType{`,
		`Urls:` + fmt.Sprintf("%v", this.Urls) + `,`,
		`Verbs:` + fmt.Sprintf("%v", this.Verbs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResourceListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResourceListType{`,
		`ApiGroups:` + fmt.Sprintf("%v", this.ApiGroups) + `,`,
		`ResourceTypes:` + fmt.Sprintf("%v", this.ResourceTypes) + `,`,
		`ResourceInstances:` + fmt.Sprintf("%v", this.ResourceInstances) + `,`,
		`Verbs:` + fmt.Sprintf("%v", this.Verbs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyRuleType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyRuleType{`,
		`ResourceChoice:` + fmt.Sprintf("%v", this.ResourceChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyRuleType_ResourceList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyRuleType_ResourceList{`,
		`ResourceList:` + strings.Replace(fmt.Sprintf("%v", this.ResourceList), "ResourceListType", "ResourceListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyRuleType_NonResourceUrlList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyRuleType_NonResourceUrlList{`,
		`NonResourceUrlList:` + strings.Replace(fmt.Sprintf("%v", this.NonResourceUrlList), "NonResourceURLListType", "NonResourceURLListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyRuleListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPolicyRule := "[]*PolicyRuleType{"
	for _, f := range this.PolicyRule {
		repeatedStringForPolicyRule += strings.Replace(f.String(), "PolicyRuleType", "PolicyRuleType", 1) + ","
	}
	repeatedStringForPolicyRule += "}"
	s := strings.Join([]string{`&PolicyRuleListType{`,
		`PolicyRule:` + repeatedStringForPolicyRule + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`RuleChoice:` + fmt.Sprintf("%v", this.RuleChoice) + `,`,
		`GeneratedYaml:` + fmt.Sprintf("%v", this.GeneratedYaml) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_PolicyRuleList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_PolicyRuleList{`,
		`PolicyRuleList:` + strings.Replace(fmt.Sprintf("%v", this.PolicyRuleList), "PolicyRuleListType", "PolicyRuleListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_K8SClusterRoleSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_K8SClusterRoleSelector{`,
		`K8SClusterRoleSelector:` + strings.Replace(fmt.Sprintf("%v", this.K8SClusterRoleSelector), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Yaml) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Yaml{`,
		`Yaml:` + fmt.Sprintf("%v", this.Yaml) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`RuleChoice:` + fmt.Sprintf("%v", this.RuleChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_PolicyRuleList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_PolicyRuleList{`,
		`PolicyRuleList:` + strings.Replace(fmt.Sprintf("%v", this.PolicyRuleList), "PolicyRuleListType", "PolicyRuleListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_K8SClusterRoleSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_K8SClusterRoleSelector{`,
		`K8SClusterRoleSelector:` + strings.Replace(fmt.Sprintf("%v", this.K8SClusterRoleSelector), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Yaml) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Yaml{`,
		`Yaml:` + fmt.Sprintf("%v", this.Yaml) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`RuleChoice:` + fmt.Sprintf("%v", this.RuleChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_PolicyRuleList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_PolicyRuleList{`,
		`PolicyRuleList:` + strings.Replace(fmt.Sprintf("%v", this.PolicyRuleList), "PolicyRuleListType", "PolicyRuleListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_K8SClusterRoleSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_K8SClusterRoleSelector{`,
		`K8SClusterRoleSelector:` + strings.Replace(fmt.Sprintf("%v", this.K8SClusterRoleSelector), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Yaml) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Yaml{`,
		`Yaml:` + fmt.Sprintf("%v", this.Yaml) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`RuleChoice:` + fmt.Sprintf("%v", this.RuleChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_PolicyRuleList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_PolicyRuleList{`,
		`PolicyRuleList:` + strings.Replace(fmt.Sprintf("%v", this.PolicyRuleList), "PolicyRuleListType", "PolicyRuleListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_K8SClusterRoleSelector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_K8SClusterRoleSelector{`,
		`K8SClusterRoleSelector:` + strings.Replace(fmt.Sprintf("%v", this.K8SClusterRoleSelector), "LabelSelectorType", "schema.LabelSelectorType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Yaml) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Yaml{`,
		`Yaml:` + fmt.Sprintf("%v", this.Yaml) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NonResourceURLListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NonResourceURLListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NonResourceURLListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urls = append(m.Urls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verbs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verbs = append(m.Verbs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroups = append(m.ApiGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceTypes = append(m.ResourceTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceInstances", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceInstances = append(m.ResourceInstances, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verbs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verbs = append(m.Verbs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyRuleType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyRuleType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyRuleType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResourceListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ResourceChoice = &PolicyRuleType_ResourceList{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonResourceUrlList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NonResourceURLListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ResourceChoice = &PolicyRuleType_NonResourceUrlList{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyRuleListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyRuleListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyRuleListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyRule = append(m.PolicyRule, &PolicyRuleType{})
			if err := m.PolicyRule[len(m.PolicyRule)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyRuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PolicyRuleListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GlobalSpecType_PolicyRuleList{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SClusterRoleSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GlobalSpecType_K8SClusterRoleSelector{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yaml", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleChoice = &GlobalSpecType_Yaml{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeneratedYaml", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GeneratedYaml = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyRuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PolicyRuleListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &CreateSpecType_PolicyRuleList{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SClusterRoleSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &CreateSpecType_K8SClusterRoleSelector{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yaml", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleChoice = &CreateSpecType_Yaml{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyRuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PolicyRuleListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &ReplaceSpecType_PolicyRuleList{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SClusterRoleSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &ReplaceSpecType_K8SClusterRoleSelector{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yaml", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleChoice = &ReplaceSpecType_Yaml{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyRuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PolicyRuleListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GetSpecType_PolicyRuleList{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SClusterRoleSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.LabelSelectorType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RuleChoice = &GetSpecType_K8SClusterRoleSelector{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yaml", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleChoice = &GetSpecType_Yaml{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
