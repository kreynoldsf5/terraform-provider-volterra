// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/malicious_user_mitigation/types.proto

package malicious_user_mitigation

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MaliciousUserThreatLevel
//
// x-displayName: "Malicious User Threat Level"
// Threat level estimated for each user based on the user's activity and reputation
type MaliciousUserThreatLevel struct {
	// threat level
	//
	// x-displayName: "Threat Level"
	// x-required
	// Threat level category assigned to user, based on the user activity and reputation
	//
	// Types that are valid to be assigned to ThreatLevel:
	//	*MaliciousUserThreatLevel_Low
	//	*MaliciousUserThreatLevel_Medium
	//	*MaliciousUserThreatLevel_High
	ThreatLevel isMaliciousUserThreatLevel_ThreatLevel `protobuf_oneof:"threat_level"`
}

func (m *MaliciousUserThreatLevel) Reset()      { *m = MaliciousUserThreatLevel{} }
func (*MaliciousUserThreatLevel) ProtoMessage() {}
func (*MaliciousUserThreatLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_3846b9e60d65fab8, []int{0}
}
func (m *MaliciousUserThreatLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaliciousUserThreatLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MaliciousUserThreatLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaliciousUserThreatLevel.Merge(m, src)
}
func (m *MaliciousUserThreatLevel) XXX_Size() int {
	return m.Size()
}
func (m *MaliciousUserThreatLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_MaliciousUserThreatLevel.DiscardUnknown(m)
}

var xxx_messageInfo_MaliciousUserThreatLevel proto.InternalMessageInfo

type isMaliciousUserThreatLevel_ThreatLevel interface {
	isMaliciousUserThreatLevel_ThreatLevel()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type MaliciousUserThreatLevel_Low struct {
	Low *schema.Empty `protobuf:"bytes,1,opt,name=low,proto3,oneof" json:"low,omitempty"`
}
type MaliciousUserThreatLevel_Medium struct {
	Medium *schema.Empty `protobuf:"bytes,2,opt,name=medium,proto3,oneof" json:"medium,omitempty"`
}
type MaliciousUserThreatLevel_High struct {
	High *schema.Empty `protobuf:"bytes,3,opt,name=high,proto3,oneof" json:"high,omitempty"`
}

func (*MaliciousUserThreatLevel_Low) isMaliciousUserThreatLevel_ThreatLevel()    {}
func (*MaliciousUserThreatLevel_Medium) isMaliciousUserThreatLevel_ThreatLevel() {}
func (*MaliciousUserThreatLevel_High) isMaliciousUserThreatLevel_ThreatLevel()   {}

func (m *MaliciousUserThreatLevel) GetThreatLevel() isMaliciousUserThreatLevel_ThreatLevel {
	if m != nil {
		return m.ThreatLevel
	}
	return nil
}

func (m *MaliciousUserThreatLevel) GetLow() *schema.Empty {
	if x, ok := m.GetThreatLevel().(*MaliciousUserThreatLevel_Low); ok {
		return x.Low
	}
	return nil
}

func (m *MaliciousUserThreatLevel) GetMedium() *schema.Empty {
	if x, ok := m.GetThreatLevel().(*MaliciousUserThreatLevel_Medium); ok {
		return x.Medium
	}
	return nil
}

func (m *MaliciousUserThreatLevel) GetHigh() *schema.Empty {
	if x, ok := m.GetThreatLevel().(*MaliciousUserThreatLevel_High); ok {
		return x.High
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MaliciousUserThreatLevel) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MaliciousUserThreatLevel_Low)(nil),
		(*MaliciousUserThreatLevel_Medium)(nil),
		(*MaliciousUserThreatLevel_High)(nil),
	}
}

// MaliciousUserMitigationAction
//
// x-displayName: "Malicious User Mitigation Action"
// Supported actions that can be taken to mitigate malicious activity from a user
type MaliciousUserMitigationAction struct {
	// mitigation action
	//
	// x-displayName: "Action"
	// x-required
	// Supported actions that can be taken to mitigate malicious activity from a user
	//
	// Types that are valid to be assigned to MitigationAction:
	//	*MaliciousUserMitigationAction_None
	//	*MaliciousUserMitigationAction_AlertOnly
	//	*MaliciousUserMitigationAction_JavascriptChallenge
	//	*MaliciousUserMitigationAction_CaptchaChallenge
	//	*MaliciousUserMitigationAction_BlockTemporarily
	MitigationAction isMaliciousUserMitigationAction_MitigationAction `protobuf_oneof:"mitigation_action"`
}

func (m *MaliciousUserMitigationAction) Reset()      { *m = MaliciousUserMitigationAction{} }
func (*MaliciousUserMitigationAction) ProtoMessage() {}
func (*MaliciousUserMitigationAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_3846b9e60d65fab8, []int{1}
}
func (m *MaliciousUserMitigationAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaliciousUserMitigationAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MaliciousUserMitigationAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaliciousUserMitigationAction.Merge(m, src)
}
func (m *MaliciousUserMitigationAction) XXX_Size() int {
	return m.Size()
}
func (m *MaliciousUserMitigationAction) XXX_DiscardUnknown() {
	xxx_messageInfo_MaliciousUserMitigationAction.DiscardUnknown(m)
}

var xxx_messageInfo_MaliciousUserMitigationAction proto.InternalMessageInfo

type isMaliciousUserMitigationAction_MitigationAction interface {
	isMaliciousUserMitigationAction_MitigationAction()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type MaliciousUserMitigationAction_None struct {
	None *schema.Empty `protobuf:"bytes,1,opt,name=none,proto3,oneof" json:"none,omitempty"`
}
type MaliciousUserMitigationAction_AlertOnly struct {
	AlertOnly *schema.Empty `protobuf:"bytes,2,opt,name=alert_only,json=alertOnly,proto3,oneof" json:"alert_only,omitempty"`
}
type MaliciousUserMitigationAction_JavascriptChallenge struct {
	JavascriptChallenge *schema.Empty `protobuf:"bytes,3,opt,name=javascript_challenge,json=javascriptChallenge,proto3,oneof" json:"javascript_challenge,omitempty"`
}
type MaliciousUserMitigationAction_CaptchaChallenge struct {
	CaptchaChallenge *schema.Empty `protobuf:"bytes,4,opt,name=captcha_challenge,json=captchaChallenge,proto3,oneof" json:"captcha_challenge,omitempty"`
}
type MaliciousUserMitigationAction_BlockTemporarily struct {
	BlockTemporarily *schema.Empty `protobuf:"bytes,5,opt,name=block_temporarily,json=blockTemporarily,proto3,oneof" json:"block_temporarily,omitempty"`
}

func (*MaliciousUserMitigationAction_None) isMaliciousUserMitigationAction_MitigationAction()      {}
func (*MaliciousUserMitigationAction_AlertOnly) isMaliciousUserMitigationAction_MitigationAction() {}
func (*MaliciousUserMitigationAction_JavascriptChallenge) isMaliciousUserMitigationAction_MitigationAction() {
}
func (*MaliciousUserMitigationAction_CaptchaChallenge) isMaliciousUserMitigationAction_MitigationAction() {
}
func (*MaliciousUserMitigationAction_BlockTemporarily) isMaliciousUserMitigationAction_MitigationAction() {
}

func (m *MaliciousUserMitigationAction) GetMitigationAction() isMaliciousUserMitigationAction_MitigationAction {
	if m != nil {
		return m.MitigationAction
	}
	return nil
}

// Deprecated: Do not use.
func (m *MaliciousUserMitigationAction) GetNone() *schema.Empty {
	if x, ok := m.GetMitigationAction().(*MaliciousUserMitigationAction_None); ok {
		return x.None
	}
	return nil
}

// Deprecated: Do not use.
func (m *MaliciousUserMitigationAction) GetAlertOnly() *schema.Empty {
	if x, ok := m.GetMitigationAction().(*MaliciousUserMitigationAction_AlertOnly); ok {
		return x.AlertOnly
	}
	return nil
}

func (m *MaliciousUserMitigationAction) GetJavascriptChallenge() *schema.Empty {
	if x, ok := m.GetMitigationAction().(*MaliciousUserMitigationAction_JavascriptChallenge); ok {
		return x.JavascriptChallenge
	}
	return nil
}

func (m *MaliciousUserMitigationAction) GetCaptchaChallenge() *schema.Empty {
	if x, ok := m.GetMitigationAction().(*MaliciousUserMitigationAction_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *MaliciousUserMitigationAction) GetBlockTemporarily() *schema.Empty {
	if x, ok := m.GetMitigationAction().(*MaliciousUserMitigationAction_BlockTemporarily); ok {
		return x.BlockTemporarily
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MaliciousUserMitigationAction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MaliciousUserMitigationAction_None)(nil),
		(*MaliciousUserMitigationAction_AlertOnly)(nil),
		(*MaliciousUserMitigationAction_JavascriptChallenge)(nil),
		(*MaliciousUserMitigationAction_CaptchaChallenge)(nil),
		(*MaliciousUserMitigationAction_BlockTemporarily)(nil),
	}
}

// MaliciousUserMitigationRule
//
// x-displayName: "Mitigation Rule"
// Malicious user mitigation rules specify the actions to be taken for users mapped to different threat levels
type MaliciousUserMitigationRule struct {
	// threat level
	//
	// x-displayName: "Threat Level"
	// x-required
	// The threat level at which mitigation actions will be taken
	ThreatLevel *MaliciousUserThreatLevel `protobuf:"bytes,1,opt,name=threat_level,json=threatLevel,proto3" json:"threat_level,omitempty"`
	// mitigation action
	//
	// x-displayName: "Mitigation Action"
	// x-required
	// The action to be taken at the specified threat level
	MitigationAction *MaliciousUserMitigationAction `protobuf:"bytes,2,opt,name=mitigation_action,json=mitigationAction,proto3" json:"mitigation_action,omitempty"`
}

func (m *MaliciousUserMitigationRule) Reset()      { *m = MaliciousUserMitigationRule{} }
func (*MaliciousUserMitigationRule) ProtoMessage() {}
func (*MaliciousUserMitigationRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_3846b9e60d65fab8, []int{2}
}
func (m *MaliciousUserMitigationRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaliciousUserMitigationRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MaliciousUserMitigationRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaliciousUserMitigationRule.Merge(m, src)
}
func (m *MaliciousUserMitigationRule) XXX_Size() int {
	return m.Size()
}
func (m *MaliciousUserMitigationRule) XXX_DiscardUnknown() {
	xxx_messageInfo_MaliciousUserMitigationRule.DiscardUnknown(m)
}

var xxx_messageInfo_MaliciousUserMitigationRule proto.InternalMessageInfo

func (m *MaliciousUserMitigationRule) GetThreatLevel() *MaliciousUserThreatLevel {
	if m != nil {
		return m.ThreatLevel
	}
	return nil
}

func (m *MaliciousUserMitigationRule) GetMitigationAction() *MaliciousUserMitigationAction {
	if m != nil {
		return m.MitigationAction
	}
	return nil
}

// MaliciousUserMitigationType
//
// x-displayName: "Malicious User Mitigation Settings"
// Settings that specify the actions to be taken when malicious users are determined to be at different threat levels.
// User's activity is monitored and continuously analyzed for malicious behavior. From this analysis, a threat-level
// is assigned to each user. The settings defined in malicious user mitigation specify what mitigation actions to take
// for user determined to be at different threat levels.
type MaliciousUserMitigationType struct {
	// malicious user mitigation rules
	//
	// x-displayName: "Rules"
	// x-required
	// Define the threat levels and the corresponding mitigation actions to be taken
	Rules []*MaliciousUserMitigationRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *MaliciousUserMitigationType) Reset()      { *m = MaliciousUserMitigationType{} }
func (*MaliciousUserMitigationType) ProtoMessage() {}
func (*MaliciousUserMitigationType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3846b9e60d65fab8, []int{3}
}
func (m *MaliciousUserMitigationType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaliciousUserMitigationType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MaliciousUserMitigationType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaliciousUserMitigationType.Merge(m, src)
}
func (m *MaliciousUserMitigationType) XXX_Size() int {
	return m.Size()
}
func (m *MaliciousUserMitigationType) XXX_DiscardUnknown() {
	xxx_messageInfo_MaliciousUserMitigationType.DiscardUnknown(m)
}

var xxx_messageInfo_MaliciousUserMitigationType proto.InternalMessageInfo

func (m *MaliciousUserMitigationType) GetRules() []*MaliciousUserMitigationRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// GlobalSpecType
//
// x-displayName: "Specification"
// Shape of malicious_user_mitigation in the storage backend.
type GlobalSpecType struct {
	// MaliciousUserMitigationType
	//
	// x-displayName: "Mitigation Rules"
	// Malicious user mitigation rules specifies the actions to be taken for users to different threat levels
	MitigationType *MaliciousUserMitigationType `protobuf:"bytes,1,opt,name=mitigation_type,json=mitigationType,proto3" json:"mitigation_type,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3846b9e60d65fab8, []int{4}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetMitigationType() *MaliciousUserMitigationType {
	if m != nil {
		return m.MitigationType
	}
	return nil
}

// Create malicious user mitigation
//
// x-displayName: "Create Malicious User Mitigation"
// Create malicious_user_mitigation creates a new object in the storage backend for metadata.namespace.
type CreateSpecType struct {
	MitigationType *MaliciousUserMitigationType `protobuf:"bytes,1,opt,name=mitigation_type,json=mitigationType,proto3" json:"mitigation_type,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3846b9e60d65fab8, []int{5}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetMitigationType() *MaliciousUserMitigationType {
	if m != nil {
		return m.MitigationType
	}
	return nil
}

// Replace malicious user mitigation
//
// x-displayName: "Replace Malicious User Mitigation"
// Replace malicious_user_mitigation replaces an existing object in the storage backend for metadata.namespace.
type ReplaceSpecType struct {
	MitigationType *MaliciousUserMitigationType `protobuf:"bytes,1,opt,name=mitigation_type,json=mitigationType,proto3" json:"mitigation_type,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3846b9e60d65fab8, []int{6}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetMitigationType() *MaliciousUserMitigationType {
	if m != nil {
		return m.MitigationType
	}
	return nil
}

// Get malicious user mitigation
//
// x-displayName: "Get Malicious User Mitigation"
// Get malicious_user_mitigation reads a given object from storage backend for metadata.namespace.
type GetSpecType struct {
	MitigationType *MaliciousUserMitigationType `protobuf:"bytes,1,opt,name=mitigation_type,json=mitigationType,proto3" json:"mitigation_type,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3846b9e60d65fab8, []int{7}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetMitigationType() *MaliciousUserMitigationType {
	if m != nil {
		return m.MitigationType
	}
	return nil
}

func init() {
	proto.RegisterType((*MaliciousUserThreatLevel)(nil), "ves.io.schema.malicious_user_mitigation.MaliciousUserThreatLevel")
	golang_proto.RegisterType((*MaliciousUserThreatLevel)(nil), "ves.io.schema.malicious_user_mitigation.MaliciousUserThreatLevel")
	proto.RegisterType((*MaliciousUserMitigationAction)(nil), "ves.io.schema.malicious_user_mitigation.MaliciousUserMitigationAction")
	golang_proto.RegisterType((*MaliciousUserMitigationAction)(nil), "ves.io.schema.malicious_user_mitigation.MaliciousUserMitigationAction")
	proto.RegisterType((*MaliciousUserMitigationRule)(nil), "ves.io.schema.malicious_user_mitigation.MaliciousUserMitigationRule")
	golang_proto.RegisterType((*MaliciousUserMitigationRule)(nil), "ves.io.schema.malicious_user_mitigation.MaliciousUserMitigationRule")
	proto.RegisterType((*MaliciousUserMitigationType)(nil), "ves.io.schema.malicious_user_mitigation.MaliciousUserMitigationType")
	golang_proto.RegisterType((*MaliciousUserMitigationType)(nil), "ves.io.schema.malicious_user_mitigation.MaliciousUserMitigationType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.malicious_user_mitigation.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.malicious_user_mitigation.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.malicious_user_mitigation.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.malicious_user_mitigation.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.malicious_user_mitigation.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.malicious_user_mitigation.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.malicious_user_mitigation.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.malicious_user_mitigation.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/malicious_user_mitigation/types.proto", fileDescriptor_3846b9e60d65fab8)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/malicious_user_mitigation/types.proto", fileDescriptor_3846b9e60d65fab8)
}

var fileDescriptor_3846b9e60d65fab8 = []byte{
	// 916 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xf3, 0xae, 0x43, 0xfa, 0x52, 0xa5, 0xf6, 0x36, 0x02, 0x37, 0x6d, 0x07, 0x63, 0xa4,
	0x12, 0x45, 0xc9, 0x5a, 0x6c, 0xa8, 0x54, 0xf5, 0x50, 0x11, 0x07, 0x68, 0xb1, 0x1a, 0x90, 0xdc,
	0xf4, 0x82, 0x84, 0xac, 0xf1, 0x66, 0xba, 0xde, 0x76, 0xd6, 0xb3, 0xda, 0x1d, 0x3b, 0x18, 0x09,
	0xa9, 0x52, 0x2f, 0xdc, 0x8a, 0xca, 0x01, 0x55, 0xfd, 0x07, 0xf8, 0x1b, 0xf0, 0x25, 0x47, 0xe8,
	0xc9, 0xc7, 0x1c, 0xc9, 0xe6, 0x52, 0x6e, 0xf9, 0x13, 0xd0, 0xfe, 0x70, 0xec, 0xb5, 0x1b, 0x07,
	0x51, 0x55, 0xea, 0xc5, 0x9e, 0x9d, 0xf7, 0x7d, 0x6f, 0xbe, 0x37, 0xef, 0x7b, 0xf6, 0xe2, 0x46,
	0x97, 0xf9, 0xba, 0x2d, 0x2a, 0xbe, 0xd9, 0x62, 0x0e, 0xad, 0x38, 0x94, 0xdb, 0xa6, 0x2d, 0x3a,
	0x7e, 0xa3, 0xe3, 0x33, 0xaf, 0xe1, 0xd8, 0xd2, 0xb6, 0xa8, 0xb4, 0x45, 0xbb, 0x22, 0x7b, 0x2e,
	0xf3, 0x75, 0xd7, 0x13, 0x52, 0x68, 0x9f, 0xc4, 0x24, 0x3d, 0x26, 0xe9, 0xa7, 0x92, 0x96, 0xd7,
	0x2d, 0x5b, 0xb6, 0x3a, 0x4d, 0xdd, 0x14, 0x4e, 0xc5, 0x12, 0x96, 0xa8, 0x44, 0xfc, 0x66, 0xe7,
	0x41, 0xf4, 0x14, 0x3d, 0x44, 0xab, 0x38, 0xef, 0xf2, 0x87, 0x96, 0x10, 0x16, 0x67, 0x23, 0x94,
	0xb4, 0x1d, 0xe6, 0x4b, 0xea, 0xb8, 0x09, 0xe0, 0x72, 0x5a, 0xad, 0x70, 0xc3, 0x53, 0x12, 0x55,
	0xcb, 0x97, 0xd2, 0xc1, 0x31, 0xc1, 0xcb, 0x57, 0xd2, 0xa1, 0x2e, 0xe5, 0xf6, 0x2e, 0x95, 0x2c,
	0x89, 0x96, 0x26, 0xa2, 0x36, 0xdb, 0x6b, 0xa4, 0x52, 0x97, 0xff, 0x02, 0x2c, 0x6e, 0x0f, 0xab,
	0xbc, 0xef, 0x33, 0x6f, 0xa7, 0xe5, 0x31, 0x2a, 0xef, 0xb2, 0x2e, 0xe3, 0xda, 0x0a, 0x2a, 0x5c,
	0xec, 0x15, 0xa1, 0x04, 0x2b, 0x0b, 0xc6, 0x92, 0x9e, 0xbe, 0x9b, 0x2f, 0x1d, 0x57, 0xf6, 0xee,
	0x64, 0xea, 0x21, 0x44, 0xd3, 0x71, 0xce, 0x61, 0xbb, 0x76, 0xc7, 0x29, 0x66, 0x67, 0x82, 0x13,
	0x94, 0xb6, 0x8a, 0x6a, 0xcb, 0xb6, 0x5a, 0x45, 0x65, 0x26, 0x3a, 0xc2, 0x54, 0x3f, 0xc2, 0xf3,
	0x32, 0x12, 0xd5, 0xe0, 0x91, 0xaa, 0xc2, 0x7e, 0x1f, 0x60, 0xd0, 0x07, 0x35, 0xe8, 0x43, 0xee,
	0xd3, 0x35, 0x63, 0x6d, 0xa3, 0xa6, 0xce, 0xab, 0xf9, 0x5c, 0xf9, 0x85, 0x82, 0x57, 0x53, 0xb5,
	0x6c, 0x9f, 0xf4, 0x6b, 0xd3, 0x0c, 0x3f, 0xb5, 0xeb, 0xa8, 0xb6, 0x45, 0x9b, 0xcd, 0xaa, 0xa8,
	0x7a, 0xee, 0xe0, 0x27, 0x78, 0xd5, 0x07, 0x28, 0x42, 0xa8, 0x20, 0x84, 0x6b, 0x9f, 0x23, 0x52,
	0xce, 0x3c, 0xd9, 0x10, 0x6d, 0xde, 0x9b, 0x55, 0x61, 0x9a, 0x7c, 0x2e, 0x22, 0x7d, 0xdb, 0xe6,
	0x3d, 0xed, 0x6b, 0x5c, 0x7a, 0x48, 0xbb, 0xd4, 0x37, 0x3d, 0xdb, 0x95, 0x0d, 0xb3, 0x45, 0x39,
	0x67, 0x6d, 0x8b, 0x9d, 0x51, 0xff, 0xc5, 0x11, 0x67, 0x6b, 0x48, 0xd1, 0xb6, 0xb0, 0x60, 0x52,
	0x57, 0x9a, 0x2d, 0x3a, 0x96, 0x47, 0x9d, 0x99, 0x27, 0x9f, 0x10, 0x52, 0x49, 0x9a, 0x5c, 0x98,
	0x8f, 0x1a, 0x92, 0x39, 0xae, 0xf0, 0xa8, 0x67, 0xf3, 0x5e, 0x31, 0x37, 0x3b, 0x49, 0x44, 0xd8,
	0x19, 0xe1, 0xab, 0xd7, 0xb0, 0x30, 0x9a, 0x88, 0x06, 0x8d, 0xaf, 0x38, 0xec, 0x8e, 0x32, 0xe8,
	0xc3, 0x5c, 0xd8, 0x9d, 0x8d, 0xb5, 0xcf, 0xd6, 0xae, 0xd7, 0xd4, 0xf9, 0xb9, 0xfc, 0x7b, 0xe5,
	0xa7, 0x39, 0xbc, 0x7c, 0x4a, 0x77, 0xea, 0x1d, 0xce, 0xb4, 0x87, 0xe9, 0x36, 0x27, 0x3d, 0xda,
	0xd4, 0xff, 0xe3, 0x44, 0xea, 0xa7, 0xb9, 0xb8, 0xaa, 0x1e, 0xf7, 0x01, 0xea, 0x0b, 0x72, 0xcc,
	0xd8, 0xbd, 0xd7, 0x28, 0x4f, 0xfa, 0xfa, 0xd5, 0xff, 0x3b, 0x70, 0xd2, 0x6a, 0xc9, 0xa9, 0x79,
	0x67, 0x62, 0xff, 0xe6, 0xcf, 0xca, 0xcb, 0x3e, 0x3c, 0x51, 0x90, 0xe1, 0xf9, 0x58, 0x64, 0x29,
	0x92, 0xb4, 0x7a, 0x1f, 0xef, 0xe1, 0x07, 0x98, 0x1f, 0xbf, 0x02, 0x9d, 0x8b, 0x3d, 0x43, 0xb9,
	0x2b, 0xf6, 0xf0, 0x2a, 0x5e, 0x4c, 0x05, 0xe2, 0x29, 0x32, 0xe6, 0xb6, 0xa3, 0x6f, 0xbc, 0x84,
	0x85, 0x54, 0x38, 0x1c, 0x1b, 0x43, 0xbd, 0x63, 0x5b, 0x2d, 0x7c, 0x9e, 0xc5, 0xc2, 0x48, 0x5b,
	0x29, 0x16, 0xb1, 0xfa, 0x24, 0x8b, 0x8f, 0xb3, 0x48, 0xf0, 0xfd, 0xa9, 0x5b, 0xd0, 0x43, 0xc3,
	0x1b, 0xea, 0x37, 0xa2, 0xcd, 0x70, 0x15, 0xaf, 0x4c, 0xc7, 0x47, 0x83, 0x60, 0xe0, 0x66, 0xb8,
	0x2e, 0x85, 0x06, 0xc7, 0x5b, 0x78, 0x6d, 0x1a, 0xfb, 0x3a, 0xcb, 0x1b, 0x4b, 0xb5, 0x93, 0xdd,
	0xd2, 0x89, 0x21, 0xf1, 0x06, 0x7e, 0x3c, 0xcd, 0x9f, 0xf2, 0xb9, 0x51, 0xd8, 0x8a, 0xb7, 0xce,
	0x62, 0x4e, 0x99, 0xdb, 0x28, 0x54, 0xc3, 0xad, 0xd2, 0x98, 0x7f, 0xcb, 0xcf, 0xe1, 0x54, 0x47,
	0xee, 0xf4, 0x5c, 0xa6, 0xfd, 0x88, 0x39, 0xaf, 0xc3, 0x99, 0x5f, 0x84, 0x92, 0xb2, 0xb2, 0x60,
	0x7c, 0xf1, 0xa6, 0xce, 0x08, 0x6d, 0x5e, 0x25, 0x7f, 0xfc, 0xb3, 0xaf, 0xe4, 0x9e, 0x41, 0x36,
	0xaf, 0x0e, 0x57, 0x45, 0x18, 0xae, 0x6e, 0x40, 0x3d, 0x3e, 0xb2, 0xfc, 0x1b, 0xe0, 0xe2, 0x6d,
	0x2e, 0x9a, 0x94, 0xdf, 0x73, 0x99, 0x19, 0xc9, 0xf1, 0xf1, 0xc2, 0x58, 0xa1, 0xe1, 0x9f, 0x40,
	0x32, 0x23, 0x6f, 0x2c, 0x2c, 0x4c, 0x9f, 0x18, 0x76, 0xd1, 0x49, 0xed, 0xd6, 0xd4, 0xf9, 0x6c,
	0x5e, 0xa9, 0xa9, 0xf3, 0x4a, 0x5e, 0x4d, 0x7e, 0x65, 0x9f, 0x01, 0x2e, 0x6e, 0x85, 0x66, 0x63,
	0x27, 0xca, 0x9c, 0xb7, 0xaa, 0x6c, 0x52, 0xd3, 0xcd, 0xc2, 0xcb, 0x5b, 0x13, 0x77, 0x53, 0xfe,
	0x15, 0xf0, 0x42, 0x9d, 0xb9, 0x9c, 0x9a, 0xef, 0x92, 0xaa, 0xa7, 0x80, 0x0b, 0xb7, 0x99, 0x7c,
	0x77, 0x14, 0x55, 0x5f, 0xc0, 0xe0, 0x90, 0x64, 0x0e, 0x0e, 0x49, 0xe6, 0xf8, 0x90, 0xc0, 0xe3,
	0x80, 0xc0, 0xef, 0x01, 0x81, 0x3f, 0x03, 0x02, 0x83, 0x80, 0xc0, 0x41, 0x40, 0xe0, 0xef, 0x80,
	0xc0, 0xab, 0x80, 0x64, 0x8e, 0x03, 0x02, 0xbf, 0x1c, 0x91, 0xcc, 0xfe, 0x11, 0x81, 0xc1, 0x11,
	0xc9, 0x1c, 0x1c, 0x91, 0xcc, 0x77, 0xdf, 0x5b, 0xc2, 0x7d, 0x64, 0xe9, 0x5d, 0xc1, 0x25, 0xf3,
	0x3c, 0xaa, 0x77, 0xfc, 0x4a, 0xb4, 0x78, 0x20, 0x3c, 0x67, 0xdd, 0xf5, 0x44, 0xd7, 0xde, 0x65,
	0xde, 0xfa, 0x30, 0x5c, 0x71, 0x9b, 0x96, 0xa8, 0xb0, 0x1f, 0x64, 0xf2, 0xfa, 0x71, 0xd6, 0x9b,
	0x58, 0x73, 0x2e, 0x7a, 0x27, 0xd9, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xb5, 0xe6, 0xad,
	0xbb, 0x09, 0x00, 0x00,
}

func (this *MaliciousUserThreatLevel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserThreatLevel)
	if !ok {
		that2, ok := that.(MaliciousUserThreatLevel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ThreatLevel == nil {
		if this.ThreatLevel != nil {
			return false
		}
	} else if this.ThreatLevel == nil {
		return false
	} else if !this.ThreatLevel.Equal(that1.ThreatLevel) {
		return false
	}
	return true
}
func (this *MaliciousUserThreatLevel_Low) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserThreatLevel_Low)
	if !ok {
		that2, ok := that.(MaliciousUserThreatLevel_Low)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Low.Equal(that1.Low) {
		return false
	}
	return true
}
func (this *MaliciousUserThreatLevel_Medium) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserThreatLevel_Medium)
	if !ok {
		that2, ok := that.(MaliciousUserThreatLevel_Medium)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Medium.Equal(that1.Medium) {
		return false
	}
	return true
}
func (this *MaliciousUserThreatLevel_High) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserThreatLevel_High)
	if !ok {
		that2, ok := that.(MaliciousUserThreatLevel_High)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.High.Equal(that1.High) {
		return false
	}
	return true
}
func (this *MaliciousUserMitigationAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserMitigationAction)
	if !ok {
		that2, ok := that.(MaliciousUserMitigationAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.MitigationAction == nil {
		if this.MitigationAction != nil {
			return false
		}
	} else if this.MitigationAction == nil {
		return false
	} else if !this.MitigationAction.Equal(that1.MitigationAction) {
		return false
	}
	return true
}
func (this *MaliciousUserMitigationAction_None) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserMitigationAction_None)
	if !ok {
		that2, ok := that.(MaliciousUserMitigationAction_None)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.None.Equal(that1.None) {
		return false
	}
	return true
}
func (this *MaliciousUserMitigationAction_AlertOnly) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserMitigationAction_AlertOnly)
	if !ok {
		that2, ok := that.(MaliciousUserMitigationAction_AlertOnly)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AlertOnly.Equal(that1.AlertOnly) {
		return false
	}
	return true
}
func (this *MaliciousUserMitigationAction_JavascriptChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserMitigationAction_JavascriptChallenge)
	if !ok {
		that2, ok := that.(MaliciousUserMitigationAction_JavascriptChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JavascriptChallenge.Equal(that1.JavascriptChallenge) {
		return false
	}
	return true
}
func (this *MaliciousUserMitigationAction_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserMitigationAction_CaptchaChallenge)
	if !ok {
		that2, ok := that.(MaliciousUserMitigationAction_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *MaliciousUserMitigationAction_BlockTemporarily) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserMitigationAction_BlockTemporarily)
	if !ok {
		that2, ok := that.(MaliciousUserMitigationAction_BlockTemporarily)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BlockTemporarily.Equal(that1.BlockTemporarily) {
		return false
	}
	return true
}
func (this *MaliciousUserMitigationRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserMitigationRule)
	if !ok {
		that2, ok := that.(MaliciousUserMitigationRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ThreatLevel.Equal(that1.ThreatLevel) {
		return false
	}
	if !this.MitigationAction.Equal(that1.MitigationAction) {
		return false
	}
	return true
}
func (this *MaliciousUserMitigationType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MaliciousUserMitigationType)
	if !ok {
		that2, ok := that.(MaliciousUserMitigationType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MitigationType.Equal(that1.MitigationType) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MitigationType.Equal(that1.MitigationType) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MitigationType.Equal(that1.MitigationType) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MitigationType.Equal(that1.MitigationType) {
		return false
	}
	return true
}
func (this *MaliciousUserThreatLevel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&malicious_user_mitigation.MaliciousUserThreatLevel{")
	if this.ThreatLevel != nil {
		s = append(s, "ThreatLevel: "+fmt.Sprintf("%#v", this.ThreatLevel)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MaliciousUserThreatLevel_Low) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&malicious_user_mitigation.MaliciousUserThreatLevel_Low{` +
		`Low:` + fmt.Sprintf("%#v", this.Low) + `}`}, ", ")
	return s
}
func (this *MaliciousUserThreatLevel_Medium) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&malicious_user_mitigation.MaliciousUserThreatLevel_Medium{` +
		`Medium:` + fmt.Sprintf("%#v", this.Medium) + `}`}, ", ")
	return s
}
func (this *MaliciousUserThreatLevel_High) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&malicious_user_mitigation.MaliciousUserThreatLevel_High{` +
		`High:` + fmt.Sprintf("%#v", this.High) + `}`}, ", ")
	return s
}
func (this *MaliciousUserMitigationAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&malicious_user_mitigation.MaliciousUserMitigationAction{")
	if this.MitigationAction != nil {
		s = append(s, "MitigationAction: "+fmt.Sprintf("%#v", this.MitigationAction)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MaliciousUserMitigationAction_None) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&malicious_user_mitigation.MaliciousUserMitigationAction_None{` +
		`None:` + fmt.Sprintf("%#v", this.None) + `}`}, ", ")
	return s
}
func (this *MaliciousUserMitigationAction_AlertOnly) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&malicious_user_mitigation.MaliciousUserMitigationAction_AlertOnly{` +
		`AlertOnly:` + fmt.Sprintf("%#v", this.AlertOnly) + `}`}, ", ")
	return s
}
func (this *MaliciousUserMitigationAction_JavascriptChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&malicious_user_mitigation.MaliciousUserMitigationAction_JavascriptChallenge{` +
		`JavascriptChallenge:` + fmt.Sprintf("%#v", this.JavascriptChallenge) + `}`}, ", ")
	return s
}
func (this *MaliciousUserMitigationAction_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&malicious_user_mitigation.MaliciousUserMitigationAction_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *MaliciousUserMitigationAction_BlockTemporarily) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&malicious_user_mitigation.MaliciousUserMitigationAction_BlockTemporarily{` +
		`BlockTemporarily:` + fmt.Sprintf("%#v", this.BlockTemporarily) + `}`}, ", ")
	return s
}
func (this *MaliciousUserMitigationRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&malicious_user_mitigation.MaliciousUserMitigationRule{")
	if this.ThreatLevel != nil {
		s = append(s, "ThreatLevel: "+fmt.Sprintf("%#v", this.ThreatLevel)+",\n")
	}
	if this.MitigationAction != nil {
		s = append(s, "MitigationAction: "+fmt.Sprintf("%#v", this.MitigationAction)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MaliciousUserMitigationType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&malicious_user_mitigation.MaliciousUserMitigationType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&malicious_user_mitigation.GlobalSpecType{")
	if this.MitigationType != nil {
		s = append(s, "MitigationType: "+fmt.Sprintf("%#v", this.MitigationType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&malicious_user_mitigation.CreateSpecType{")
	if this.MitigationType != nil {
		s = append(s, "MitigationType: "+fmt.Sprintf("%#v", this.MitigationType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&malicious_user_mitigation.ReplaceSpecType{")
	if this.MitigationType != nil {
		s = append(s, "MitigationType: "+fmt.Sprintf("%#v", this.MitigationType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&malicious_user_mitigation.GetSpecType{")
	if this.MitigationType != nil {
		s = append(s, "MitigationType: "+fmt.Sprintf("%#v", this.MitigationType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MaliciousUserThreatLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaliciousUserThreatLevel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserThreatLevel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ThreatLevel != nil {
		{
			size := m.ThreatLevel.Size()
			i -= size
			if _, err := m.ThreatLevel.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MaliciousUserThreatLevel_Low) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserThreatLevel_Low) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Low != nil {
		{
			size, err := m.Low.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MaliciousUserThreatLevel_Medium) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserThreatLevel_Medium) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Medium != nil {
		{
			size, err := m.Medium.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *MaliciousUserThreatLevel_High) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserThreatLevel_High) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.High != nil {
		{
			size, err := m.High.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *MaliciousUserMitigationAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaliciousUserMitigationAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserMitigationAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MitigationAction != nil {
		{
			size := m.MitigationAction.Size()
			i -= size
			if _, err := m.MitigationAction.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MaliciousUserMitigationAction_None) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserMitigationAction_None) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.None != nil {
		{
			size, err := m.None.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MaliciousUserMitigationAction_AlertOnly) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserMitigationAction_AlertOnly) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AlertOnly != nil {
		{
			size, err := m.AlertOnly.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *MaliciousUserMitigationAction_JavascriptChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserMitigationAction_JavascriptChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JavascriptChallenge != nil {
		{
			size, err := m.JavascriptChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *MaliciousUserMitigationAction_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserMitigationAction_CaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *MaliciousUserMitigationAction_BlockTemporarily) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserMitigationAction_BlockTemporarily) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockTemporarily != nil {
		{
			size, err := m.BlockTemporarily.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *MaliciousUserMitigationRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaliciousUserMitigationRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserMitigationRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MitigationAction != nil {
		{
			size, err := m.MitigationAction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ThreatLevel != nil {
		{
			size, err := m.ThreatLevel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaliciousUserMitigationType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaliciousUserMitigationType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaliciousUserMitigationType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MitigationType != nil {
		{
			size, err := m.MitigationType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MitigationType != nil {
		{
			size, err := m.MitigationType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MitigationType != nil {
		{
			size, err := m.MitigationType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MitigationType != nil {
		{
			size, err := m.MitigationType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MaliciousUserThreatLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ThreatLevel != nil {
		n += m.ThreatLevel.Size()
	}
	return n
}

func (m *MaliciousUserThreatLevel_Low) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Low != nil {
		l = m.Low.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserThreatLevel_Medium) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Medium != nil {
		l = m.Medium.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserThreatLevel_High) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.High != nil {
		l = m.High.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserMitigationAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MitigationAction != nil {
		n += m.MitigationAction.Size()
	}
	return n
}

func (m *MaliciousUserMitigationAction_None) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.None != nil {
		l = m.None.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserMitigationAction_AlertOnly) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AlertOnly != nil {
		l = m.AlertOnly.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserMitigationAction_JavascriptChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JavascriptChallenge != nil {
		l = m.JavascriptChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserMitigationAction_CaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserMitigationAction_BlockTemporarily) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockTemporarily != nil {
		l = m.BlockTemporarily.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *MaliciousUserMitigationRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ThreatLevel != nil {
		l = m.ThreatLevel.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MitigationAction != nil {
		l = m.MitigationAction.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *MaliciousUserMitigationType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MitigationType != nil {
		l = m.MitigationType.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MitigationType != nil {
		l = m.MitigationType.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MitigationType != nil {
		l = m.MitigationType.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MitigationType != nil {
		l = m.MitigationType.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MaliciousUserThreatLevel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserThreatLevel{`,
		`ThreatLevel:` + fmt.Sprintf("%v", this.ThreatLevel) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserThreatLevel_Low) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserThreatLevel_Low{`,
		`Low:` + strings.Replace(fmt.Sprintf("%v", this.Low), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserThreatLevel_Medium) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserThreatLevel_Medium{`,
		`Medium:` + strings.Replace(fmt.Sprintf("%v", this.Medium), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserThreatLevel_High) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserThreatLevel_High{`,
		`High:` + strings.Replace(fmt.Sprintf("%v", this.High), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserMitigationAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserMitigationAction{`,
		`MitigationAction:` + fmt.Sprintf("%v", this.MitigationAction) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserMitigationAction_None) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserMitigationAction_None{`,
		`None:` + strings.Replace(fmt.Sprintf("%v", this.None), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserMitigationAction_AlertOnly) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserMitigationAction_AlertOnly{`,
		`AlertOnly:` + strings.Replace(fmt.Sprintf("%v", this.AlertOnly), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserMitigationAction_JavascriptChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserMitigationAction_JavascriptChallenge{`,
		`JavascriptChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JavascriptChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserMitigationAction_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserMitigationAction_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserMitigationAction_BlockTemporarily) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserMitigationAction_BlockTemporarily{`,
		`BlockTemporarily:` + strings.Replace(fmt.Sprintf("%v", this.BlockTemporarily), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserMitigationRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MaliciousUserMitigationRule{`,
		`ThreatLevel:` + strings.Replace(this.ThreatLevel.String(), "MaliciousUserThreatLevel", "MaliciousUserThreatLevel", 1) + `,`,
		`MitigationAction:` + strings.Replace(this.MitigationAction.String(), "MaliciousUserMitigationAction", "MaliciousUserMitigationAction", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MaliciousUserMitigationType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*MaliciousUserMitigationRule{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "MaliciousUserMitigationRule", "MaliciousUserMitigationRule", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&MaliciousUserMitigationType{`,
		`Rules:` + repeatedStringForRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`MitigationType:` + strings.Replace(this.MitigationType.String(), "MaliciousUserMitigationType", "MaliciousUserMitigationType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`MitigationType:` + strings.Replace(this.MitigationType.String(), "MaliciousUserMitigationType", "MaliciousUserMitigationType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`MitigationType:` + strings.Replace(this.MitigationType.String(), "MaliciousUserMitigationType", "MaliciousUserMitigationType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`MitigationType:` + strings.Replace(this.MitigationType.String(), "MaliciousUserMitigationType", "MaliciousUserMitigationType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MaliciousUserThreatLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaliciousUserThreatLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaliciousUserThreatLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatLevel = &MaliciousUserThreatLevel_Low{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medium", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatLevel = &MaliciousUserThreatLevel_Medium{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ThreatLevel = &MaliciousUserThreatLevel_High{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaliciousUserMitigationAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaliciousUserMitigationAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaliciousUserMitigationAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MitigationAction = &MaliciousUserMitigationAction_None{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertOnly", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MitigationAction = &MaliciousUserMitigationAction_AlertOnly{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MitigationAction = &MaliciousUserMitigationAction_JavascriptChallenge{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MitigationAction = &MaliciousUserMitigationAction_CaptchaChallenge{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTemporarily", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MitigationAction = &MaliciousUserMitigationAction_BlockTemporarily{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaliciousUserMitigationRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaliciousUserMitigationRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaliciousUserMitigationRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreatLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThreatLevel == nil {
				m.ThreatLevel = &MaliciousUserThreatLevel{}
			}
			if err := m.ThreatLevel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MitigationAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MitigationAction == nil {
				m.MitigationAction = &MaliciousUserMitigationAction{}
			}
			if err := m.MitigationAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaliciousUserMitigationType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaliciousUserMitigationType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaliciousUserMitigationType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &MaliciousUserMitigationRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MitigationType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MitigationType == nil {
				m.MitigationType = &MaliciousUserMitigationType{}
			}
			if err := m.MitigationType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MitigationType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MitigationType == nil {
				m.MitigationType = &MaliciousUserMitigationType{}
			}
			if err := m.MitigationType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MitigationType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MitigationType == nil {
				m.MitigationType = &MaliciousUserMitigationType{}
			}
			if err := m.MitigationType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MitigationType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MitigationType == nil {
				m.MitigationType = &MaliciousUserMitigationType{}
			}
			if err := m.MitigationType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
