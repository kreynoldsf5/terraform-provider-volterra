//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package global_log_receiver

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	ves_io_schema_views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateSpecType) DeepCopy() *CreateSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *CreateSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetReceiverDRefInfo()

}

// GetDRefInfo for the field's type
func (m *CreateSpecType) GetReceiverDRefInfo() ([]db.DRefInfo, error) {
	if m.GetReceiver() == nil {
		return nil, nil
	}
	switch m.GetReceiver().(type) {
	case *CreateSpecType_S3Receiver:
		drInfos, err := m.GetS3Receiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetS3Receiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "s3_receiver." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateCreateSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateSpecType) FilterChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for filter_choice")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) ReceiverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receiver")
	}
	return validatorFn, nil
}

func (v *ValidateCreateSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["filter_choice"]; exists {
		val := m.GetFilterChoice()
		vOpts := append(opts,
			db.WithValidateField("filter_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetFilterChoice().(type) {
	case *CreateSpecType_NsCurrent:
		if fv, exists := v.FldValidators["filter_choice.ns_current"]; exists {
			val := m.GetFilterChoice().(*CreateSpecType_NsCurrent).NsCurrent
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_current"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_NsAll:
		if fv, exists := v.FldValidators["filter_choice.ns_all"]; exists {
			val := m.GetFilterChoice().(*CreateSpecType_NsAll).NsAll
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_NsList:
		if fv, exists := v.FldValidators["filter_choice.ns_list"]; exists {
			val := m.GetFilterChoice().(*CreateSpecType_NsList).NsList
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *CreateSpecType_NsSystem:
		if fv, exists := v.FldValidators["filter_choice.ns_system"]; exists {
			val := m.GetFilterChoice().(*CreateSpecType_NsSystem).NsSystem
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_system"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["receiver"]; exists {
		val := m.GetReceiver()
		vOpts := append(opts,
			db.WithValidateField("receiver"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetReceiver().(type) {
	case *CreateSpecType_S3Receiver:
		if fv, exists := v.FldValidators["receiver.s3_receiver"]; exists {
			val := m.GetReceiver().(*CreateSpecType_S3Receiver).S3Receiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("s3_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateSpecTypeValidator = func() *ValidateCreateSpecType {
	v := &ValidateCreateSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFilterChoice := v.FilterChoiceValidationRuleHandler
	rulesFilterChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhFilterChoice(rulesFilterChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.filter_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["filter_choice"] = vFn

	vrhReceiver := v.ReceiverValidationRuleHandler
	rulesReceiver := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhReceiver(rulesReceiver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for CreateSpecType.receiver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receiver"] = vFn

	v.FldValidators["filter_choice.ns_list"] = NSListValidator().Validate

	v.FldValidators["receiver.s3_receiver"] = S3ConfigValidator().Validate

	return v
}()

func CreateSpecTypeValidator() db.Validator {
	return DefaultCreateSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GetSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GetSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GetSpecType) DeepCopy() *GetSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GetSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GetSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GetSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GetSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GetSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetReceiverDRefInfo()

}

// GetDRefInfo for the field's type
func (m *GetSpecType) GetReceiverDRefInfo() ([]db.DRefInfo, error) {
	if m.GetReceiver() == nil {
		return nil, nil
	}
	switch m.GetReceiver().(type) {
	case *GetSpecType_S3Receiver:
		drInfos, err := m.GetS3Receiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetS3Receiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "s3_receiver." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateGetSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGetSpecType) FilterChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for filter_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) ReceiverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receiver")
	}
	return validatorFn, nil
}

func (v *ValidateGetSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GetSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GetSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["filter_choice"]; exists {
		val := m.GetFilterChoice()
		vOpts := append(opts,
			db.WithValidateField("filter_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetFilterChoice().(type) {
	case *GetSpecType_NsCurrent:
		if fv, exists := v.FldValidators["filter_choice.ns_current"]; exists {
			val := m.GetFilterChoice().(*GetSpecType_NsCurrent).NsCurrent
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_current"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_NsAll:
		if fv, exists := v.FldValidators["filter_choice.ns_all"]; exists {
			val := m.GetFilterChoice().(*GetSpecType_NsAll).NsAll
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_NsList:
		if fv, exists := v.FldValidators["filter_choice.ns_list"]; exists {
			val := m.GetFilterChoice().(*GetSpecType_NsList).NsList
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GetSpecType_NsSystem:
		if fv, exists := v.FldValidators["filter_choice.ns_system"]; exists {
			val := m.GetFilterChoice().(*GetSpecType_NsSystem).NsSystem
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_system"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["receiver"]; exists {
		val := m.GetReceiver()
		vOpts := append(opts,
			db.WithValidateField("receiver"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetReceiver().(type) {
	case *GetSpecType_S3Receiver:
		if fv, exists := v.FldValidators["receiver.s3_receiver"]; exists {
			val := m.GetReceiver().(*GetSpecType_S3Receiver).S3Receiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("s3_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGetSpecTypeValidator = func() *ValidateGetSpecType {
	v := &ValidateGetSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFilterChoice := v.FilterChoiceValidationRuleHandler
	rulesFilterChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhFilterChoice(rulesFilterChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.filter_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["filter_choice"] = vFn

	vrhReceiver := v.ReceiverValidationRuleHandler
	rulesReceiver := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhReceiver(rulesReceiver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GetSpecType.receiver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receiver"] = vFn

	v.FldValidators["filter_choice.ns_list"] = NSListValidator().Validate

	v.FldValidators["receiver.s3_receiver"] = S3ConfigValidator().Validate

	return v
}()

func GetSpecTypeValidator() db.Validator {
	return DefaultGetSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *GlobalSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GlobalSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GlobalSpecType) DeepCopy() *GlobalSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GlobalSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GlobalSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GlobalSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GlobalSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *GlobalSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	var drInfos []db.DRefInfo
	if fdrInfos, err := m.GetReceiverDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetReceiverDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	if fdrInfos, err := m.GetViewInternalDRefInfo(); err != nil {
		return nil, errors.Wrap(err, "GetViewInternalDRefInfo() FAILED")
	} else {
		drInfos = append(drInfos, fdrInfos...)
	}

	return drInfos, nil

}

// GetDRefInfo for the field's type
func (m *GlobalSpecType) GetReceiverDRefInfo() ([]db.DRefInfo, error) {
	if m.GetReceiver() == nil {
		return nil, nil
	}
	switch m.GetReceiver().(type) {
	case *GlobalSpecType_S3Receiver:
		drInfos, err := m.GetS3Receiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetS3Receiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "s3_receiver." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

func (m *GlobalSpecType) GetViewInternalDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("view_internal.Object")
	dri := db.DRefInfo{
		RefdType:   "view_internal.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "view_internal",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetViewInternalDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *GlobalSpecType) GetViewInternalDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "view_internal.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: view_internal")
	}

	vref := m.GetViewInternal()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "view_internal.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateGlobalSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGlobalSpecType) FilterChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for filter_choice")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) ReceiverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receiver")
	}
	return validatorFn, nil
}

func (v *ValidateGlobalSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GlobalSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GlobalSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["filter_choice"]; exists {
		val := m.GetFilterChoice()
		vOpts := append(opts,
			db.WithValidateField("filter_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetFilterChoice().(type) {
	case *GlobalSpecType_NsCurrent:
		if fv, exists := v.FldValidators["filter_choice.ns_current"]; exists {
			val := m.GetFilterChoice().(*GlobalSpecType_NsCurrent).NsCurrent
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_current"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_NsAll:
		if fv, exists := v.FldValidators["filter_choice.ns_all"]; exists {
			val := m.GetFilterChoice().(*GlobalSpecType_NsAll).NsAll
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_NsList:
		if fv, exists := v.FldValidators["filter_choice.ns_list"]; exists {
			val := m.GetFilterChoice().(*GlobalSpecType_NsList).NsList
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *GlobalSpecType_NsSystem:
		if fv, exists := v.FldValidators["filter_choice.ns_system"]; exists {
			val := m.GetFilterChoice().(*GlobalSpecType_NsSystem).NsSystem
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_system"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["receiver"]; exists {
		val := m.GetReceiver()
		vOpts := append(opts,
			db.WithValidateField("receiver"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetReceiver().(type) {
	case *GlobalSpecType_S3Receiver:
		if fv, exists := v.FldValidators["receiver.s3_receiver"]; exists {
			val := m.GetReceiver().(*GlobalSpecType_S3Receiver).S3Receiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("s3_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["view_internal"]; exists {

		vOpts := append(opts, db.WithValidateField("view_internal"))
		if err := fv(ctx, m.GetViewInternal(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGlobalSpecTypeValidator = func() *ValidateGlobalSpecType {
	v := &ValidateGlobalSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFilterChoice := v.FilterChoiceValidationRuleHandler
	rulesFilterChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhFilterChoice(rulesFilterChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.filter_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["filter_choice"] = vFn

	vrhReceiver := v.ReceiverValidationRuleHandler
	rulesReceiver := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhReceiver(rulesReceiver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for GlobalSpecType.receiver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receiver"] = vFn

	v.FldValidators["filter_choice.ns_list"] = NSListValidator().Validate

	v.FldValidators["receiver.s3_receiver"] = S3ConfigValidator().Validate

	v.FldValidators["view_internal"] = ves_io_schema_views.ObjectRefTypeValidator().Validate

	return v
}()

func GlobalSpecTypeValidator() db.Validator {
	return DefaultGlobalSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *NSList) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *NSList) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *NSList) DeepCopy() *NSList {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &NSList{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *NSList) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *NSList) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return NSListValidator().Validate(ctx, m, opts...)
}

type ValidateNSList struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateNSList) NamespacesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for namespaces")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for namespaces")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated namespaces")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items namespaces")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateNSList) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*NSList)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *NSList got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["namespaces"]; exists {
		vOpts := append(opts, db.WithValidateField("namespaces"))
		if err := fv(ctx, m.GetNamespaces(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultNSListValidator = func() *ValidateNSList {
	v := &ValidateNSList{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhNamespaces := v.NamespacesValidationRuleHandler
	rulesNamespaces := map[string]string{
		"ves.io.schema.rules.message.required":   "true",
		"ves.io.schema.rules.repeated.max_items": "16",
	}
	vFn, err = vrhNamespaces(rulesNamespaces)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for NSList.namespaces: %s", err)
		panic(errMsg)
	}
	v.FldValidators["namespaces"] = vFn

	return v
}()

func NSListValidator() db.Validator {
	return DefaultNSListValidator
}

// augmented methods on protoc/std generated struct

func (m *ReplaceSpecType) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ReplaceSpecType) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ReplaceSpecType) DeepCopy() *ReplaceSpecType {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ReplaceSpecType{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ReplaceSpecType) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ReplaceSpecType) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ReplaceSpecTypeValidator().Validate(ctx, m, opts...)
}

func (m *ReplaceSpecType) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetReceiverDRefInfo()

}

// GetDRefInfo for the field's type
func (m *ReplaceSpecType) GetReceiverDRefInfo() ([]db.DRefInfo, error) {
	if m.GetReceiver() == nil {
		return nil, nil
	}
	switch m.GetReceiver().(type) {
	case *ReplaceSpecType_S3Receiver:
		drInfos, err := m.GetS3Receiver().GetDRefInfo()
		if err != nil {
			return nil, errors.Wrap(err, "GetS3Receiver().GetDRefInfo() FAILED")
		}
		for i := range drInfos {
			dri := &drInfos[i]
			dri.DRField = "s3_receiver." + dri.DRField
		}
		return drInfos, err

	default:
		return nil, nil
	}

}

type ValidateReplaceSpecType struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateReplaceSpecType) FilterChoiceValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for filter_choice")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) ReceiverValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {
	validatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for receiver")
	}
	return validatorFn, nil
}

func (v *ValidateReplaceSpecType) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ReplaceSpecType)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ReplaceSpecType got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["filter_choice"]; exists {
		val := m.GetFilterChoice()
		vOpts := append(opts,
			db.WithValidateField("filter_choice"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetFilterChoice().(type) {
	case *ReplaceSpecType_NsCurrent:
		if fv, exists := v.FldValidators["filter_choice.ns_current"]; exists {
			val := m.GetFilterChoice().(*ReplaceSpecType_NsCurrent).NsCurrent
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_current"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_NsAll:
		if fv, exists := v.FldValidators["filter_choice.ns_all"]; exists {
			val := m.GetFilterChoice().(*ReplaceSpecType_NsAll).NsAll
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_all"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_NsList:
		if fv, exists := v.FldValidators["filter_choice.ns_list"]; exists {
			val := m.GetFilterChoice().(*ReplaceSpecType_NsList).NsList
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_list"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}
	case *ReplaceSpecType_NsSystem:
		if fv, exists := v.FldValidators["filter_choice.ns_system"]; exists {
			val := m.GetFilterChoice().(*ReplaceSpecType_NsSystem).NsSystem
			vOpts := append(opts,
				db.WithValidateField("filter_choice"),
				db.WithValidateField("ns_system"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["receiver"]; exists {
		val := m.GetReceiver()
		vOpts := append(opts,
			db.WithValidateField("receiver"),
		)
		if err := fv(ctx, val, vOpts...); err != nil {
			return err
		}
	}

	switch m.GetReceiver().(type) {
	case *ReplaceSpecType_S3Receiver:
		if fv, exists := v.FldValidators["receiver.s3_receiver"]; exists {
			val := m.GetReceiver().(*ReplaceSpecType_S3Receiver).S3Receiver
			vOpts := append(opts,
				db.WithValidateField("receiver"),
				db.WithValidateField("s3_receiver"),
			)
			if err := fv(ctx, val, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultReplaceSpecTypeValidator = func() *ValidateReplaceSpecType {
	v := &ValidateReplaceSpecType{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhFilterChoice := v.FilterChoiceValidationRuleHandler
	rulesFilterChoice := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhFilterChoice(rulesFilterChoice)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.filter_choice: %s", err)
		panic(errMsg)
	}
	v.FldValidators["filter_choice"] = vFn

	vrhReceiver := v.ReceiverValidationRuleHandler
	rulesReceiver := map[string]string{
		"ves.io.schema.rules.message.required_oneof": "true",
	}
	vFn, err = vrhReceiver(rulesReceiver)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ReplaceSpecType.receiver: %s", err)
		panic(errMsg)
	}
	v.FldValidators["receiver"] = vFn

	v.FldValidators["filter_choice.ns_list"] = NSListValidator().Validate

	v.FldValidators["receiver.s3_receiver"] = S3ConfigValidator().Validate

	return v
}()

func ReplaceSpecTypeValidator() db.Validator {
	return DefaultReplaceSpecTypeValidator
}

// augmented methods on protoc/std generated struct

func (m *S3Config) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *S3Config) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *S3Config) DeepCopy() *S3Config {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &S3Config{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *S3Config) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *S3Config) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return S3ConfigValidator().Validate(ctx, m, opts...)
}

func (m *S3Config) GetDRefInfo() ([]db.DRefInfo, error) {
	if m == nil {
		return nil, nil
	}

	return m.GetAwsCredDRefInfo()

}

func (m *S3Config) GetAwsCredDRefInfo() ([]db.DRefInfo, error) {

	vref := m.GetAwsCred()
	if vref == nil {
		return nil, nil
	}
	vdRef := db.NewDirectRefForView(vref)
	vdRef.SetKind("cloud_credentials.Object")
	dri := db.DRefInfo{
		RefdType:   "cloud_credentials.Object",
		RefdTenant: vref.Tenant,
		RefdNS:     vref.Namespace,
		RefdName:   vref.Name,
		DRField:    "aws_cred",
		Ref:        vdRef,
	}
	return []db.DRefInfo{dri}, nil

}

// GetAwsCredDBEntries returns the db.Entry corresponding to the ObjRefType from the default Table
func (m *S3Config) GetAwsCredDBEntries(ctx context.Context, d db.Interface) ([]db.Entry, error) {
	var entries []db.Entry
	refdType, err := d.TypeForEntryKind("", "", "cloud_credentials.Object")
	if err != nil {
		return nil, errors.Wrap(err, "Cannot find type for kind: cloud_credentials")
	}

	vref := m.GetAwsCred()
	if vref == nil {
		return nil, nil
	}
	ref := &ves_io_schema.ObjectRefType{
		Kind:      "cloud_credentials.Object",
		Tenant:    vref.Tenant,
		Namespace: vref.Namespace,
		Name:      vref.Name,
	}
	refdEnt, err := d.GetReferredEntry(ctx, refdType, ref, db.WithRefOpOptions(db.OpWithReadRefFromInternalTable()))
	if err != nil {
		return nil, errors.Wrap(err, "Getting referred entry")
	}
	if refdEnt != nil {
		entries = append(entries, refdEnt)
	}

	return entries, nil
}

type ValidateS3Config struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateS3Config) BucketValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for bucket")
	}

	return validatorFn, nil
}

func (v *ValidateS3Config) AwsCredValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for aws_cred")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ves_io_schema_views.ObjectRefTypeValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateS3Config) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*S3Config)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *S3Config got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["aws_cred"]; exists {

		vOpts := append(opts, db.WithValidateField("aws_cred"))
		if err := fv(ctx, m.GetAwsCred(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["bucket"]; exists {

		vOpts := append(opts, db.WithValidateField("bucket"))
		if err := fv(ctx, m.GetBucket(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultS3ConfigValidator = func() *ValidateS3Config {
	v := &ValidateS3Config{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhBucket := v.BucketValidationRuleHandler
	rulesBucket := map[string]string{
		"ves.io.schema.rules.message.required": "true",
		"ves.io.schema.rules.string.max_len":   "63",
		"ves.io.schema.rules.string.min_len":   "3",
		"ves.io.schema.rules.string.pattern":   "^[a-z0-9]+[a-z0-9\\.-]+[a-z0-9]$",
	}
	vFn, err = vrhBucket(rulesBucket)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for S3Config.bucket: %s", err)
		panic(errMsg)
	}
	v.FldValidators["bucket"] = vFn

	vrhAwsCred := v.AwsCredValidationRuleHandler
	rulesAwsCred := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhAwsCred(rulesAwsCred)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for S3Config.aws_cred: %s", err)
		panic(errMsg)
	}
	v.FldValidators["aws_cred"] = vFn

	return v
}()

func S3ConfigValidator() db.Validator {
	return DefaultS3ConfigValidator
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetFilterChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.FilterChoice.(type) {
	case nil:
		o.FilterChoice = nil

	case *CreateSpecType_NsAll:
		o.FilterChoice = &GlobalSpecType_NsAll{NsAll: of.NsAll}

	case *CreateSpecType_NsCurrent:
		o.FilterChoice = &GlobalSpecType_NsCurrent{NsCurrent: of.NsCurrent}

	case *CreateSpecType_NsList:
		o.FilterChoice = &GlobalSpecType_NsList{NsList: of.NsList}

	case *CreateSpecType_NsSystem:
		o.FilterChoice = &GlobalSpecType_NsSystem{NsSystem: of.NsSystem}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetFilterChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.FilterChoice.(type) {
	case nil:
		r.FilterChoice = nil

	case *GlobalSpecType_NsAll:
		r.FilterChoice = &CreateSpecType_NsAll{NsAll: of.NsAll}

	case *GlobalSpecType_NsCurrent:
		r.FilterChoice = &CreateSpecType_NsCurrent{NsCurrent: of.NsCurrent}

	case *GlobalSpecType_NsList:
		r.FilterChoice = &CreateSpecType_NsList{NsList: of.NsList}

	case *GlobalSpecType_NsSystem:
		r.FilterChoice = &CreateSpecType_NsSystem{NsSystem: of.NsSystem}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in CreateSpecType from GlobalSpecType for oneof fields
func (r *CreateSpecType) SetReceiverToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Receiver.(type) {
	case nil:
		o.Receiver = nil

	case *CreateSpecType_S3Receiver:
		o.Receiver = &GlobalSpecType_S3Receiver{S3Receiver: of.S3Receiver}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *CreateSpecType) GetReceiverFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Receiver.(type) {
	case nil:
		r.Receiver = nil

	case *GlobalSpecType_S3Receiver:
		r.Receiver = &CreateSpecType_S3Receiver{S3Receiver: of.S3Receiver}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *CreateSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetFilterChoiceFromGlobalSpecType(f)
	m.GetReceiverFromGlobalSpecType(f)
}

func (m *CreateSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *CreateSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *CreateSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetFilterChoiceToGlobalSpecType(f)
	m1.SetReceiverToGlobalSpecType(f)
}

func (m *CreateSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *CreateSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetFilterChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.FilterChoice.(type) {
	case nil:
		o.FilterChoice = nil

	case *GetSpecType_NsAll:
		o.FilterChoice = &GlobalSpecType_NsAll{NsAll: of.NsAll}

	case *GetSpecType_NsCurrent:
		o.FilterChoice = &GlobalSpecType_NsCurrent{NsCurrent: of.NsCurrent}

	case *GetSpecType_NsList:
		o.FilterChoice = &GlobalSpecType_NsList{NsList: of.NsList}

	case *GetSpecType_NsSystem:
		o.FilterChoice = &GlobalSpecType_NsSystem{NsSystem: of.NsSystem}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetFilterChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.FilterChoice.(type) {
	case nil:
		r.FilterChoice = nil

	case *GlobalSpecType_NsAll:
		r.FilterChoice = &GetSpecType_NsAll{NsAll: of.NsAll}

	case *GlobalSpecType_NsCurrent:
		r.FilterChoice = &GetSpecType_NsCurrent{NsCurrent: of.NsCurrent}

	case *GlobalSpecType_NsList:
		r.FilterChoice = &GetSpecType_NsList{NsList: of.NsList}

	case *GlobalSpecType_NsSystem:
		r.FilterChoice = &GetSpecType_NsSystem{NsSystem: of.NsSystem}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in GetSpecType from GlobalSpecType for oneof fields
func (r *GetSpecType) SetReceiverToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Receiver.(type) {
	case nil:
		o.Receiver = nil

	case *GetSpecType_S3Receiver:
		o.Receiver = &GlobalSpecType_S3Receiver{S3Receiver: of.S3Receiver}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *GetSpecType) GetReceiverFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Receiver.(type) {
	case nil:
		r.Receiver = nil

	case *GlobalSpecType_S3Receiver:
		r.Receiver = &GetSpecType_S3Receiver{S3Receiver: of.S3Receiver}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *GetSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetFilterChoiceFromGlobalSpecType(f)
	m.GetReceiverFromGlobalSpecType(f)
}

func (m *GetSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *GetSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *GetSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetFilterChoiceToGlobalSpecType(f)
	m1.SetReceiverToGlobalSpecType(f)
}

func (m *GetSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *GetSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetFilterChoiceToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.FilterChoice.(type) {
	case nil:
		o.FilterChoice = nil

	case *ReplaceSpecType_NsAll:
		o.FilterChoice = &GlobalSpecType_NsAll{NsAll: of.NsAll}

	case *ReplaceSpecType_NsCurrent:
		o.FilterChoice = &GlobalSpecType_NsCurrent{NsCurrent: of.NsCurrent}

	case *ReplaceSpecType_NsList:
		o.FilterChoice = &GlobalSpecType_NsList{NsList: of.NsList}

	case *ReplaceSpecType_NsSystem:
		o.FilterChoice = &GlobalSpecType_NsSystem{NsSystem: of.NsSystem}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetFilterChoiceFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.FilterChoice.(type) {
	case nil:
		r.FilterChoice = nil

	case *GlobalSpecType_NsAll:
		r.FilterChoice = &ReplaceSpecType_NsAll{NsAll: of.NsAll}

	case *GlobalSpecType_NsCurrent:
		r.FilterChoice = &ReplaceSpecType_NsCurrent{NsCurrent: of.NsCurrent}

	case *GlobalSpecType_NsList:
		r.FilterChoice = &ReplaceSpecType_NsList{NsList: of.NsList}

	case *GlobalSpecType_NsSystem:
		r.FilterChoice = &ReplaceSpecType_NsSystem{NsSystem: of.NsSystem}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

// create setters in ReplaceSpecType from GlobalSpecType for oneof fields
func (r *ReplaceSpecType) SetReceiverToGlobalSpecType(o *GlobalSpecType) error {
	switch of := r.Receiver.(type) {
	case nil:
		o.Receiver = nil

	case *ReplaceSpecType_S3Receiver:
		o.Receiver = &GlobalSpecType_S3Receiver{S3Receiver: of.S3Receiver}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (r *ReplaceSpecType) GetReceiverFromGlobalSpecType(o *GlobalSpecType) error {
	switch of := o.Receiver.(type) {
	case nil:
		r.Receiver = nil

	case *GlobalSpecType_S3Receiver:
		r.Receiver = &ReplaceSpecType_S3Receiver{S3Receiver: of.S3Receiver}

	default:
		return fmt.Errorf("Unknown oneof field %T", of)
	}
	return nil
}

func (m *ReplaceSpecType) fromGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	if f == nil {
		return
	}
	m.GetFilterChoiceFromGlobalSpecType(f)
	m.GetReceiverFromGlobalSpecType(f)
}

func (m *ReplaceSpecType) FromGlobalSpecType(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) FromGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.fromGlobalSpecType(f, false)
}

func (m *ReplaceSpecType) toGlobalSpecType(f *GlobalSpecType, withDeepCopy bool) {
	m1 := m
	if withDeepCopy {
		m1 = m.DeepCopy()
	}
	_ = m1

	m1.SetFilterChoiceToGlobalSpecType(f)
	m1.SetReceiverToGlobalSpecType(f)
}

func (m *ReplaceSpecType) ToGlobalSpecType(f *GlobalSpecType) {
	m.toGlobalSpecType(f, true)
}

func (m *ReplaceSpecType) ToGlobalSpecTypeWithoutDeepCopy(f *GlobalSpecType) {
	m.toGlobalSpecType(f, false)
}
