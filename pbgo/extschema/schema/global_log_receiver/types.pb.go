// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/global_log_receiver/types.proto

package global_log_receiver

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NSList
//
// x-displayName: "NSList"
type NSList struct {
	// Namespaces
	//
	// x-displayName: "namespaces"
	// x-example: "default"
	// x-required
	// List of namespaces to stream logs for
	Namespaces []string `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
}

func (m *NSList) Reset()      { *m = NSList{} }
func (*NSList) ProtoMessage() {}
func (*NSList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ef22f1dd0dc1f3e, []int{0}
}
func (m *NSList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NSList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSList.Merge(m, src)
}
func (m *NSList) XXX_Size() int {
	return m.Size()
}
func (m *NSList) XXX_DiscardUnknown() {
	xxx_messageInfo_NSList.DiscardUnknown(m)
}

var xxx_messageInfo_NSList proto.InternalMessageInfo

func (m *NSList) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

// S3 Configuration
//
// x-displayName: "S3 Configuration"
// S3 Configuration for Global Log Receiver
type S3Config struct {
	// S3 Bucket Name
	//
	// x-displayName: "S3 Bucket Name"
	// x-example: "S3 Buket Name"
	// x-required
	// S3 Bucket Name
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// AWS Cloud Credentials
	//
	// x-displayName: "AWS Cloud Credentials"
	// x-required
	// Reference to AWS credentials for access to S3 bucket
	AwsCred *views.ObjectRefType `protobuf:"bytes,2,opt,name=aws_cred,json=awsCred,proto3" json:"aws_cred,omitempty"`
	// AWS Region
	//
	// x-displayName: "AWS Region"
	// x-example: "us-east-1"
	// x-required
	// Name for AWS Region.
	AwsRegion string `protobuf:"bytes,3,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
}

func (m *S3Config) Reset()      { *m = S3Config{} }
func (*S3Config) ProtoMessage() {}
func (*S3Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ef22f1dd0dc1f3e, []int{1}
}
func (m *S3Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S3Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *S3Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S3Config.Merge(m, src)
}
func (m *S3Config) XXX_Size() int {
	return m.Size()
}
func (m *S3Config) XXX_DiscardUnknown() {
	xxx_messageInfo_S3Config.DiscardUnknown(m)
}

var xxx_messageInfo_S3Config proto.InternalMessageInfo

func (m *S3Config) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *S3Config) GetAwsCred() *views.ObjectRefType {
	if m != nil {
		return m.AwsCred
	}
	return nil
}

func (m *S3Config) GetAwsRegion() string {
	if m != nil {
		return m.AwsRegion
	}
	return ""
}

// Specification for Global Log Receiver
//
// x-displayName: "Specification"
// Shape of the Global Log Receiver object
type GlobalSpecType struct {
	// Log Message Selection
	//
	// x-displayName: "Log Message Selection"
	// x-required
	// Log Message Selection
	//
	// Types that are valid to be assigned to FilterChoice:
	//	*GlobalSpecType_NsCurrent
	//	*GlobalSpecType_NsAll
	//	*GlobalSpecType_NsList
	//	*GlobalSpecType_NsSystem
	FilterChoice isGlobalSpecType_FilterChoice `protobuf_oneof:"filter_choice"`
	// Receiver Configuration
	//
	// x-displayName: "Receiver Configuration"
	// x-required
	// Receiver Configuration
	//
	// Types that are valid to be assigned to Receiver:
	//	*GlobalSpecType_S3Receiver
	Receiver isGlobalSpecType_Receiver `protobuf_oneof:"receiver"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ef22f1dd0dc1f3e, []int{2}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_FilterChoice interface {
	isGlobalSpecType_FilterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_Receiver interface {
	isGlobalSpecType_Receiver()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_NsCurrent struct {
	NsCurrent *schema.Empty `protobuf:"bytes,2,opt,name=ns_current,json=nsCurrent,proto3,oneof" json:"ns_current,omitempty"`
}
type GlobalSpecType_NsAll struct {
	NsAll *schema.Empty `protobuf:"bytes,3,opt,name=ns_all,json=nsAll,proto3,oneof" json:"ns_all,omitempty"`
}
type GlobalSpecType_NsList struct {
	NsList *NSList `protobuf:"bytes,4,opt,name=ns_list,json=nsList,proto3,oneof" json:"ns_list,omitempty"`
}
type GlobalSpecType_NsSystem struct {
	NsSystem *schema.Empty `protobuf:"bytes,5,opt,name=ns_system,json=nsSystem,proto3,oneof" json:"ns_system,omitempty"`
}
type GlobalSpecType_S3Receiver struct {
	S3Receiver *S3Config `protobuf:"bytes,7,opt,name=s3_receiver,json=s3Receiver,proto3,oneof" json:"s3_receiver,omitempty"`
}

func (*GlobalSpecType_NsCurrent) isGlobalSpecType_FilterChoice() {}
func (*GlobalSpecType_NsAll) isGlobalSpecType_FilterChoice()     {}
func (*GlobalSpecType_NsList) isGlobalSpecType_FilterChoice()    {}
func (*GlobalSpecType_NsSystem) isGlobalSpecType_FilterChoice()  {}
func (*GlobalSpecType_S3Receiver) isGlobalSpecType_Receiver()    {}

func (m *GlobalSpecType) GetFilterChoice() isGlobalSpecType_FilterChoice {
	if m != nil {
		return m.FilterChoice
	}
	return nil
}
func (m *GlobalSpecType) GetReceiver() isGlobalSpecType_Receiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *GlobalSpecType) GetNsCurrent() *schema.Empty {
	if x, ok := m.GetFilterChoice().(*GlobalSpecType_NsCurrent); ok {
		return x.NsCurrent
	}
	return nil
}

func (m *GlobalSpecType) GetNsAll() *schema.Empty {
	if x, ok := m.GetFilterChoice().(*GlobalSpecType_NsAll); ok {
		return x.NsAll
	}
	return nil
}

func (m *GlobalSpecType) GetNsList() *NSList {
	if x, ok := m.GetFilterChoice().(*GlobalSpecType_NsList); ok {
		return x.NsList
	}
	return nil
}

func (m *GlobalSpecType) GetNsSystem() *schema.Empty {
	if x, ok := m.GetFilterChoice().(*GlobalSpecType_NsSystem); ok {
		return x.NsSystem
	}
	return nil
}

func (m *GlobalSpecType) GetS3Receiver() *S3Config {
	if x, ok := m.GetReceiver().(*GlobalSpecType_S3Receiver); ok {
		return x.S3Receiver
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_NsCurrent)(nil),
		(*GlobalSpecType_NsAll)(nil),
		(*GlobalSpecType_NsList)(nil),
		(*GlobalSpecType_NsSystem)(nil),
		(*GlobalSpecType_S3Receiver)(nil),
	}
}

// Create Global Log Receiver
//
// x-displayName: "Create Global Log Receiver"
// Creates a new Global Log Receiver object
type CreateSpecType struct {
	// Types that are valid to be assigned to FilterChoice:
	//	*CreateSpecType_NsCurrent
	//	*CreateSpecType_NsAll
	//	*CreateSpecType_NsList
	//	*CreateSpecType_NsSystem
	FilterChoice isCreateSpecType_FilterChoice `protobuf_oneof:"filter_choice"`
	// Types that are valid to be assigned to Receiver:
	//	*CreateSpecType_S3Receiver
	Receiver isCreateSpecType_Receiver `protobuf_oneof:"receiver"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ef22f1dd0dc1f3e, []int{3}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_FilterChoice interface {
	isCreateSpecType_FilterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_Receiver interface {
	isCreateSpecType_Receiver()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_NsCurrent struct {
	NsCurrent *schema.Empty `protobuf:"bytes,2,opt,name=ns_current,json=nsCurrent,proto3,oneof" json:"ns_current,omitempty"`
}
type CreateSpecType_NsAll struct {
	NsAll *schema.Empty `protobuf:"bytes,3,opt,name=ns_all,json=nsAll,proto3,oneof" json:"ns_all,omitempty"`
}
type CreateSpecType_NsList struct {
	NsList *NSList `protobuf:"bytes,4,opt,name=ns_list,json=nsList,proto3,oneof" json:"ns_list,omitempty"`
}
type CreateSpecType_NsSystem struct {
	NsSystem *schema.Empty `protobuf:"bytes,5,opt,name=ns_system,json=nsSystem,proto3,oneof" json:"ns_system,omitempty"`
}
type CreateSpecType_S3Receiver struct {
	S3Receiver *S3Config `protobuf:"bytes,7,opt,name=s3_receiver,json=s3Receiver,proto3,oneof" json:"s3_receiver,omitempty"`
}

func (*CreateSpecType_NsCurrent) isCreateSpecType_FilterChoice() {}
func (*CreateSpecType_NsAll) isCreateSpecType_FilterChoice()     {}
func (*CreateSpecType_NsList) isCreateSpecType_FilterChoice()    {}
func (*CreateSpecType_NsSystem) isCreateSpecType_FilterChoice()  {}
func (*CreateSpecType_S3Receiver) isCreateSpecType_Receiver()    {}

func (m *CreateSpecType) GetFilterChoice() isCreateSpecType_FilterChoice {
	if m != nil {
		return m.FilterChoice
	}
	return nil
}
func (m *CreateSpecType) GetReceiver() isCreateSpecType_Receiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *CreateSpecType) GetNsCurrent() *schema.Empty {
	if x, ok := m.GetFilterChoice().(*CreateSpecType_NsCurrent); ok {
		return x.NsCurrent
	}
	return nil
}

func (m *CreateSpecType) GetNsAll() *schema.Empty {
	if x, ok := m.GetFilterChoice().(*CreateSpecType_NsAll); ok {
		return x.NsAll
	}
	return nil
}

func (m *CreateSpecType) GetNsList() *NSList {
	if x, ok := m.GetFilterChoice().(*CreateSpecType_NsList); ok {
		return x.NsList
	}
	return nil
}

func (m *CreateSpecType) GetNsSystem() *schema.Empty {
	if x, ok := m.GetFilterChoice().(*CreateSpecType_NsSystem); ok {
		return x.NsSystem
	}
	return nil
}

func (m *CreateSpecType) GetS3Receiver() *S3Config {
	if x, ok := m.GetReceiver().(*CreateSpecType_S3Receiver); ok {
		return x.S3Receiver
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_NsCurrent)(nil),
		(*CreateSpecType_NsAll)(nil),
		(*CreateSpecType_NsList)(nil),
		(*CreateSpecType_NsSystem)(nil),
		(*CreateSpecType_S3Receiver)(nil),
	}
}

// Replace Log Receiver
//
// x-displayName: "Replace Global Log Receiver"
// Replaces the content of an Global Log Receiver object
type ReplaceSpecType struct {
	// Types that are valid to be assigned to FilterChoice:
	//	*ReplaceSpecType_NsCurrent
	//	*ReplaceSpecType_NsAll
	//	*ReplaceSpecType_NsList
	//	*ReplaceSpecType_NsSystem
	FilterChoice isReplaceSpecType_FilterChoice `protobuf_oneof:"filter_choice"`
	// Types that are valid to be assigned to Receiver:
	//	*ReplaceSpecType_S3Receiver
	Receiver isReplaceSpecType_Receiver `protobuf_oneof:"receiver"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ef22f1dd0dc1f3e, []int{4}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_FilterChoice interface {
	isReplaceSpecType_FilterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_Receiver interface {
	isReplaceSpecType_Receiver()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_NsCurrent struct {
	NsCurrent *schema.Empty `protobuf:"bytes,2,opt,name=ns_current,json=nsCurrent,proto3,oneof" json:"ns_current,omitempty"`
}
type ReplaceSpecType_NsAll struct {
	NsAll *schema.Empty `protobuf:"bytes,3,opt,name=ns_all,json=nsAll,proto3,oneof" json:"ns_all,omitempty"`
}
type ReplaceSpecType_NsList struct {
	NsList *NSList `protobuf:"bytes,4,opt,name=ns_list,json=nsList,proto3,oneof" json:"ns_list,omitempty"`
}
type ReplaceSpecType_NsSystem struct {
	NsSystem *schema.Empty `protobuf:"bytes,5,opt,name=ns_system,json=nsSystem,proto3,oneof" json:"ns_system,omitempty"`
}
type ReplaceSpecType_S3Receiver struct {
	S3Receiver *S3Config `protobuf:"bytes,7,opt,name=s3_receiver,json=s3Receiver,proto3,oneof" json:"s3_receiver,omitempty"`
}

func (*ReplaceSpecType_NsCurrent) isReplaceSpecType_FilterChoice() {}
func (*ReplaceSpecType_NsAll) isReplaceSpecType_FilterChoice()     {}
func (*ReplaceSpecType_NsList) isReplaceSpecType_FilterChoice()    {}
func (*ReplaceSpecType_NsSystem) isReplaceSpecType_FilterChoice()  {}
func (*ReplaceSpecType_S3Receiver) isReplaceSpecType_Receiver()    {}

func (m *ReplaceSpecType) GetFilterChoice() isReplaceSpecType_FilterChoice {
	if m != nil {
		return m.FilterChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetReceiver() isReplaceSpecType_Receiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *ReplaceSpecType) GetNsCurrent() *schema.Empty {
	if x, ok := m.GetFilterChoice().(*ReplaceSpecType_NsCurrent); ok {
		return x.NsCurrent
	}
	return nil
}

func (m *ReplaceSpecType) GetNsAll() *schema.Empty {
	if x, ok := m.GetFilterChoice().(*ReplaceSpecType_NsAll); ok {
		return x.NsAll
	}
	return nil
}

func (m *ReplaceSpecType) GetNsList() *NSList {
	if x, ok := m.GetFilterChoice().(*ReplaceSpecType_NsList); ok {
		return x.NsList
	}
	return nil
}

func (m *ReplaceSpecType) GetNsSystem() *schema.Empty {
	if x, ok := m.GetFilterChoice().(*ReplaceSpecType_NsSystem); ok {
		return x.NsSystem
	}
	return nil
}

func (m *ReplaceSpecType) GetS3Receiver() *S3Config {
	if x, ok := m.GetReceiver().(*ReplaceSpecType_S3Receiver); ok {
		return x.S3Receiver
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_NsCurrent)(nil),
		(*ReplaceSpecType_NsAll)(nil),
		(*ReplaceSpecType_NsList)(nil),
		(*ReplaceSpecType_NsSystem)(nil),
		(*ReplaceSpecType_S3Receiver)(nil),
	}
}

// Get Global Log Receiver
//
// x-displayName: "Get Global Log Receiver"
// Get the Global Log Receiver object
type GetSpecType struct {
	// Types that are valid to be assigned to FilterChoice:
	//	*GetSpecType_NsCurrent
	//	*GetSpecType_NsAll
	//	*GetSpecType_NsList
	//	*GetSpecType_NsSystem
	FilterChoice isGetSpecType_FilterChoice `protobuf_oneof:"filter_choice"`
	// Types that are valid to be assigned to Receiver:
	//	*GetSpecType_S3Receiver
	Receiver isGetSpecType_Receiver `protobuf_oneof:"receiver"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ef22f1dd0dc1f3e, []int{5}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_FilterChoice interface {
	isGetSpecType_FilterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_Receiver interface {
	isGetSpecType_Receiver()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_NsCurrent struct {
	NsCurrent *schema.Empty `protobuf:"bytes,2,opt,name=ns_current,json=nsCurrent,proto3,oneof" json:"ns_current,omitempty"`
}
type GetSpecType_NsAll struct {
	NsAll *schema.Empty `protobuf:"bytes,3,opt,name=ns_all,json=nsAll,proto3,oneof" json:"ns_all,omitempty"`
}
type GetSpecType_NsList struct {
	NsList *NSList `protobuf:"bytes,4,opt,name=ns_list,json=nsList,proto3,oneof" json:"ns_list,omitempty"`
}
type GetSpecType_NsSystem struct {
	NsSystem *schema.Empty `protobuf:"bytes,5,opt,name=ns_system,json=nsSystem,proto3,oneof" json:"ns_system,omitempty"`
}
type GetSpecType_S3Receiver struct {
	S3Receiver *S3Config `protobuf:"bytes,7,opt,name=s3_receiver,json=s3Receiver,proto3,oneof" json:"s3_receiver,omitempty"`
}

func (*GetSpecType_NsCurrent) isGetSpecType_FilterChoice() {}
func (*GetSpecType_NsAll) isGetSpecType_FilterChoice()     {}
func (*GetSpecType_NsList) isGetSpecType_FilterChoice()    {}
func (*GetSpecType_NsSystem) isGetSpecType_FilterChoice()  {}
func (*GetSpecType_S3Receiver) isGetSpecType_Receiver()    {}

func (m *GetSpecType) GetFilterChoice() isGetSpecType_FilterChoice {
	if m != nil {
		return m.FilterChoice
	}
	return nil
}
func (m *GetSpecType) GetReceiver() isGetSpecType_Receiver {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *GetSpecType) GetNsCurrent() *schema.Empty {
	if x, ok := m.GetFilterChoice().(*GetSpecType_NsCurrent); ok {
		return x.NsCurrent
	}
	return nil
}

func (m *GetSpecType) GetNsAll() *schema.Empty {
	if x, ok := m.GetFilterChoice().(*GetSpecType_NsAll); ok {
		return x.NsAll
	}
	return nil
}

func (m *GetSpecType) GetNsList() *NSList {
	if x, ok := m.GetFilterChoice().(*GetSpecType_NsList); ok {
		return x.NsList
	}
	return nil
}

func (m *GetSpecType) GetNsSystem() *schema.Empty {
	if x, ok := m.GetFilterChoice().(*GetSpecType_NsSystem); ok {
		return x.NsSystem
	}
	return nil
}

func (m *GetSpecType) GetS3Receiver() *S3Config {
	if x, ok := m.GetReceiver().(*GetSpecType_S3Receiver); ok {
		return x.S3Receiver
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_NsCurrent)(nil),
		(*GetSpecType_NsAll)(nil),
		(*GetSpecType_NsList)(nil),
		(*GetSpecType_NsSystem)(nil),
		(*GetSpecType_S3Receiver)(nil),
	}
}

func init() {
	proto.RegisterType((*NSList)(nil), "ves.io.schema.global_log_receiver.NSList")
	proto.RegisterType((*S3Config)(nil), "ves.io.schema.global_log_receiver.S3Config")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.global_log_receiver.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.global_log_receiver.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.global_log_receiver.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.global_log_receiver.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/global_log_receiver/types.proto", fileDescriptor_2ef22f1dd0dc1f3e)
}

var fileDescriptor_2ef22f1dd0dc1f3e = []byte{
	// 956 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xcd, 0x8f, 0xdb, 0xc4,
	0x1b, 0xf6, 0xc4, 0xd9, 0x7c, 0xcc, 0x7e, 0x34, 0xeb, 0xed, 0xc1, 0xcd, 0xaf, 0x72, 0xd3, 0xfc,
	0x7a, 0x58, 0xd4, 0xb5, 0xc3, 0x26, 0x14, 0x68, 0x0f, 0x45, 0x78, 0x41, 0x5d, 0x4a, 0x55, 0x24,
	0x07, 0x09, 0xf1, 0xd1, 0x46, 0x13, 0x67, 0xe2, 0x98, 0x3a, 0x1e, 0x6b, 0x66, 0x9c, 0xb0, 0x48,
	0x48, 0xa8, 0x27, 0x8e, 0xc0, 0x11, 0x24, 0xb8, 0x56, 0xfc, 0x09, 0xa4, 0x87, 0x15, 0x12, 0x12,
	0xe2, 0x94, 0x1b, 0x7b, 0xec, 0x7a, 0x2f, 0xcb, 0xad, 0x47, 0x54, 0x24, 0x84, 0x3c, 0x71, 0xb2,
	0x49, 0x96, 0xc2, 0x02, 0x42, 0xea, 0xa1, 0xb7, 0x77, 0xe6, 0x7d, 0xde, 0xf7, 0x7d, 0x66, 0x9e,
	0x67, 0xa4, 0x81, 0x7a, 0x0f, 0x33, 0xc3, 0x25, 0x15, 0x66, 0x77, 0x70, 0x17, 0x55, 0x1c, 0x8f,
	0x34, 0x91, 0xd7, 0xf0, 0x88, 0xd3, 0xa0, 0xd8, 0xc6, 0x6e, 0x0f, 0xd3, 0x0a, 0xdf, 0x09, 0x30,
	0x33, 0x02, 0x4a, 0x38, 0x51, 0xce, 0x8f, 0xe0, 0xc6, 0x08, 0x6e, 0xfc, 0x01, 0xbc, 0xa8, 0x3b,
	0x2e, 0xef, 0x84, 0x4d, 0xc3, 0x26, 0xdd, 0x8a, 0x43, 0x1c, 0x52, 0x11, 0x95, 0xcd, 0xb0, 0x2d,
	0x56, 0x62, 0x21, 0xa2, 0x51, 0xc7, 0xe2, 0xff, 0x66, 0x09, 0x90, 0x80, 0xbb, 0xc4, 0x4f, 0xc6,
	0x15, 0xcf, 0xcc, 0x26, 0xa7, 0x98, 0x14, 0xcf, 0xce, 0xa6, 0x7a, 0xc8, 0x73, 0x5b, 0x88, 0xe3,
	0x24, 0x5b, 0x9a, 0xcb, 0xba, 0xb8, 0xdf, 0x98, 0x6d, 0x7d, 0xee, 0x38, 0x82, 0x4d, 0x0f, 0x28,
	0xbf, 0x08, 0x33, 0x37, 0xeb, 0x37, 0x5c, 0xc6, 0x15, 0x03, 0x42, 0x1f, 0x75, 0x31, 0x0b, 0x90,
	0x8d, 0x99, 0x0a, 0x4a, 0xf2, 0x7a, 0xde, 0x5c, 0xf9, 0x65, 0x00, 0xa4, 0x6f, 0x7f, 0xde, 0x95,
	0x17, 0x3e, 0x07, 0xa9, 0x42, 0xc1, 0x9a, 0x42, 0x94, 0x7f, 0x92, 0x61, 0xae, 0x5e, 0xdb, 0x22,
	0x7e, 0xdb, 0x75, 0x94, 0xd7, 0x61, 0xa6, 0x19, 0xda, 0x77, 0x30, 0x57, 0x41, 0x09, 0xac, 0xe7,
	0xcd, 0x5a, 0x5c, 0x94, 0xa1, 0xe9, 0x82, 0xac, 0xbe, 0x14, 0x87, 0xff, 0xa7, 0xe7, 0xab, 0xe7,
	0x6e, 0xbf, 0x8b, 0xf4, 0x0f, 0x9f, 0xd5, 0x2f, 0xdf, 0xba, 0x98, 0x04, 0xef, 0x19, 0xfa, 0x24,
	0xbe, 0x75, 0xc1, 0x4a, 0x5a, 0x28, 0x75, 0x98, 0x43, 0x7d, 0xd6, 0xb0, 0x29, 0x6e, 0xa9, 0xa9,
	0x12, 0x58, 0x5f, 0xac, 0x96, 0x8d, 0x59, 0x45, 0xc4, 0x39, 0x8c, 0x37, 0x9a, 0xef, 0x63, 0x9b,
	0x5b, 0xb8, 0xfd, 0xe6, 0x4e, 0x80, 0xcd, 0xd3, 0xdf, 0x7c, 0xb4, 0x6a, 0x7b, 0x24, 0x6c, 0x89,
	0x42, 0xec, 0x73, 0x17, 0x79, 0xcc, 0xca, 0xa2, 0x3e, 0xdb, 0xa2, 0xb8, 0xa5, 0xdc, 0x4b, 0x41,
	0x18, 0x77, 0xa5, 0xd8, 0x71, 0x89, 0xaf, 0xca, 0x82, 0xe6, 0x27, 0xa9, 0xf1, 0x01, 0x7f, 0x03,
	0xf4, 0x57, 0x60, 0xad, 0xa0, 0x40, 0xf7, 0x09, 0xe5, 0x1d, 0x8c, 0x18, 0xd7, 0x37, 0xc5, 0x9a,
	0x91, 0x70, 0xb2, 0x5e, 0xc2, 0xa1, 0x6e, 0x63, 0x9f, 0x53, 0xe4, 0xe9, 0x9b, 0x56, 0x1e, 0x87,
	0x7a, 0x1f, 0x8b, 0xc4, 0x24, 0xac, 0x59, 0x79, 0x86, 0xf4, 0x04, 0x9e, 0x0f, 0xd9, 0xb1, 0xb0,
	0x2a, 0x42, 0x81, 0xad, 0x5a, 0x4b, 0x36, 0x9a, 0xea, 0x07, 0x51, 0x7b, 0x34, 0x2d, 0xc6, 0xa3,
	0x60, 0x5c, 0x0a, 0xc7, 0x24, 0x12, 0x42, 0x47, 0x04, 0xab, 0x73, 0x04, 0xab, 0x16, 0xc4, 0xe1,
	0x04, 0x1b, 0xc7, 0x02, 0x3b, 0xcd, 0xaf, 0x6a, 0xc1, 0x2e, 0x3e, 0x9a, 0x32, 0xa6, 0x12, 0x0f,
	0xec, 0x33, 0x4b, 0xdc, 0x4d, 0xf9, 0x7e, 0x1a, 0xae, 0x5c, 0x13, 0x9e, 0xaf, 0x07, 0xd8, 0x8e,
	0x2f, 0x57, 0xb9, 0x04, 0xa1, 0xcf, 0x1a, 0x76, 0x48, 0x29, 0xf6, 0x79, 0x22, 0xca, 0xe9, 0x39,
	0x51, 0x5e, 0xed, 0x06, 0x7c, 0x67, 0x5b, 0xb2, 0xf2, 0x3e, 0xdb, 0x1a, 0x01, 0x95, 0xab, 0x30,
	0xe3, 0xb3, 0x06, 0xf2, 0x3c, 0x71, 0xdf, 0x8f, 0x29, 0x31, 0x4f, 0x45, 0x0f, 0xbe, 0x97, 0xe1,
	0x17, 0xf7, 0x41, 0x86, 0x75, 0x10, 0xc5, 0xad, 0x6d, 0xc9, 0x5a, 0xf0, 0xd9, 0xcb, 0x9e, 0xa7,
	0xbc, 0x0d, 0xb3, 0x3e, 0x6b, 0x78, 0x2e, 0xe3, 0x6a, 0x5a, 0x34, 0x78, 0xc6, 0xf8, 0xcb, 0xa7,
	0x69, 0x8c, 0xfc, 0x6c, 0xae, 0x1d, 0x0e, 0x00, 0x38, 0xde, 0x39, 0xe3, 0x33, 0x61, 0xf7, 0xcb,
	0x30, 0xef, 0xb3, 0x06, 0xdb, 0x61, 0x1c, 0x77, 0xd5, 0x85, 0x3f, 0x61, 0x97, 0x8e, 0xfb, 0x6c,
	0x4b, 0x56, 0xce, 0x67, 0x75, 0x81, 0x56, 0x6e, 0xc2, 0x45, 0x56, 0x9b, 0xcc, 0x53, 0xb3, 0xa2,
	0xf8, 0xe2, 0x09, 0x98, 0x8d, 0x9f, 0xcb, 0x36, 0xb0, 0x20, 0xab, 0x59, 0xc9, 0xb6, 0x72, 0x1b,
	0x2e, 0x8b, 0xa7, 0xeb, 0xfa, 0x1c, 0x53, 0x1f, 0x79, 0xea, 0x61, 0xf6, 0xef, 0xb8, 0x7e, 0xb6,
	0x38, 0x66, 0x6b, 0x2d, 0xc5, 0x5b, 0xaf, 0x25, 0x3b, 0x57, 0x4a, 0xdf, 0x0d, 0xc0, 0x59, 0x58,
	0x84, 0x6b, 0x23, 0x51, 0x4b, 0x37, 0x88, 0x53, 0x9a, 0x0c, 0x97, 0x37, 0x37, 0x9e, 0x37, 0x2f,
	0xc0, 0xe5, 0xb6, 0xeb, 0x71, 0x4c, 0x1b, 0x76, 0x87, 0xb8, 0x36, 0x56, 0xd6, 0x76, 0x07, 0x20,
	0x35, 0x8c, 0x2f, 0x70, 0x00, 0xb2, 0xd5, 0x8d, 0xda, 0xc6, 0x73, 0x1b, 0x97, 0xcc, 0x33, 0x30,
	0x37, 0x3e, 0x8a, 0xb2, 0xbc, 0x3b, 0x00, 0xd9, 0xe1, 0x00, 0x64, 0xa2, 0x01, 0x00, 0x2f, 0x5c,
	0x4f, 0xe7, 0x40, 0x21, 0x75, 0x3d, 0x9d, 0xcb, 0x14, 0xb2, 0xe5, 0xaf, 0x64, 0xb8, 0xb2, 0x45,
	0x31, 0xe2, 0xf8, 0xdf, 0xda, 0x47, 0x3f, 0x89, 0x7d, 0x8e, 0xdc, 0xf2, 0xca, 0x3f, 0x77, 0xcb,
	0x94, 0x31, 0x6a, 0x27, 0x34, 0xc6, 0x7f, 0x69, 0x89, 0x2b, 0xab, 0x3f, 0x5e, 0x9d, 0x7b, 0x82,
	0x66, 0x79, 0x5e, 0xa3, 0xd5, 0xbb, 0x8f, 0xc0, 0xec, 0x96, 0xa9, 0x4e, 0x29, 0xb4, 0x74, 0xf7,
	0x11, 0x98, 0xac, 0x66, 0x04, 0xfa, 0x5a, 0x86, 0xa7, 0x2c, 0x1c, 0x78, 0xc8, 0x7e, 0xaa, 0xd0,
	0x93, 0xa9, 0xd0, 0x97, 0x32, 0x5c, 0xbc, 0x86, 0xf9, 0x53, 0x75, 0x9e, 0x44, 0x75, 0xcc, 0xcf,
	0xc0, 0x70, 0x5f, 0x93, 0xf6, 0xf6, 0x35, 0xe9, 0xe1, 0xbe, 0x06, 0x3e, 0x8e, 0x34, 0x70, 0x2f,
	0xd2, 0xc0, 0x0f, 0x91, 0x06, 0x86, 0x91, 0x06, 0xf6, 0x22, 0x0d, 0x3c, 0x88, 0x34, 0x70, 0x18,
	0x69, 0xd2, 0xc3, 0x48, 0x03, 0x9f, 0x1e, 0x68, 0xd2, 0xf0, 0x40, 0x93, 0xf6, 0x0e, 0x34, 0xe9,
	0x9d, 0xb7, 0x1c, 0x12, 0xdc, 0x71, 0x8c, 0x1e, 0x89, 0xa7, 0x52, 0x64, 0x84, 0xac, 0x22, 0x82,
	0x36, 0xa1, 0x5d, 0x3d, 0xa0, 0xa4, 0xe7, 0xb6, 0x30, 0xd5, 0xc7, 0xe9, 0x4a, 0xd0, 0x74, 0x48,
	0x05, 0x7f, 0xc0, 0x93, 0xef, 0xdb, 0xe3, 0xbf, 0xaf, 0xcd, 0x8c, 0xf8, 0xce, 0xd5, 0x7e, 0x0f,
	0x00, 0x00, 0xff, 0xff, 0x8e, 0x1e, 0x00, 0x0e, 0xea, 0x0a, 0x00, 0x00,
}

func (this *NSList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NSList)
	if !ok {
		that2, ok := that.(NSList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	return true
}
func (this *S3Config) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*S3Config)
	if !ok {
		that2, ok := that.(S3Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Bucket != that1.Bucket {
		return false
	}
	if !this.AwsCred.Equal(that1.AwsCred) {
		return false
	}
	if this.AwsRegion != that1.AwsRegion {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.FilterChoice == nil {
		if this.FilterChoice != nil {
			return false
		}
	} else if this.FilterChoice == nil {
		return false
	} else if !this.FilterChoice.Equal(that1.FilterChoice) {
		return false
	}
	if that1.Receiver == nil {
		if this.Receiver != nil {
			return false
		}
	} else if this.Receiver == nil {
		return false
	} else if !this.Receiver.Equal(that1.Receiver) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NsCurrent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NsCurrent)
	if !ok {
		that2, ok := that.(GlobalSpecType_NsCurrent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NsCurrent.Equal(that1.NsCurrent) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NsAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NsAll)
	if !ok {
		that2, ok := that.(GlobalSpecType_NsAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NsAll.Equal(that1.NsAll) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NsList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NsList)
	if !ok {
		that2, ok := that.(GlobalSpecType_NsList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NsList.Equal(that1.NsList) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NsSystem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NsSystem)
	if !ok {
		that2, ok := that.(GlobalSpecType_NsSystem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NsSystem.Equal(that1.NsSystem) {
		return false
	}
	return true
}
func (this *GlobalSpecType_S3Receiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_S3Receiver)
	if !ok {
		that2, ok := that.(GlobalSpecType_S3Receiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.S3Receiver.Equal(that1.S3Receiver) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.FilterChoice == nil {
		if this.FilterChoice != nil {
			return false
		}
	} else if this.FilterChoice == nil {
		return false
	} else if !this.FilterChoice.Equal(that1.FilterChoice) {
		return false
	}
	if that1.Receiver == nil {
		if this.Receiver != nil {
			return false
		}
	} else if this.Receiver == nil {
		return false
	} else if !this.Receiver.Equal(that1.Receiver) {
		return false
	}
	return true
}
func (this *CreateSpecType_NsCurrent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NsCurrent)
	if !ok {
		that2, ok := that.(CreateSpecType_NsCurrent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NsCurrent.Equal(that1.NsCurrent) {
		return false
	}
	return true
}
func (this *CreateSpecType_NsAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NsAll)
	if !ok {
		that2, ok := that.(CreateSpecType_NsAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NsAll.Equal(that1.NsAll) {
		return false
	}
	return true
}
func (this *CreateSpecType_NsList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NsList)
	if !ok {
		that2, ok := that.(CreateSpecType_NsList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NsList.Equal(that1.NsList) {
		return false
	}
	return true
}
func (this *CreateSpecType_NsSystem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NsSystem)
	if !ok {
		that2, ok := that.(CreateSpecType_NsSystem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NsSystem.Equal(that1.NsSystem) {
		return false
	}
	return true
}
func (this *CreateSpecType_S3Receiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_S3Receiver)
	if !ok {
		that2, ok := that.(CreateSpecType_S3Receiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.S3Receiver.Equal(that1.S3Receiver) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.FilterChoice == nil {
		if this.FilterChoice != nil {
			return false
		}
	} else if this.FilterChoice == nil {
		return false
	} else if !this.FilterChoice.Equal(that1.FilterChoice) {
		return false
	}
	if that1.Receiver == nil {
		if this.Receiver != nil {
			return false
		}
	} else if this.Receiver == nil {
		return false
	} else if !this.Receiver.Equal(that1.Receiver) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NsCurrent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NsCurrent)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NsCurrent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NsCurrent.Equal(that1.NsCurrent) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NsAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NsAll)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NsAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NsAll.Equal(that1.NsAll) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NsList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NsList)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NsList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NsList.Equal(that1.NsList) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NsSystem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NsSystem)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NsSystem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NsSystem.Equal(that1.NsSystem) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_S3Receiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_S3Receiver)
	if !ok {
		that2, ok := that.(ReplaceSpecType_S3Receiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.S3Receiver.Equal(that1.S3Receiver) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.FilterChoice == nil {
		if this.FilterChoice != nil {
			return false
		}
	} else if this.FilterChoice == nil {
		return false
	} else if !this.FilterChoice.Equal(that1.FilterChoice) {
		return false
	}
	if that1.Receiver == nil {
		if this.Receiver != nil {
			return false
		}
	} else if this.Receiver == nil {
		return false
	} else if !this.Receiver.Equal(that1.Receiver) {
		return false
	}
	return true
}
func (this *GetSpecType_NsCurrent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NsCurrent)
	if !ok {
		that2, ok := that.(GetSpecType_NsCurrent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NsCurrent.Equal(that1.NsCurrent) {
		return false
	}
	return true
}
func (this *GetSpecType_NsAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NsAll)
	if !ok {
		that2, ok := that.(GetSpecType_NsAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NsAll.Equal(that1.NsAll) {
		return false
	}
	return true
}
func (this *GetSpecType_NsList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NsList)
	if !ok {
		that2, ok := that.(GetSpecType_NsList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NsList.Equal(that1.NsList) {
		return false
	}
	return true
}
func (this *GetSpecType_NsSystem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NsSystem)
	if !ok {
		that2, ok := that.(GetSpecType_NsSystem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NsSystem.Equal(that1.NsSystem) {
		return false
	}
	return true
}
func (this *GetSpecType_S3Receiver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_S3Receiver)
	if !ok {
		that2, ok := that.(GetSpecType_S3Receiver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.S3Receiver.Equal(that1.S3Receiver) {
		return false
	}
	return true
}
func (this *NSList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&global_log_receiver.NSList{")
	s = append(s, "Namespaces: "+fmt.Sprintf("%#v", this.Namespaces)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *S3Config) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&global_log_receiver.S3Config{")
	s = append(s, "Bucket: "+fmt.Sprintf("%#v", this.Bucket)+",\n")
	if this.AwsCred != nil {
		s = append(s, "AwsCred: "+fmt.Sprintf("%#v", this.AwsCred)+",\n")
	}
	s = append(s, "AwsRegion: "+fmt.Sprintf("%#v", this.AwsRegion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&global_log_receiver.GlobalSpecType{")
	if this.FilterChoice != nil {
		s = append(s, "FilterChoice: "+fmt.Sprintf("%#v", this.FilterChoice)+",\n")
	}
	if this.Receiver != nil {
		s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_NsCurrent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.GlobalSpecType_NsCurrent{` +
		`NsCurrent:` + fmt.Sprintf("%#v", this.NsCurrent) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NsAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.GlobalSpecType_NsAll{` +
		`NsAll:` + fmt.Sprintf("%#v", this.NsAll) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NsList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.GlobalSpecType_NsList{` +
		`NsList:` + fmt.Sprintf("%#v", this.NsList) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NsSystem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.GlobalSpecType_NsSystem{` +
		`NsSystem:` + fmt.Sprintf("%#v", this.NsSystem) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_S3Receiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.GlobalSpecType_S3Receiver{` +
		`S3Receiver:` + fmt.Sprintf("%#v", this.S3Receiver) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&global_log_receiver.CreateSpecType{")
	if this.FilterChoice != nil {
		s = append(s, "FilterChoice: "+fmt.Sprintf("%#v", this.FilterChoice)+",\n")
	}
	if this.Receiver != nil {
		s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_NsCurrent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.CreateSpecType_NsCurrent{` +
		`NsCurrent:` + fmt.Sprintf("%#v", this.NsCurrent) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NsAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.CreateSpecType_NsAll{` +
		`NsAll:` + fmt.Sprintf("%#v", this.NsAll) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NsList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.CreateSpecType_NsList{` +
		`NsList:` + fmt.Sprintf("%#v", this.NsList) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NsSystem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.CreateSpecType_NsSystem{` +
		`NsSystem:` + fmt.Sprintf("%#v", this.NsSystem) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_S3Receiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.CreateSpecType_S3Receiver{` +
		`S3Receiver:` + fmt.Sprintf("%#v", this.S3Receiver) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&global_log_receiver.ReplaceSpecType{")
	if this.FilterChoice != nil {
		s = append(s, "FilterChoice: "+fmt.Sprintf("%#v", this.FilterChoice)+",\n")
	}
	if this.Receiver != nil {
		s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_NsCurrent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.ReplaceSpecType_NsCurrent{` +
		`NsCurrent:` + fmt.Sprintf("%#v", this.NsCurrent) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NsAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.ReplaceSpecType_NsAll{` +
		`NsAll:` + fmt.Sprintf("%#v", this.NsAll) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NsList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.ReplaceSpecType_NsList{` +
		`NsList:` + fmt.Sprintf("%#v", this.NsList) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NsSystem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.ReplaceSpecType_NsSystem{` +
		`NsSystem:` + fmt.Sprintf("%#v", this.NsSystem) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_S3Receiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.ReplaceSpecType_S3Receiver{` +
		`S3Receiver:` + fmt.Sprintf("%#v", this.S3Receiver) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&global_log_receiver.GetSpecType{")
	if this.FilterChoice != nil {
		s = append(s, "FilterChoice: "+fmt.Sprintf("%#v", this.FilterChoice)+",\n")
	}
	if this.Receiver != nil {
		s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_NsCurrent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.GetSpecType_NsCurrent{` +
		`NsCurrent:` + fmt.Sprintf("%#v", this.NsCurrent) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NsAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.GetSpecType_NsAll{` +
		`NsAll:` + fmt.Sprintf("%#v", this.NsAll) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NsList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.GetSpecType_NsList{` +
		`NsList:` + fmt.Sprintf("%#v", this.NsList) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NsSystem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.GetSpecType_NsSystem{` +
		`NsSystem:` + fmt.Sprintf("%#v", this.NsSystem) + `}`}, ", ")
	return s
}
func (this *GetSpecType_S3Receiver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&global_log_receiver.GetSpecType_S3Receiver{` +
		`S3Receiver:` + fmt.Sprintf("%#v", this.S3Receiver) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *NSList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for iNdEx := len(m.Namespaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Namespaces[iNdEx])
			copy(dAtA[i:], m.Namespaces[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Namespaces[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *S3Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S3Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S3Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AwsRegion) > 0 {
		i -= len(m.AwsRegion)
		copy(dAtA[i:], m.AwsRegion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AwsRegion)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AwsCred != nil {
		{
			size, err := m.AwsCred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bucket) > 0 {
		i -= len(m.Bucket)
		copy(dAtA[i:], m.Bucket)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Bucket)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.Receiver != nil {
		{
			size := m.Receiver.Size()
			i -= size
			if _, err := m.Receiver.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.FilterChoice != nil {
		{
			size := m.FilterChoice.Size()
			i -= size
			if _, err := m.FilterChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_NsCurrent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NsCurrent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NsCurrent != nil {
		{
			size, err := m.NsCurrent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NsAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NsAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NsAll != nil {
		{
			size, err := m.NsAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NsList != nil {
		{
			size, err := m.NsList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NsSystem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NsSystem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NsSystem != nil {
		{
			size, err := m.NsSystem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_S3Receiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_S3Receiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.S3Receiver != nil {
		{
			size, err := m.S3Receiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Receiver != nil {
		{
			size := m.Receiver.Size()
			i -= size
			if _, err := m.Receiver.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.FilterChoice != nil {
		{
			size := m.FilterChoice.Size()
			i -= size
			if _, err := m.FilterChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_NsCurrent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NsCurrent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NsCurrent != nil {
		{
			size, err := m.NsCurrent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NsAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NsAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NsAll != nil {
		{
			size, err := m.NsAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NsList != nil {
		{
			size, err := m.NsList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NsSystem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NsSystem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NsSystem != nil {
		{
			size, err := m.NsSystem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_S3Receiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_S3Receiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.S3Receiver != nil {
		{
			size, err := m.S3Receiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Receiver != nil {
		{
			size := m.Receiver.Size()
			i -= size
			if _, err := m.Receiver.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.FilterChoice != nil {
		{
			size := m.FilterChoice.Size()
			i -= size
			if _, err := m.FilterChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_NsCurrent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NsCurrent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NsCurrent != nil {
		{
			size, err := m.NsCurrent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NsAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NsAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NsAll != nil {
		{
			size, err := m.NsAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NsList != nil {
		{
			size, err := m.NsList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NsSystem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NsSystem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NsSystem != nil {
		{
			size, err := m.NsSystem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_S3Receiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_S3Receiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.S3Receiver != nil {
		{
			size, err := m.S3Receiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Receiver != nil {
		{
			size := m.Receiver.Size()
			i -= size
			if _, err := m.Receiver.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.FilterChoice != nil {
		{
			size := m.FilterChoice.Size()
			i -= size
			if _, err := m.FilterChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_NsCurrent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NsCurrent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NsCurrent != nil {
		{
			size, err := m.NsCurrent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NsAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NsAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NsAll != nil {
		{
			size, err := m.NsAll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NsList != nil {
		{
			size, err := m.NsList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NsSystem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NsSystem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NsSystem != nil {
		{
			size, err := m.NsSystem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_S3Receiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_S3Receiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.S3Receiver != nil {
		{
			size, err := m.S3Receiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NSList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for _, s := range m.Namespaces {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *S3Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bucket)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AwsCred != nil {
		l = m.AwsCred.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AwsRegion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FilterChoice != nil {
		n += m.FilterChoice.Size()
	}
	if m.Receiver != nil {
		n += m.Receiver.Size()
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_NsCurrent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NsCurrent != nil {
		l = m.NsCurrent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NsAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NsAll != nil {
		l = m.NsAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NsList != nil {
		l = m.NsList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NsSystem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NsSystem != nil {
		l = m.NsSystem.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_S3Receiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.S3Receiver != nil {
		l = m.S3Receiver.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FilterChoice != nil {
		n += m.FilterChoice.Size()
	}
	if m.Receiver != nil {
		n += m.Receiver.Size()
	}
	return n
}

func (m *CreateSpecType_NsCurrent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NsCurrent != nil {
		l = m.NsCurrent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NsAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NsAll != nil {
		l = m.NsAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NsList != nil {
		l = m.NsList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NsSystem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NsSystem != nil {
		l = m.NsSystem.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_S3Receiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.S3Receiver != nil {
		l = m.S3Receiver.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FilterChoice != nil {
		n += m.FilterChoice.Size()
	}
	if m.Receiver != nil {
		n += m.Receiver.Size()
	}
	return n
}

func (m *ReplaceSpecType_NsCurrent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NsCurrent != nil {
		l = m.NsCurrent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NsAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NsAll != nil {
		l = m.NsAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NsList != nil {
		l = m.NsList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NsSystem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NsSystem != nil {
		l = m.NsSystem.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_S3Receiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.S3Receiver != nil {
		l = m.S3Receiver.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FilterChoice != nil {
		n += m.FilterChoice.Size()
	}
	if m.Receiver != nil {
		n += m.Receiver.Size()
	}
	return n
}

func (m *GetSpecType_NsCurrent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NsCurrent != nil {
		l = m.NsCurrent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NsAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NsAll != nil {
		l = m.NsAll.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NsList != nil {
		l = m.NsList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NsSystem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NsSystem != nil {
		l = m.NsSystem.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_S3Receiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.S3Receiver != nil {
		l = m.S3Receiver.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NSList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NSList{`,
		`Namespaces:` + fmt.Sprintf("%v", this.Namespaces) + `,`,
		`}`,
	}, "")
	return s
}
func (this *S3Config) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S3Config{`,
		`Bucket:` + fmt.Sprintf("%v", this.Bucket) + `,`,
		`AwsCred:` + strings.Replace(fmt.Sprintf("%v", this.AwsCred), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`AwsRegion:` + fmt.Sprintf("%v", this.AwsRegion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType{`,
		`FilterChoice:` + fmt.Sprintf("%v", this.FilterChoice) + `,`,
		`Receiver:` + fmt.Sprintf("%v", this.Receiver) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NsCurrent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NsCurrent{`,
		`NsCurrent:` + strings.Replace(fmt.Sprintf("%v", this.NsCurrent), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NsAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NsAll{`,
		`NsAll:` + strings.Replace(fmt.Sprintf("%v", this.NsAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NsList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NsList{`,
		`NsList:` + strings.Replace(fmt.Sprintf("%v", this.NsList), "NSList", "NSList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NsSystem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NsSystem{`,
		`NsSystem:` + strings.Replace(fmt.Sprintf("%v", this.NsSystem), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_S3Receiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_S3Receiver{`,
		`S3Receiver:` + strings.Replace(fmt.Sprintf("%v", this.S3Receiver), "S3Config", "S3Config", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType{`,
		`FilterChoice:` + fmt.Sprintf("%v", this.FilterChoice) + `,`,
		`Receiver:` + fmt.Sprintf("%v", this.Receiver) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NsCurrent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NsCurrent{`,
		`NsCurrent:` + strings.Replace(fmt.Sprintf("%v", this.NsCurrent), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NsAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NsAll{`,
		`NsAll:` + strings.Replace(fmt.Sprintf("%v", this.NsAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NsList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NsList{`,
		`NsList:` + strings.Replace(fmt.Sprintf("%v", this.NsList), "NSList", "NSList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NsSystem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NsSystem{`,
		`NsSystem:` + strings.Replace(fmt.Sprintf("%v", this.NsSystem), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_S3Receiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_S3Receiver{`,
		`S3Receiver:` + strings.Replace(fmt.Sprintf("%v", this.S3Receiver), "S3Config", "S3Config", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`FilterChoice:` + fmt.Sprintf("%v", this.FilterChoice) + `,`,
		`Receiver:` + fmt.Sprintf("%v", this.Receiver) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NsCurrent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NsCurrent{`,
		`NsCurrent:` + strings.Replace(fmt.Sprintf("%v", this.NsCurrent), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NsAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NsAll{`,
		`NsAll:` + strings.Replace(fmt.Sprintf("%v", this.NsAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NsList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NsList{`,
		`NsList:` + strings.Replace(fmt.Sprintf("%v", this.NsList), "NSList", "NSList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NsSystem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NsSystem{`,
		`NsSystem:` + strings.Replace(fmt.Sprintf("%v", this.NsSystem), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_S3Receiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_S3Receiver{`,
		`S3Receiver:` + strings.Replace(fmt.Sprintf("%v", this.S3Receiver), "S3Config", "S3Config", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType{`,
		`FilterChoice:` + fmt.Sprintf("%v", this.FilterChoice) + `,`,
		`Receiver:` + fmt.Sprintf("%v", this.Receiver) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NsCurrent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NsCurrent{`,
		`NsCurrent:` + strings.Replace(fmt.Sprintf("%v", this.NsCurrent), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NsAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NsAll{`,
		`NsAll:` + strings.Replace(fmt.Sprintf("%v", this.NsAll), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NsList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NsList{`,
		`NsList:` + strings.Replace(fmt.Sprintf("%v", this.NsList), "NSList", "NSList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NsSystem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NsSystem{`,
		`NsSystem:` + strings.Replace(fmt.Sprintf("%v", this.NsSystem), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_S3Receiver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_S3Receiver{`,
		`S3Receiver:` + strings.Replace(fmt.Sprintf("%v", this.S3Receiver), "S3Config", "S3Config", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NSList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NSList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NSList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S3Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S3Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S3Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwsCred == nil {
				m.AwsCred = &views.ObjectRefType{}
			}
			if err := m.AwsCred.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsCurrent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterChoice = &GlobalSpecType_NsCurrent{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterChoice = &GlobalSpecType_NsAll{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NSList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterChoice = &GlobalSpecType_NsList{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsSystem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterChoice = &GlobalSpecType_NsSystem{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3Receiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &S3Config{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GlobalSpecType_S3Receiver{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsCurrent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterChoice = &CreateSpecType_NsCurrent{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterChoice = &CreateSpecType_NsAll{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NSList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterChoice = &CreateSpecType_NsList{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsSystem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterChoice = &CreateSpecType_NsSystem{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3Receiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &S3Config{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &CreateSpecType_S3Receiver{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsCurrent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterChoice = &ReplaceSpecType_NsCurrent{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterChoice = &ReplaceSpecType_NsAll{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NSList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterChoice = &ReplaceSpecType_NsList{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsSystem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterChoice = &ReplaceSpecType_NsSystem{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3Receiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &S3Config{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &ReplaceSpecType_S3Receiver{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsCurrent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterChoice = &GetSpecType_NsCurrent{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterChoice = &GetSpecType_NsAll{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NSList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterChoice = &GetSpecType_NsList{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsSystem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterChoice = &GetSpecType_NsSystem{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3Receiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &S3Config{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receiver = &GetSpecType_S3Receiver{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
