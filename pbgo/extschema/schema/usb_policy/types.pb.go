// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/usb_policy/types.proto

package usb_policy

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Rule
//
// x-displayName: "USB Enablement Rule"
// USB Enablement Rule
type Rule struct {
	// i_serial_number
	//
	// x-displayName: "iSerialNumber"
	// x-example: "0000:00:14.0"
	// Index of Serial Number String Descriptor
	ISerial string `protobuf:"bytes,1,opt,name=i_serial,json=iSerial,proto3" json:"i_serial,omitempty"`
	// id_vendor
	//
	// x-displayName: "Vendor ID"
	// x-example: "0x1d6b"
	// Vendor ID (Assigned by USB Org) in hex
	IdVendor string `protobuf:"bytes,2,opt,name=id_vendor,json=idVendor,proto3" json:"id_vendor,omitempty"`
	// id_product
	//
	// x-displayName: "Product ID"
	// x-example: "0x0002"
	// Product ID (Assigned by Manufacturer) in hex
	IdProduct string `protobuf:"bytes,3,opt,name=id_product,json=idProduct,proto3" json:"id_product,omitempty"`
	// b_device_class
	//
	// x-displayName: "Class"
	// x-example: "hub"
	// The class of this device
	BDeviceClass string `protobuf:"bytes,4,opt,name=b_device_class,json=bDeviceClass,proto3" json:"b_device_class,omitempty"`
	// b_device_sub_class
	//
	// x-displayName: "Subclass"
	// x-example: "hub"
	// The sub-class (within the class) of this device
	BDeviceSubClass string `protobuf:"bytes,5,opt,name=b_device_sub_class,json=bDeviceSubClass,proto3" json:"b_device_sub_class,omitempty"`
	// b_device_protocol
	//
	// x-displayName: "Protocol"
	// x-example: "0002"
	// The protocol (within the sub-class) of this device
	BDeviceProtocol string `protobuf:"bytes,6,opt,name=b_device_protocol,json=bDeviceProtocol,proto3" json:"b_device_protocol,omitempty"`
}

func (m *Rule) Reset()      { *m = Rule{} }
func (*Rule) ProtoMessage() {}
func (*Rule) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab13051c37c11a06, []int{0}
}
func (m *Rule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Rule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rule.Merge(m, src)
}
func (m *Rule) XXX_Size() int {
	return m.Size()
}
func (m *Rule) XXX_DiscardUnknown() {
	xxx_messageInfo_Rule.DiscardUnknown(m)
}

var xxx_messageInfo_Rule proto.InternalMessageInfo

func (m *Rule) GetISerial() string {
	if m != nil {
		return m.ISerial
	}
	return ""
}

func (m *Rule) GetIdVendor() string {
	if m != nil {
		return m.IdVendor
	}
	return ""
}

func (m *Rule) GetIdProduct() string {
	if m != nil {
		return m.IdProduct
	}
	return ""
}

func (m *Rule) GetBDeviceClass() string {
	if m != nil {
		return m.BDeviceClass
	}
	return ""
}

func (m *Rule) GetBDeviceSubClass() string {
	if m != nil {
		return m.BDeviceSubClass
	}
	return ""
}

func (m *Rule) GetBDeviceProtocol() string {
	if m != nil {
		return m.BDeviceProtocol
	}
	return ""
}

// Specification for USB policy
//
// x-displayName: "Specification"
// Shape of the USB policy object
type GlobalSpecType struct {
	// Allowed USB devices
	//
	// x-displayName: "Allowed USB devices"
	// x-required
	// List of allowed USB devices
	AllowedDevices []*Rule `protobuf:"bytes,1,rep,name=allowed_devices,json=allowedDevices,proto3" json:"allowed_devices,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab13051c37c11a06, []int{1}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

func (m *GlobalSpecType) GetAllowedDevices() []*Rule {
	if m != nil {
		return m.AllowedDevices
	}
	return nil
}

// Create USB policy
//
// x-displayName: "Create USB policy"
// Creates a new USB policy object
type CreateSpecType struct {
	AllowedDevices []*Rule `protobuf:"bytes,1,rep,name=allowed_devices,json=allowedDevices,proto3" json:"allowed_devices,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab13051c37c11a06, []int{2}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

func (m *CreateSpecType) GetAllowedDevices() []*Rule {
	if m != nil {
		return m.AllowedDevices
	}
	return nil
}

// Replace USB policy
//
// x-displayName: "Replace USB policy"
// Replaces the content of an USB policy object
type ReplaceSpecType struct {
	AllowedDevices []*Rule `protobuf:"bytes,1,rep,name=allowed_devices,json=allowedDevices,proto3" json:"allowed_devices,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab13051c37c11a06, []int{3}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

func (m *ReplaceSpecType) GetAllowedDevices() []*Rule {
	if m != nil {
		return m.AllowedDevices
	}
	return nil
}

// Get USB policy
//
// x-displayName: "Get USB policy"
// Get the USB policy object
type GetSpecType struct {
	AllowedDevices []*Rule `protobuf:"bytes,1,rep,name=allowed_devices,json=allowedDevices,proto3" json:"allowed_devices,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab13051c37c11a06, []int{4}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

func (m *GetSpecType) GetAllowedDevices() []*Rule {
	if m != nil {
		return m.AllowedDevices
	}
	return nil
}

func init() {
	proto.RegisterType((*Rule)(nil), "ves.io.schema.usb_policy.Rule")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.usb_policy.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.usb_policy.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.usb_policy.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.usb_policy.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/usb_policy/types.proto", fileDescriptor_ab13051c37c11a06)
}

var fileDescriptor_ab13051c37c11a06 = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0x3d, 0x4f, 0xdb, 0x5e,
	0x14, 0xc6, 0x73, 0x12, 0x12, 0x92, 0x03, 0x0a, 0xe0, 0x3f, 0x83, 0x31, 0xff, 0x5e, 0xac, 0x88,
	0x01, 0xb5, 0xc2, 0x56, 0xe9, 0xc6, 0xc0, 0x00, 0x48, 0xa8, 0x4b, 0x85, 0x92, 0xaa, 0x43, 0x17,
	0xcb, 0x2f, 0x17, 0x73, 0xd5, 0x1b, 0xae, 0xe5, 0x37, 0x8a, 0xba, 0x74, 0xac, 0x2a, 0x55, 0xaa,
	0xe8, 0x97, 0x68, 0x97, 0x7e, 0x80, 0xd2, 0xa1, 0x4b, 0xa5, 0x8a, 0x29, 0x23, 0x23, 0x98, 0xa5,
	0xdd, 0x50, 0x3f, 0x41, 0x95, 0x6b, 0x03, 0x09, 0xa1, 0x4b, 0x07, 0xb6, 0x73, 0xce, 0xf3, 0xcb,
	0x7d, 0xce, 0x13, 0x5f, 0x1b, 0x17, 0x53, 0x1a, 0x19, 0x4c, 0x98, 0x91, 0xbb, 0x4b, 0xbb, 0xb6,
	0x99, 0x44, 0x8e, 0x15, 0x08, 0xce, 0xdc, 0x03, 0x33, 0x3e, 0x08, 0x68, 0x64, 0x04, 0xa1, 0x88,
	0x85, 0xa2, 0xe6, 0x94, 0x91, 0x53, 0xc6, 0x35, 0xa5, 0x2d, 0xfb, 0x2c, 0xde, 0x4d, 0x1c, 0xc3,
	0x15, 0x5d, 0xd3, 0x17, 0xbe, 0x30, 0xe5, 0x0f, 0x9c, 0x64, 0x47, 0x76, 0xb2, 0x91, 0x55, 0x7e,
	0x90, 0x36, 0x3f, 0x6c, 0x27, 0x82, 0x98, 0x89, 0xbd, 0xc2, 0x45, 0x9b, 0x1b, 0x16, 0x07, 0x16,
	0xd0, 0xfe, 0x1f, 0x96, 0x52, 0x9b, 0x33, 0xcf, 0x8e, 0x69, 0xa1, 0xea, 0x37, 0x54, 0x46, 0xf7,
	0xad, 0xe1, 0xa3, 0x17, 0x46, 0x89, 0x68, 0xd0, 0xa0, 0xf5, 0xae, 0x82, 0x63, 0xed, 0x84, 0x53,
	0x65, 0x0e, 0xeb, 0xcc, 0x8a, 0x68, 0xc8, 0x6c, 0xae, 0x82, 0x0e, 0x4b, 0x8d, 0xf6, 0x38, 0xeb,
	0xc8, 0x56, 0x99, 0xc7, 0x06, 0xf3, 0xac, 0x94, 0xee, 0x79, 0x22, 0x54, 0xcb, 0x52, 0xab, 0x33,
	0xef, 0x99, 0xec, 0x95, 0x7b, 0x88, 0xcc, 0xb3, 0x82, 0x50, 0x78, 0x89, 0x1b, 0xab, 0x15, 0xa9,
	0x36, 0x98, 0xb7, 0x9d, 0x0f, 0x94, 0x45, 0x6c, 0x3a, 0x96, 0x47, 0x53, 0xe6, 0x52, 0xcb, 0xe5,
	0x76, 0x14, 0xa9, 0x63, 0x12, 0x99, 0x74, 0x36, 0xe5, 0x70, 0xa3, 0x3f, 0x53, 0x1e, 0xa0, 0x72,
	0x45, 0x45, 0x89, 0x53, 0x90, 0x55, 0x49, 0x4e, 0x15, 0x64, 0x27, 0x71, 0x72, 0xf8, 0x3e, 0xce,
	0x5c, 0xc1, 0x32, 0x84, 0x2b, 0xb8, 0x5a, 0x1b, 0x62, 0xb7, 0x8b, 0xf1, 0xea, 0x67, 0x38, 0x3e,
	0x82, 0x4f, 0x80, 0xb3, 0x58, 0xcb, 0xc3, 0x68, 0x78, 0x9d, 0x13, 0x55, 0x6c, 0xe4, 0x29, 0xf4,
	0xc7, 0x9b, 0xda, 0xc4, 0x40, 0x4a, 0xd4, 0x10, 0x8b, 0x04, 0x7d, 0x69, 0x72, 0x30, 0x23, 0xce,
	0x61, 0x55, 0x2e, 0xa2, 0x4d, 0xdf, 0xcc, 0x86, 0x0b, 0x38, 0xde, 0x49, 0x1c, 0x29, 0xce, 0xde,
	0x16, 0x09, 0x17, 0xb0, 0x7e, 0xb9, 0x9b, 0xf6, 0xdf, 0x2d, 0x39, 0x5a, 0x1f, 0x00, 0x9b, 0x5b,
	0x5c, 0x38, 0x36, 0xef, 0x04, 0xd4, 0x7d, 0x7a, 0x10, 0x50, 0xe5, 0x15, 0x4e, 0xd9, 0x9c, 0x8b,
	0x7d, 0xea, 0x15, 0x74, 0xa4, 0x82, 0x5e, 0x59, 0x9a, 0x58, 0x21, 0xc6, 0xdf, 0xae, 0xa7, 0xd1,
	0x7f, 0xa4, 0xeb, 0x2b, 0xbd, 0x23, 0x80, 0x2f, 0xbf, 0xbe, 0x55, 0xf0, 0x10, 0xc6, 0x5b, 0xd5,
	0xb7, 0x50, 0xd6, 0x65, 0x5b, 0x3d, 0x84, 0xf2, 0xb4, 0x7e, 0x59, 0xd5, 0x21, 0x3b, 0xfd, 0x5e,
	0xa9, 0x1d, 0x7e, 0x85, 0xf2, 0x34, 0xb4, 0x9b, 0x85, 0x55, 0xfe, 0x3f, 0x46, 0xab, 0x63, 0xbf,
	0xd7, 0xe0, 0x61, 0x8b, 0x63, 0x73, 0x23, 0xa4, 0x76, 0x4c, 0xaf, 0x96, 0xda, 0xfa, 0xc7, 0xa5,
	0x46, 0x0c, 0x66, 0x8e, 0xd7, 0x6e, 0x04, 0x6e, 0x75, 0x71, 0xaa, 0x4d, 0x03, 0x6e, 0xbb, 0x77,
	0x63, 0xc7, 0x70, 0x62, 0x8b, 0xc6, 0x77, 0x61, 0xb5, 0xfe, 0x06, 0x7a, 0x67, 0xa4, 0x74, 0x72,
	0x46, 0x4a, 0x17, 0x67, 0x04, 0x5e, 0x67, 0x04, 0x3e, 0x66, 0x04, 0x7e, 0x64, 0x04, 0x7a, 0x19,
	0x81, 0x93, 0x8c, 0xc0, 0x69, 0x46, 0xe0, 0x67, 0x46, 0x4a, 0x17, 0x19, 0x81, 0xf7, 0xe7, 0xa4,
	0xd4, 0x3b, 0x27, 0xa5, 0x93, 0x73, 0x52, 0x7a, 0xfe, 0xc4, 0x17, 0xc1, 0x0b, 0xdf, 0x48, 0x05,
	0x8f, 0x69, 0x18, 0xf6, 0xdd, 0x4d, 0x59, 0xec, 0x88, 0xb0, 0xbb, 0x1c, 0x84, 0x22, 0x65, 0x1e,
	0x0d, 0x97, 0x2f, 0x65, 0x33, 0x70, 0x7c, 0x61, 0xd2, 0x97, 0x71, 0xf1, 0xe2, 0x8f, 0x7c, 0xe6,
	0x9c, 0x9a, 0xbc, 0x72, 0x8f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x72, 0xb9, 0x7e, 0x09,
	0x05, 0x00, 0x00,
}

func (this *Rule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Rule)
	if !ok {
		that2, ok := that.(Rule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ISerial != that1.ISerial {
		return false
	}
	if this.IdVendor != that1.IdVendor {
		return false
	}
	if this.IdProduct != that1.IdProduct {
		return false
	}
	if this.BDeviceClass != that1.BDeviceClass {
		return false
	}
	if this.BDeviceSubClass != that1.BDeviceSubClass {
		return false
	}
	if this.BDeviceProtocol != that1.BDeviceProtocol {
		return false
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AllowedDevices) != len(that1.AllowedDevices) {
		return false
	}
	for i := range this.AllowedDevices {
		if !this.AllowedDevices[i].Equal(that1.AllowedDevices[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AllowedDevices) != len(that1.AllowedDevices) {
		return false
	}
	for i := range this.AllowedDevices {
		if !this.AllowedDevices[i].Equal(that1.AllowedDevices[i]) {
			return false
		}
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AllowedDevices) != len(that1.AllowedDevices) {
		return false
	}
	for i := range this.AllowedDevices {
		if !this.AllowedDevices[i].Equal(that1.AllowedDevices[i]) {
			return false
		}
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AllowedDevices) != len(that1.AllowedDevices) {
		return false
	}
	for i := range this.AllowedDevices {
		if !this.AllowedDevices[i].Equal(that1.AllowedDevices[i]) {
			return false
		}
	}
	return true
}
func (this *Rule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&usb_policy.Rule{")
	s = append(s, "ISerial: "+fmt.Sprintf("%#v", this.ISerial)+",\n")
	s = append(s, "IdVendor: "+fmt.Sprintf("%#v", this.IdVendor)+",\n")
	s = append(s, "IdProduct: "+fmt.Sprintf("%#v", this.IdProduct)+",\n")
	s = append(s, "BDeviceClass: "+fmt.Sprintf("%#v", this.BDeviceClass)+",\n")
	s = append(s, "BDeviceSubClass: "+fmt.Sprintf("%#v", this.BDeviceSubClass)+",\n")
	s = append(s, "BDeviceProtocol: "+fmt.Sprintf("%#v", this.BDeviceProtocol)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&usb_policy.GlobalSpecType{")
	if this.AllowedDevices != nil {
		s = append(s, "AllowedDevices: "+fmt.Sprintf("%#v", this.AllowedDevices)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&usb_policy.CreateSpecType{")
	if this.AllowedDevices != nil {
		s = append(s, "AllowedDevices: "+fmt.Sprintf("%#v", this.AllowedDevices)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&usb_policy.ReplaceSpecType{")
	if this.AllowedDevices != nil {
		s = append(s, "AllowedDevices: "+fmt.Sprintf("%#v", this.AllowedDevices)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&usb_policy.GetSpecType{")
	if this.AllowedDevices != nil {
		s = append(s, "AllowedDevices: "+fmt.Sprintf("%#v", this.AllowedDevices)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Rule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BDeviceProtocol) > 0 {
		i -= len(m.BDeviceProtocol)
		copy(dAtA[i:], m.BDeviceProtocol)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BDeviceProtocol)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BDeviceSubClass) > 0 {
		i -= len(m.BDeviceSubClass)
		copy(dAtA[i:], m.BDeviceSubClass)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BDeviceSubClass)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BDeviceClass) > 0 {
		i -= len(m.BDeviceClass)
		copy(dAtA[i:], m.BDeviceClass)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BDeviceClass)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IdProduct) > 0 {
		i -= len(m.IdProduct)
		copy(dAtA[i:], m.IdProduct)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IdProduct)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IdVendor) > 0 {
		i -= len(m.IdVendor)
		copy(dAtA[i:], m.IdVendor)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IdVendor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ISerial) > 0 {
		i -= len(m.ISerial)
		copy(dAtA[i:], m.ISerial)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ISerial)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedDevices) > 0 {
		for iNdEx := len(m.AllowedDevices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowedDevices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedDevices) > 0 {
		for iNdEx := len(m.AllowedDevices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowedDevices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedDevices) > 0 {
		for iNdEx := len(m.AllowedDevices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowedDevices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedDevices) > 0 {
		for iNdEx := len(m.AllowedDevices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowedDevices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Rule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ISerial)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.IdVendor)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.IdProduct)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BDeviceClass)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BDeviceSubClass)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.BDeviceProtocol)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllowedDevices) > 0 {
		for _, e := range m.AllowedDevices {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllowedDevices) > 0 {
		for _, e := range m.AllowedDevices {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllowedDevices) > 0 {
		for _, e := range m.AllowedDevices {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllowedDevices) > 0 {
		for _, e := range m.AllowedDevices {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Rule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Rule{`,
		`ISerial:` + fmt.Sprintf("%v", this.ISerial) + `,`,
		`IdVendor:` + fmt.Sprintf("%v", this.IdVendor) + `,`,
		`IdProduct:` + fmt.Sprintf("%v", this.IdProduct) + `,`,
		`BDeviceClass:` + fmt.Sprintf("%v", this.BDeviceClass) + `,`,
		`BDeviceSubClass:` + fmt.Sprintf("%v", this.BDeviceSubClass) + `,`,
		`BDeviceProtocol:` + fmt.Sprintf("%v", this.BDeviceProtocol) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAllowedDevices := "[]*Rule{"
	for _, f := range this.AllowedDevices {
		repeatedStringForAllowedDevices += strings.Replace(f.String(), "Rule", "Rule", 1) + ","
	}
	repeatedStringForAllowedDevices += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`AllowedDevices:` + repeatedStringForAllowedDevices + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAllowedDevices := "[]*Rule{"
	for _, f := range this.AllowedDevices {
		repeatedStringForAllowedDevices += strings.Replace(f.String(), "Rule", "Rule", 1) + ","
	}
	repeatedStringForAllowedDevices += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`AllowedDevices:` + repeatedStringForAllowedDevices + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAllowedDevices := "[]*Rule{"
	for _, f := range this.AllowedDevices {
		repeatedStringForAllowedDevices += strings.Replace(f.String(), "Rule", "Rule", 1) + ","
	}
	repeatedStringForAllowedDevices += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`AllowedDevices:` + repeatedStringForAllowedDevices + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAllowedDevices := "[]*Rule{"
	for _, f := range this.AllowedDevices {
		repeatedStringForAllowedDevices += strings.Replace(f.String(), "Rule", "Rule", 1) + ","
	}
	repeatedStringForAllowedDevices += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`AllowedDevices:` + repeatedStringForAllowedDevices + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Rule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ISerial", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ISerial = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdVendor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdVendor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdProduct", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdProduct = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BDeviceClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BDeviceClass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BDeviceSubClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BDeviceSubClass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BDeviceProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BDeviceProtocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedDevices = append(m.AllowedDevices, &Rule{})
			if err := m.AllowedDevices[len(m.AllowedDevices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedDevices = append(m.AllowedDevices, &Rule{})
			if err := m.AllowedDevices[len(m.AllowedDevices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedDevices = append(m.AllowedDevices, &Rule{})
			if err := m.AllowedDevices[len(m.AllowedDevices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedDevices = append(m.AllowedDevices, &Rule{})
			if err := m.AllowedDevices[len(m.AllowedDevices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
