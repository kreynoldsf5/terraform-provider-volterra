// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/virtual_k8s/types.proto

package virtual_k8s

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GlobalSpecType
//
// x-displayName: "Global Configuration Specification"
// Configuration specification for Virtual K8s
type GlobalSpecType struct {
	// vsite_refs
	//
	// x-displayName: "Virtual Sites"
	// Reference to virtual-sites
	// Default virtual-site of the Virtual K8s object. If no virtual-site is specified in the Kubernetes API resource object
	// annotations via ves.io/virtual-sites, then this virtual-site is used select sites on which to instantiate the
	// Kubernetes API resource object
	VsiteRefs []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=vsite_refs,json=vsiteRefs,proto3" json:"vsite_refs,omitempty"`
	// service_isolation_choice
	//
	// x-displayName: "Choose Service Isolation"
	// Service isolation choice
	//
	// Types that are valid to be assigned to ServiceIsolationChoice:
	//	*GlobalSpecType_Isolated
	//	*GlobalSpecType_Disabled
	ServiceIsolationChoice isGlobalSpecType_ServiceIsolationChoice `protobuf_oneof:"service_isolation_choice"`
	// Default Workload Flavor
	//
	// x-displayName: "Default Workload Flavor"
	// Default workfload flavor for all workloads launched in this Virtual K8s
	DefaultFlavorRef *views.ObjectRefType `protobuf:"bytes,5,opt,name=default_flavor_ref,json=defaultFlavorRef,proto3" json:"default_flavor_ref,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e4f06cd55f3e971, []int{0}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_ServiceIsolationChoice interface {
	isGlobalSpecType_ServiceIsolationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Isolated struct {
	Isolated *schema.Empty `protobuf:"bytes,3,opt,name=isolated,proto3,oneof" json:"isolated,omitempty"`
}
type GlobalSpecType_Disabled struct {
	Disabled *schema.Empty `protobuf:"bytes,4,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
}

func (*GlobalSpecType_Isolated) isGlobalSpecType_ServiceIsolationChoice() {}
func (*GlobalSpecType_Disabled) isGlobalSpecType_ServiceIsolationChoice() {}

func (m *GlobalSpecType) GetServiceIsolationChoice() isGlobalSpecType_ServiceIsolationChoice {
	if m != nil {
		return m.ServiceIsolationChoice
	}
	return nil
}

func (m *GlobalSpecType) GetVsiteRefs() []*schema.ObjectRefType {
	if m != nil {
		return m.VsiteRefs
	}
	return nil
}

func (m *GlobalSpecType) GetIsolated() *schema.Empty {
	if x, ok := m.GetServiceIsolationChoice().(*GlobalSpecType_Isolated); ok {
		return x.Isolated
	}
	return nil
}

func (m *GlobalSpecType) GetDisabled() *schema.Empty {
	if x, ok := m.GetServiceIsolationChoice().(*GlobalSpecType_Disabled); ok {
		return x.Disabled
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultFlavorRef() *views.ObjectRefType {
	if m != nil {
		return m.DefaultFlavorRef
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_Isolated)(nil),
		(*GlobalSpecType_Disabled)(nil),
	}
}

// Create Virtual K8s
//
// x-displayName: "Create Virtual Kubernetes"
// Create virtual_k8s will create the object in the storage backend for namespace metadata.namespace
type CreateSpecType struct {
	VsiteRefs []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=vsite_refs,json=vsiteRefs,proto3" json:"vsite_refs,omitempty"`
	// Types that are valid to be assigned to ServiceIsolationChoice:
	//	*CreateSpecType_Isolated
	//	*CreateSpecType_Disabled
	ServiceIsolationChoice isCreateSpecType_ServiceIsolationChoice `protobuf_oneof:"service_isolation_choice"`
	DefaultFlavorRef       *views.ObjectRefType                    `protobuf:"bytes,5,opt,name=default_flavor_ref,json=defaultFlavorRef,proto3" json:"default_flavor_ref,omitempty"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e4f06cd55f3e971, []int{1}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_ServiceIsolationChoice interface {
	isCreateSpecType_ServiceIsolationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Isolated struct {
	Isolated *schema.Empty `protobuf:"bytes,3,opt,name=isolated,proto3,oneof" json:"isolated,omitempty"`
}
type CreateSpecType_Disabled struct {
	Disabled *schema.Empty `protobuf:"bytes,4,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
}

func (*CreateSpecType_Isolated) isCreateSpecType_ServiceIsolationChoice() {}
func (*CreateSpecType_Disabled) isCreateSpecType_ServiceIsolationChoice() {}

func (m *CreateSpecType) GetServiceIsolationChoice() isCreateSpecType_ServiceIsolationChoice {
	if m != nil {
		return m.ServiceIsolationChoice
	}
	return nil
}

func (m *CreateSpecType) GetVsiteRefs() []*schema.ObjectRefType {
	if m != nil {
		return m.VsiteRefs
	}
	return nil
}

func (m *CreateSpecType) GetIsolated() *schema.Empty {
	if x, ok := m.GetServiceIsolationChoice().(*CreateSpecType_Isolated); ok {
		return x.Isolated
	}
	return nil
}

func (m *CreateSpecType) GetDisabled() *schema.Empty {
	if x, ok := m.GetServiceIsolationChoice().(*CreateSpecType_Disabled); ok {
		return x.Disabled
	}
	return nil
}

func (m *CreateSpecType) GetDefaultFlavorRef() *views.ObjectRefType {
	if m != nil {
		return m.DefaultFlavorRef
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_Isolated)(nil),
		(*CreateSpecType_Disabled)(nil),
	}
}

// Replace Virtual K8s
//
// x-displayName: "Replace Virtual Kubernetes"
// Replacing an endpoint object will update the object by replacing the existing spec with the provided one.
// For read-then-write operations a resourceVersion mismatch will occur if the object was modified between the read and write.
type ReplaceSpecType struct {
	VsiteRefs []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=vsite_refs,json=vsiteRefs,proto3" json:"vsite_refs,omitempty"`
	// Types that are valid to be assigned to ServiceIsolationChoice:
	//	*ReplaceSpecType_Isolated
	//	*ReplaceSpecType_Disabled
	ServiceIsolationChoice isReplaceSpecType_ServiceIsolationChoice `protobuf_oneof:"service_isolation_choice"`
	DefaultFlavorRef       *views.ObjectRefType                     `protobuf:"bytes,5,opt,name=default_flavor_ref,json=defaultFlavorRef,proto3" json:"default_flavor_ref,omitempty"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e4f06cd55f3e971, []int{2}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_ServiceIsolationChoice interface {
	isReplaceSpecType_ServiceIsolationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Isolated struct {
	Isolated *schema.Empty `protobuf:"bytes,3,opt,name=isolated,proto3,oneof" json:"isolated,omitempty"`
}
type ReplaceSpecType_Disabled struct {
	Disabled *schema.Empty `protobuf:"bytes,4,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
}

func (*ReplaceSpecType_Isolated) isReplaceSpecType_ServiceIsolationChoice() {}
func (*ReplaceSpecType_Disabled) isReplaceSpecType_ServiceIsolationChoice() {}

func (m *ReplaceSpecType) GetServiceIsolationChoice() isReplaceSpecType_ServiceIsolationChoice {
	if m != nil {
		return m.ServiceIsolationChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetVsiteRefs() []*schema.ObjectRefType {
	if m != nil {
		return m.VsiteRefs
	}
	return nil
}

func (m *ReplaceSpecType) GetIsolated() *schema.Empty {
	if x, ok := m.GetServiceIsolationChoice().(*ReplaceSpecType_Isolated); ok {
		return x.Isolated
	}
	return nil
}

func (m *ReplaceSpecType) GetDisabled() *schema.Empty {
	if x, ok := m.GetServiceIsolationChoice().(*ReplaceSpecType_Disabled); ok {
		return x.Disabled
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultFlavorRef() *views.ObjectRefType {
	if m != nil {
		return m.DefaultFlavorRef
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_Isolated)(nil),
		(*ReplaceSpecType_Disabled)(nil),
	}
}

// Get Virtual K8s
//
// x-displayName: "Get Virtual Kubernetes"
// Get virtual_k8s will get the object from the storage backend for namesapce metadata.namespace
type GetSpecType struct {
	VsiteRefs []*schema.ObjectRefType `protobuf:"bytes,1,rep,name=vsite_refs,json=vsiteRefs,proto3" json:"vsite_refs,omitempty"`
	// Types that are valid to be assigned to ServiceIsolationChoice:
	//	*GetSpecType_Isolated
	//	*GetSpecType_Disabled
	ServiceIsolationChoice isGetSpecType_ServiceIsolationChoice `protobuf_oneof:"service_isolation_choice"`
	DefaultFlavorRef       *views.ObjectRefType                 `protobuf:"bytes,5,opt,name=default_flavor_ref,json=defaultFlavorRef,proto3" json:"default_flavor_ref,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e4f06cd55f3e971, []int{3}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_ServiceIsolationChoice interface {
	isGetSpecType_ServiceIsolationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Isolated struct {
	Isolated *schema.Empty `protobuf:"bytes,3,opt,name=isolated,proto3,oneof" json:"isolated,omitempty"`
}
type GetSpecType_Disabled struct {
	Disabled *schema.Empty `protobuf:"bytes,4,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
}

func (*GetSpecType_Isolated) isGetSpecType_ServiceIsolationChoice() {}
func (*GetSpecType_Disabled) isGetSpecType_ServiceIsolationChoice() {}

func (m *GetSpecType) GetServiceIsolationChoice() isGetSpecType_ServiceIsolationChoice {
	if m != nil {
		return m.ServiceIsolationChoice
	}
	return nil
}

func (m *GetSpecType) GetVsiteRefs() []*schema.ObjectRefType {
	if m != nil {
		return m.VsiteRefs
	}
	return nil
}

func (m *GetSpecType) GetIsolated() *schema.Empty {
	if x, ok := m.GetServiceIsolationChoice().(*GetSpecType_Isolated); ok {
		return x.Isolated
	}
	return nil
}

func (m *GetSpecType) GetDisabled() *schema.Empty {
	if x, ok := m.GetServiceIsolationChoice().(*GetSpecType_Disabled); ok {
		return x.Disabled
	}
	return nil
}

func (m *GetSpecType) GetDefaultFlavorRef() *views.ObjectRefType {
	if m != nil {
		return m.DefaultFlavorRef
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_Isolated)(nil),
		(*GetSpecType_Disabled)(nil),
	}
}

func init() {
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.virtual_k8s.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.virtual_k8s.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.virtual_k8s.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.virtual_k8s.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.virtual_k8s.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.virtual_k8s.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.virtual_k8s.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.virtual_k8s.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/virtual_k8s/types.proto", fileDescriptor_7e4f06cd55f3e971)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/virtual_k8s/types.proto", fileDescriptor_7e4f06cd55f3e971)
}

var fileDescriptor_7e4f06cd55f3e971 = []byte{
	// 562 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0xde, 0xd9, 0x6d, 0xa5, 0x6e, 0xa5, 0xa9, 0x8b, 0x87, 0x34, 0x96, 0x31, 0x14, 0x84, 0x82,
	0x76, 0x17, 0x52, 0x0f, 0xc5, 0x83, 0x87, 0x88, 0x56, 0x44, 0x28, 0xac, 0xe2, 0xc1, 0xcb, 0x32,
	0xbb, 0xfb, 0x76, 0x33, 0x66, 0xd3, 0x59, 0x66, 0x26, 0x1b, 0x73, 0x28, 0x14, 0xef, 0x82, 0xf8,
	0x2b, 0xa4, 0x3f, 0xc1, 0x5c, 0x72, 0x14, 0x4f, 0x39, 0xe6, 0x68, 0x36, 0x17, 0x7b, 0xeb, 0x59,
	0x04, 0x25, 0x9b, 0x4d, 0x69, 0xb6, 0x58, 0xf0, 0x54, 0x90, 0xde, 0xe6, 0xf1, 0xbe, 0xef, 0x7b,
	0xef, 0x7d, 0x6f, 0xe0, 0xe9, 0x77, 0x13, 0x10, 0x26, 0x65, 0x96, 0xf0, 0x1a, 0xd0, 0x22, 0x56,
	0x42, 0xb9, 0x6c, 0x93, 0xc8, 0x69, 0xee, 0x08, 0x4b, 0x76, 0x63, 0x10, 0x66, 0xcc, 0x99, 0x64,
	0xc6, 0xda, 0x14, 0x66, 0x4e, 0x61, 0xe6, 0x19, 0x58, 0x65, 0x2b, 0xa4, 0xb2, 0xd1, 0x76, 0x4d,
	0x8f, 0xb5, 0xac, 0x90, 0x85, 0xcc, 0xca, 0x18, 0x6e, 0x3b, 0xc8, 0xa2, 0x2c, 0xc8, 0x5e, 0x53,
	0xa5, 0xca, 0xed, 0xf9, 0x82, 0x2c, 0x96, 0x94, 0xed, 0xe7, 0x65, 0x2a, 0x6b, 0xf3, 0xc9, 0x33,
	0x1d, 0x54, 0xd6, 0x0b, 0x8d, 0x92, 0x88, 0xfa, 0x44, 0x42, 0x9e, 0xad, 0x16, 0xc7, 0x80, 0x8e,
	0x33, 0x2f, 0x7d, 0xe7, 0x3c, 0x62, 0x6e, 0xc4, 0x8d, 0x63, 0x55, 0x5f, 0xd9, 0x8d, 0x98, 0x4b,
	0xa2, 0x97, 0x31, 0x78, 0xaf, 0xba, 0x31, 0x18, 0xaf, 0x75, 0x3d, 0x11, 0x54, 0x82, 0xc3, 0x21,
	0x10, 0x65, 0x54, 0xd5, 0x36, 0x97, 0x6b, 0xeb, 0xe6, 0xbc, 0x15, 0x7b, 0xee, 0x5b, 0xf0, 0xa4,
	0x0d, 0xc1, 0x84, 0x51, 0x5f, 0x3b, 0x3a, 0xb8, 0x31, 0x33, 0x67, 0xc2, 0xfc, 0x72, 0xdc, 0xd7,
	0x16, 0x3f, 0x21, 0x75, 0xb5, 0x6a, 0x5f, 0xcf, 0xa4, 0x6c, 0x08, 0x84, 0x51, 0xd3, 0x97, 0xa8,
	0x60, 0x11, 0x91, 0xe0, 0x97, 0xb5, 0x2a, 0xda, 0x5c, 0xae, 0xdd, 0x2a, 0xa8, 0x3e, 0x69, 0xc5,
	0xb2, 0xfb, 0x4c, 0xb1, 0x4f, 0x71, 0x13, 0x8e, 0x4f, 0x05, 0x71, 0x23, 0xf0, 0xcb, 0x0b, 0x17,
	0x73, 0x66, 0x38, 0xc3, 0xd7, 0x0d, 0x1f, 0x02, 0xd2, 0x8e, 0xa4, 0x13, 0x44, 0x24, 0x61, 0x7c,
	0x32, 0x48, 0x79, 0x31, 0x63, 0x6f, 0x98, 0xc5, 0x95, 0x42, 0x47, 0x14, 0xa6, 0x31, 0x8e, 0x0e,
	0x4a, 0x1d, 0xc6, 0x9b, 0x11, 0x23, 0x7e, 0xae, 0x60, 0xaf, 0xe6, 0x8a, 0x4f, 0xa7, 0x21, 0x04,
	0xf5, 0x7b, 0x7a, 0x59, 0x00, 0x4f, 0xa8, 0x07, 0xce, 0xb4, 0x5b, 0xca, 0xf6, 0x1d, 0xaf, 0xc1,
	0xa8, 0x07, 0x46, 0xa9, 0xdf, 0x43, 0x0b, 0x83, 0x1e, 0x52, 0xd3, 0x1e, 0xd2, 0xb6, 0xef, 0x3f,
	0x78, 0xbe, 0xb0, 0xa4, 0xae, 0x6a, 0x1b, 0xbf, 0x55, 0x7d, 0xe5, 0x31, 0x07, 0x22, 0xe1, 0xd4,
	0xeb, 0x17, 0xff, 0xec, 0x75, 0xa9, 0xe0, 0xf5, 0x7f, 0xeb, 0xf0, 0xc3, 0x9b, 0xdf, 0x1e, 0x15,
	0xbe, 0x66, 0x7d, 0xe7, 0x02, 0xd3, 0xd7, 0xdf, 0xff, 0x44, 0x7f, 0xcd, 0xe6, 0x1b, 0x38, 0xd4,
	0xf4, 0x92, 0x0d, 0x71, 0x44, 0xbc, 0xab, 0x15, 0x5c, 0xd2, 0x0a, 0x7e, 0xa9, 0xfa, 0xf2, 0x2e,
	0xc8, 0x2b, 0xfb, 0x2f, 0xc5, 0xfe, 0xfa, 0x07, 0x34, 0x18, 0x61, 0x65, 0x38, 0xc2, 0xca, 0xc9,
	0x08, 0xa3, 0xc3, 0x14, 0xa3, 0xcf, 0x29, 0x46, 0x5f, 0x53, 0x8c, 0x06, 0x29, 0x46, 0xc3, 0x14,
	0xa3, 0xef, 0x29, 0x46, 0x3f, 0x52, 0xac, 0x9c, 0xa4, 0x18, 0x7d, 0x1c, 0x63, 0xa5, 0x3f, 0xc6,
	0x68, 0x30, 0xc6, 0xca, 0x70, 0x8c, 0x95, 0x37, 0x7b, 0x21, 0x8b, 0x9b, 0xa1, 0x99, 0xb0, 0x48,
	0x02, 0xe7, 0xc4, 0x6c, 0x0b, 0x2b, 0x7b, 0x04, 0x8c, 0xb7, 0xb6, 0x62, 0xce, 0x12, 0xea, 0x03,
	0xdf, 0x9a, 0xa5, 0xad, 0xd8, 0x0d, 0x99, 0x05, 0xef, 0x64, 0x7e, 0x7e, 0xce, 0x9f, 0x5b, 0xf7,
	0x5a, 0x76, 0x86, 0xb6, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x64, 0x39, 0xdf, 0x0f, 0x92, 0x07,
	0x00, 0x00,
}

func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VsiteRefs) != len(that1.VsiteRefs) {
		return false
	}
	for i := range this.VsiteRefs {
		if !this.VsiteRefs[i].Equal(that1.VsiteRefs[i]) {
			return false
		}
	}
	if that1.ServiceIsolationChoice == nil {
		if this.ServiceIsolationChoice != nil {
			return false
		}
	} else if this.ServiceIsolationChoice == nil {
		return false
	} else if !this.ServiceIsolationChoice.Equal(that1.ServiceIsolationChoice) {
		return false
	}
	if !this.DefaultFlavorRef.Equal(that1.DefaultFlavorRef) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Isolated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Isolated)
	if !ok {
		that2, ok := that.(GlobalSpecType_Isolated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Isolated.Equal(that1.Isolated) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Disabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Disabled)
	if !ok {
		that2, ok := that.(GlobalSpecType_Disabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disabled.Equal(that1.Disabled) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VsiteRefs) != len(that1.VsiteRefs) {
		return false
	}
	for i := range this.VsiteRefs {
		if !this.VsiteRefs[i].Equal(that1.VsiteRefs[i]) {
			return false
		}
	}
	if that1.ServiceIsolationChoice == nil {
		if this.ServiceIsolationChoice != nil {
			return false
		}
	} else if this.ServiceIsolationChoice == nil {
		return false
	} else if !this.ServiceIsolationChoice.Equal(that1.ServiceIsolationChoice) {
		return false
	}
	if !this.DefaultFlavorRef.Equal(that1.DefaultFlavorRef) {
		return false
	}
	return true
}
func (this *CreateSpecType_Isolated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Isolated)
	if !ok {
		that2, ok := that.(CreateSpecType_Isolated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Isolated.Equal(that1.Isolated) {
		return false
	}
	return true
}
func (this *CreateSpecType_Disabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Disabled)
	if !ok {
		that2, ok := that.(CreateSpecType_Disabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disabled.Equal(that1.Disabled) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VsiteRefs) != len(that1.VsiteRefs) {
		return false
	}
	for i := range this.VsiteRefs {
		if !this.VsiteRefs[i].Equal(that1.VsiteRefs[i]) {
			return false
		}
	}
	if that1.ServiceIsolationChoice == nil {
		if this.ServiceIsolationChoice != nil {
			return false
		}
	} else if this.ServiceIsolationChoice == nil {
		return false
	} else if !this.ServiceIsolationChoice.Equal(that1.ServiceIsolationChoice) {
		return false
	}
	if !this.DefaultFlavorRef.Equal(that1.DefaultFlavorRef) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Isolated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Isolated)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Isolated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Isolated.Equal(that1.Isolated) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Disabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Disabled)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Disabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disabled.Equal(that1.Disabled) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.VsiteRefs) != len(that1.VsiteRefs) {
		return false
	}
	for i := range this.VsiteRefs {
		if !this.VsiteRefs[i].Equal(that1.VsiteRefs[i]) {
			return false
		}
	}
	if that1.ServiceIsolationChoice == nil {
		if this.ServiceIsolationChoice != nil {
			return false
		}
	} else if this.ServiceIsolationChoice == nil {
		return false
	} else if !this.ServiceIsolationChoice.Equal(that1.ServiceIsolationChoice) {
		return false
	}
	if !this.DefaultFlavorRef.Equal(that1.DefaultFlavorRef) {
		return false
	}
	return true
}
func (this *GetSpecType_Isolated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Isolated)
	if !ok {
		that2, ok := that.(GetSpecType_Isolated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Isolated.Equal(that1.Isolated) {
		return false
	}
	return true
}
func (this *GetSpecType_Disabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Disabled)
	if !ok {
		that2, ok := that.(GetSpecType_Disabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disabled.Equal(that1.Disabled) {
		return false
	}
	return true
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_k8s.GlobalSpecType{")
	if this.VsiteRefs != nil {
		s = append(s, "VsiteRefs: "+fmt.Sprintf("%#v", this.VsiteRefs)+",\n")
	}
	if this.ServiceIsolationChoice != nil {
		s = append(s, "ServiceIsolationChoice: "+fmt.Sprintf("%#v", this.ServiceIsolationChoice)+",\n")
	}
	if this.DefaultFlavorRef != nil {
		s = append(s, "DefaultFlavorRef: "+fmt.Sprintf("%#v", this.DefaultFlavorRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Isolated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_k8s.GlobalSpecType_Isolated{` +
		`Isolated:` + fmt.Sprintf("%#v", this.Isolated) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Disabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_k8s.GlobalSpecType_Disabled{` +
		`Disabled:` + fmt.Sprintf("%#v", this.Disabled) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_k8s.CreateSpecType{")
	if this.VsiteRefs != nil {
		s = append(s, "VsiteRefs: "+fmt.Sprintf("%#v", this.VsiteRefs)+",\n")
	}
	if this.ServiceIsolationChoice != nil {
		s = append(s, "ServiceIsolationChoice: "+fmt.Sprintf("%#v", this.ServiceIsolationChoice)+",\n")
	}
	if this.DefaultFlavorRef != nil {
		s = append(s, "DefaultFlavorRef: "+fmt.Sprintf("%#v", this.DefaultFlavorRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Isolated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_k8s.CreateSpecType_Isolated{` +
		`Isolated:` + fmt.Sprintf("%#v", this.Isolated) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Disabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_k8s.CreateSpecType_Disabled{` +
		`Disabled:` + fmt.Sprintf("%#v", this.Disabled) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_k8s.ReplaceSpecType{")
	if this.VsiteRefs != nil {
		s = append(s, "VsiteRefs: "+fmt.Sprintf("%#v", this.VsiteRefs)+",\n")
	}
	if this.ServiceIsolationChoice != nil {
		s = append(s, "ServiceIsolationChoice: "+fmt.Sprintf("%#v", this.ServiceIsolationChoice)+",\n")
	}
	if this.DefaultFlavorRef != nil {
		s = append(s, "DefaultFlavorRef: "+fmt.Sprintf("%#v", this.DefaultFlavorRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Isolated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_k8s.ReplaceSpecType_Isolated{` +
		`Isolated:` + fmt.Sprintf("%#v", this.Isolated) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Disabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_k8s.ReplaceSpecType_Disabled{` +
		`Disabled:` + fmt.Sprintf("%#v", this.Disabled) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&virtual_k8s.GetSpecType{")
	if this.VsiteRefs != nil {
		s = append(s, "VsiteRefs: "+fmt.Sprintf("%#v", this.VsiteRefs)+",\n")
	}
	if this.ServiceIsolationChoice != nil {
		s = append(s, "ServiceIsolationChoice: "+fmt.Sprintf("%#v", this.ServiceIsolationChoice)+",\n")
	}
	if this.DefaultFlavorRef != nil {
		s = append(s, "DefaultFlavorRef: "+fmt.Sprintf("%#v", this.DefaultFlavorRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Isolated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_k8s.GetSpecType_Isolated{` +
		`Isolated:` + fmt.Sprintf("%#v", this.Isolated) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Disabled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&virtual_k8s.GetSpecType_Disabled{` +
		`Disabled:` + fmt.Sprintf("%#v", this.Disabled) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultFlavorRef != nil {
		{
			size, err := m.DefaultFlavorRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ServiceIsolationChoice != nil {
		{
			size := m.ServiceIsolationChoice.Size()
			i -= size
			if _, err := m.ServiceIsolationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.VsiteRefs) > 0 {
		for iNdEx := len(m.VsiteRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VsiteRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_Isolated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Isolated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Isolated != nil {
		{
			size, err := m.Isolated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Disabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Disabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disabled != nil {
		{
			size, err := m.Disabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultFlavorRef != nil {
		{
			size, err := m.DefaultFlavorRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ServiceIsolationChoice != nil {
		{
			size := m.ServiceIsolationChoice.Size()
			i -= size
			if _, err := m.ServiceIsolationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.VsiteRefs) > 0 {
		for iNdEx := len(m.VsiteRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VsiteRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_Isolated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Isolated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Isolated != nil {
		{
			size, err := m.Isolated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Disabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Disabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disabled != nil {
		{
			size, err := m.Disabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultFlavorRef != nil {
		{
			size, err := m.DefaultFlavorRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ServiceIsolationChoice != nil {
		{
			size := m.ServiceIsolationChoice.Size()
			i -= size
			if _, err := m.ServiceIsolationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.VsiteRefs) > 0 {
		for iNdEx := len(m.VsiteRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VsiteRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_Isolated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Isolated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Isolated != nil {
		{
			size, err := m.Isolated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Disabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Disabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disabled != nil {
		{
			size, err := m.Disabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultFlavorRef != nil {
		{
			size, err := m.DefaultFlavorRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ServiceIsolationChoice != nil {
		{
			size := m.ServiceIsolationChoice.Size()
			i -= size
			if _, err := m.ServiceIsolationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.VsiteRefs) > 0 {
		for iNdEx := len(m.VsiteRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VsiteRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_Isolated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Isolated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Isolated != nil {
		{
			size, err := m.Isolated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Disabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Disabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Disabled != nil {
		{
			size, err := m.Disabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VsiteRefs) > 0 {
		for _, e := range m.VsiteRefs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ServiceIsolationChoice != nil {
		n += m.ServiceIsolationChoice.Size()
	}
	if m.DefaultFlavorRef != nil {
		l = m.DefaultFlavorRef.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_Isolated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Isolated != nil {
		l = m.Isolated.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Disabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disabled != nil {
		l = m.Disabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VsiteRefs) > 0 {
		for _, e := range m.VsiteRefs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ServiceIsolationChoice != nil {
		n += m.ServiceIsolationChoice.Size()
	}
	if m.DefaultFlavorRef != nil {
		l = m.DefaultFlavorRef.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreateSpecType_Isolated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Isolated != nil {
		l = m.Isolated.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Disabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disabled != nil {
		l = m.Disabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VsiteRefs) > 0 {
		for _, e := range m.VsiteRefs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ServiceIsolationChoice != nil {
		n += m.ServiceIsolationChoice.Size()
	}
	if m.DefaultFlavorRef != nil {
		l = m.DefaultFlavorRef.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReplaceSpecType_Isolated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Isolated != nil {
		l = m.Isolated.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Disabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disabled != nil {
		l = m.Disabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VsiteRefs) > 0 {
		for _, e := range m.VsiteRefs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.ServiceIsolationChoice != nil {
		n += m.ServiceIsolationChoice.Size()
	}
	if m.DefaultFlavorRef != nil {
		l = m.DefaultFlavorRef.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType_Isolated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Isolated != nil {
		l = m.Isolated.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Disabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disabled != nil {
		l = m.Disabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVsiteRefs := "[]*ObjectRefType{"
	for _, f := range this.VsiteRefs {
		repeatedStringForVsiteRefs += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForVsiteRefs += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`VsiteRefs:` + repeatedStringForVsiteRefs + `,`,
		`ServiceIsolationChoice:` + fmt.Sprintf("%v", this.ServiceIsolationChoice) + `,`,
		`DefaultFlavorRef:` + strings.Replace(fmt.Sprintf("%v", this.DefaultFlavorRef), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Isolated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Isolated{`,
		`Isolated:` + strings.Replace(fmt.Sprintf("%v", this.Isolated), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Disabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Disabled{`,
		`Disabled:` + strings.Replace(fmt.Sprintf("%v", this.Disabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVsiteRefs := "[]*ObjectRefType{"
	for _, f := range this.VsiteRefs {
		repeatedStringForVsiteRefs += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForVsiteRefs += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`VsiteRefs:` + repeatedStringForVsiteRefs + `,`,
		`ServiceIsolationChoice:` + fmt.Sprintf("%v", this.ServiceIsolationChoice) + `,`,
		`DefaultFlavorRef:` + strings.Replace(fmt.Sprintf("%v", this.DefaultFlavorRef), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Isolated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Isolated{`,
		`Isolated:` + strings.Replace(fmt.Sprintf("%v", this.Isolated), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Disabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Disabled{`,
		`Disabled:` + strings.Replace(fmt.Sprintf("%v", this.Disabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVsiteRefs := "[]*ObjectRefType{"
	for _, f := range this.VsiteRefs {
		repeatedStringForVsiteRefs += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForVsiteRefs += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`VsiteRefs:` + repeatedStringForVsiteRefs + `,`,
		`ServiceIsolationChoice:` + fmt.Sprintf("%v", this.ServiceIsolationChoice) + `,`,
		`DefaultFlavorRef:` + strings.Replace(fmt.Sprintf("%v", this.DefaultFlavorRef), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Isolated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Isolated{`,
		`Isolated:` + strings.Replace(fmt.Sprintf("%v", this.Isolated), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Disabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Disabled{`,
		`Disabled:` + strings.Replace(fmt.Sprintf("%v", this.Disabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVsiteRefs := "[]*ObjectRefType{"
	for _, f := range this.VsiteRefs {
		repeatedStringForVsiteRefs += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "schema.ObjectRefType", 1) + ","
	}
	repeatedStringForVsiteRefs += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`VsiteRefs:` + repeatedStringForVsiteRefs + `,`,
		`ServiceIsolationChoice:` + fmt.Sprintf("%v", this.ServiceIsolationChoice) + `,`,
		`DefaultFlavorRef:` + strings.Replace(fmt.Sprintf("%v", this.DefaultFlavorRef), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Isolated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Isolated{`,
		`Isolated:` + strings.Replace(fmt.Sprintf("%v", this.Isolated), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Disabled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Disabled{`,
		`Disabled:` + strings.Replace(fmt.Sprintf("%v", this.Disabled), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VsiteRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VsiteRefs = append(m.VsiteRefs, &schema.ObjectRefType{})
			if err := m.VsiteRefs[len(m.VsiteRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isolated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceIsolationChoice = &GlobalSpecType_Isolated{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceIsolationChoice = &GlobalSpecType_Disabled{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFlavorRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultFlavorRef == nil {
				m.DefaultFlavorRef = &views.ObjectRefType{}
			}
			if err := m.DefaultFlavorRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VsiteRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VsiteRefs = append(m.VsiteRefs, &schema.ObjectRefType{})
			if err := m.VsiteRefs[len(m.VsiteRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isolated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceIsolationChoice = &CreateSpecType_Isolated{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceIsolationChoice = &CreateSpecType_Disabled{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFlavorRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultFlavorRef == nil {
				m.DefaultFlavorRef = &views.ObjectRefType{}
			}
			if err := m.DefaultFlavorRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VsiteRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VsiteRefs = append(m.VsiteRefs, &schema.ObjectRefType{})
			if err := m.VsiteRefs[len(m.VsiteRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isolated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceIsolationChoice = &ReplaceSpecType_Isolated{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceIsolationChoice = &ReplaceSpecType_Disabled{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFlavorRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultFlavorRef == nil {
				m.DefaultFlavorRef = &views.ObjectRefType{}
			}
			if err := m.DefaultFlavorRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VsiteRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VsiteRefs = append(m.VsiteRefs, &schema.ObjectRefType{})
			if err := m.VsiteRefs[len(m.VsiteRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isolated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceIsolationChoice = &GetSpecType_Isolated{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServiceIsolationChoice = &GetSpecType_Disabled{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFlavorRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultFlavorRef == nil {
				m.DefaultFlavorRef = &views.ObjectRefType{}
			}
			if err := m.DefaultFlavorRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
