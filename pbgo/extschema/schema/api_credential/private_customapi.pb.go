// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/api_credential/private_customapi.proto

// API credential custom private API
//
// x-displayName: "API Credentials Private APIs"
// API credential custom private API supports request that can be made by other internal services
// currently for example validate API is being exposed to prism to validate an incoming request with
// an API credential.

package api_credential

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// API Credential validation request
//
// x-displayName: "Validate API Credential"
// API Credential validate request
type ValidateTokenRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// Value of namespace is always "system"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Token
	//
	// x-displayName: "Token"
	// unique identifier of for the type of credential.
	// in case of API token, its the token itself and in case of
	// API certificate its the serial number.
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *ValidateTokenRequest) Reset()      { *m = ValidateTokenRequest{} }
func (*ValidateTokenRequest) ProtoMessage() {}
func (*ValidateTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f7b94ee39afd541, []int{0}
}
func (m *ValidateTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateTokenRequest.Merge(m, src)
}
func (m *ValidateTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValidateTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateTokenRequest proto.InternalMessageInfo

func (m *ValidateTokenRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ValidateTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// API Credential validation response
//
// x-displayName: "API credential validate response"
// API Credential validate response
type ValidateTokenResponse struct {
	// Valid
	//
	// x-displayName: "valid"
	// Result of validation.
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// User
	//
	// x-displayName: "user"
	// User name is the creator ID of this credential.
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// Tenant
	//
	// x-displayName: "tenant"
	// Tenant name in which this credential is issued.
	Tenant string `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// Credential Type
	//
	// x-displayName: "Credential Type"
	// Type of API credential.
	Type APICredentialType `protobuf:"varint,4,opt,name=type,proto3,enum=ves.io.schema.api_credential.APICredentialType" json:"type,omitempty"`
}

func (m *ValidateTokenResponse) Reset()      { *m = ValidateTokenResponse{} }
func (*ValidateTokenResponse) ProtoMessage() {}
func (*ValidateTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f7b94ee39afd541, []int{1}
}
func (m *ValidateTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateTokenResponse.Merge(m, src)
}
func (m *ValidateTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidateTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateTokenResponse proto.InternalMessageInfo

func (m *ValidateTokenResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *ValidateTokenResponse) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ValidateTokenResponse) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ValidateTokenResponse) GetType() APICredentialType {
	if m != nil {
		return m.Type
	}
	return API_CERTIFICATE
}

func init() {
	proto.RegisterType((*ValidateTokenRequest)(nil), "ves.io.schema.api_credential.ValidateTokenRequest")
	golang_proto.RegisterType((*ValidateTokenRequest)(nil), "ves.io.schema.api_credential.ValidateTokenRequest")
	proto.RegisterType((*ValidateTokenResponse)(nil), "ves.io.schema.api_credential.ValidateTokenResponse")
	golang_proto.RegisterType((*ValidateTokenResponse)(nil), "ves.io.schema.api_credential.ValidateTokenResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/api_credential/private_customapi.proto", fileDescriptor_2f7b94ee39afd541)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/api_credential/private_customapi.proto", fileDescriptor_2f7b94ee39afd541)
}

var fileDescriptor_2f7b94ee39afd541 = []byte{
	// 518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xb1, 0x8b, 0x13, 0x4f,
	0x14, 0xde, 0xc9, 0x2f, 0xbf, 0xc3, 0x5b, 0x50, 0x64, 0x39, 0x25, 0xc4, 0x30, 0x84, 0xd8, 0x04,
	0x25, 0x3b, 0x90, 0xb3, 0xb2, 0x91, 0x33, 0xd5, 0xd9, 0x18, 0xc2, 0x61, 0x71, 0x20, 0xc7, 0xec,
	0xe6, 0xdd, 0xde, 0x7a, 0xd9, 0x79, 0xe3, 0xcc, 0xec, 0xe2, 0x21, 0x82, 0x58, 0x5b, 0x08, 0xf6,
	0xd6, 0x87, 0x8d, 0x7f, 0xc0, 0x35, 0x57, 0x5a, 0x06, 0x6d, 0xae, 0x34, 0x1b, 0x0b, 0x0b, 0x8b,
	0xfb, 0x13, 0x24, 0xb3, 0x9b, 0x68, 0x8e, 0x23, 0x20, 0x76, 0xef, 0xdb, 0xf7, 0xbe, 0x6f, 0xde,
	0xfb, 0xde, 0x5b, 0xf7, 0x5e, 0x06, 0xda, 0x8f, 0x91, 0xe9, 0xf0, 0x00, 0x12, 0xce, 0xb8, 0x8c,
	0xf7, 0x42, 0x05, 0x43, 0x10, 0x26, 0xe6, 0x23, 0x26, 0x55, 0x9c, 0x71, 0x03, 0x7b, 0x61, 0xaa,
	0x0d, 0x26, 0x5c, 0xc6, 0xbe, 0x54, 0x68, 0xd0, 0x6b, 0x14, 0x2c, 0xbf, 0x60, 0xf9, 0xcb, 0xac,
	0x7a, 0x27, 0x8a, 0xcd, 0x41, 0x1a, 0xf8, 0x21, 0x26, 0x2c, 0xc2, 0x08, 0x99, 0x25, 0x05, 0xe9,
	0xbe, 0x45, 0x16, 0xd8, 0xa8, 0x10, 0xab, 0x37, 0x22, 0xc4, 0x68, 0x04, 0xb3, 0xb7, 0x19, 0x17,
	0x02, 0x0d, 0x37, 0x31, 0x0a, 0x5d, 0x66, 0xdb, 0x2b, 0x1b, 0x34, 0x47, 0x12, 0xe6, 0x95, 0xb7,
	0x96, 0x2b, 0x51, 0xfe, 0x21, 0xd3, 0x7a, 0xe4, 0x6e, 0x3c, 0xe1, 0xa3, 0x78, 0xc8, 0x0d, 0xec,
	0xe0, 0x21, 0x88, 0x01, 0x3c, 0x4f, 0x41, 0x1b, 0xaf, 0xe1, 0xae, 0x0b, 0x9e, 0x80, 0x96, 0x3c,
	0x84, 0x5a, 0xa5, 0x49, 0xda, 0xeb, 0x83, 0xdf, 0x1f, 0xbc, 0x0d, 0xf7, 0x7f, 0x33, 0xab, 0xae,
	0xfd, 0x67, 0x33, 0x05, 0x68, 0x7d, 0x20, 0xee, 0x8d, 0x0b, 0x62, 0x5a, 0xa2, 0xd0, 0xb6, 0x3e,
	0x9b, 0x25, 0x6a, 0xa4, 0x49, 0xda, 0x57, 0x06, 0x05, 0xf0, 0x3c, 0xb7, 0x9a, 0x6a, 0x50, 0xa5,
	0xbc, 0x8d, 0xbd, 0x9b, 0xee, 0x9a, 0x01, 0xc1, 0x85, 0x29, 0xa5, 0x4b, 0xe4, 0xf5, 0xdc, 0xea,
	0x6c, 0xa6, 0x5a, 0xb5, 0x49, 0xda, 0xd7, 0xba, 0xcc, 0x5f, 0x65, 0xb4, 0xbf, 0xd5, 0xdf, 0xee,
	0x2d, 0xd0, 0xce, 0x91, 0x84, 0x81, 0x25, 0x77, 0x7f, 0x56, 0xdc, 0xeb, 0x3d, 0xbb, 0xb2, 0x7e,
	0xb1, 0xc0, 0xad, 0xfe, 0xb6, 0xf7, 0xb1, 0xe2, 0x5e, 0x5d, 0xea, 0xda, 0xeb, 0xae, 0x56, 0xbf,
	0xcc, 0xaf, 0xfa, 0xe6, 0x5f, 0x71, 0x0a, 0x5b, 0x5a, 0x9f, 0xc8, 0x9b, 0xaf, 0xdf, 0xdf, 0x57,
	0x8e, 0x49, 0xeb, 0xc1, 0xfc, 0xa4, 0x58, 0x71, 0x52, 0x6c, 0xe1, 0xb5, 0x66, 0x2f, 0x17, 0xf1,
	0x2b, 0x96, 0x95, 0x3a, 0x17, 0xf6, 0xad, 0xef, 0x93, 0x3b, 0xbb, 0x41, 0xeb, 0x29, 0x5b, 0x6a,
	0x82, 0xc5, 0xc2, 0x28, 0xd4, 0x12, 0x42, 0xc3, 0x14, 0xf0, 0xe1, 0xbf, 0xbf, 0x51, 0xbf, 0x7b,
	0x7a, 0x42, 0xaa, 0x5f, 0x4e, 0xc8, 0xed, 0x95, 0xd3, 0x3e, 0x0e, 0x9e, 0x41, 0x68, 0x1e, 0xbe,
	0x25, 0xe3, 0x09, 0x75, 0xce, 0x26, 0xd4, 0x39, 0x9f, 0x50, 0xf2, 0x3a, 0xa7, 0xe4, 0x38, 0xa7,
	0xe4, 0x73, 0x4e, 0xc9, 0x38, 0xa7, 0xe4, 0x5b, 0x4e, 0xc9, 0x8f, 0x9c, 0x3a, 0xe7, 0x39, 0x25,
	0xef, 0xa6, 0xd4, 0x39, 0x9d, 0x52, 0x32, 0x9e, 0x52, 0xe7, 0x6c, 0x4a, 0x9d, 0xdd, 0x41, 0x84,
	0xf2, 0x30, 0xf2, 0x33, 0x1c, 0x19, 0x50, 0x8a, 0xfb, 0xa9, 0x66, 0x36, 0xd8, 0x47, 0x95, 0x74,
	0xa4, 0xc2, 0x2c, 0x1e, 0x82, 0xea, 0xcc, 0xd3, 0x4c, 0x06, 0x11, 0x32, 0x78, 0x61, 0xca, 0xb9,
	0x2f, 0xfd, 0x27, 0x82, 0x35, 0x7b, 0xf1, 0x9b, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x85,
	0x6e, 0xdb, 0xdb, 0x03, 0x00, 0x00,
}

func (this *ValidateTokenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateTokenRequest)
	if !ok {
		that2, ok := that.(ValidateTokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *ValidateTokenResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateTokenResponse)
	if !ok {
		that2, ok := that.(ValidateTokenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Valid != that1.Valid {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if this.Tenant != that1.Tenant {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *ValidateTokenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api_credential.ValidateTokenRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidateTokenResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&api_credential.ValidateTokenResponse{")
	s = append(s, "Valid: "+fmt.Sprintf("%#v", this.Valid)+",\n")
	s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	s = append(s, "Tenant: "+fmt.Sprintf("%#v", this.Tenant)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPrivateCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomPrivateAPIClient is the client API for CustomPrivateAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomPrivateAPIClient interface {
	// Validate API credential
	//
	// x-displayName: "Validate API credential"
	// For API credential validation from APIGW.
	// To determine the validity of the credential, token in the request is the unique identifier to
	// lookup corresponding API credential object in eywa.
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
}

type customPrivateAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomPrivateAPIClient(cc *grpc.ClientConn) CustomPrivateAPIClient {
	return &customPrivateAPIClient{cc}
}

func (c *customPrivateAPIClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.api_credential.CustomPrivateAPI/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomPrivateAPIServer is the server API for CustomPrivateAPI service.
type CustomPrivateAPIServer interface {
	// Validate API credential
	//
	// x-displayName: "Validate API credential"
	// For API credential validation from APIGW.
	// To determine the validity of the credential, token in the request is the unique identifier to
	// lookup corresponding API credential object in eywa.
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
}

// UnimplementedCustomPrivateAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomPrivateAPIServer struct {
}

func (*UnimplementedCustomPrivateAPIServer) ValidateToken(ctx context.Context, req *ValidateTokenRequest) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}

func RegisterCustomPrivateAPIServer(s *grpc.Server, srv CustomPrivateAPIServer) {
	s.RegisterService(&_CustomPrivateAPI_serviceDesc, srv)
}

func _CustomPrivateAPI_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPrivateAPIServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.api_credential.CustomPrivateAPI/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPrivateAPIServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomPrivateAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.api_credential.CustomPrivateAPI",
	HandlerType: (*CustomPrivateAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateToken",
			Handler:    _CustomPrivateAPI_ValidateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/api_credential/private_customapi.proto",
}

func (m *ValidateTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ValidateTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintPrivateCustomapi(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrivateCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrivateCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidateTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	return n
}

func (m *ValidateTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovPrivateCustomapi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPrivateCustomapi(uint64(m.Type))
	}
	return n
}

func sovPrivateCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrivateCustomapi(x uint64) (n int) {
	return sovPrivateCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ValidateTokenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidateTokenRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidateTokenResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidateTokenResponse{`,
		`Valid:` + fmt.Sprintf("%v", this.Valid) + `,`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPrivateCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ValidateTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= APICredentialType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrivateCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivateCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivateCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivateCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivateCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrivateCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrivateCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrivateCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrivateCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivateCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrivateCustomapi = fmt.Errorf("proto: unexpected end of group")
)
