// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/scim/service_provider_config_types.proto

package scim

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ServiceProviderConfigResponse
//
// x-displayName: "ServiceProviderConfigResponse"
// ServiceProviderConfigResponse.
type ServiceProviderConfigResponse struct {
	// schemas
	//
	// x-displayName: "schemas"
	// x-example: "urn:ietf:params:scim:schemas:core:2.0:ResourceType"
	// x-required
	// schemas scim spec.
	Schemas []string `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
	// documentationUri
	//
	// x-displayName: "documentationUri"
	// x-example: "https://example.com./scumentation/uri"
	// x-required
	// uri for documentation.
	DocumentationUri string `protobuf:"bytes,2,opt,name=documentationUri,proto3" json:"documentationUri,omitempty"`
	// patch
	//
	// x-displayName: "patch"
	// x-example: "--"
	// x-required
	// patch for the resource.
	Patch *Support `protobuf:"bytes,3,opt,name=patch,proto3" json:"patch,omitempty"`
	// bulk
	//
	// x-displayName: "bulk"
	// x-example: "--"
	// x-required
	// bulk for resources..
	Bulk *Support `protobuf:"bytes,4,opt,name=bulk,proto3" json:"bulk,omitempty"`
	// filter
	//
	// x-displayName: "filter"
	// x-example: "user"
	// x-required
	// filter for the resources.
	Filter *Filter `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	// changePassword
	//
	// x-displayName: "changePassword"
	// x-example: "true"
	// x-required
	// changePassword support for changing the password.
	ChangePassword *Support `protobuf:"bytes,6,opt,name=changePassword,proto3" json:"changePassword,omitempty"`
	// sort
	//
	// x-displayName: "sort"
	// x-example: "true"
	// x-required
	// sorting support.
	Sort *Support `protobuf:"bytes,7,opt,name=sort,proto3" json:"sort,omitempty"`
	// etag
	//
	// x-displayName: "etag"
	// x-example: "etag"
	// x-required
	// etag for resource.
	Etag *Support `protobuf:"bytes,8,opt,name=etag,proto3" json:"etag,omitempty"`
	// authenticationSchemes
	//
	// x-displayName: "authenticationSchemes"
	// x-example: "--"
	// x-required
	// supported authenticationSchemes for the resource.
	AuthenticationSchemes []string `protobuf:"bytes,9,rep,name=authenticationSchemes,proto3" json:"authenticationSchemes,omitempty"`
}

func (m *ServiceProviderConfigResponse) Reset()      { *m = ServiceProviderConfigResponse{} }
func (*ServiceProviderConfigResponse) ProtoMessage() {}
func (*ServiceProviderConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa7e47fa30b03eb6, []int{0}
}
func (m *ServiceProviderConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceProviderConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceProviderConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceProviderConfigResponse.Merge(m, src)
}
func (m *ServiceProviderConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *ServiceProviderConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceProviderConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceProviderConfigResponse proto.InternalMessageInfo

func (m *ServiceProviderConfigResponse) GetSchemas() []string {
	if m != nil {
		return m.Schemas
	}
	return nil
}

func (m *ServiceProviderConfigResponse) GetDocumentationUri() string {
	if m != nil {
		return m.DocumentationUri
	}
	return ""
}

func (m *ServiceProviderConfigResponse) GetPatch() *Support {
	if m != nil {
		return m.Patch
	}
	return nil
}

func (m *ServiceProviderConfigResponse) GetBulk() *Support {
	if m != nil {
		return m.Bulk
	}
	return nil
}

func (m *ServiceProviderConfigResponse) GetFilter() *Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ServiceProviderConfigResponse) GetChangePassword() *Support {
	if m != nil {
		return m.ChangePassword
	}
	return nil
}

func (m *ServiceProviderConfigResponse) GetSort() *Support {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *ServiceProviderConfigResponse) GetEtag() *Support {
	if m != nil {
		return m.Etag
	}
	return nil
}

func (m *ServiceProviderConfigResponse) GetAuthenticationSchemes() []string {
	if m != nil {
		return m.AuthenticationSchemes
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceProviderConfigResponse)(nil), "ves.io.schema.scim.ServiceProviderConfigResponse")
	golang_proto.RegisterType((*ServiceProviderConfigResponse)(nil), "ves.io.schema.scim.ServiceProviderConfigResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/scim/service_provider_config_types.proto", fileDescriptor_aa7e47fa30b03eb6)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/scim/service_provider_config_types.proto", fileDescriptor_aa7e47fa30b03eb6)
}

var fileDescriptor_aa7e47fa30b03eb6 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x8b, 0x13, 0x31,
	0x14, 0xc7, 0x27, 0x76, 0xb7, 0x6b, 0x23, 0x88, 0x04, 0x84, 0x50, 0x31, 0x14, 0x4f, 0x45, 0x68,
	0x82, 0xab, 0xf8, 0x01, 0x5c, 0x10, 0x8f, 0xcb, 0x14, 0x2f, 0x5e, 0xca, 0x4c, 0x9a, 0x66, 0xc2,
	0xee, 0xcc, 0x0b, 0x49, 0xa6, 0xea, 0xcd, 0x93, 0x67, 0x3f, 0x86, 0x1f, 0xc3, 0xa3, 0xc7, 0x1e,
	0x8b, 0x27, 0x3b, 0xbd, 0x78, 0xdc, 0x8f, 0x20, 0x93, 0xd9, 0x2e, 0xe2, 0x16, 0xb6, 0xb7, 0xbc,
	0xc9, 0xef, 0x37, 0xef, 0x3f, 0x6f, 0x1e, 0x7e, 0xbd, 0x54, 0x9e, 0x1b, 0x10, 0x5e, 0x16, 0xaa,
	0xcc, 0x84, 0x97, 0xa6, 0x14, 0x5e, 0xb9, 0xa5, 0x91, 0x6a, 0x66, 0x1d, 0x2c, 0xcd, 0x5c, 0xb9,
	0x99, 0x84, 0x6a, 0x61, 0xf4, 0x2c, 0x7c, 0xb6, 0xca, 0x73, 0xeb, 0x20, 0x00, 0x21, 0x9d, 0xc7,
	0x3b, 0x8f, 0xb7, 0xde, 0x70, 0xa2, 0x4d, 0x28, 0xea, 0x9c, 0x4b, 0x28, 0x85, 0x06, 0x0d, 0x22,
	0xa2, 0x79, 0xbd, 0x88, 0x55, 0x2c, 0xe2, 0xa9, 0x7b, 0xc5, 0x90, 0xed, 0x69, 0xfd, 0x4f, 0x8b,
	0x67, 0xbf, 0x7a, 0xf8, 0xe9, 0xb4, 0x8b, 0x72, 0x7e, 0x9d, 0xe4, 0x2c, 0x06, 0x49, 0x95, 0xb7,
	0x50, 0x79, 0x45, 0x28, 0x3e, 0xe9, 0x64, 0x4f, 0xd1, 0xa8, 0x37, 0x1e, 0xa4, 0xbb, 0x92, 0x3c,
	0xc7, 0x8f, 0xe6, 0x20, 0xeb, 0x52, 0x55, 0x21, 0x0b, 0x06, 0xaa, 0xf7, 0xce, 0xd0, 0x7b, 0x23,
	0x34, 0x1e, 0xa4, 0xb7, 0x9e, 0x93, 0x17, 0xf8, 0xd8, 0x66, 0x41, 0x16, 0xb4, 0x37, 0x42, 0xe3,
	0x07, 0xa7, 0x4f, 0xf8, 0xed, 0x4f, 0xe3, 0xd3, 0xda, 0x5a, 0x70, 0x21, 0xed, 0x48, 0x22, 0xf0,
	0x51, 0x5e, 0x5f, 0x5e, 0xd0, 0xa3, 0xbb, 0x8d, 0x08, 0x92, 0x53, 0xdc, 0x5f, 0x98, 0xcb, 0xa0,
	0x1c, 0x3d, 0x8e, 0xca, 0x70, 0x9f, 0xf2, 0x36, 0x12, 0xe9, 0x35, 0x49, 0xce, 0xf0, 0x43, 0x59,
	0x64, 0x95, 0x56, 0xe7, 0x99, 0xf7, 0x1f, 0xc1, 0xcd, 0x69, 0xff, 0xee, 0x76, 0xff, 0x29, 0x6d,
	0x52, 0x0f, 0x2e, 0xd0, 0x93, 0x03, 0x92, 0xb6, 0x60, 0x2b, 0xa8, 0x90, 0x69, 0x7a, 0xff, 0x00,
	0xa1, 0x05, 0xc9, 0x2b, 0xfc, 0x38, 0xab, 0x43, 0xa1, 0xaa, 0x60, 0x64, 0x9c, 0xe9, 0xb4, 0x45,
	0x95, 0xa7, 0x83, 0xf8, 0x4b, 0xf6, 0x5f, 0xbe, 0xf9, 0x8a, 0x56, 0x1b, 0x96, 0xac, 0x37, 0x2c,
	0xb9, 0xda, 0x30, 0xf4, 0xa5, 0x61, 0xe8, 0x7b, 0xc3, 0xd0, 0xcf, 0x86, 0xa1, 0x55, 0xc3, 0xd0,
	0xba, 0x61, 0xe8, 0x77, 0xc3, 0xd0, 0x9f, 0x86, 0x25, 0x57, 0x0d, 0x43, 0xdf, 0xb6, 0x2c, 0xf9,
	0xb1, 0x65, 0x68, 0xb5, 0x65, 0xc9, 0x7a, 0xcb, 0x92, 0x0f, 0xef, 0x34, 0xd8, 0x0b, 0xcd, 0x97,
	0xd0, 0x4e, 0xca, 0x65, 0xbc, 0xf6, 0x22, 0x1e, 0x16, 0xe0, 0xca, 0xc9, 0x6e, 0x6f, 0x27, 0xbb,
	0x6b, 0x61, 0x73, 0x0d, 0x42, 0x7d, 0x0a, 0x37, 0xab, 0x76, 0xb3, 0x71, 0x79, 0x3f, 0x2e, 0xdb,
	0xcb, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xe2, 0x82, 0xad, 0x09, 0x03, 0x00, 0x00,
}

func (this *ServiceProviderConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceProviderConfigResponse)
	if !ok {
		that2, ok := that.(ServiceProviderConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Schemas) != len(that1.Schemas) {
		return false
	}
	for i := range this.Schemas {
		if this.Schemas[i] != that1.Schemas[i] {
			return false
		}
	}
	if this.DocumentationUri != that1.DocumentationUri {
		return false
	}
	if !this.Patch.Equal(that1.Patch) {
		return false
	}
	if !this.Bulk.Equal(that1.Bulk) {
		return false
	}
	if !this.Filter.Equal(that1.Filter) {
		return false
	}
	if !this.ChangePassword.Equal(that1.ChangePassword) {
		return false
	}
	if !this.Sort.Equal(that1.Sort) {
		return false
	}
	if !this.Etag.Equal(that1.Etag) {
		return false
	}
	if len(this.AuthenticationSchemes) != len(that1.AuthenticationSchemes) {
		return false
	}
	for i := range this.AuthenticationSchemes {
		if this.AuthenticationSchemes[i] != that1.AuthenticationSchemes[i] {
			return false
		}
	}
	return true
}
func (this *ServiceProviderConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&scim.ServiceProviderConfigResponse{")
	s = append(s, "Schemas: "+fmt.Sprintf("%#v", this.Schemas)+",\n")
	s = append(s, "DocumentationUri: "+fmt.Sprintf("%#v", this.DocumentationUri)+",\n")
	if this.Patch != nil {
		s = append(s, "Patch: "+fmt.Sprintf("%#v", this.Patch)+",\n")
	}
	if this.Bulk != nil {
		s = append(s, "Bulk: "+fmt.Sprintf("%#v", this.Bulk)+",\n")
	}
	if this.Filter != nil {
		s = append(s, "Filter: "+fmt.Sprintf("%#v", this.Filter)+",\n")
	}
	if this.ChangePassword != nil {
		s = append(s, "ChangePassword: "+fmt.Sprintf("%#v", this.ChangePassword)+",\n")
	}
	if this.Sort != nil {
		s = append(s, "Sort: "+fmt.Sprintf("%#v", this.Sort)+",\n")
	}
	if this.Etag != nil {
		s = append(s, "Etag: "+fmt.Sprintf("%#v", this.Etag)+",\n")
	}
	s = append(s, "AuthenticationSchemes: "+fmt.Sprintf("%#v", this.AuthenticationSchemes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringServiceProviderConfigTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ServiceProviderConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceProviderConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceProviderConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthenticationSchemes) > 0 {
		for iNdEx := len(m.AuthenticationSchemes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AuthenticationSchemes[iNdEx])
			copy(dAtA[i:], m.AuthenticationSchemes[iNdEx])
			i = encodeVarintServiceProviderConfigTypes(dAtA, i, uint64(len(m.AuthenticationSchemes[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Etag != nil {
		{
			size, err := m.Etag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceProviderConfigTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Sort != nil {
		{
			size, err := m.Sort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceProviderConfigTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ChangePassword != nil {
		{
			size, err := m.ChangePassword.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceProviderConfigTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceProviderConfigTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Bulk != nil {
		{
			size, err := m.Bulk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceProviderConfigTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Patch != nil {
		{
			size, err := m.Patch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServiceProviderConfigTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DocumentationUri) > 0 {
		i -= len(m.DocumentationUri)
		copy(dAtA[i:], m.DocumentationUri)
		i = encodeVarintServiceProviderConfigTypes(dAtA, i, uint64(len(m.DocumentationUri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Schemas) > 0 {
		for iNdEx := len(m.Schemas) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Schemas[iNdEx])
			copy(dAtA[i:], m.Schemas[iNdEx])
			i = encodeVarintServiceProviderConfigTypes(dAtA, i, uint64(len(m.Schemas[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintServiceProviderConfigTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovServiceProviderConfigTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServiceProviderConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Schemas) > 0 {
		for _, s := range m.Schemas {
			l = len(s)
			n += 1 + l + sovServiceProviderConfigTypes(uint64(l))
		}
	}
	l = len(m.DocumentationUri)
	if l > 0 {
		n += 1 + l + sovServiceProviderConfigTypes(uint64(l))
	}
	if m.Patch != nil {
		l = m.Patch.Size()
		n += 1 + l + sovServiceProviderConfigTypes(uint64(l))
	}
	if m.Bulk != nil {
		l = m.Bulk.Size()
		n += 1 + l + sovServiceProviderConfigTypes(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovServiceProviderConfigTypes(uint64(l))
	}
	if m.ChangePassword != nil {
		l = m.ChangePassword.Size()
		n += 1 + l + sovServiceProviderConfigTypes(uint64(l))
	}
	if m.Sort != nil {
		l = m.Sort.Size()
		n += 1 + l + sovServiceProviderConfigTypes(uint64(l))
	}
	if m.Etag != nil {
		l = m.Etag.Size()
		n += 1 + l + sovServiceProviderConfigTypes(uint64(l))
	}
	if len(m.AuthenticationSchemes) > 0 {
		for _, s := range m.AuthenticationSchemes {
			l = len(s)
			n += 1 + l + sovServiceProviderConfigTypes(uint64(l))
		}
	}
	return n
}

func sovServiceProviderConfigTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServiceProviderConfigTypes(x uint64) (n int) {
	return sovServiceProviderConfigTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ServiceProviderConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceProviderConfigResponse{`,
		`Schemas:` + fmt.Sprintf("%v", this.Schemas) + `,`,
		`DocumentationUri:` + fmt.Sprintf("%v", this.DocumentationUri) + `,`,
		`Patch:` + strings.Replace(fmt.Sprintf("%v", this.Patch), "Support", "Support", 1) + `,`,
		`Bulk:` + strings.Replace(fmt.Sprintf("%v", this.Bulk), "Support", "Support", 1) + `,`,
		`Filter:` + strings.Replace(fmt.Sprintf("%v", this.Filter), "Filter", "Filter", 1) + `,`,
		`ChangePassword:` + strings.Replace(fmt.Sprintf("%v", this.ChangePassword), "Support", "Support", 1) + `,`,
		`Sort:` + strings.Replace(fmt.Sprintf("%v", this.Sort), "Support", "Support", 1) + `,`,
		`Etag:` + strings.Replace(fmt.Sprintf("%v", this.Etag), "Support", "Support", 1) + `,`,
		`AuthenticationSchemes:` + fmt.Sprintf("%v", this.AuthenticationSchemes) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringServiceProviderConfigTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ServiceProviderConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceProviderConfigTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceProviderConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceProviderConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceProviderConfigTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schemas = append(m.Schemas, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentationUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceProviderConfigTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocumentationUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceProviderConfigTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Patch == nil {
				m.Patch = &Support{}
			}
			if err := m.Patch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bulk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceProviderConfigTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bulk == nil {
				m.Bulk = &Support{}
			}
			if err := m.Bulk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceProviderConfigTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &Filter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangePassword", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceProviderConfigTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangePassword == nil {
				m.ChangePassword = &Support{}
			}
			if err := m.ChangePassword.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceProviderConfigTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sort == nil {
				m.Sort = &Support{}
			}
			if err := m.Sort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceProviderConfigTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Etag == nil {
				m.Etag = &Support{}
			}
			if err := m.Etag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationSchemes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceProviderConfigTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationSchemes = append(m.AuthenticationSchemes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceProviderConfigTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceProviderConfigTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServiceProviderConfigTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServiceProviderConfigTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceProviderConfigTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceProviderConfigTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServiceProviderConfigTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServiceProviderConfigTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServiceProviderConfigTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServiceProviderConfigTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServiceProviderConfigTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServiceProviderConfigTypes = fmt.Errorf("proto: unexpected end of group")
)
