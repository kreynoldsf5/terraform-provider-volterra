// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/scim/public_customapi.proto

// SCIM
//
// x-displayName: "System for Cross-domain Identity Management (SCIM)"
// This schema specification details Volterra's support for SCIM protocol.
// Admin can use SCIM feature on top of SSO to enable automated provisioning of
// user and user groups from external identity provider into the F5 saas platform.
// With this feature, complete life cycle management of user and groups can be
// achieved from single source of truth which is managed by tenant's admin.
//
// current protocol support is using schema version v2.0 https://datatracker.ietf.org/doc/html/rfc7643
//
// SCIM feature can be enabled part of SSO configuration (using RPC `UpdateScimIntegration` under oidc_provider resource)
// By default, Volterra will not sync groups and users. Admin is required to set object identifier of group
// in external identity provider to corresponding user_group resource in volterra. Users with corresponding
// group membership if exist in external identity provider will be synced.

package scim

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("ves.io/schema/scim/public_customapi.proto", fileDescriptor_0c4e0f4a6c36d20e)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/scim/public_customapi.proto", fileDescriptor_0c4e0f4a6c36d20e)
}

var fileDescriptor_0c4e0f4a6c36d20e = []byte{
	// 940 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0x77, 0xa8, 0x40, 0x62, 0x42, 0x1b, 0x18, 0x05, 0x29, 0x59, 0x52, 0x4b, 0xb8, 0xf9,
	0xd1, 0x5d, 0xba, 0xb6, 0xb2, 0x20, 0x0e, 0xdc, 0x48, 0x80, 0x6d, 0xa0, 0xa2, 0xcb, 0xb6, 0x08,
	0xa9, 0x97, 0xc8, 0xeb, 0x7d, 0x71, 0x2c, 0x6c, 0xcf, 0xe0, 0x19, 0x2f, 0xac, 0x10, 0x12, 0xca,
	0x85, 0x2b, 0x12, 0x87, 0x8a, 0x4a, 0x20, 0x90, 0x7a, 0xc8, 0x81, 0x3f, 0x00, 0xa9, 0x97, 0xdc,
	0xca, 0x09, 0x45, 0xe2, 0xd2, 0x23, 0x71, 0x38, 0x70, 0xac, 0xc4, 0x8d, 0x13, 0xf2, 0xd8, 0xbb,
	0x1b, 0x8b, 0xf1, 0xee, 0xb4, 0x37, 0xdb, 0xef, 0x3b, 0x33, 0x9f, 0xf9, 0xbe, 0x37, 0xcf, 0x83,
	0x1b, 0x43, 0xe0, 0x96, 0x4f, 0x6d, 0xee, 0x1e, 0x40, 0xe8, 0xd8, 0xdc, 0xf5, 0x43, 0x9b, 0x25,
	0xfd, 0xc0, 0x77, 0xf7, 0xdc, 0x84, 0x0b, 0x1a, 0x3a, 0xcc, 0xb7, 0x58, 0x4c, 0x05, 0x25, 0x24,
	0x97, 0x5a, 0xb9, 0xd4, 0xca, 0xa4, 0xf5, 0x96, 0xe7, 0x8b, 0x83, 0xa4, 0x6f, 0xb9, 0x34, 0xb4,
	0x3d, 0xea, 0x51, 0x5b, 0x4a, 0xfb, 0xc9, 0xbe, 0x7c, 0x93, 0x2f, 0xf2, 0x29, 0x9f, 0xa2, 0xbe,
	0xea, 0x51, 0xea, 0x05, 0x60, 0x3b, 0xcc, 0xb7, 0x9d, 0x28, 0xa2, 0xc2, 0x11, 0x3e, 0x8d, 0x78,
	0x11, 0x5d, 0x39, 0x17, 0x3d, 0x10, 0x82, 0xf5, 0xe9, 0x60, 0x54, 0x84, 0x5e, 0x29, 0x63, 0x52,
	0x76, 0x7e, 0xdc, 0x9a, 0x62, 0x0f, 0x5e, 0x4c, 0x13, 0xb6, 0x27, 0x46, 0x0c, 0xc6, 0xaa, 0x4d,
	0x85, 0x2a, 0x06, 0x4e, 0x93, 0xd8, 0x85, 0x92, 0xf0, 0x4d, 0x85, 0x90, 0x43, 0x3c, 0xf4, 0x5d,
	0xd8, 0x63, 0x31, 0x1d, 0xfa, 0x03, 0x88, 0xf7, 0x5c, 0x1a, 0xed, 0xfb, 0x5e, 0x69, 0x9c, 0xa1,
	0x18, 0x77, 0x3e, 0x7e, 0x45, 0x11, 0x4f, 0x38, 0xc4, 0xa5, 0x49, 0x56, 0xca, 0xa2, 0xf3, 0x21,
	0xb3, 0x1c, 0x1a, 0x02, 0x87, 0x68, 0x58, 0xb6, 0xa2, 0xfd, 0xcf, 0xcb, 0x78, 0x71, 0x47, 0xe6,
	0xad, 0x2b, 0x93, 0xf8, 0x76, 0x77, 0x97, 0x1c, 0x23, 0xbc, 0x72, 0xc3, 0xe7, 0xe2, 0x56, 0xbe,
	0x87, 0x6e, 0xb1, 0x85, 0x1d, 0xb9, 0x03, 0xb2, 0x64, 0x95, 0xd3, 0xfa, 0x6e, 0xc8, 0xc4, 0xa8,
	0xbe, 0x65, 0xfd, 0x3f, 0xd9, 0x96, 0x72, 0x82, 0x1e, 0x70, 0x46, 0x23, 0x0e, 0xe6, 0x9d, 0xf4,
	0xe1, 0xf2, 0xea, 0x90, 0x06, 0xc2, 0xa5, 0x11, 0xa7, 0x01, 0xb4, 0xb2, 0x31, 0x2d, 0x37, 0xf0,
	0x21, 0x12, 0xad, 0x18, 0x9c, 0xc1, 0xe1, 0x1f, 0x7f, 0x7d, 0xf7, 0xcc, 0x1b, 0xa4, 0x5d, 0xd4,
	0x97, 0x1d, 0x39, 0x21, 0x70, 0xe6, 0xb8, 0xc0, 0x6d, 0x3e, 0xe2, 0x02, 0x42, 0x7b, 0xd8, 0xb6,
	0xd5, 0x90, 0x47, 0x08, 0xbf, 0x94, 0x6d, 0xa1, 0x57, 0xe4, 0xeb, 0x76, 0x66, 0x4b, 0x05, 0x7a,
	0x43, 0x85, 0x5e, 0x1a, 0x38, 0x41, 0xee, 0x69, 0x21, 0x5f, 0x23, 0xcd, 0x99, 0xc8, 0x65, 0xa8,
	0x5f, 0x10, 0x5e, 0xea, 0x40, 0x99, 0x74, 0x7b, 0xb4, 0x3b, 0x20, 0x97, 0x55, 0x5c, 0xbb, 0x83,
	0x1e, 0x7c, 0x96, 0x00, 0x17, 0xf5, 0xd5, 0x59, 0xd8, 0xe6, 0x27, 0x5a, 0xa4, 0x5b, 0xc4, 0xd6,
	0x27, 0xb5, 0xbf, 0xf4, 0x07, 0x5f, 0x91, 0x6f, 0x10, 0x5e, 0x90, 0xc5, 0x21, 0x57, 0xad, 0xf2,
	0x74, 0xc9, 0xca, 0x8f, 0xa6, 0x95, 0x75, 0x83, 0xeb, 0x42, 0xb0, 0x6d, 0x3a, 0x18, 0x99, 0x37,
	0xb4, 0xa0, 0x36, 0xc8, 0xda, 0xec, 0x8c, 0x17, 0x2b, 0xdf, 0x45, 0xf8, 0x62, 0x07, 0x0a, 0x10,
	0x1d, 0xc7, 0xd4, 0x50, 0x1f, 0x69, 0x41, 0xbd, 0x46, 0x1a, 0x3a, 0x50, 0xb9, 0x47, 0x3f, 0x20,
	0x8c, 0x77, 0x62, 0x70, 0x04, 0x7c, 0xcc, 0x21, 0x26, 0xeb, 0x2a, 0xac, 0x69, 0x7c, 0x8c, 0xb7,
	0xac, 0x92, 0x65, 0x02, 0xf3, 0xc3, 0xf4, 0xe1, 0xf2, 0xe5, 0x2a, 0xc4, 0xcf, 0x63, 0x5f, 0x80,
	0x64, 0xdc, 0x34, 0xcd, 0x99, 0x8c, 0xd9, 0x5c, 0xfc, 0x2d, 0xd4, 0x24, 0xf7, 0x10, 0x5e, 0xec,
	0x01, 0x0b, 0x1c, 0x57, 0x02, 0x48, 0xef, 0x2a, 0x57, 0x9f, 0xc1, 0x75, 0x4b, 0x8f, 0xeb, 0x5a,
	0x7d, 0x73, 0x3e, 0x97, 0x74, 0x2e, 0x83, 0xbb, 0x8f, 0xf0, 0xc5, 0xae, 0x23, 0xdc, 0x83, 0x09,
	0xda, 0x9a, 0x0a, 0x60, 0x22, 0x99, 0x6f, 0x9f, 0x2e, 0x66, 0xfb, 0x49, 0x30, 0xef, 0x22, 0x7c,
	0xe9, 0x1d, 0x08, 0x40, 0x4c, 0x2d, 0x7c, 0xaa, 0xf2, 0xeb, 0xea, 0xc1, 0x35, 0x9a, 0xba, 0x70,
	0xe4, 0x27, 0x84, 0x9f, 0xcf, 0x4e, 0xa8, 0xfc, 0x44, 0x5e, 0x55, 0x41, 0xbd, 0xe7, 0x07, 0x62,
	0xea, 0x9c, 0xd2, 0xdf, 0xf1, 0x0c, 0x93, 0xde, 0xf7, 0xbe, 0xd6, 0x39, 0x59, 0x23, 0x1a, 0x35,
	0x98, 0x99, 0xb7, 0xd0, 0x01, 0xa1, 0xeb, 0x5c, 0x75, 0x6a, 0x6f, 0x6a, 0x41, 0x35, 0x88, 0xb6,
	0x79, 0xf7, 0x11, 0xc6, 0xd9, 0xd6, 0x3b, 0xd9, 0x75, 0x40, 0xcb, 0xbd, 0x8d, 0x2a, 0xf7, 0xe4,
	0x14, 0xe3, 0x0e, 0xca, 0xcd, 0x0f, 0xb4, 0x50, 0xd7, 0xc9, 0x95, 0x99, 0xa8, 0x05, 0xd7, 0x3d,
	0x84, 0x5f, 0xe8, 0x40, 0xbe, 0x84, 0x8e, 0x83, 0x2b, 0xaa, 0xb0, 0x1c, 0x2d, 0x0b, 0x70, 0x3e,
	0x57, 0x93, 0x5c, 0xd5, 0xe0, 0xca, 0x3d, 0xfc, 0x19, 0xe1, 0x85, 0xbc, 0xbd, 0xc9, 0xaf, 0x64,
	0xa3, 0xba, 0xff, 0x15, 0x1e, 0xcd, 0x85, 0xbc, 0xa9, 0x77, 0x4a, 0xae, 0x9a, 0x3a, 0xee, 0x65,
	0xc7, 0xf7, 0x47, 0x84, 0x5f, 0x2c, 0x5a, 0xe0, 0xd4, 0xc4, 0x6a, 0x80, 0x59, 0x6c, 0xb7, 0xf5,
	0xd8, 0x5a, 0x75, 0x6d, 0x07, 0x33, 0xc0, 0x23, 0x84, 0x2f, 0xc9, 0x1e, 0x37, 0xc5, 0x5b, 0xaf,
	0xec, 0x83, 0xba, 0x36, 0xea, 0xa2, 0xb6, 0x9f, 0x08, 0xf5, 0x7b, 0x84, 0x17, 0xf3, 0x56, 0xa8,
	0x5d, 0x8f, 0xd5, 0xbf, 0x62, 0x0d, 0xbc, 0x66, 0x53, 0x1b, 0xaf, 0xbe, 0x74, 0xfc, 0x00, 0x5d,
	0xf8, 0xf7, 0x01, 0x7a, 0x76, 0x00, 0x21, 0xdd, 0x3a, 0xfc, 0x7d, 0xf9, 0xc2, 0xaf, 0x08, 0x6d,
	0x1f, 0xa2, 0x93, 0x53, 0xa3, 0xf6, 0xe8, 0xd4, 0xa8, 0x3d, 0x3e, 0x35, 0xd0, 0xd7, 0xa9, 0x81,
	0x8e, 0x52, 0x03, 0xfd, 0x96, 0x1a, 0xe8, 0x24, 0x35, 0xd0, 0x9f, 0xa9, 0x81, 0xfe, 0x4e, 0x8d,
	0xda, 0xe3, 0xd4, 0x40, 0xdf, 0x9e, 0x19, 0xb5, 0xe3, 0x33, 0x03, 0x9d, 0x9c, 0x19, 0xb5, 0x47,
	0x67, 0x46, 0xed, 0xce, 0x75, 0x8f, 0xb2, 0x4f, 0x3d, 0x2b, 0xa3, 0x84, 0x38, 0x76, 0xac, 0x84,
	0xdb, 0xf2, 0x61, 0x9f, 0xc6, 0x61, 0x6b, 0x7c, 0xdb, 0x6f, 0x8d, 0xc3, 0x36, 0xeb, 0x7b, 0xd4,
	0x86, 0x2f, 0xc4, 0xe4, 0x0e, 0x3f, 0xb9, 0xca, 0xf7, 0x9f, 0x93, 0x37, 0xf0, 0xd7, 0xff, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0xd0, 0xa4, 0xbe, 0x53, 0x52, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomPublicAPIClient is the client API for CustomPublicAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomPublicAPIClient interface {
	// ListServiceProviderConfig
	//
	// x-displayName: "List service provider configs"
	//
	ListServiceProviderConfig(ctx context.Context, in *schema.Empty, opts ...grpc.CallOption) (*ServiceProviderConfigResponse, error)
	// GetResourceTypes
	//
	// x-displayName: "Get supported resources type"
	//
	ListResourceTypes(ctx context.Context, in *schema.Empty, opts ...grpc.CallOption) (*ResourceTypesResponse, error)
	// GetResourceTypes
	//
	// x-displayName: "Get supported resources type"
	//
	GetResourceTypesById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Resource, error)
	// Schemas
	//
	// x-displayName: "Schemas"
	//
	ListSchemas(ctx context.Context, in *schema.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// SchemasById
	//
	// x-displayName: "Schemas By ID"
	//
	GetSchemaById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Create User with roles
	//
	// x-displayName: "Create User with Role Assignment"
	// Create creates a user and namespace roles binding for this user
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	// Replace User with new values.
	//
	// x-displayName: "Update User and Role Assignments"
	// Replace updates user and namespace roles for this user
	ReplaceUserById(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// PatchUserById patches User
	//
	// x-displayName: "Patch User"
	// Patch patches the fields for this user
	PatchUserById(ctx context.Context, in *PatchUserRequest, opts ...grpc.CallOption) (*User, error)
	// Delete User by ID
	//
	// x-displayName: "Delete user by Id"
	// Delete user by Id.
	DeleteUserById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Get all the Users
	//
	// x-displayName: "Get all users"
	// Get all users.
	ListUsers(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
	// Get User with id
	//
	// x-displayName: "Get User with Id"
	// Get user by means of ID
	GetUserById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*User, error)
	// List Group based on filter.
	//
	// x-displayName: "List group based on filters"
	// List groups based on the given filter.
	ListGroups(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*ListGroupResources, error)
	// List Group based on Id.
	//
	// x-displayName: "List group based on Id"
	// List group based on the given Id.
	GetGroupById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Group, error)
	// Create Group with users.
	//
	// x-displayName: "Create group with users"
	// Create group with given users.
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error)
	// Replace Group based on Id.
	//
	// x-displayName: "Replace group based on Id"
	// Replace group based on the given Id.
	ReplaceGroupById(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	// Patch Group based on Id.
	//
	// x-displayName: "Patch group based on Id"
	// Patch group based on the given Id.
	PatchGroupById(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*Group, error)
	// Delete Group based on Id.
	//
	// x-displayName: "Delete group based on Id"
	// Delete group based on the given Id.
	DeleteGroupById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type customPublicAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomPublicAPIClient(cc *grpc.ClientConn) CustomPublicAPIClient {
	return &customPublicAPIClient{cc}
}

func (c *customPublicAPIClient) ListServiceProviderConfig(ctx context.Context, in *schema.Empty, opts ...grpc.CallOption) (*ServiceProviderConfigResponse, error) {
	out := new(ServiceProviderConfigResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.scim.CustomPublicAPI/ListServiceProviderConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPublicAPIClient) ListResourceTypes(ctx context.Context, in *schema.Empty, opts ...grpc.CallOption) (*ResourceTypesResponse, error) {
	out := new(ResourceTypesResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.scim.CustomPublicAPI/ListResourceTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPublicAPIClient) GetResourceTypesById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, "/ves.io.schema.scim.CustomPublicAPI/GetResourceTypesById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPublicAPIClient) ListSchemas(ctx context.Context, in *schema.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/ves.io.schema.scim.CustomPublicAPI/ListSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPublicAPIClient) GetSchemaById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/ves.io.schema.scim.CustomPublicAPI/GetSchemaById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPublicAPIClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ves.io.schema.scim.CustomPublicAPI/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPublicAPIClient) ReplaceUserById(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ves.io.schema.scim.CustomPublicAPI/ReplaceUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPublicAPIClient) PatchUserById(ctx context.Context, in *PatchUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ves.io.schema.scim.CustomPublicAPI/PatchUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPublicAPIClient) DeleteUserById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/ves.io.schema.scim.CustomPublicAPI/DeleteUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPublicAPIClient) ListUsers(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, "/ves.io.schema.scim.CustomPublicAPI/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPublicAPIClient) GetUserById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ves.io.schema.scim.CustomPublicAPI/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPublicAPIClient) ListGroups(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*ListGroupResources, error) {
	out := new(ListGroupResources)
	err := c.cc.Invoke(ctx, "/ves.io.schema.scim.CustomPublicAPI/ListGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPublicAPIClient) GetGroupById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/ves.io.schema.scim.CustomPublicAPI/GetGroupById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPublicAPIClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/ves.io.schema.scim.CustomPublicAPI/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPublicAPIClient) ReplaceGroupById(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/ves.io.schema.scim.CustomPublicAPI/ReplaceGroupById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPublicAPIClient) PatchGroupById(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/ves.io.schema.scim.CustomPublicAPI/PatchGroupById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customPublicAPIClient) DeleteGroupById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/ves.io.schema.scim.CustomPublicAPI/DeleteGroupById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomPublicAPIServer is the server API for CustomPublicAPI service.
type CustomPublicAPIServer interface {
	// ListServiceProviderConfig
	//
	// x-displayName: "List service provider configs"
	//
	ListServiceProviderConfig(context.Context, *schema.Empty) (*ServiceProviderConfigResponse, error)
	// GetResourceTypes
	//
	// x-displayName: "Get supported resources type"
	//
	ListResourceTypes(context.Context, *schema.Empty) (*ResourceTypesResponse, error)
	// GetResourceTypes
	//
	// x-displayName: "Get supported resources type"
	//
	GetResourceTypesById(context.Context, *IdRequest) (*Resource, error)
	// Schemas
	//
	// x-displayName: "Schemas"
	//
	ListSchemas(context.Context, *schema.Empty) (*httpbody.HttpBody, error)
	// SchemasById
	//
	// x-displayName: "Schemas By ID"
	//
	GetSchemaById(context.Context, *IdRequest) (*httpbody.HttpBody, error)
	// Create User with roles
	//
	// x-displayName: "Create User with Role Assignment"
	// Create creates a user and namespace roles binding for this user
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	// Replace User with new values.
	//
	// x-displayName: "Update User and Role Assignments"
	// Replace updates user and namespace roles for this user
	ReplaceUserById(context.Context, *User) (*User, error)
	// PatchUserById patches User
	//
	// x-displayName: "Patch User"
	// Patch patches the fields for this user
	PatchUserById(context.Context, *PatchUserRequest) (*User, error)
	// Delete User by ID
	//
	// x-displayName: "Delete user by Id"
	// Delete user by Id.
	DeleteUserById(context.Context, *IdRequest) (*httpbody.HttpBody, error)
	// Get all the Users
	//
	// x-displayName: "Get all users"
	// Get all users.
	ListUsers(context.Context, *FilterRequest) (*ListUserResponse, error)
	// Get User with id
	//
	// x-displayName: "Get User with Id"
	// Get user by means of ID
	GetUserById(context.Context, *IdRequest) (*User, error)
	// List Group based on filter.
	//
	// x-displayName: "List group based on filters"
	// List groups based on the given filter.
	ListGroups(context.Context, *FilterRequest) (*ListGroupResources, error)
	// List Group based on Id.
	//
	// x-displayName: "List group based on Id"
	// List group based on the given Id.
	GetGroupById(context.Context, *IdRequest) (*Group, error)
	// Create Group with users.
	//
	// x-displayName: "Create group with users"
	// Create group with given users.
	CreateGroup(context.Context, *CreateGroupRequest) (*Group, error)
	// Replace Group based on Id.
	//
	// x-displayName: "Replace group based on Id"
	// Replace group based on the given Id.
	ReplaceGroupById(context.Context, *Group) (*Group, error)
	// Patch Group based on Id.
	//
	// x-displayName: "Patch group based on Id"
	// Patch group based on the given Id.
	PatchGroupById(context.Context, *PatchGroupRequest) (*Group, error)
	// Delete Group based on Id.
	//
	// x-displayName: "Delete group based on Id"
	// Delete group based on the given Id.
	DeleteGroupById(context.Context, *IdRequest) (*httpbody.HttpBody, error)
}

// UnimplementedCustomPublicAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomPublicAPIServer struct {
}

func (*UnimplementedCustomPublicAPIServer) ListServiceProviderConfig(ctx context.Context, req *schema.Empty) (*ServiceProviderConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceProviderConfig not implemented")
}
func (*UnimplementedCustomPublicAPIServer) ListResourceTypes(ctx context.Context, req *schema.Empty) (*ResourceTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceTypes not implemented")
}
func (*UnimplementedCustomPublicAPIServer) GetResourceTypesById(ctx context.Context, req *IdRequest) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceTypesById not implemented")
}
func (*UnimplementedCustomPublicAPIServer) ListSchemas(ctx context.Context, req *schema.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSchemas not implemented")
}
func (*UnimplementedCustomPublicAPIServer) GetSchemaById(ctx context.Context, req *IdRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemaById not implemented")
}
func (*UnimplementedCustomPublicAPIServer) CreateUser(ctx context.Context, req *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedCustomPublicAPIServer) ReplaceUserById(ctx context.Context, req *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceUserById not implemented")
}
func (*UnimplementedCustomPublicAPIServer) PatchUserById(ctx context.Context, req *PatchUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchUserById not implemented")
}
func (*UnimplementedCustomPublicAPIServer) DeleteUserById(ctx context.Context, req *IdRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserById not implemented")
}
func (*UnimplementedCustomPublicAPIServer) ListUsers(ctx context.Context, req *FilterRequest) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedCustomPublicAPIServer) GetUserById(ctx context.Context, req *IdRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (*UnimplementedCustomPublicAPIServer) ListGroups(ctx context.Context, req *FilterRequest) (*ListGroupResources, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (*UnimplementedCustomPublicAPIServer) GetGroupById(ctx context.Context, req *IdRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupById not implemented")
}
func (*UnimplementedCustomPublicAPIServer) CreateGroup(ctx context.Context, req *CreateGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedCustomPublicAPIServer) ReplaceGroupById(ctx context.Context, req *Group) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceGroupById not implemented")
}
func (*UnimplementedCustomPublicAPIServer) PatchGroupById(ctx context.Context, req *PatchGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchGroupById not implemented")
}
func (*UnimplementedCustomPublicAPIServer) DeleteGroupById(ctx context.Context, req *IdRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupById not implemented")
}

func RegisterCustomPublicAPIServer(s *grpc.Server, srv CustomPublicAPIServer) {
	s.RegisterService(&_CustomPublicAPI_serviceDesc, srv)
}

func _CustomPublicAPI_ListServiceProviderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPublicAPIServer).ListServiceProviderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.scim.CustomPublicAPI/ListServiceProviderConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPublicAPIServer).ListServiceProviderConfig(ctx, req.(*schema.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPublicAPI_ListResourceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPublicAPIServer).ListResourceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.scim.CustomPublicAPI/ListResourceTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPublicAPIServer).ListResourceTypes(ctx, req.(*schema.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPublicAPI_GetResourceTypesById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPublicAPIServer).GetResourceTypesById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.scim.CustomPublicAPI/GetResourceTypesById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPublicAPIServer).GetResourceTypesById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPublicAPI_ListSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPublicAPIServer).ListSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.scim.CustomPublicAPI/ListSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPublicAPIServer).ListSchemas(ctx, req.(*schema.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPublicAPI_GetSchemaById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPublicAPIServer).GetSchemaById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.scim.CustomPublicAPI/GetSchemaById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPublicAPIServer).GetSchemaById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPublicAPI_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPublicAPIServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.scim.CustomPublicAPI/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPublicAPIServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPublicAPI_ReplaceUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPublicAPIServer).ReplaceUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.scim.CustomPublicAPI/ReplaceUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPublicAPIServer).ReplaceUserById(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPublicAPI_PatchUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPublicAPIServer).PatchUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.scim.CustomPublicAPI/PatchUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPublicAPIServer).PatchUserById(ctx, req.(*PatchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPublicAPI_DeleteUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPublicAPIServer).DeleteUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.scim.CustomPublicAPI/DeleteUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPublicAPIServer).DeleteUserById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPublicAPI_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPublicAPIServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.scim.CustomPublicAPI/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPublicAPIServer).ListUsers(ctx, req.(*FilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPublicAPI_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPublicAPIServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.scim.CustomPublicAPI/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPublicAPIServer).GetUserById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPublicAPI_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPublicAPIServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.scim.CustomPublicAPI/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPublicAPIServer).ListGroups(ctx, req.(*FilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPublicAPI_GetGroupById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPublicAPIServer).GetGroupById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.scim.CustomPublicAPI/GetGroupById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPublicAPIServer).GetGroupById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPublicAPI_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPublicAPIServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.scim.CustomPublicAPI/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPublicAPIServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPublicAPI_ReplaceGroupById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPublicAPIServer).ReplaceGroupById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.scim.CustomPublicAPI/ReplaceGroupById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPublicAPIServer).ReplaceGroupById(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPublicAPI_PatchGroupById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPublicAPIServer).PatchGroupById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.scim.CustomPublicAPI/PatchGroupById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPublicAPIServer).PatchGroupById(ctx, req.(*PatchGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomPublicAPI_DeleteGroupById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomPublicAPIServer).DeleteGroupById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.scim.CustomPublicAPI/DeleteGroupById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomPublicAPIServer).DeleteGroupById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomPublicAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.scim.CustomPublicAPI",
	HandlerType: (*CustomPublicAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServiceProviderConfig",
			Handler:    _CustomPublicAPI_ListServiceProviderConfig_Handler,
		},
		{
			MethodName: "ListResourceTypes",
			Handler:    _CustomPublicAPI_ListResourceTypes_Handler,
		},
		{
			MethodName: "GetResourceTypesById",
			Handler:    _CustomPublicAPI_GetResourceTypesById_Handler,
		},
		{
			MethodName: "ListSchemas",
			Handler:    _CustomPublicAPI_ListSchemas_Handler,
		},
		{
			MethodName: "GetSchemaById",
			Handler:    _CustomPublicAPI_GetSchemaById_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _CustomPublicAPI_CreateUser_Handler,
		},
		{
			MethodName: "ReplaceUserById",
			Handler:    _CustomPublicAPI_ReplaceUserById_Handler,
		},
		{
			MethodName: "PatchUserById",
			Handler:    _CustomPublicAPI_PatchUserById_Handler,
		},
		{
			MethodName: "DeleteUserById",
			Handler:    _CustomPublicAPI_DeleteUserById_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _CustomPublicAPI_ListUsers_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _CustomPublicAPI_GetUserById_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _CustomPublicAPI_ListGroups_Handler,
		},
		{
			MethodName: "GetGroupById",
			Handler:    _CustomPublicAPI_GetGroupById_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _CustomPublicAPI_CreateGroup_Handler,
		},
		{
			MethodName: "ReplaceGroupById",
			Handler:    _CustomPublicAPI_ReplaceGroupById_Handler,
		},
		{
			MethodName: "PatchGroupById",
			Handler:    _CustomPublicAPI_PatchGroupById_Handler,
		},
		{
			MethodName: "DeleteGroupById",
			Handler:    _CustomPublicAPI_DeleteGroupById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/scim/public_customapi.proto",
}
