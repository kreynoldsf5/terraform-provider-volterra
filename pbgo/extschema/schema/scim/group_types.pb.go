// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/scim/group_types.proto

package scim

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GroupMembers
//
// x-displayName: "GroupMembers"
// GroupMembers.
type GroupMembers struct {
	// id
	//
	// x-displayName: "id"
	// x-example: "value"
	// unique Id of the users
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GroupMembers) Reset()      { *m = GroupMembers{} }
func (*GroupMembers) ProtoMessage() {}
func (*GroupMembers) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158b7dc2a17fa6b, []int{0}
}
func (m *GroupMembers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMembers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GroupMembers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMembers.Merge(m, src)
}
func (m *GroupMembers) XXX_Size() int {
	return m.Size()
}
func (m *GroupMembers) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMembers.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMembers proto.InternalMessageInfo

func (m *GroupMembers) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Group
//
// x-displayName: "Group"
// Group.
type Group struct {
	// schemas
	//
	// x-displayName: "schemas"
	// x-example: "schema per scim spec."
	// schemas per scim spec.
	Schemas []string `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
	// id
	//
	// x-displayName: "id"
	// x-example: "value"
	// unique Id for the group.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// meta
	//
	// x-displayName: "meta"
	// x-example: "meta information for the group"
	// meta information for the group.
	Meta *Meta `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	// displayName
	//
	// x-displayName: "displayName"
	// x-example: "group display name"
	// display name for the group.
	DisplayName string `protobuf:"bytes,4,opt,name=displayName,proto3" json:"displayName,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "group name"
	// display name for the group.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// GroupMembers
	//
	// x-displayName: "GroupMembers"
	// x-example: "Users with unique Id"
	// users with unique Id.
	Members []*GroupMembers `protobuf:"bytes,5,rep,name=members,proto3" json:"members,omitempty"`
	// sync_id
	//
	// x-displayName: "sync_id"
	// x-example: "value"
	// Is available only if sync is enabled.
	SyncId string `protobuf:"bytes,7,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
}

func (m *Group) Reset()      { *m = Group{} }
func (*Group) ProtoMessage() {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158b7dc2a17fa6b, []int{1}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetSchemas() []string {
	if m != nil {
		return m.Schemas
	}
	return nil
}

func (m *Group) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Group) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Group) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetMembers() []*GroupMembers {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Group) GetSyncId() string {
	if m != nil {
		return m.SyncId
	}
	return ""
}

// CreateGroupRequest
//
// x-displayName: "CreateGroupRequest"
// Request for creating group.
type CreateGroupRequest struct {
	// schemas
	//
	// x-displayName: "schemas"
	// x-example: "scim spec defined schemas"
	// schemas defined as per scim spec.
	Schemas []string `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
	// displayName
	//
	// x-displayName: "displayName"
	// x-example: "display name"
	// Group display name.
	DisplayName string `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	// members
	//
	// x-displayName: "members"
	// x-example: "List group members i.e users"
	// List of group members reference.
	Members []*GroupMembers `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
	// meta
	//
	// x-displayName: "meta"
	// x-example: "meta information for the group"
	// meta information about group.
	Meta *Meta `protobuf:"bytes,4,opt,name=meta,proto3" json:"meta,omitempty"`
	// SyncId
	//
	// x-displayName: "sync_id"
	// x-example: "sync enabled"
	// Defines is the sync is enabled on the group.
	SyncId string `protobuf:"bytes,6,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
}

func (m *CreateGroupRequest) Reset()      { *m = CreateGroupRequest{} }
func (*CreateGroupRequest) ProtoMessage() {}
func (*CreateGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158b7dc2a17fa6b, []int{2}
}
func (m *CreateGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGroupRequest.Merge(m, src)
}
func (m *CreateGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGroupRequest proto.InternalMessageInfo

func (m *CreateGroupRequest) GetSchemas() []string {
	if m != nil {
		return m.Schemas
	}
	return nil
}

func (m *CreateGroupRequest) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *CreateGroupRequest) GetMembers() []*GroupMembers {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CreateGroupRequest) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CreateGroupRequest) GetSyncId() string {
	if m != nil {
		return m.SyncId
	}
	return ""
}

// ListGroup;resources
//
// x-displayName: "ListGroupResources"
// List group objects.
type ListGroupResources struct {
	// schemas
	//
	// x-displayName: "schemas"
	// x-example: "scim spec referred schema"
	// schema defined as per scim spec.
	Schemas []string `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
	// id
	//
	// x-displayName: "totalResults"
	// x-example: "10 15"
	// totalGroup objects available.
	TotalResults uint64 `protobuf:"varint,2,opt,name=totalResults,proto3" json:"totalResults,omitempty"`
	// groups
	//
	// x-displayName: "groups"
	// x-example: "list of groups"
	// List of available groups.
	Groups []*Group `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *ListGroupResources) Reset()      { *m = ListGroupResources{} }
func (*ListGroupResources) ProtoMessage() {}
func (*ListGroupResources) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158b7dc2a17fa6b, []int{3}
}
func (m *ListGroupResources) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListGroupResources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ListGroupResources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGroupResources.Merge(m, src)
}
func (m *ListGroupResources) XXX_Size() int {
	return m.Size()
}
func (m *ListGroupResources) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGroupResources.DiscardUnknown(m)
}

var xxx_messageInfo_ListGroupResources proto.InternalMessageInfo

func (m *ListGroupResources) GetSchemas() []string {
	if m != nil {
		return m.Schemas
	}
	return nil
}

func (m *ListGroupResources) GetTotalResults() uint64 {
	if m != nil {
		return m.TotalResults
	}
	return 0
}

func (m *ListGroupResources) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// id
//
// x-displayName: "id"
// x-example: "value"
// unique Id for the group.
type GroupOperation struct {
	// op
	//
	// x-displayName: "op"
	// x-example: "add, delete, replace, remove"
	// unique Id for the group.
	Op string `protobuf:"bytes,1,opt,name=op,proto3" json:"op,omitempty"`
	// path
	//
	// x-displayName: "path"
	// x-example: "group field path to be modified"
	// x-required
	// unique path for the group field to be modified.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// value
	//
	// x-displayName: "value"
	// x-example: "value to be updated"
	// x-required
	// value specifying what section of the group needs to be modified.
	Value *Group `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GroupOperation) Reset()      { *m = GroupOperation{} }
func (*GroupOperation) ProtoMessage() {}
func (*GroupOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158b7dc2a17fa6b, []int{4}
}
func (m *GroupOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GroupOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupOperation.Merge(m, src)
}
func (m *GroupOperation) XXX_Size() int {
	return m.Size()
}
func (m *GroupOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupOperation.DiscardUnknown(m)
}

var xxx_messageInfo_GroupOperation proto.InternalMessageInfo

func (m *GroupOperation) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *GroupOperation) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *GroupOperation) GetValue() *Group {
	if m != nil {
		return m.Value
	}
	return nil
}

// PatchGroupOperation
//
// x-displayName: "PatchGroupOperation"
// Patch operation to modify group.
type PatchGroupRequest struct {
	// schemas
	//
	// x-displayName: "schemas"
	// x-example: "schemas per scim spec"
	// x-required
	// schemas as per scim spec.
	Schemas []string `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
	// Group Operation
	//
	// x-displayName: "GroupOperation"
	// x-example: "add, remove, replace, delete"
	// x-required
	// Operation to modify or delete group.
	Operation *GroupOperation `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	// id
	//
	// x-displayName: "id"
	// x-example: "value"
	// x-required
	// unique Id for the group.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *PatchGroupRequest) Reset()      { *m = PatchGroupRequest{} }
func (*PatchGroupRequest) ProtoMessage() {}
func (*PatchGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0158b7dc2a17fa6b, []int{5}
}
func (m *PatchGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PatchGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PatchGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatchGroupRequest.Merge(m, src)
}
func (m *PatchGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *PatchGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PatchGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PatchGroupRequest proto.InternalMessageInfo

func (m *PatchGroupRequest) GetSchemas() []string {
	if m != nil {
		return m.Schemas
	}
	return nil
}

func (m *PatchGroupRequest) GetOperation() *GroupOperation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *PatchGroupRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*GroupMembers)(nil), "ves.io.schema.scim.GroupMembers")
	golang_proto.RegisterType((*GroupMembers)(nil), "ves.io.schema.scim.GroupMembers")
	proto.RegisterType((*Group)(nil), "ves.io.schema.scim.Group")
	golang_proto.RegisterType((*Group)(nil), "ves.io.schema.scim.Group")
	proto.RegisterType((*CreateGroupRequest)(nil), "ves.io.schema.scim.CreateGroupRequest")
	golang_proto.RegisterType((*CreateGroupRequest)(nil), "ves.io.schema.scim.CreateGroupRequest")
	proto.RegisterType((*ListGroupResources)(nil), "ves.io.schema.scim.ListGroupResources")
	golang_proto.RegisterType((*ListGroupResources)(nil), "ves.io.schema.scim.ListGroupResources")
	proto.RegisterType((*GroupOperation)(nil), "ves.io.schema.scim.GroupOperation")
	golang_proto.RegisterType((*GroupOperation)(nil), "ves.io.schema.scim.GroupOperation")
	proto.RegisterType((*PatchGroupRequest)(nil), "ves.io.schema.scim.PatchGroupRequest")
	golang_proto.RegisterType((*PatchGroupRequest)(nil), "ves.io.schema.scim.PatchGroupRequest")
}

func init() {
	proto.RegisterFile("ves.io/schema/scim/group_types.proto", fileDescriptor_0158b7dc2a17fa6b)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/scim/group_types.proto", fileDescriptor_0158b7dc2a17fa6b)
}

var fileDescriptor_0158b7dc2a17fa6b = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xbf, 0x8f, 0xd3, 0x30,
	0x14, 0x8e, 0xfb, 0x23, 0x55, 0xdd, 0xd3, 0x09, 0xbc, 0x90, 0x2b, 0x92, 0x15, 0x55, 0x08, 0x75,
	0xa0, 0x89, 0x28, 0xdb, 0x4d, 0x08, 0x06, 0x40, 0xe2, 0x00, 0x65, 0x64, 0xa9, 0xdc, 0xd4, 0x97,
	0x46, 0x34, 0xb5, 0xb1, 0x9d, 0x42, 0x27, 0x98, 0xd8, 0x90, 0xf8, 0x33, 0xf8, 0x1f, 0x58, 0x18,
	0x11, 0x53, 0xc7, 0x4a, 0x2c, 0x34, 0x5d, 0x18, 0x4f, 0xfc, 0x05, 0x28, 0x4e, 0xd2, 0x4b, 0xb9,
	0x5e, 0x75, 0xb7, 0xf9, 0xe5, 0x7d, 0xef, 0x7b, 0xdf, 0xf7, 0xf2, 0x6c, 0x78, 0x67, 0x46, 0xa5,
	0x13, 0x32, 0x57, 0xfa, 0x63, 0x1a, 0x11, 0x57, 0xfa, 0x61, 0xe4, 0x06, 0x82, 0xc5, 0x7c, 0xa0,
	0xe6, 0x9c, 0x4a, 0x87, 0x0b, 0xa6, 0x18, 0x42, 0x19, 0xca, 0xc9, 0x50, 0x4e, 0x8a, 0x6a, 0xf7,
	0x82, 0x50, 0x8d, 0xe3, 0xa1, 0xe3, 0xb3, 0xc8, 0x0d, 0x58, 0xc0, 0x5c, 0x0d, 0x1d, 0xc6, 0xa7,
	0x3a, 0xd2, 0x81, 0x3e, 0x65, 0x14, 0xed, 0xdb, 0xdb, 0x8d, 0x18, 0x57, 0x21, 0x9b, 0xe6, 0xfc,
	0x6d, 0xbc, 0x43, 0x45, 0xa9, 0x7f, 0xfb, 0x68, 0x3b, 0x5f, 0x4e, 0xd9, 0xdb, 0xa9, 0x59, 0x48,
	0xdf, 0x0d, 0xb6, 0xc8, 0x3b, 0x77, 0xe1, 0xc1, 0x93, 0xd4, 0xd1, 0x09, 0x8d, 0x86, 0x54, 0x48,
	0x74, 0x08, 0x2b, 0xe1, 0xc8, 0x02, 0x36, 0xe8, 0x36, 0xbd, 0x4a, 0x38, 0x3a, 0x36, 0x7f, 0x7e,
	0x03, 0x95, 0x1b, 0xa0, 0xf3, 0x17, 0xc0, 0xba, 0x06, 0x22, 0x0b, 0x36, 0x32, 0x3a, 0x69, 0x01,
	0xbb, 0xda, 0x6d, 0x7a, 0x45, 0x98, 0xd7, 0x56, 0x8a, 0x5a, 0x74, 0x0f, 0xd6, 0x22, 0xaa, 0x88,
	0x55, 0xb5, 0x41, 0xb7, 0xd5, 0xb7, 0x9c, 0x8b, 0x73, 0x72, 0x4e, 0xa8, 0x22, 0x9e, 0x46, 0x21,
	0x1b, 0xb6, 0x46, 0xa1, 0xe4, 0x13, 0x32, 0x7f, 0x41, 0x22, 0x6a, 0xd5, 0x34, 0x4d, 0xf9, 0x13,
	0x42, 0xb0, 0x36, 0x4d, 0x53, 0xa6, 0x4e, 0xe9, 0x33, 0x3a, 0x86, 0x8d, 0x28, 0x93, 0x6e, 0xd5,
	0xed, 0x6a, 0xb7, 0xd5, 0xb7, 0x77, 0xb5, 0x29, 0x5b, 0xf4, 0x8a, 0x02, 0x74, 0x0b, 0x36, 0xe4,
	0x7c, 0xea, 0x0f, 0xc2, 0x91, 0xd5, 0xd0, 0x94, 0x66, 0x1a, 0x3e, 0x3b, 0x37, 0xfd, 0x0b, 0x40,
	0xf4, 0x58, 0x50, 0xa2, 0xa8, 0x26, 0xf0, 0xe8, 0xdb, 0x98, 0x4a, 0xb5, 0x67, 0x02, 0xff, 0x79,
	0xa8, 0x5c, 0xf4, 0x50, 0xd2, 0x5b, 0xbd, 0xae, 0xde, 0x62, 0x9e, 0xb5, 0x2b, 0xcd, 0xb3, 0xe4,
	0xce, 0xdc, 0xe9, 0xee, 0x33, 0x80, 0xe8, 0x79, 0x28, 0x55, 0xee, 0x4d, 0xb2, 0x58, 0xf8, 0x54,
	0xee, 0x71, 0xd7, 0x81, 0x07, 0x8a, 0x29, 0x32, 0xf1, 0xa8, 0x8c, 0x27, 0x4a, 0x6a, 0x7b, 0x35,
	0x6f, 0xeb, 0x1b, 0xba, 0x0f, 0x4d, 0x7d, 0x43, 0x0a, 0x7b, 0x47, 0x97, 0xda, 0xf3, 0x72, 0xe0,
	0x46, 0x4f, 0x04, 0x0f, 0x75, 0xe2, 0x25, 0xa7, 0x82, 0xa4, 0x3b, 0x9a, 0x2e, 0x14, 0xe3, 0xc5,
	0x32, 0x32, 0x9e, 0x2e, 0x00, 0x27, 0x6a, 0x9c, 0xcf, 0x55, 0x9f, 0x91, 0x0b, 0xeb, 0x33, 0x32,
	0x89, 0x69, 0xbe, 0x65, 0x7b, 0xfa, 0x65, 0xb8, 0x4d, 0xbb, 0x0f, 0xf0, 0xe6, 0x2b, 0xa2, 0xfc,
	0xf1, 0x15, 0x7f, 0xed, 0x43, 0xd8, 0x64, 0x85, 0x30, 0x2d, 0xa0, 0xd5, 0xef, 0x5c, 0xda, 0x6b,
	0x63, 0xc1, 0x3b, 0x2f, 0xca, 0xaf, 0x47, 0xb5, 0xb8, 0x1e, 0x8f, 0x3e, 0x81, 0xc5, 0x0a, 0x1b,
	0xcb, 0x15, 0x36, 0xce, 0x56, 0x18, 0x7c, 0x4c, 0x30, 0xf8, 0x9a, 0x60, 0xf0, 0x23, 0xc1, 0x60,
	0x91, 0x60, 0xb0, 0x4c, 0x30, 0xf8, 0x9d, 0x60, 0xf0, 0x27, 0xc1, 0xc6, 0x59, 0x82, 0xc1, 0x97,
	0x35, 0x36, 0xbe, 0xaf, 0x31, 0x58, 0xac, 0xb1, 0xb1, 0x5c, 0x63, 0xe3, 0xf5, 0xd3, 0x80, 0xf1,
	0x37, 0x81, 0x33, 0x63, 0x13, 0x45, 0x85, 0x20, 0x4e, 0x2c, 0x5d, 0x7d, 0x38, 0x65, 0x22, 0xea,
	0x71, 0xc1, 0x66, 0xe1, 0x88, 0x8a, 0x5e, 0x91, 0x76, 0xf9, 0x30, 0x60, 0x2e, 0x7d, 0xaf, 0x36,
	0xaf, 0xc8, 0xe6, 0x31, 0x19, 0x9a, 0xfa, 0x29, 0x78, 0xf0, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xe0,
	0x46, 0x1e, 0xef, 0xef, 0x04, 0x00, 0x00,
}

func (this *GroupMembers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GroupMembers)
	if !ok {
		that2, ok := that.(GroupMembers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Group) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Group)
	if !ok {
		that2, ok := that.(Group)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Schemas) != len(that1.Schemas) {
		return false
	}
	for i := range this.Schemas {
		if this.Schemas[i] != that1.Schemas[i] {
			return false
		}
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Meta.Equal(that1.Meta) {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	if this.SyncId != that1.SyncId {
		return false
	}
	return true
}
func (this *CreateGroupRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateGroupRequest)
	if !ok {
		that2, ok := that.(CreateGroupRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Schemas) != len(that1.Schemas) {
		return false
	}
	for i := range this.Schemas {
		if this.Schemas[i] != that1.Schemas[i] {
			return false
		}
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	if !this.Meta.Equal(that1.Meta) {
		return false
	}
	if this.SyncId != that1.SyncId {
		return false
	}
	return true
}
func (this *ListGroupResources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListGroupResources)
	if !ok {
		that2, ok := that.(ListGroupResources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Schemas) != len(that1.Schemas) {
		return false
	}
	for i := range this.Schemas {
		if this.Schemas[i] != that1.Schemas[i] {
			return false
		}
	}
	if this.TotalResults != that1.TotalResults {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *GroupOperation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GroupOperation)
	if !ok {
		that2, ok := that.(GroupOperation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Op != that1.Op {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *PatchGroupRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PatchGroupRequest)
	if !ok {
		that2, ok := that.(PatchGroupRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Schemas) != len(that1.Schemas) {
		return false
	}
	for i := range this.Schemas {
		if this.Schemas[i] != that1.Schemas[i] {
			return false
		}
	}
	if !this.Operation.Equal(that1.Operation) {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *GroupMembers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&scim.GroupMembers{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Group) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&scim.Group{")
	s = append(s, "Schemas: "+fmt.Sprintf("%#v", this.Schemas)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Meta != nil {
		s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	}
	s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	s = append(s, "SyncId: "+fmt.Sprintf("%#v", this.SyncId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateGroupRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&scim.CreateGroupRequest{")
	s = append(s, "Schemas: "+fmt.Sprintf("%#v", this.Schemas)+",\n")
	s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	if this.Meta != nil {
		s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	}
	s = append(s, "SyncId: "+fmt.Sprintf("%#v", this.SyncId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListGroupResources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&scim.ListGroupResources{")
	s = append(s, "Schemas: "+fmt.Sprintf("%#v", this.Schemas)+",\n")
	s = append(s, "TotalResults: "+fmt.Sprintf("%#v", this.TotalResults)+",\n")
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GroupOperation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&scim.GroupOperation{")
	s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PatchGroupRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&scim.PatchGroupRequest{")
	s = append(s, "Schemas: "+fmt.Sprintf("%#v", this.Schemas)+",\n")
	if this.Operation != nil {
		s = append(s, "Operation: "+fmt.Sprintf("%#v", this.Operation)+",\n")
	}
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGroupTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GroupMembers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMembers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMembers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintGroupTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SyncId) > 0 {
		i -= len(m.SyncId)
		copy(dAtA[i:], m.SyncId)
		i = encodeVarintGroupTypes(dAtA, i, uint64(len(m.SyncId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGroupTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroupTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintGroupTypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x22
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroupTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintGroupTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Schemas) > 0 {
		for iNdEx := len(m.Schemas) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Schemas[iNdEx])
			copy(dAtA[i:], m.Schemas[iNdEx])
			i = encodeVarintGroupTypes(dAtA, i, uint64(len(m.Schemas[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SyncId) > 0 {
		i -= len(m.SyncId)
		copy(dAtA[i:], m.SyncId)
		i = encodeVarintGroupTypes(dAtA, i, uint64(len(m.SyncId)))
		i--
		dAtA[i] = 0x32
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroupTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroupTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintGroupTypes(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Schemas) > 0 {
		for iNdEx := len(m.Schemas) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Schemas[iNdEx])
			copy(dAtA[i:], m.Schemas[iNdEx])
			i = encodeVarintGroupTypes(dAtA, i, uint64(len(m.Schemas[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListGroupResources) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGroupResources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListGroupResources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroupTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TotalResults != 0 {
		i = encodeVarintGroupTypes(dAtA, i, uint64(m.TotalResults))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Schemas) > 0 {
		for iNdEx := len(m.Schemas) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Schemas[iNdEx])
			copy(dAtA[i:], m.Schemas[iNdEx])
			i = encodeVarintGroupTypes(dAtA, i, uint64(len(m.Schemas[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GroupOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroupTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintGroupTypes(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Op) > 0 {
		i -= len(m.Op)
		copy(dAtA[i:], m.Op)
		i = encodeVarintGroupTypes(dAtA, i, uint64(len(m.Op)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PatchGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PatchGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PatchGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintGroupTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Operation != nil {
		{
			size, err := m.Operation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroupTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Schemas) > 0 {
		for iNdEx := len(m.Schemas) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Schemas[iNdEx])
			copy(dAtA[i:], m.Schemas[iNdEx])
			i = encodeVarintGroupTypes(dAtA, i, uint64(len(m.Schemas[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGroupTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovGroupTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GroupMembers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGroupTypes(uint64(l))
	}
	return n
}

func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Schemas) > 0 {
		for _, s := range m.Schemas {
			l = len(s)
			n += 1 + l + sovGroupTypes(uint64(l))
		}
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGroupTypes(uint64(l))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovGroupTypes(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGroupTypes(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovGroupTypes(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGroupTypes(uint64(l))
	}
	l = len(m.SyncId)
	if l > 0 {
		n += 1 + l + sovGroupTypes(uint64(l))
	}
	return n
}

func (m *CreateGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Schemas) > 0 {
		for _, s := range m.Schemas {
			l = len(s)
			n += 1 + l + sovGroupTypes(uint64(l))
		}
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGroupTypes(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovGroupTypes(uint64(l))
		}
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovGroupTypes(uint64(l))
	}
	l = len(m.SyncId)
	if l > 0 {
		n += 1 + l + sovGroupTypes(uint64(l))
	}
	return n
}

func (m *ListGroupResources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Schemas) > 0 {
		for _, s := range m.Schemas {
			l = len(s)
			n += 1 + l + sovGroupTypes(uint64(l))
		}
	}
	if m.TotalResults != 0 {
		n += 1 + sovGroupTypes(uint64(m.TotalResults))
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovGroupTypes(uint64(l))
		}
	}
	return n
}

func (m *GroupOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Op)
	if l > 0 {
		n += 1 + l + sovGroupTypes(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovGroupTypes(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovGroupTypes(uint64(l))
	}
	return n
}

func (m *PatchGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Schemas) > 0 {
		for _, s := range m.Schemas {
			l = len(s)
			n += 1 + l + sovGroupTypes(uint64(l))
		}
	}
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovGroupTypes(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGroupTypes(uint64(l))
	}
	return n
}

func sovGroupTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGroupTypes(x uint64) (n int) {
	return sovGroupTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GroupMembers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GroupMembers{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Group) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMembers := "[]*GroupMembers{"
	for _, f := range this.Members {
		repeatedStringForMembers += strings.Replace(f.String(), "GroupMembers", "GroupMembers", 1) + ","
	}
	repeatedStringForMembers += "}"
	s := strings.Join([]string{`&Group{`,
		`Schemas:` + fmt.Sprintf("%v", this.Schemas) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Meta:` + strings.Replace(fmt.Sprintf("%v", this.Meta), "Meta", "Meta", 1) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`Members:` + repeatedStringForMembers + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`SyncId:` + fmt.Sprintf("%v", this.SyncId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateGroupRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMembers := "[]*GroupMembers{"
	for _, f := range this.Members {
		repeatedStringForMembers += strings.Replace(f.String(), "GroupMembers", "GroupMembers", 1) + ","
	}
	repeatedStringForMembers += "}"
	s := strings.Join([]string{`&CreateGroupRequest{`,
		`Schemas:` + fmt.Sprintf("%v", this.Schemas) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`Members:` + repeatedStringForMembers + `,`,
		`Meta:` + strings.Replace(fmt.Sprintf("%v", this.Meta), "Meta", "Meta", 1) + `,`,
		`SyncId:` + fmt.Sprintf("%v", this.SyncId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListGroupResources) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGroups := "[]*Group{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(f.String(), "Group", "Group", 1) + ","
	}
	repeatedStringForGroups += "}"
	s := strings.Join([]string{`&ListGroupResources{`,
		`Schemas:` + fmt.Sprintf("%v", this.Schemas) + `,`,
		`TotalResults:` + fmt.Sprintf("%v", this.TotalResults) + `,`,
		`Groups:` + repeatedStringForGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *GroupOperation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GroupOperation{`,
		`Op:` + fmt.Sprintf("%v", this.Op) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Value:` + strings.Replace(this.Value.String(), "Group", "Group", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PatchGroupRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PatchGroupRequest{`,
		`Schemas:` + fmt.Sprintf("%v", this.Schemas) + `,`,
		`Operation:` + strings.Replace(this.Operation.String(), "GroupOperation", "GroupOperation", 1) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGroupTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GroupMembers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroupTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMembers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMembers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroupTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroupTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schemas = append(m.Schemas, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &Meta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &GroupMembers{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SyncId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroupTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroupTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schemas = append(m.Schemas, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &GroupMembers{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &Meta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SyncId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroupTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGroupResources) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroupTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGroupResources: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGroupResources: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schemas = append(m.Schemas, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalResults", wireType)
			}
			m.TotalResults = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalResults |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroupTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroupTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Op = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Group{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroupTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PatchGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroupTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatchGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatchGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schemas = append(m.Schemas, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &GroupOperation{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroupTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroupTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGroupTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroupTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroupTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroupTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGroupTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGroupTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGroupTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroupTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
