//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package scim

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	google_api "google.golang.org/genproto/googleapis/api/httpbody"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomPublicAPI GRPC Client satisfying server.CustomClient
type CustomPublicAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomPublicAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomPublicAPIGrpcClient) doRPCCreateGroup(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &CreateGroupRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.CreateGroupRequest", yamlReq)
	}
	rsp, err := c.grpcClient.CreateGroup(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCCreateUser(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &CreateUserRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.CreateUserRequest", yamlReq)
	}
	rsp, err := c.grpcClient.CreateUser(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCDeleteGroupById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest", yamlReq)
	}
	rsp, err := c.grpcClient.DeleteGroupById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCDeleteUserById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest", yamlReq)
	}
	rsp, err := c.grpcClient.DeleteUserById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCGetGroupById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetGroupById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCGetResourceTypesById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetResourceTypesById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCGetSchemaById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetSchemaById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCGetUserById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetUserById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCListGroups(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &FilterRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.FilterRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ListGroups(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCListResourceTypes(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ves_io_schema.Empty{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.Empty", yamlReq)
	}
	rsp, err := c.grpcClient.ListResourceTypes(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCListSchemas(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ves_io_schema.Empty{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.Empty", yamlReq)
	}
	rsp, err := c.grpcClient.ListSchemas(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCListServiceProviderConfig(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ves_io_schema.Empty{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.Empty", yamlReq)
	}
	rsp, err := c.grpcClient.ListServiceProviderConfig(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCListUsers(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &FilterRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.FilterRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ListUsers(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCPatchGroupById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &PatchGroupRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.PatchGroupRequest", yamlReq)
	}
	rsp, err := c.grpcClient.PatchGroupById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCPatchUserById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &PatchUserRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.PatchUserRequest", yamlReq)
	}
	rsp, err := c.grpcClient.PatchUserById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCReplaceGroupById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &Group{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.Group", yamlReq)
	}
	rsp, err := c.grpcClient.ReplaceGroupById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCReplaceUserById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &User{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.User", yamlReq)
	}
	rsp, err := c.grpcClient.ReplaceUserById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomPublicAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomPublicAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomPublicAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["CreateGroup"] = ccl.doRPCCreateGroup

	rpcFns["CreateUser"] = ccl.doRPCCreateUser

	rpcFns["DeleteGroupById"] = ccl.doRPCDeleteGroupById

	rpcFns["DeleteUserById"] = ccl.doRPCDeleteUserById

	rpcFns["GetGroupById"] = ccl.doRPCGetGroupById

	rpcFns["GetResourceTypesById"] = ccl.doRPCGetResourceTypesById

	rpcFns["GetSchemaById"] = ccl.doRPCGetSchemaById

	rpcFns["GetUserById"] = ccl.doRPCGetUserById

	rpcFns["ListGroups"] = ccl.doRPCListGroups

	rpcFns["ListResourceTypes"] = ccl.doRPCListResourceTypes

	rpcFns["ListSchemas"] = ccl.doRPCListSchemas

	rpcFns["ListServiceProviderConfig"] = ccl.doRPCListServiceProviderConfig

	rpcFns["ListUsers"] = ccl.doRPCListUsers

	rpcFns["PatchGroupById"] = ccl.doRPCPatchGroupById

	rpcFns["PatchUserById"] = ccl.doRPCPatchUserById

	rpcFns["ReplaceGroupById"] = ccl.doRPCReplaceGroupById

	rpcFns["ReplaceUserById"] = ccl.doRPCReplaceUserById

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomPublicAPI REST Client satisfying server.CustomClient
type CustomPublicAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomPublicAPIRestClient) doRPCCreateGroup(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &CreateGroupRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.CreateGroupRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("displayName", fmt.Sprintf("%v", req.DisplayName))
		q.Add("id", fmt.Sprintf("%v", req.Id))
		q.Add("members", fmt.Sprintf("%v", req.Members))
		q.Add("meta", fmt.Sprintf("%v", req.Meta))
		q.Add("schemas", fmt.Sprintf("%v", req.Schemas))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Group{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.Group", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCCreateUser(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &CreateUserRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.CreateUserRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("active", fmt.Sprintf("%v", req.Active))
		q.Add("displayName", fmt.Sprintf("%v", req.DisplayName))
		q.Add("emails", fmt.Sprintf("%v", req.Emails))
		q.Add("externalId", fmt.Sprintf("%v", req.ExternalId))
		q.Add("groups", fmt.Sprintf("%v", req.Groups))
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("roles", fmt.Sprintf("%v", req.Roles))
		q.Add("schemas", fmt.Sprintf("%v", req.Schemas))
		q.Add("userName", fmt.Sprintf("%v", req.UserName))
		q.Add("userType", fmt.Sprintf("%v", req.UserType))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &User{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.User", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCDeleteGroupById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("id", fmt.Sprintf("%v", req.Id))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &google_api.HttpBody{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		// server strips HTTP Body proto message and sends only data, re-build it here
		pbRsp.ContentType = rsp.Header.Get("Content-Type")
		pbRsp.Data = body

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCDeleteUserById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("id", fmt.Sprintf("%v", req.Id))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &google_api.HttpBody{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		// server strips HTTP Body proto message and sends only data, re-build it here
		pbRsp.ContentType = rsp.Header.Get("Content-Type")
		pbRsp.Data = body

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCGetGroupById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("id", fmt.Sprintf("%v", req.Id))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Group{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.Group", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCGetResourceTypesById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("id", fmt.Sprintf("%v", req.Id))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Resource{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.Resource", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCGetSchemaById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("id", fmt.Sprintf("%v", req.Id))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &google_api.HttpBody{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		// server strips HTTP Body proto message and sends only data, re-build it here
		pbRsp.ContentType = rsp.Header.Get("Content-Type")
		pbRsp.Data = body

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCGetUserById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("id", fmt.Sprintf("%v", req.Id))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &User{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.User", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCListGroups(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &FilterRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.FilterRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("count", fmt.Sprintf("%v", req.Count))
		q.Add("filter", fmt.Sprintf("%v", req.Filter))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ListGroupResources{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.ListGroupResources", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCListResourceTypes(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ves_io_schema.Empty{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.Empty: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ResourceTypesResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.ResourceTypesResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCListSchemas(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ves_io_schema.Empty{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.Empty: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &google_api.HttpBody{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		// server strips HTTP Body proto message and sends only data, re-build it here
		pbRsp.ContentType = rsp.Header.Get("Content-Type")
		pbRsp.Data = body

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCListServiceProviderConfig(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ves_io_schema.Empty{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.Empty: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ServiceProviderConfigResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.ServiceProviderConfigResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCListUsers(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &FilterRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.FilterRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("count", fmt.Sprintf("%v", req.Count))
		q.Add("filter", fmt.Sprintf("%v", req.Filter))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ListUserResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.ListUserResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCPatchGroupById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &PatchGroupRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.PatchGroupRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("id", fmt.Sprintf("%v", req.Id))
		q.Add("operation", fmt.Sprintf("%v", req.Operation))
		q.Add("schemas", fmt.Sprintf("%v", req.Schemas))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Group{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.Group", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCPatchUserById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &PatchUserRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.PatchUserRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("id", fmt.Sprintf("%v", req.Id))
		q.Add("operation", fmt.Sprintf("%v", req.Operation))
		q.Add("schemas", fmt.Sprintf("%v", req.Schemas))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &User{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.User", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCReplaceGroupById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &Group{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.Group: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("displayName", fmt.Sprintf("%v", req.DisplayName))
		q.Add("id", fmt.Sprintf("%v", req.Id))
		q.Add("members", fmt.Sprintf("%v", req.Members))
		q.Add("meta", fmt.Sprintf("%v", req.Meta))
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("schemas", fmt.Sprintf("%v", req.Schemas))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Group{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.Group", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCReplaceUserById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &User{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.User: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("active", fmt.Sprintf("%v", req.Active))
		q.Add("displayName", fmt.Sprintf("%v", req.DisplayName))
		q.Add("emails", fmt.Sprintf("%v", req.Emails))
		q.Add("externalId", fmt.Sprintf("%v", req.ExternalId))
		q.Add("groups", fmt.Sprintf("%v", req.Groups))
		q.Add("id", fmt.Sprintf("%v", req.Id))
		q.Add("meta", fmt.Sprintf("%v", req.Meta))
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("nickName", fmt.Sprintf("%v", req.NickName))
		q.Add("roles", fmt.Sprintf("%v", req.Roles))
		q.Add("schemas", fmt.Sprintf("%v", req.Schemas))
		q.Add("userName", fmt.Sprintf("%v", req.UserName))
		q.Add("userType", fmt.Sprintf("%v", req.UserType))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &User{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.User", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomPublicAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomPublicAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["CreateGroup"] = ccl.doRPCCreateGroup

	rpcFns["CreateUser"] = ccl.doRPCCreateUser

	rpcFns["DeleteGroupById"] = ccl.doRPCDeleteGroupById

	rpcFns["DeleteUserById"] = ccl.doRPCDeleteUserById

	rpcFns["GetGroupById"] = ccl.doRPCGetGroupById

	rpcFns["GetResourceTypesById"] = ccl.doRPCGetResourceTypesById

	rpcFns["GetSchemaById"] = ccl.doRPCGetSchemaById

	rpcFns["GetUserById"] = ccl.doRPCGetUserById

	rpcFns["ListGroups"] = ccl.doRPCListGroups

	rpcFns["ListResourceTypes"] = ccl.doRPCListResourceTypes

	rpcFns["ListSchemas"] = ccl.doRPCListSchemas

	rpcFns["ListServiceProviderConfig"] = ccl.doRPCListServiceProviderConfig

	rpcFns["ListUsers"] = ccl.doRPCListUsers

	rpcFns["PatchGroupById"] = ccl.doRPCPatchGroupById

	rpcFns["PatchUserById"] = ccl.doRPCPatchUserById

	rpcFns["ReplaceGroupById"] = ccl.doRPCReplaceGroupById

	rpcFns["ReplaceUserById"] = ccl.doRPCReplaceUserById

	ccl.rpcFns = rpcFns

	return ccl
}

// Create customPublicAPIInprocClient

// INPROC Client (satisfying CustomPublicAPIClient interface)
type customPublicAPIInprocClient struct {
	CustomPublicAPIServer
}

func (c *customPublicAPIInprocClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	return c.CustomPublicAPIServer.CreateGroup(ctx, in)
}
func (c *customPublicAPIInprocClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	return c.CustomPublicAPIServer.CreateUser(ctx, in)
}
func (c *customPublicAPIInprocClient) DeleteGroupById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*google_api.HttpBody, error) {
	return c.CustomPublicAPIServer.DeleteGroupById(ctx, in)
}
func (c *customPublicAPIInprocClient) DeleteUserById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*google_api.HttpBody, error) {
	return c.CustomPublicAPIServer.DeleteUserById(ctx, in)
}
func (c *customPublicAPIInprocClient) GetGroupById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Group, error) {
	return c.CustomPublicAPIServer.GetGroupById(ctx, in)
}
func (c *customPublicAPIInprocClient) GetResourceTypesById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Resource, error) {
	return c.CustomPublicAPIServer.GetResourceTypesById(ctx, in)
}
func (c *customPublicAPIInprocClient) GetSchemaById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*google_api.HttpBody, error) {
	return c.CustomPublicAPIServer.GetSchemaById(ctx, in)
}
func (c *customPublicAPIInprocClient) GetUserById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*User, error) {
	return c.CustomPublicAPIServer.GetUserById(ctx, in)
}
func (c *customPublicAPIInprocClient) ListGroups(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*ListGroupResources, error) {
	return c.CustomPublicAPIServer.ListGroups(ctx, in)
}
func (c *customPublicAPIInprocClient) ListResourceTypes(ctx context.Context, in *ves_io_schema.Empty, opts ...grpc.CallOption) (*ResourceTypesResponse, error) {
	return c.CustomPublicAPIServer.ListResourceTypes(ctx, in)
}
func (c *customPublicAPIInprocClient) ListSchemas(ctx context.Context, in *ves_io_schema.Empty, opts ...grpc.CallOption) (*google_api.HttpBody, error) {
	return c.CustomPublicAPIServer.ListSchemas(ctx, in)
}
func (c *customPublicAPIInprocClient) ListServiceProviderConfig(ctx context.Context, in *ves_io_schema.Empty, opts ...grpc.CallOption) (*ServiceProviderConfigResponse, error) {
	return c.CustomPublicAPIServer.ListServiceProviderConfig(ctx, in)
}
func (c *customPublicAPIInprocClient) ListUsers(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	return c.CustomPublicAPIServer.ListUsers(ctx, in)
}
func (c *customPublicAPIInprocClient) PatchGroupById(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	return c.CustomPublicAPIServer.PatchGroupById(ctx, in)
}
func (c *customPublicAPIInprocClient) PatchUserById(ctx context.Context, in *PatchUserRequest, opts ...grpc.CallOption) (*User, error) {
	return c.CustomPublicAPIServer.PatchUserById(ctx, in)
}
func (c *customPublicAPIInprocClient) ReplaceGroupById(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	return c.CustomPublicAPIServer.ReplaceGroupById(ctx, in)
}
func (c *customPublicAPIInprocClient) ReplaceUserById(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	return c.CustomPublicAPIServer.ReplaceUserById(ctx, in)
}

func NewCustomPublicAPIInprocClient(svc svcfw.Service) CustomPublicAPIClient {
	return &customPublicAPIInprocClient{CustomPublicAPIServer: NewCustomPublicAPIServer(svc)}
}

// RegisterGwCustomPublicAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomPublicAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomPublicAPIHandlerClient(ctx, mux, NewCustomPublicAPIInprocClient(s))
}

// Create customPublicAPISrv

// SERVER (satisfying CustomPublicAPIServer interface)
type customPublicAPISrv struct {
	svc svcfw.Service
}

func (s *customPublicAPISrv) CreateGroup(ctx context.Context, in *CreateGroupRequest) (*Group, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *Group
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.CreateGroupRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.CreateGroup' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.CreateGroup"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.CreateGroup(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.Group", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) CreateUser(ctx context.Context, in *CreateUserRequest) (*User, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *User
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.CreateUserRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.CreateUser' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.CreateUser"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.CreateUser(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.User", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) DeleteGroupById(ctx context.Context, in *IdRequest) (*google_api.HttpBody, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *google_api.HttpBody
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.IdRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.DeleteGroupById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.DeleteGroupById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.DeleteGroupById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "google.api.HttpBody", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) DeleteUserById(ctx context.Context, in *IdRequest) (*google_api.HttpBody, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *google_api.HttpBody
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.IdRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.DeleteUserById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.DeleteUserById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.DeleteUserById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "google.api.HttpBody", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) GetGroupById(ctx context.Context, in *IdRequest) (*Group, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *Group
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.IdRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.GetGroupById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.GetGroupById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetGroupById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.Group", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) GetResourceTypesById(ctx context.Context, in *IdRequest) (*Resource, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *Resource
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.IdRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.GetResourceTypesById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.GetResourceTypesById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetResourceTypesById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.Resource", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) GetSchemaById(ctx context.Context, in *IdRequest) (*google_api.HttpBody, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *google_api.HttpBody
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.IdRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.GetSchemaById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.GetSchemaById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetSchemaById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "google.api.HttpBody", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) GetUserById(ctx context.Context, in *IdRequest) (*User, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *User
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.IdRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.GetUserById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.GetUserById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetUserById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.User", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) ListGroups(ctx context.Context, in *FilterRequest) (*ListGroupResources, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *ListGroupResources
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.FilterRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.ListGroups' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.ListGroups"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListGroups(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.ListGroupResources", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) ListResourceTypes(ctx context.Context, in *ves_io_schema.Empty) (*ResourceTypesResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *ResourceTypesResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.Empty", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.ListResourceTypes' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.ListResourceTypes"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListResourceTypes(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.ResourceTypesResponse", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) ListSchemas(ctx context.Context, in *ves_io_schema.Empty) (*google_api.HttpBody, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *google_api.HttpBody
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.Empty", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.ListSchemas' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.ListSchemas"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListSchemas(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "google.api.HttpBody", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) ListServiceProviderConfig(ctx context.Context, in *ves_io_schema.Empty) (*ServiceProviderConfigResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *ServiceProviderConfigResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.Empty", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.ListServiceProviderConfig' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.ListServiceProviderConfig"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListServiceProviderConfig(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.ServiceProviderConfigResponse", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) ListUsers(ctx context.Context, in *FilterRequest) (*ListUserResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *ListUserResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.FilterRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.ListUsers' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.ListUsers"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListUsers(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.ListUserResponse", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) PatchGroupById(ctx context.Context, in *PatchGroupRequest) (*Group, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *Group
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.PatchGroupRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.PatchGroupById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.PatchGroupById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.PatchGroupById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.Group", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) PatchUserById(ctx context.Context, in *PatchUserRequest) (*User, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *User
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.PatchUserRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.PatchUserById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.PatchUserById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.PatchUserById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.User", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) ReplaceGroupById(ctx context.Context, in *Group) (*Group, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *Group
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.Group", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.ReplaceGroupById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.ReplaceGroupById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ReplaceGroupById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.Group", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) ReplaceUserById(ctx context.Context, in *User) (*User, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *User
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.User", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.ReplaceUserById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.ReplaceUserById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ReplaceUserById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.User", rsp)...)

	return rsp, nil
}

func NewCustomPublicAPIServer(svc svcfw.Service) CustomPublicAPIServer {
	return &customPublicAPISrv{svc: svc}
}

var CustomPublicAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "SCIM",
        "description": "Volterra System for Cross-domain Identity Management (SCIM) specification\nis designed to make managing user identities in cloud-based applications and services easier.\nThe specification suite seeks to build upon experience with existing schemas and deployments,\nplacing specific emphasis on simplicity of development and integration,\nwhile applying existing authentication, authorization, and privacy models.\nIts intent is to reduce the cost and complexity of user management operations by providing\na common user schema and extension model, as well as binding documents to provide patterns\nfor exchanging this schema using standard protocols. In essence: make it fast,\ncheap, and easy to move users in to, out of, and around the cloud.\n\nSCIM is used for automating the provisioning of user and user groups in the external system\ninto the F5 saas platform.\nVia SCIM we provide support for the following resource types:\nUser and User Groups\nThe synchronization of the these resources would be aided by SCIM from external platform.\nAlso, synchronization filtering is supported.\nSync filtering would enable to synchronize only limited set of Groups and Users.\nSync if enabled would allow to synchronize Groups which have sync_id not empty.\nOnce we have these groups in SCIM, the user synchronization would commence.\nUsers who belong to groups which have sync_id set would be synchronized.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {
        "/public/v2/Groups": {
            "get": {
                "summary": "List Group based on filter.",
                "description": "List groups based on the given filter.",
                "operationId": "ves.io.schema.scim.CustomPublicAPI.ListGroups",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/scimListGroupResources"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "filter",
                        "description": "x-example: \"externalId\"\nx-required\nFilter to be used for filtering objects.",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "filter"
                    },
                    {
                        "name": "count",
                        "description": "x-example: \"8\"\nx-required\nThe number of entries after filter.",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "uint64",
                        "x-displayname": "count"
                    }
                ],
                "tags": [
                    "CustomPublicAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-scim-custompublicapi-listgroups"
                },
                "x-ves-proto-rpc": "ves.io.schema.scim.CustomPublicAPI.ListGroups"
            },
            "post": {
                "summary": "Create Group with users.",
                "description": "Create group with given users.",
                "operationId": "ves.io.schema.scim.CustomPublicAPI.CreateGroup",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/scimGroup"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/scimCreateGroupRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomPublicAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-scim-custompublicapi-creategroup"
                },
                "x-ves-proto-rpc": "ves.io.schema.scim.CustomPublicAPI.CreateGroup"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.scim.CustomPublicAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/v2/Groups/{id}": {
            "get": {
                "summary": "List Group based on Id.",
                "description": "List group based on the given Id.",
                "operationId": "ves.io.schema.scim.CustomPublicAPI.GetGroupById",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/scimGroup"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "Id\n\nx-example: \"sam.smith@gmail.com\"\nx-required\nId with which the request will find entry.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Email"
                    }
                ],
                "tags": [
                    "CustomPublicAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-scim-custompublicapi-getgroupbyid"
                },
                "x-ves-proto-rpc": "ves.io.schema.scim.CustomPublicAPI.GetGroupById"
            },
            "delete": {
                "summary": "Delete Group based on Id.",
                "description": "Delete group based on the given Id.",
                "operationId": "ves.io.schema.scim.CustomPublicAPI.DeleteGroupById",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/apiHttpBody"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "Id\n\nx-example: \"sam.smith@gmail.com\"\nx-required\nId with which the request will find entry.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Email"
                    }
                ],
                "tags": [
                    "CustomPublicAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-scim-custompublicapi-deletegroupbyid"
                },
                "x-ves-proto-rpc": "ves.io.schema.scim.CustomPublicAPI.DeleteGroupById"
            },
            "put": {
                "summary": "Replace Group based on Id.",
                "description": "Replace group based on the given Id.",
                "operationId": "ves.io.schema.scim.CustomPublicAPI.ReplaceGroupById",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/scimGroup"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "id\n\nx-example: \"value\"\nunique Id for the group.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/scimGroup"
                        }
                    }
                ],
                "tags": [
                    "CustomPublicAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-scim-custompublicapi-replacegroupbyid"
                },
                "x-ves-proto-rpc": "ves.io.schema.scim.CustomPublicAPI.ReplaceGroupById"
            },
            "patch": {
                "summary": "Patch Group based on Id.",
                "description": "Patch group based on the given Id.",
                "operationId": "ves.io.schema.scim.CustomPublicAPI.PatchGroupById",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/scimGroup"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "id\n\nx-example: \"value\"\nx-required\nunique Id for the group.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/scimPatchGroupRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomPublicAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-scim-custompublicapi-patchgroupbyid"
                },
                "x-ves-proto-rpc": "ves.io.schema.scim.CustomPublicAPI.PatchGroupById"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.scim.CustomPublicAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/v2/ResourceTypes": {
            "get": {
                "summary": "GetResourceTypes",
                "operationId": "ves.io.schema.scim.CustomPublicAPI.ListResourceTypes",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/scimResourceTypesResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "tags": [
                    "CustomPublicAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-scim-custompublicapi-listresourcetypes"
                },
                "x-ves-proto-rpc": "ves.io.schema.scim.CustomPublicAPI.ListResourceTypes"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.scim.CustomPublicAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/v2/ResourceTypes/{id}": {
            "get": {
                "summary": "GetResourceTypes",
                "operationId": "ves.io.schema.scim.CustomPublicAPI.GetResourceTypesById",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/scimResource"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "Id\n\nx-example: \"sam.smith@gmail.com\"\nx-required\nId with which the request will find entry.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Email"
                    }
                ],
                "tags": [
                    "CustomPublicAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-scim-custompublicapi-getresourcetypesbyid"
                },
                "x-ves-proto-rpc": "ves.io.schema.scim.CustomPublicAPI.GetResourceTypesById"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.scim.CustomPublicAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/v2/Schemas": {
            "get": {
                "summary": "Schemas",
                "operationId": "ves.io.schema.scim.CustomPublicAPI.ListSchemas",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/apiHttpBody"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "tags": [
                    "CustomPublicAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-scim-custompublicapi-listschemas"
                },
                "x-ves-proto-rpc": "ves.io.schema.scim.CustomPublicAPI.ListSchemas"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.scim.CustomPublicAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/v2/Schemas/{id}": {
            "get": {
                "summary": "SchemasById",
                "operationId": "ves.io.schema.scim.CustomPublicAPI.GetSchemaById",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/apiHttpBody"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "Id\n\nx-example: \"sam.smith@gmail.com\"\nx-required\nId with which the request will find entry.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Email"
                    }
                ],
                "tags": [
                    "CustomPublicAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-scim-custompublicapi-getschemabyid"
                },
                "x-ves-proto-rpc": "ves.io.schema.scim.CustomPublicAPI.GetSchemaById"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.scim.CustomPublicAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/v2/ServiceProviderConfig": {
            "get": {
                "summary": "ListServiceProviderConfig",
                "operationId": "ves.io.schema.scim.CustomPublicAPI.ListServiceProviderConfig",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/scimServiceProviderConfigResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "tags": [
                    "CustomPublicAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-scim-custompublicapi-listserviceproviderconfig"
                },
                "x-ves-proto-rpc": "ves.io.schema.scim.CustomPublicAPI.ListServiceProviderConfig"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.scim.CustomPublicAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/v2/Users": {
            "get": {
                "summary": "Get all the Users",
                "description": "Get all users.",
                "operationId": "ves.io.schema.scim.CustomPublicAPI.ListUsers",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/scimListUserResponse"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "filter",
                        "description": "x-example: \"externalId\"\nx-required\nFilter to be used for filtering objects.",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "x-displayname": "filter"
                    },
                    {
                        "name": "count",
                        "description": "x-example: \"8\"\nx-required\nThe number of entries after filter.",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "uint64",
                        "x-displayname": "count"
                    }
                ],
                "tags": [
                    "CustomPublicAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-scim-custompublicapi-listusers"
                },
                "x-ves-proto-rpc": "ves.io.schema.scim.CustomPublicAPI.ListUsers"
            },
            "post": {
                "summary": "Create User with roles",
                "description": "Create creates a user and namespace roles binding for this user",
                "operationId": "ves.io.schema.scim.CustomPublicAPI.CreateUser",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/scimUser"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/scimCreateUserRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomPublicAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-scim-custompublicapi-createuser"
                },
                "x-ves-proto-rpc": "ves.io.schema.scim.CustomPublicAPI.CreateUser"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.scim.CustomPublicAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        },
        "/public/v2/Users/{id}": {
            "get": {
                "summary": "Get User with id",
                "description": "Get user by means of ID",
                "operationId": "ves.io.schema.scim.CustomPublicAPI.GetUserById",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/scimUser"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "Id\n\nx-example: \"sam.smith@gmail.com\"\nx-required\nId with which the request will find entry.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Email"
                    }
                ],
                "tags": [
                    "CustomPublicAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-scim-custompublicapi-getuserbyid"
                },
                "x-ves-proto-rpc": "ves.io.schema.scim.CustomPublicAPI.GetUserById"
            },
            "delete": {
                "summary": "Delete User by ID",
                "description": "Delete user by Id.",
                "operationId": "ves.io.schema.scim.CustomPublicAPI.DeleteUserById",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/apiHttpBody"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "Id\n\nx-example: \"sam.smith@gmail.com\"\nx-required\nId with which the request will find entry.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "Email"
                    }
                ],
                "tags": [
                    "CustomPublicAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-scim-custompublicapi-deleteuserbyid"
                },
                "x-ves-proto-rpc": "ves.io.schema.scim.CustomPublicAPI.DeleteUserById"
            },
            "put": {
                "summary": "Replace User with new values.",
                "description": "Replace updates user and namespace roles for this user",
                "operationId": "ves.io.schema.scim.CustomPublicAPI.ReplaceUserById",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/scimUser"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "id\n\nx-required\nx-example: \"123-456-789012\"\nid for user object.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/scimUser"
                        }
                    }
                ],
                "tags": [
                    "CustomPublicAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-scim-custompublicapi-replaceuserbyid"
                },
                "x-ves-proto-rpc": "ves.io.schema.scim.CustomPublicAPI.ReplaceUserById"
            },
            "patch": {
                "summary": "PatchUserById patches User",
                "description": "Patch patches the fields for this user",
                "operationId": "ves.io.schema.scim.CustomPublicAPI.PatchUserById",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/scimUser"
                        }
                    },
                    "401": {
                        "description": "Returned when operation is not authorized",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "403": {
                        "description": "Returned when there is no permission to access resource",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "404": {
                        "description": "Returned when resource is not found",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "409": {
                        "description": "Returned when operation on resource is conflicting with current value",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "429": {
                        "description": "Returned when operation has been rejected as it is happening too frequently",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "500": {
                        "description": "Returned when server encountered an error in processing API",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "503": {
                        "description": "Returned when service is unavailable temporarily",
                        "schema": {
                            "format": "string"
                        }
                    },
                    "504": {
                        "description": "Returned when server timed out processing request",
                        "schema": {
                            "format": "string"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "id\n\nx-example: \"\"id\": \"1234-5678-901234\"\"\nx-required\nid of the user object that needs patching.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-displayname": "id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/scimPatchUserRequest"
                        }
                    }
                ],
                "tags": [
                    "CustomPublicAPI"
                ],
                "externalDocs": {
                    "description": "Examples of this operation",
                    "url": "https://www.volterra.io/docs/reference/api-ref/ves-io-schema-scim-custompublicapi-patchuserbyid"
                },
                "x-ves-proto-rpc": "ves.io.schema.scim.CustomPublicAPI.PatchUserById"
            },
            "x-displayname": "User",
            "x-ves-proto-service": "ves.io.schema.scim.CustomPublicAPI",
            "x-ves-proto-service-type": "CUSTOM_PUBLIC"
        }
    },
    "definitions": {
        "apiHttpBody": {
            "type": "object",
            "description": "Message that represents an arbitrary HTTP body. It should only be used for\npayload formats that can't be represented as JSON, such as raw binary or\nan HTML page.\n\n\nThis message can be used both in streaming and non-streaming API methods in\nthe request as well as the response.\n\nIt can be used as a top-level request field, which is convenient if one\nwants to extract parameters from either the URL or HTTP template into the\nrequest fields and also want access to the raw HTTP body.\n\nExample:\n\n    message GetResourceRequest {\n      // A unique request id.\n      string request_id = 1;\n\n      // The raw HTTP body is bound to this field.\n      google.api.HttpBody http_body = 2;\n    }\n\n    service ResourceService {\n      rpc GetResource(GetResourceRequest) returns (google.api.HttpBody);\n      rpc UpdateResource(google.api.HttpBody) returns\n      (google.protobuf.Empty);\n    }\n\nExample with streaming methods:\n\n    service CaldavService {\n      rpc GetCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n      rpc UpdateCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n    }\n\nUse of this type only changes how the request and response bodies are\nhandled, all other features will continue to work unchanged.",
            "properties": {
                "content_type": {
                    "type": "string",
                    "description": "The HTTP Content-Type header value specifying the content type of the body."
                },
                "data": {
                    "type": "string",
                    "description": "The HTTP request/response body as raw binary.",
                    "format": "byte"
                },
                "extensions": {
                    "type": "array",
                    "description": "Application specific response metadata. Must be set in the first response\nfor streaming APIs.",
                    "items": {
                        "$ref": "#/definitions/protobufAny"
                    }
                }
            }
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "scimCreateGroupRequest": {
            "type": "object",
            "description": "Request for creating group.",
            "title": "CreateGroupRequest",
            "x-displayname": "CreateGroupRequest",
            "x-ves-proto-message": "ves.io.schema.scim.CreateGroupRequest",
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": " Group display name.\n\nExample: - \"display name\"-",
                    "title": "displayName",
                    "x-displayname": "displayName",
                    "x-ves-example": "display name"
                },
                "id": {
                    "type": "string",
                    "description": " Defines id of the obj\n\nExample: - \"id of object in external identity provider\"-",
                    "title": "Id",
                    "x-displayname": "id",
                    "x-ves-example": "id of object in external identity provider"
                },
                "members": {
                    "type": "array",
                    "description": " List of group members reference.\n\nExample: - \"List group members i.e users\"-",
                    "title": "members",
                    "items": {
                        "$ref": "#/definitions/scimGroupMembers"
                    },
                    "x-displayname": "members",
                    "x-ves-example": "List group members i.e users"
                },
                "meta": {
                    "description": " meta information about group.\n\nExample: - \"meta information for the group\"-",
                    "title": "meta",
                    "$ref": "#/definitions/scimMeta",
                    "x-displayname": "meta",
                    "x-ves-example": "meta information for the group"
                },
                "schemas": {
                    "type": "array",
                    "description": " schemas defined as per scim spec.\n\nExample: - \"scim spec defined schemas\"-",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "schemas",
                    "x-ves-example": "scim spec defined schemas"
                }
            }
        },
        "scimCreateUserRequest": {
            "type": "object",
            "description": "CreateUserRequest is the request for creating a user.",
            "title": "CreateUserRequest",
            "x-displayname": "CreateUserRequest",
            "x-ves-proto-message": "ves.io.schema.scim.CreateUserRequest",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": " active is boolean representing if user is active or not.\n\nExample: - \"true/false\"-",
                    "title": "active",
                    "format": "boolean",
                    "x-displayname": "active",
                    "x-ves-example": "true/false"
                },
                "displayName": {
                    "type": "string",
                    "description": " displayName refers to the name to be displayed for the user. default is name.\n\nExample: - \"Rod Rob\"-",
                    "title": "displayName",
                    "x-displayname": "displayName",
                    "x-ves-example": "Rod Rob"
                },
                "emails": {
                    "type": "array",
                    "description": " emails can be list of emails to be used by user work, personal etc.\n\nExample: - \"sam@test.com\"-",
                    "title": "emails",
                    "items": {
                        "$ref": "#/definitions/scimEmail"
                    },
                    "x-displayname": "emails",
                    "x-ves-example": "sam@test.com"
                },
                "externalId": {
                    "type": "string",
                    "description": " externalId refers to the id for user represented in the external system like azure etc.\n\nExample: - \"rod_123\"-",
                    "title": "externalId",
                    "x-displayname": "externalId",
                    "x-ves-example": "rod_123"
                },
                "groups": {
                    "type": "array",
                    "description": " groups to which user belongs to.\n\nExample: - \"groupid\"-",
                    "title": "groups",
                    "items": {
                        "$ref": "#/definitions/scimUserGroup"
                    },
                    "x-displayname": "groups",
                    "x-ves-example": "groupid"
                },
                "name": {
                    "description": " name of user.\n\nExample: - \"Rodney Robilliard\"-",
                    "title": "name",
                    "$ref": "#/definitions/scimName",
                    "x-displayname": "name",
                    "x-ves-example": "Rodney Robilliard"
                },
                "roles": {
                    "type": "array",
                    "description": " roles defined for the user.\n\nExample: - \"roles\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "roles",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "roles",
                    "x-ves-example": "roles",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "schemas": {
                    "type": "array",
                    "description": " schemas represent the schema from scim spec to be used for creating the user.\n\nExample: - \"urn:ietf:params:scim:schemas:core:2.0:User\"-",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "schemas",
                    "x-ves-example": "urn:ietf:params:scim:schemas:core:2.0:User"
                },
                "userName": {
                    "type": "string",
                    "description": " userName refers to the unique userName for this user. Can be emailId or username used in yahoo gmail etc.\n\nExample: - \"rod_123\"-",
                    "title": "userName",
                    "x-displayname": "userName",
                    "x-ves-example": "rod_123"
                },
                "userType": {
                    "description": " userType represents the type of user can be permanent employee or contractor etc.\n\nExample: - \"Contractor\"-",
                    "title": "userType",
                    "$ref": "#/definitions/userUserType",
                    "x-displayname": "userType",
                    "x-ves-example": "Contractor"
                }
            }
        },
        "scimEmail": {
            "type": "object",
            "description": "Email for user can be primary or secondary",
            "title": "Email",
            "x-displayname": "Email",
            "x-ves-proto-message": "ves.io.schema.scim.Email",
            "properties": {
                "primary": {
                    "type": "boolean",
                    "description": " primary boolean describing whether it is primary or not.\n\nExample: - \"true\"-",
                    "title": "primary",
                    "format": "boolean",
                    "x-displayname": "primary",
                    "x-ves-example": "true"
                },
                "type": {
                    "type": "string",
                    "description": " type of email describing whether it is work or personal.\n\nExample: - \"work\"-",
                    "title": "type",
                    "x-displayname": "type",
                    "x-ves-example": "work"
                },
                "value": {
                    "type": "string",
                    "description": " value.\n\nExample: - \"newEmail@domain.com\"-",
                    "title": "value",
                    "x-displayname": "value",
                    "x-ves-example": "newEmail@domain.com"
                }
            }
        },
        "scimFilter": {
            "type": "object",
            "description": "Filter.",
            "title": "Filter",
            "x-displayname": "Filter",
            "x-ves-proto-message": "ves.io.schema.scim.Filter",
            "properties": {
                "maxResults": {
                    "type": "string",
                    "description": " maximum results to be displayed.\n\nExample: - \"5\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "maxResults",
                    "format": "uint64",
                    "x-displayname": "schemas",
                    "x-ves-example": "5",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "supported": {
                    "type": "boolean",
                    "description": " is filtering supported.\n\nExample: - \"true/false\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "supported",
                    "format": "boolean",
                    "x-displayname": "supported",
                    "x-ves-example": "true/false",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "scimGroup": {
            "type": "object",
            "description": "Group.",
            "title": "Group",
            "x-displayname": "Group",
            "x-ves-proto-message": "ves.io.schema.scim.Group",
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": " display name for the group.\n\nExample: - \"group display name\"-",
                    "title": "displayName",
                    "x-displayname": "displayName",
                    "x-ves-example": "group display name"
                },
                "id": {
                    "type": "string",
                    "description": " unique Id for the group.\n\nExample: - \"value\"-",
                    "title": "id",
                    "x-displayname": "id",
                    "x-ves-example": "value"
                },
                "members": {
                    "type": "array",
                    "description": " users with unique Id.\n\nExample: - \"Users with unique Id\"-",
                    "title": "GroupMembers",
                    "items": {
                        "$ref": "#/definitions/scimGroupMembers"
                    },
                    "x-displayname": "GroupMembers",
                    "x-ves-example": "Users with unique Id"
                },
                "meta": {
                    "description": " meta information for the group.\n\nExample: - \"meta information for the group\"-",
                    "title": "meta",
                    "$ref": "#/definitions/scimMeta",
                    "x-displayname": "meta",
                    "x-ves-example": "meta information for the group"
                },
                "name": {
                    "type": "string",
                    "description": " display name for the group.\n\nExample: - \"group name\"-",
                    "title": "Name",
                    "x-displayname": "Name",
                    "x-ves-example": "group name"
                },
                "schemas": {
                    "type": "array",
                    "description": " schemas per scim spec.\n\nExample: - \"schema per scim spec.\"-",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "schemas",
                    "x-ves-example": "schema per scim spec."
                }
            }
        },
        "scimGroupMembers": {
            "type": "object",
            "description": "GroupMembers.",
            "title": "GroupMembers",
            "x-displayname": "GroupMembers",
            "x-ves-proto-message": "ves.io.schema.scim.GroupMembers",
            "properties": {
                "id": {
                    "type": "string",
                    "description": " unique Id of the users\n\nExample: - \"value\"-",
                    "title": "id",
                    "x-displayname": "id",
                    "x-ves-example": "value"
                }
            }
        },
        "scimGroupOperation": {
            "type": "object",
            "description": "x-example: \"value\"\nunique Id for the group.",
            "title": "id",
            "x-displayname": "id",
            "x-ves-proto-message": "ves.io.schema.scim.GroupOperation",
            "properties": {
                "op": {
                    "type": "string",
                    "description": " unique Id for the group.\n\nExample: - \"add, delete, replace, remove\"-",
                    "title": "op",
                    "x-displayname": "op",
                    "x-ves-example": "add, delete, replace, remove"
                },
                "path": {
                    "type": "string",
                    "description": " unique path for the group field to be modified.\n\nExample: - \"group field path to be modified\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "path",
                    "x-displayname": "path",
                    "x-ves-example": "group field path to be modified",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "value": {
                    "description": " value specifying what section of the group needs to be modified.\n\nExample: - \"value to be updated\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "value",
                    "$ref": "#/definitions/scimGroup",
                    "x-displayname": "value",
                    "x-ves-example": "value to be updated",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "scimListGroupResources": {
            "type": "object",
            "description": "List group objects.",
            "title": "ListGroup;resources",
            "x-displayname": "ListGroupResources",
            "x-ves-proto-message": "ves.io.schema.scim.ListGroupResources",
            "properties": {
                "groups": {
                    "type": "array",
                    "description": " List of available groups.\n\nExample: - \"list of groups\"-",
                    "title": "groups",
                    "items": {
                        "$ref": "#/definitions/scimGroup"
                    },
                    "x-displayname": "groups",
                    "x-ves-example": "list of groups"
                },
                "schemas": {
                    "type": "array",
                    "description": " schema defined as per scim spec.\n\nExample: - \"scim spec referred schema\"-",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "schemas",
                    "x-ves-example": "scim spec referred schema"
                },
                "totalResults": {
                    "type": "string",
                    "description": " totalGroup objects available.\n\nExample: - \"10 15\"-",
                    "title": "id",
                    "format": "uint64",
                    "x-displayname": "totalResults",
                    "x-ves-example": "10 15"
                }
            }
        },
        "scimListUserResponse": {
            "type": "object",
            "description": "ListUserResources list all the user objects.",
            "title": "ListUserResources",
            "x-displayname": "ListUserResources",
            "x-ves-proto-message": "ves.io.schema.scim.ListUserResponse",
            "properties": {
                "resources": {
                    "type": "array",
                    "description": " resources representing all the user objects.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "resources",
                    "items": {
                        "$ref": "#/definitions/scimUser"
                    },
                    "x-displayname": "resources",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "schemas": {
                    "type": "array",
                    "description": " schemas for listing the user.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "schemas",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "totalResults": {
                    "type": "string",
                    "description": " totalResults for the search criteria.\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "totalResults",
                    "format": "uint64",
                    "x-displayname": "totalResults",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "scimMeta": {
            "type": "object",
            "description": "x-example: \"Meta\"\nx-required\nResource meta information..",
            "title": "Meta",
            "x-displayname": "Meta",
            "x-ves-proto-message": "ves.io.schema.scim.Meta",
            "properties": {
                "created": {
                    "type": "string",
                    "description": " create date.\n\nExample: - \"2011-08-08T04:56:22Z\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "created",
                    "x-displayname": "created",
                    "x-ves-example": "2011-08-08T04:56:22Z",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "lastModified": {
                    "type": "string",
                    "description": " last modification date and time.\n\nExample: - \"2011-08-08T08:00:12Z\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "lastModified",
                    "x-displayname": "lastModified",
                    "x-ves-example": "2011-08-08T08:00:12Z",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "location": {
                    "type": "string",
                    "description": " [x-required]\n location for resource.\n\nExample: - \"/ResourceType/Users\"-\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "location",
                    "x-displayname": "location",
                    "x-ves-example": "/ResourceType/Users",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "resourceType": {
                    "type": "string",
                    "description": " type of resource.\n\nExample: - \"User\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "resourceType",
                    "x-displayname": "schemas",
                    "x-ves-example": "User",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "version": {
                    "type": "string",
                    "description": " version for resource type.\n\nExample: - \"2.0\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "version",
                    "x-displayname": "version",
                    "x-ves-example": "2.0",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "scimName": {
            "type": "object",
            "description": "Name is the name of user.",
            "title": "Name",
            "x-displayname": "Name",
            "x-ves-proto-message": "ves.io.schema.scim.Name",
            "properties": {
                "familyName": {
                    "type": "string",
                    "description": " Family name.\n\nExample: - \"Downey\"-",
                    "title": "familyName",
                    "x-displayname": "familyName",
                    "x-ves-example": "Downey"
                },
                "formatted": {
                    "type": "string",
                    "description": " Formatted name is detailed name of person.\n\nExample: - \"R Downey Jr\"-",
                    "title": "formatted",
                    "x-displayname": "formatted",
                    "x-ves-example": "R Downey Jr"
                },
                "givenName": {
                    "type": "string",
                    "description": " Given name of the person.\n\nExample: - \"Robert J Downey Jr\"-",
                    "title": "givenName",
                    "x-displayname": "givenName",
                    "x-ves-example": "Robert J Downey Jr"
                },
                "honorificPrefix": {
                    "type": "string",
                    "description": " Prefix for the name. Mr Ms. etc.\n\nExample: - \"Mr\"-",
                    "title": "honorificPrefix",
                    "x-displayname": "honorificPrefix",
                    "x-ves-example": "Mr"
                },
                "honorificSuffix": {
                    "type": "string",
                    "description": " Suffix for the name like Jr Sr I II III etc.\n\nExample: - \"IV\"-",
                    "title": "honorificSuffix",
                    "x-displayname": "honorificSuffix",
                    "x-ves-example": "IV"
                },
                "middleName": {
                    "type": "string",
                    "description": " Middle name of the person.\n\nExample: - \"K\"-",
                    "title": "middleName",
                    "x-displayname": "middleName",
                    "x-ves-example": "K"
                }
            }
        },
        "scimPatchGroupRequest": {
            "type": "object",
            "description": "Patch operation to modify group.",
            "title": "PatchGroupOperation",
            "x-displayname": "PatchGroupOperation",
            "x-ves-proto-message": "ves.io.schema.scim.PatchGroupRequest",
            "properties": {
                "id": {
                    "type": "string",
                    "description": " unique Id for the group.\n\nExample: - \"value\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "id",
                    "x-displayname": "id",
                    "x-ves-example": "value",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "operation": {
                    "description": " Operation to modify or delete group.\n\nExample: - \"add, remove, replace, delete\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Group Operation",
                    "$ref": "#/definitions/scimGroupOperation",
                    "x-displayname": "GroupOperation",
                    "x-ves-example": "add, remove, replace, delete",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "schemas": {
                    "type": "array",
                    "description": " schemas as per scim spec.\n\nExample: - \"schemas per scim spec\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "schemas",
                    "x-ves-example": "schemas per scim spec",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "scimPatchUserRequest": {
            "type": "object",
            "description": "x-example: {\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n    ],\n   operation\": {\n    \"op\": \"add\",\n    \"path\": \"name.preferredName\",\n    \"value\": {\n        \"name\": {\n            \"preferredName\": \"New preferred Name\"\n        }\n    }\n},\n\"id\": \"1234-5678-901234\"\n\n}\nPatchUserRequest patches the user object or deletes it.",
            "title": "PatchUserRequest",
            "x-displayname": "PatchUserRequest",
            "x-ves-proto-message": "ves.io.schema.scim.PatchUserRequest",
            "properties": {
                "id": {
                    "type": "string",
                    "description": " id of the user object that needs patching.\n\nExample: - \"\"id\"\"1234-5678-901234\"\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "id",
                    "x-displayname": "id",
                    "x-ves-example": "\"id\": \"1234-5678-901234\"",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "operation": {
                    "description": "     \"op\": \"add\",\n     \"path\": \"name.preferredName\",\n     \"value\": {\n         \"name\": {\n             \"preferredName\": \"New preferred Name\"\n         }\n     }\n }\"\"\n operation that will modify or delete the user object.\n\nExample: - \"\"operation\"{-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "operation",
                    "$ref": "#/definitions/scimUserOperation",
                    "x-displayname": "operation",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "schemas": {
                    "type": "array",
                    "description": " schemas for patch.\n\nExample: - \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "schemas",
                    "x-ves-example": "urn:ietf:params:scim:api:messages:2.0:PatchOp",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "scimResource": {
            "type": "object",
            "description": "Resource",
            "title": "Resource",
            "x-displayname": "Resource",
            "x-ves-proto-message": "ves.io.schema.scim.Resource",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": " [x-example: \"/Groups\"]\n [x-required]\n endpoint for the resource..\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "endpoint",
                    "x-displayname": "endPoint",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "id": {
                    "type": "string",
                    "description": " [x-example: \"Group\"]\n [x-required]\n Id of the resource.\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "Id",
                    "x-displayname": "id",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "meta": {
                    "description": " [x-example: \"ResourceType]\n [x-required]\n meta describes the resource type and location.\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "meta",
                    "$ref": "#/definitions/scimResourceMeta",
                    "x-displayname": "meta",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "name": {
                    "type": "string",
                    "description": " [x-example: \"Group\"]\n [x-required]\n name of the resource.\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "name",
                    "x-displayname": "name",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "schema": {
                    "type": "string",
                    "description": " [x-example: \"urn:ietf:params:scim:schemas:core:2.0:ResourceType]\n [x-required]\n Schema defined in scim spec..\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "schema",
                    "x-displayname": "schema",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "schemas": {
                    "type": "array",
                    "description": " [x-example: \"urn:ietf:params:scim:api:messages:2.0:ListResponse\"]\n [x-required]\n schemas defined in scim spec.\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "schemas",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "scimResourceMeta": {
            "type": "object",
            "description": "ResourceMeta.",
            "title": "ResourceMeta",
            "x-displayname": "ResourceMeta",
            "x-ves-proto-message": "ves.io.schema.scim.ResourceMeta",
            "properties": {
                "location": {
                    "type": "string",
                    "description": " location of resource.\n\nExample: - \"/Resurce/User\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "location",
                    "x-displayname": "location",
                    "x-ves-example": "/Resurce/User",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "resourceType": {
                    "type": "string",
                    "description": " resourceType represents resource.\n\nExample: - \"User\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "resourceType",
                    "x-displayname": "resourceType",
                    "x-ves-example": "User",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "scimResourceTypesResponse": {
            "type": "object",
            "description": "ResourceTypesResponse",
            "title": "ResourceTypesResponse",
            "x-displayname": "ResourceTypesResponse",
            "x-ves-proto-message": "ves.io.schema.scim.ResourceTypesResponse",
            "properties": {
                "resources": {
                    "type": "array",
                    "description": " [x-example: \"resources\"]\n [x-required]\n Resources for the query.\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "resources",
                    "items": {
                        "$ref": "#/definitions/scimResource"
                    },
                    "x-displayname": "resources",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "schemas": {
                    "type": "array",
                    "description": " [x-example: \"urn:ietf:params:scim:schemas:core:2.0:ResourceType\"]\n [x-required]\n schemas defined by scim spec..\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "schemas",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "totalResults": {
                    "type": "string",
                    "description": " [x-example: \"8\"]\n [x-required]\n No of results for the query.\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "totalResults",
                    "format": "uint64",
                    "x-displayname": "totalResults",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "scimServiceProviderConfigResponse": {
            "type": "object",
            "description": "ServiceProviderConfigResponse.",
            "title": "ServiceProviderConfigResponse",
            "x-displayname": "ServiceProviderConfigResponse",
            "x-ves-proto-message": "ves.io.schema.scim.ServiceProviderConfigResponse",
            "properties": {
                "authenticationSchemes": {
                    "type": "array",
                    "description": " supported authenticationSchemes for the resource.\n\nExample: - \"--\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "authenticationSchemes",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "authenticationSchemes",
                    "x-ves-example": "--",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "bulk": {
                    "description": " bulk for resources..\n\nExample: - \"--\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "bulk",
                    "$ref": "#/definitions/scimSupport",
                    "x-displayname": "bulk",
                    "x-ves-example": "--",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "changePassword": {
                    "description": " changePassword support for changing the password.\n\nExample: - \"true\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "changePassword",
                    "$ref": "#/definitions/scimSupport",
                    "x-displayname": "changePassword",
                    "x-ves-example": "true",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "documentationUri": {
                    "type": "string",
                    "description": " uri for documentation.\n\nExample: - \"https://example.com./scumentation/uri\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "documentationUri",
                    "x-displayname": "documentationUri",
                    "x-ves-example": "https://example.com./scumentation/uri",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "etag": {
                    "description": " etag for resource.\n\nExample: - \"etag\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "etag",
                    "$ref": "#/definitions/scimSupport",
                    "x-displayname": "etag",
                    "x-ves-example": "etag",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "filter": {
                    "description": " filter for the resources.\n\nExample: - \"user\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "filter",
                    "$ref": "#/definitions/scimFilter",
                    "x-displayname": "filter",
                    "x-ves-example": "user",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "patch": {
                    "description": " patch for the resource.\n\nExample: - \"--\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "patch",
                    "$ref": "#/definitions/scimSupport",
                    "x-displayname": "patch",
                    "x-ves-example": "--",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "schemas": {
                    "type": "array",
                    "description": " schemas scim spec.\n\nExample: - \"urn:ietf:params:scim:schemas:core:2.0:ResourceType\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "schemas",
                    "x-ves-example": "urn:ietf:params:scim:schemas:core:2.0:ResourceType",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "sort": {
                    "description": " sorting support.\n\nExample: - \"true\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "sort",
                    "$ref": "#/definitions/scimSupport",
                    "x-displayname": "sort",
                    "x-ves-example": "true",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "scimSupport": {
            "type": "object",
            "description": "Support.",
            "title": "Support",
            "x-displayname": "Support",
            "x-ves-proto-message": "ves.io.schema.scim.Support",
            "properties": {
                "supported": {
                    "type": "boolean",
                    "description": " is support supported.\n\nExample: - \"true/false\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "supported",
                    "format": "boolean",
                    "x-displayname": "supported",
                    "x-ves-example": "true/false",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                }
            }
        },
        "scimUser": {
            "type": "object",
            "description": "User object representing the user created.",
            "title": "User",
            "x-displayname": "User",
            "x-ves-proto-message": "ves.io.schema.scim.User",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": " active specifies if user is active or not.\n\nExample: - \"true/false\"-",
                    "title": "active",
                    "format": "boolean",
                    "x-displayname": "active",
                    "x-ves-example": "true/false"
                },
                "displayName": {
                    "type": "string",
                    "description": " displayName for the user.\n\nExample: - \"Rodney\"-",
                    "title": "displayName",
                    "x-displayname": "displayName",
                    "x-ves-example": "Rodney"
                },
                "emails": {
                    "type": "array",
                    "description": " emails for the user whether primary or secondary.\n\nExample: - \"test@email.com\"-",
                    "title": "emails",
                    "items": {
                        "$ref": "#/definitions/scimEmail"
                    },
                    "x-displayname": "emails",
                    "x-ves-example": "test@email.com"
                },
                "externalId": {
                    "type": "string",
                    "description": " externalId specifies the id for the user object in external system.\n\nExample: - \"rod_1234\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "externalId",
                    "x-displayname": "externalId",
                    "x-ves-example": "rod_1234",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "groups": {
                    "type": "array",
                    "description": " groups to which user is part of.\n\nExample: - \"group-id\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "groups",
                    "items": {
                        "$ref": "#/definitions/scimUserGroup"
                    },
                    "x-displayname": "groups",
                    "x-ves-example": "group-id",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "id": {
                    "type": "string",
                    "description": " id for user object.\n\nExample: - \"123-456-789012\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "id",
                    "x-displayname": "id",
                    "x-ves-example": "123-456-789012",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "meta": {
                    "description": " meta specifies the created date, location, resource type, modified time date and version.",
                    "title": "meta",
                    "$ref": "#/definitions/scimMeta",
                    "x-displayname": "meta"
                },
                "name": {
                    "description": " name of user.\n\nExample: - \"Rodney Robilliard\"-",
                    "title": "name",
                    "$ref": "#/definitions/scimName",
                    "x-displayname": "name",
                    "x-ves-example": "Rodney Robilliard"
                },
                "nickName": {
                    "type": "string",
                    "description": " nickName for the user.\n\nExample: - \"Rod\"-",
                    "title": "nickName",
                    "x-displayname": "nickName",
                    "x-ves-example": "Rod"
                },
                "roles": {
                    "type": "array",
                    "description": " roles defined for the user.\n\nExample: - \"roles\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "roles",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "roles",
                    "x-ves-example": "roles",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "schemas": {
                    "type": "array",
                    "description": " schemas for user object as per scim spec 2.0.\n\nExample: - \"urn:ietf:params:scim:schemas:core:2.0:User\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    },
                    "x-displayname": "schemas",
                    "x-ves-example": "urn:ietf:params:scim:schemas:core:2.0:User",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "userName": {
                    "type": "string",
                    "description": " userName for the user.\n\nExample: - \"rod_1234\"-\n\nRequired: YES\n\nValidation Rules:\n  ves.io.schema.rules.message.required: true\n",
                    "title": "userName",
                    "x-displayname": "userName",
                    "x-ves-example": "rod_1234",
                    "x-ves-required": "true",
                    "x-ves-validation-rules": {
                        "ves.io.schema.rules.message.required": "true"
                    }
                },
                "userType": {
                    "description": " userType type of user.\n\nExample: - \"Employee\"-",
                    "title": "userType",
                    "$ref": "#/definitions/userUserType",
                    "x-displayname": "userType",
                    "x-ves-example": "Employee"
                }
            }
        },
        "scimUserGroup": {
            "type": "object",
            "description": "UserGroup.",
            "title": "UserGroup",
            "x-displayname": "UserGroup",
            "x-ves-proto-message": "ves.io.schema.scim.UserGroup",
            "properties": {
                "display": {
                    "type": "string",
                    "description": " display for the user group name.\n\nExample: - \"Group-1\"-",
                    "title": "display",
                    "x-displayname": "display",
                    "x-ves-example": "Group-1"
                },
                "id": {
                    "type": "string",
                    "description": " Id of the group to which user belongs.\n\nExample: - \"1234-2345-123456\"-",
                    "title": "id",
                    "x-displayname": "id",
                    "x-ves-example": "1234-2345-123456"
                }
            }
        },
        "scimUserOperation": {
            "type": "object",
            "description": "UserOperation is the patch operation where user can be  updated replaced or remove or delete.\nsupported op types are add, remove, replace, delete\nremove is remove a specific entry.\ndelete is delete user.",
            "title": "UserOperation",
            "x-displayname": "Operation",
            "x-ves-proto-message": "ves.io.schema.scim.UserOperation",
            "properties": {
                "op": {
                    "type": "string",
                    "description": " op \"add\", \"replace\", \"remove\", \"delete\"\n\nExample: - \"\"op\"\"add\"\"-",
                    "title": "op",
                    "x-displayname": "op",
                    "x-ves-example": "\"op\": \"add\""
                },
                "path": {
                    "type": "string",
                    "description": " path to the field where the change needs to happen.\n\nExample: - \"\"path\"\"name.formatted\"\"-",
                    "title": "path",
                    "x-displayname": "path",
                    "x-ves-example": "\"path\": \"name.formatted\""
                },
                "value": {
                    "description": " value to be used for modifying the object. In case of delete nothing needs to be specified.\n\nExample: - \"\"value\"\"New Formatted Name\"\"-",
                    "title": "value",
                    "$ref": "#/definitions/scimUser",
                    "x-displayname": "value",
                    "x-ves-example": "\"value\": \"New Formatted Name\""
                }
            }
        },
        "userUserType": {
            "type": "string",
            "description": "UserType is to identify the type of user\n\n - USER: User\nRegular User\n - SERVICE: Service User\nUser for accessing only APIs/services\n - DEBUG: Debug\nUser which was created by tenant admin for volterra-support team.",
            "title": "UserType",
            "enum": [
                "USER",
                "SERVICE",
                "DEBUG"
            ],
            "default": "USER",
            "x-displayname": "User Type",
            "x-ves-proto-enum": "ves.io.schema.user.UserType"
        }
    },
    "x-displayname": "System for Cross-domain Identity Management (SCIM)",
    "x-ves-proto-file": "ves.io/schema/scim/public_customapi.proto"
}`
