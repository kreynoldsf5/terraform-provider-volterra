//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//

package scim

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	"github.com/gogo/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	google_api "google.golang.org/genproto/googleapis/api/httpbody"
	"google.golang.org/grpc"

	"gopkg.volterra.us/stdlib/client"
	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/errors"
	"gopkg.volterra.us/stdlib/server"
	"gopkg.volterra.us/stdlib/svcfw"

	ves_io_schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
)

var (
	_ = fmt.Sprintf("dummy for fmt import use")
)

// Create CustomPublicAPI GRPC Client satisfying server.CustomClient
type CustomPublicAPIGrpcClient struct {
	conn       *grpc.ClientConn
	grpcClient CustomPublicAPIClient
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error)
}

func (c *CustomPublicAPIGrpcClient) doRPCCreateGroup(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &CreateGroupRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.CreateGroupRequest", yamlReq)
	}
	rsp, err := c.grpcClient.CreateGroup(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCCreateUser(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &CreateUserRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.CreateUserRequest", yamlReq)
	}
	rsp, err := c.grpcClient.CreateUser(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCDeleteGroupById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest", yamlReq)
	}
	rsp, err := c.grpcClient.DeleteGroupById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCDeleteUserById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest", yamlReq)
	}
	rsp, err := c.grpcClient.DeleteUserById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCGetGroupById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetGroupById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCGetResourceTypesById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetResourceTypesById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCGetSchemaById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetSchemaById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCGetUserById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest", yamlReq)
	}
	rsp, err := c.grpcClient.GetUserById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCListGroups(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &FilterRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.FilterRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ListGroups(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCListResourceTypes(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ves_io_schema.Empty{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.Empty", yamlReq)
	}
	rsp, err := c.grpcClient.ListResourceTypes(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCListSchemas(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ves_io_schema.Empty{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.Empty", yamlReq)
	}
	rsp, err := c.grpcClient.ListSchemas(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCListServiceProviderConfig(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &ves_io_schema.Empty{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.Empty", yamlReq)
	}
	rsp, err := c.grpcClient.ListServiceProviderConfig(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCListUsers(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &FilterRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.FilterRequest", yamlReq)
	}
	rsp, err := c.grpcClient.ListUsers(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCPatchGroupById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &PatchGroupRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.PatchGroupRequest", yamlReq)
	}
	rsp, err := c.grpcClient.PatchGroupById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCPatchUserById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &PatchUserRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.PatchUserRequest", yamlReq)
	}
	rsp, err := c.grpcClient.PatchUserById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCReplaceGroupById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &Group{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.Group", yamlReq)
	}
	rsp, err := c.grpcClient.ReplaceGroupById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) doRPCReplaceUserById(ctx context.Context, yamlReq string, opts ...grpc.CallOption) (proto.Message, error) {
	req := &User{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.User", yamlReq)
	}
	rsp, err := c.grpcClient.ReplaceUserById(ctx, req, opts...)
	return rsp, err
}

func (c *CustomPublicAPIGrpcClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}
	if cco.YAMLReq == "" {
		return nil, fmt.Errorf("Error, empty request body")
	}
	ctx = client.AddHdrsToCtx(cco.Headers, ctx)

	rsp, err := rpcFn(ctx, cco.YAMLReq, cco.GrpcCallOpts...)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using GRPC")
	}
	if cco.OutCallResponse != nil {
		cco.OutCallResponse.ProtoMsg = rsp
	}
	return rsp, nil
}

func NewCustomPublicAPIGrpcClient(cc *grpc.ClientConn) server.CustomClient {
	ccl := &CustomPublicAPIGrpcClient{
		conn:       cc,
		grpcClient: NewCustomPublicAPIClient(cc),
	}
	rpcFns := make(map[string]func(context.Context, string, ...grpc.CallOption) (proto.Message, error))
	rpcFns["CreateGroup"] = ccl.doRPCCreateGroup

	rpcFns["CreateUser"] = ccl.doRPCCreateUser

	rpcFns["DeleteGroupById"] = ccl.doRPCDeleteGroupById

	rpcFns["DeleteUserById"] = ccl.doRPCDeleteUserById

	rpcFns["GetGroupById"] = ccl.doRPCGetGroupById

	rpcFns["GetResourceTypesById"] = ccl.doRPCGetResourceTypesById

	rpcFns["GetSchemaById"] = ccl.doRPCGetSchemaById

	rpcFns["GetUserById"] = ccl.doRPCGetUserById

	rpcFns["ListGroups"] = ccl.doRPCListGroups

	rpcFns["ListResourceTypes"] = ccl.doRPCListResourceTypes

	rpcFns["ListSchemas"] = ccl.doRPCListSchemas

	rpcFns["ListServiceProviderConfig"] = ccl.doRPCListServiceProviderConfig

	rpcFns["ListUsers"] = ccl.doRPCListUsers

	rpcFns["PatchGroupById"] = ccl.doRPCPatchGroupById

	rpcFns["PatchUserById"] = ccl.doRPCPatchUserById

	rpcFns["ReplaceGroupById"] = ccl.doRPCReplaceGroupById

	rpcFns["ReplaceUserById"] = ccl.doRPCReplaceUserById

	ccl.rpcFns = rpcFns

	return ccl
}

// Create CustomPublicAPI REST Client satisfying server.CustomClient
type CustomPublicAPIRestClient struct {
	baseURL string
	client  http.Client
	// map of rpc name to its invocation
	rpcFns map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error)
}

func (c *CustomPublicAPIRestClient) doRPCCreateGroup(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &CreateGroupRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.CreateGroupRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("displayName", fmt.Sprintf("%v", req.DisplayName))
		q.Add("externalId", fmt.Sprintf("%v", req.ExternalId))
		q.Add("id", fmt.Sprintf("%v", req.Id))
		q.Add("members", fmt.Sprintf("%v", req.Members))
		q.Add("meta", fmt.Sprintf("%v", req.Meta))
		q.Add("schemas", fmt.Sprintf("%v", req.Schemas))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Group{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.Group", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCCreateUser(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &CreateUserRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.CreateUserRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("active", fmt.Sprintf("%v", req.Active))
		q.Add("displayName", fmt.Sprintf("%v", req.DisplayName))
		q.Add("emails", fmt.Sprintf("%v", req.Emails))
		q.Add("externalId", fmt.Sprintf("%v", req.ExternalId))
		q.Add("groups", fmt.Sprintf("%v", req.Groups))
		q.Add("meta", fmt.Sprintf("%v", req.Meta))
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("roles", fmt.Sprintf("%v", req.Roles))
		q.Add("schemas", fmt.Sprintf("%v", req.Schemas))
		q.Add("userName", fmt.Sprintf("%v", req.UserName))
		q.Add("userType", fmt.Sprintf("%v", req.UserType))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &User{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.User", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCDeleteGroupById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("id", fmt.Sprintf("%v", req.Id))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &google_api.HttpBody{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		// server strips HTTP Body proto message and sends only data, re-build it here
		pbRsp.ContentType = rsp.Header.Get("Content-Type")
		pbRsp.Data = body

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCDeleteUserById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("id", fmt.Sprintf("%v", req.Id))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &google_api.HttpBody{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		// server strips HTTP Body proto message and sends only data, re-build it here
		pbRsp.ContentType = rsp.Header.Get("Content-Type")
		pbRsp.Data = body

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCGetGroupById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("id", fmt.Sprintf("%v", req.Id))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Group{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.Group", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCGetResourceTypesById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("id", fmt.Sprintf("%v", req.Id))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Resource{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.Resource", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCGetSchemaById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("id", fmt.Sprintf("%v", req.Id))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &google_api.HttpBody{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		// server strips HTTP Body proto message and sends only data, re-build it here
		pbRsp.ContentType = rsp.Header.Get("Content-Type")
		pbRsp.Data = body

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCGetUserById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &IdRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.IdRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("id", fmt.Sprintf("%v", req.Id))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &User{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.User", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCListGroups(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &FilterRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.FilterRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("count", fmt.Sprintf("%v", req.Count))
		q.Add("filter", fmt.Sprintf("%v", req.Filter))
		q.Add("page", fmt.Sprintf("%v", req.Page))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ListGroupResources{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.ListGroupResources", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCListResourceTypes(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ves_io_schema.Empty{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.Empty: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ResourceTypesResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.ResourceTypesResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCListSchemas(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ves_io_schema.Empty{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.Empty: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &google_api.HttpBody{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		// server strips HTTP Body proto message and sends only data, re-build it here
		pbRsp.ContentType = rsp.Header.Get("Content-Type")
		pbRsp.Data = body

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCListServiceProviderConfig(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &ves_io_schema.Empty{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.Empty: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ServiceProviderConfigResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.ServiceProviderConfigResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCListUsers(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &FilterRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.FilterRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("count", fmt.Sprintf("%v", req.Count))
		q.Add("filter", fmt.Sprintf("%v", req.Filter))
		q.Add("page", fmt.Sprintf("%v", req.Page))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &ListUserResponse{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.ListUserResponse", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCPatchGroupById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &PatchGroupRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.PatchGroupRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("Operations", fmt.Sprintf("%v", req.Operations))
		q.Add("id", fmt.Sprintf("%v", req.Id))
		q.Add("schemas", fmt.Sprintf("%v", req.Schemas))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Group{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.Group", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCPatchUserById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &PatchUserRequest{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.PatchUserRequest: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("Operations", fmt.Sprintf("%v", req.Operations))
		q.Add("id", fmt.Sprintf("%v", req.Id))
		q.Add("schemas", fmt.Sprintf("%v", req.Schemas))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &User{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.User", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCReplaceGroupById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &Group{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.Group: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("displayName", fmt.Sprintf("%v", req.DisplayName))
		q.Add("externalId", fmt.Sprintf("%v", req.ExternalId))
		q.Add("id", fmt.Sprintf("%v", req.Id))
		q.Add("members", fmt.Sprintf("%v", req.Members))
		q.Add("meta", fmt.Sprintf("%v", req.Meta))
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("schemas", fmt.Sprintf("%v", req.Schemas))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &Group{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.Group", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) doRPCReplaceUserById(ctx context.Context, callOpts *server.CustomCallOpts) (proto.Message, error) {
	if callOpts.URI == "" {
		return nil, fmt.Errorf("Error, URI should be specified, got empty")
	}
	url := fmt.Sprintf("%s%s", c.baseURL, callOpts.URI)

	yamlReq := callOpts.YAMLReq
	req := &User{}
	if err := codec.FromYAML(yamlReq, req); err != nil {
		return nil, fmt.Errorf("YAML Request %s is not of type *ves.io.schema.scim.User: %s", yamlReq, err)
	}

	var hReq *http.Request
	hm := strings.ToLower(callOpts.HTTPMethod)
	switch hm {
	case "post", "put":
		jsn, err := codec.ToJSON(req, codec.ToWithUseProtoFieldName())
		if err != nil {
			return nil, errors.Wrap(err, "Custom RestClient converting YAML to JSON")
		}
		var op string
		if hm == "post" {
			op = http.MethodPost
		} else {
			op = http.MethodPut
		}
		newReq, err := http.NewRequest(op, url, bytes.NewBuffer([]byte(jsn)))
		if err != nil {
			return nil, errors.Wrapf(err, "Creating new HTTP %s request for custom API", op)
		}
		hReq = newReq
	case "get":
		newReq, err := http.NewRequest(http.MethodGet, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP GET request for custom API")
		}
		hReq = newReq
		q := hReq.URL.Query()
		_ = q
		q.Add("active", fmt.Sprintf("%v", req.Active))
		q.Add("detail", fmt.Sprintf("%v", req.Detail))
		q.Add("displayName", fmt.Sprintf("%v", req.DisplayName))
		q.Add("emails", fmt.Sprintf("%v", req.Emails))
		q.Add("externalId", fmt.Sprintf("%v", req.ExternalId))
		q.Add("groups", fmt.Sprintf("%v", req.Groups))
		q.Add("id", fmt.Sprintf("%v", req.Id))
		q.Add("meta", fmt.Sprintf("%v", req.Meta))
		q.Add("name", fmt.Sprintf("%v", req.Name))
		q.Add("nickName", fmt.Sprintf("%v", req.NickName))
		q.Add("roles", fmt.Sprintf("%v", req.Roles))
		q.Add("schemas", fmt.Sprintf("%v", req.Schemas))
		q.Add("status", fmt.Sprintf("%v", req.Status))
		q.Add("userName", fmt.Sprintf("%v", req.UserName))
		q.Add("userType", fmt.Sprintf("%v", req.UserType))

		hReq.URL.RawQuery += q.Encode()
	case "delete":
		newReq, err := http.NewRequest(http.MethodDelete, url, nil)
		if err != nil {
			return nil, errors.Wrap(err, "Creating new HTTP DELETE request for custom API")
		}
		hReq = newReq
	default:
		return nil, fmt.Errorf("Error, invalid/empty HTTPMethod(%s) specified, should be POST|DELETE|GET", callOpts.HTTPMethod)
	}
	hReq = hReq.WithContext(ctx)
	hReq.Header.Set("Content-Type", "application/json")
	client.AddHdrsToReq(callOpts.Headers, hReq)

	rsp, err := c.client.Do(hReq)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient")
	}
	defer rsp.Body.Close()

	if rsp.StatusCode != http.StatusOK {
		body, err := ioutil.ReadAll(rsp.Body)
		return nil, fmt.Errorf("Unsuccessful custom API %s on %s, status code %d, body %s, err %s", callOpts.HTTPMethod, callOpts.URI, rsp.StatusCode, body, err)
	}

	body, err := ioutil.ReadAll(rsp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "Custom API RestClient read body")
	}
	pbRsp := &User{}
	if err := codec.FromJSON(string(body), pbRsp); err != nil {
		return nil, fmt.Errorf("JSON Response %s is not of type *ves.io.schema.scim.User", body)

	}
	if callOpts.OutCallResponse != nil {
		callOpts.OutCallResponse.ProtoMsg = pbRsp
		callOpts.OutCallResponse.JSON = string(body)
	}
	return pbRsp, nil
}

func (c *CustomPublicAPIRestClient) DoRPC(ctx context.Context, rpc string, opts ...server.CustomCallOpt) (proto.Message, error) {
	rpcFn, exists := c.rpcFns[rpc]
	if !exists {
		return nil, fmt.Errorf("Error, no such rpc %s", rpc)
	}
	cco := server.NewCustomCallOpts()
	for _, opt := range opts {
		opt(cco)
	}

	rsp, err := rpcFn(ctx, cco)
	if err != nil {
		return nil, errors.Wrap(err, "Doing custom RPC using Rest")
	}
	return rsp, nil
}

func NewCustomPublicAPIRestClient(baseURL string, hc http.Client) server.CustomClient {
	ccl := &CustomPublicAPIRestClient{
		baseURL: baseURL,
		client:  hc,
	}

	rpcFns := make(map[string]func(context.Context, *server.CustomCallOpts) (proto.Message, error))
	rpcFns["CreateGroup"] = ccl.doRPCCreateGroup

	rpcFns["CreateUser"] = ccl.doRPCCreateUser

	rpcFns["DeleteGroupById"] = ccl.doRPCDeleteGroupById

	rpcFns["DeleteUserById"] = ccl.doRPCDeleteUserById

	rpcFns["GetGroupById"] = ccl.doRPCGetGroupById

	rpcFns["GetResourceTypesById"] = ccl.doRPCGetResourceTypesById

	rpcFns["GetSchemaById"] = ccl.doRPCGetSchemaById

	rpcFns["GetUserById"] = ccl.doRPCGetUserById

	rpcFns["ListGroups"] = ccl.doRPCListGroups

	rpcFns["ListResourceTypes"] = ccl.doRPCListResourceTypes

	rpcFns["ListSchemas"] = ccl.doRPCListSchemas

	rpcFns["ListServiceProviderConfig"] = ccl.doRPCListServiceProviderConfig

	rpcFns["ListUsers"] = ccl.doRPCListUsers

	rpcFns["PatchGroupById"] = ccl.doRPCPatchGroupById

	rpcFns["PatchUserById"] = ccl.doRPCPatchUserById

	rpcFns["ReplaceGroupById"] = ccl.doRPCReplaceGroupById

	rpcFns["ReplaceUserById"] = ccl.doRPCReplaceUserById

	ccl.rpcFns = rpcFns

	return ccl
}

// Create customPublicAPIInprocClient

// INPROC Client (satisfying CustomPublicAPIClient interface)
type customPublicAPIInprocClient struct {
	CustomPublicAPIServer
}

func (c *customPublicAPIInprocClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	return c.CustomPublicAPIServer.CreateGroup(ctx, in)
}
func (c *customPublicAPIInprocClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	return c.CustomPublicAPIServer.CreateUser(ctx, in)
}
func (c *customPublicAPIInprocClient) DeleteGroupById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*google_api.HttpBody, error) {
	return c.CustomPublicAPIServer.DeleteGroupById(ctx, in)
}
func (c *customPublicAPIInprocClient) DeleteUserById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*google_api.HttpBody, error) {
	return c.CustomPublicAPIServer.DeleteUserById(ctx, in)
}
func (c *customPublicAPIInprocClient) GetGroupById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Group, error) {
	return c.CustomPublicAPIServer.GetGroupById(ctx, in)
}
func (c *customPublicAPIInprocClient) GetResourceTypesById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Resource, error) {
	return c.CustomPublicAPIServer.GetResourceTypesById(ctx, in)
}
func (c *customPublicAPIInprocClient) GetSchemaById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*google_api.HttpBody, error) {
	return c.CustomPublicAPIServer.GetSchemaById(ctx, in)
}
func (c *customPublicAPIInprocClient) GetUserById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*User, error) {
	return c.CustomPublicAPIServer.GetUserById(ctx, in)
}
func (c *customPublicAPIInprocClient) ListGroups(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*ListGroupResources, error) {
	return c.CustomPublicAPIServer.ListGroups(ctx, in)
}
func (c *customPublicAPIInprocClient) ListResourceTypes(ctx context.Context, in *ves_io_schema.Empty, opts ...grpc.CallOption) (*ResourceTypesResponse, error) {
	return c.CustomPublicAPIServer.ListResourceTypes(ctx, in)
}
func (c *customPublicAPIInprocClient) ListSchemas(ctx context.Context, in *ves_io_schema.Empty, opts ...grpc.CallOption) (*google_api.HttpBody, error) {
	return c.CustomPublicAPIServer.ListSchemas(ctx, in)
}
func (c *customPublicAPIInprocClient) ListServiceProviderConfig(ctx context.Context, in *ves_io_schema.Empty, opts ...grpc.CallOption) (*ServiceProviderConfigResponse, error) {
	return c.CustomPublicAPIServer.ListServiceProviderConfig(ctx, in)
}
func (c *customPublicAPIInprocClient) ListUsers(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	return c.CustomPublicAPIServer.ListUsers(ctx, in)
}
func (c *customPublicAPIInprocClient) PatchGroupById(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	return c.CustomPublicAPIServer.PatchGroupById(ctx, in)
}
func (c *customPublicAPIInprocClient) PatchUserById(ctx context.Context, in *PatchUserRequest, opts ...grpc.CallOption) (*User, error) {
	return c.CustomPublicAPIServer.PatchUserById(ctx, in)
}
func (c *customPublicAPIInprocClient) ReplaceGroupById(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	return c.CustomPublicAPIServer.ReplaceGroupById(ctx, in)
}
func (c *customPublicAPIInprocClient) ReplaceUserById(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	return c.CustomPublicAPIServer.ReplaceUserById(ctx, in)
}

func NewCustomPublicAPIInprocClient(svc svcfw.Service) CustomPublicAPIClient {
	return &customPublicAPIInprocClient{CustomPublicAPIServer: NewCustomPublicAPIServer(svc)}
}

// RegisterGwCustomPublicAPIHandler registers with grpc-gw with an inproc-client backing so that
// rest to grpc happens without a grpc.Dial (thus avoiding additional certs for mTLS)
func RegisterGwCustomPublicAPIHandler(ctx context.Context, mux *runtime.ServeMux, svc interface{}) error {
	s, ok := svc.(svcfw.Service)
	if !ok {
		return fmt.Errorf("svc is not svcfw.Service")
	}
	return RegisterCustomPublicAPIHandlerClient(ctx, mux, NewCustomPublicAPIInprocClient(s))
}

// Create customPublicAPISrv

// SERVER (satisfying CustomPublicAPIServer interface)
type customPublicAPISrv struct {
	svc svcfw.Service
}

func (s *customPublicAPISrv) CreateGroup(ctx context.Context, in *CreateGroupRequest) (*Group, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *Group
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.CreateGroupRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.CreateGroup' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.CreateGroup"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.CreateGroup(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.Group", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) CreateUser(ctx context.Context, in *CreateUserRequest) (*User, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *User
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.CreateUserRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.CreateUser' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.CreateUser"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.CreateUser(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.User", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) DeleteGroupById(ctx context.Context, in *IdRequest) (*google_api.HttpBody, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *google_api.HttpBody
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.IdRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.DeleteGroupById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.DeleteGroupById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.DeleteGroupById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "google.api.HttpBody", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) DeleteUserById(ctx context.Context, in *IdRequest) (*google_api.HttpBody, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *google_api.HttpBody
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.IdRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.DeleteUserById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.DeleteUserById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.DeleteUserById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "google.api.HttpBody", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) GetGroupById(ctx context.Context, in *IdRequest) (*Group, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *Group
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.IdRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.GetGroupById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.GetGroupById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetGroupById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.Group", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) GetResourceTypesById(ctx context.Context, in *IdRequest) (*Resource, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *Resource
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.IdRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.GetResourceTypesById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.GetResourceTypesById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetResourceTypesById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.Resource", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) GetSchemaById(ctx context.Context, in *IdRequest) (*google_api.HttpBody, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *google_api.HttpBody
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.IdRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.GetSchemaById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.GetSchemaById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetSchemaById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "google.api.HttpBody", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) GetUserById(ctx context.Context, in *IdRequest) (*User, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *User
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.IdRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.GetUserById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.GetUserById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.GetUserById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.User", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) ListGroups(ctx context.Context, in *FilterRequest) (*ListGroupResources, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *ListGroupResources
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.FilterRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.ListGroups' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.ListGroups"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListGroups(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.ListGroupResources", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) ListResourceTypes(ctx context.Context, in *ves_io_schema.Empty) (*ResourceTypesResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *ResourceTypesResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.Empty", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.ListResourceTypes' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.ListResourceTypes"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListResourceTypes(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.ResourceTypesResponse", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) ListSchemas(ctx context.Context, in *ves_io_schema.Empty) (*google_api.HttpBody, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *google_api.HttpBody
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.Empty", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.ListSchemas' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.ListSchemas"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListSchemas(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "google.api.HttpBody", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) ListServiceProviderConfig(ctx context.Context, in *ves_io_schema.Empty) (*ServiceProviderConfigResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *ServiceProviderConfigResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.Empty", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.ListServiceProviderConfig' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.ListServiceProviderConfig"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListServiceProviderConfig(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.ServiceProviderConfigResponse", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) ListUsers(ctx context.Context, in *FilterRequest) (*ListUserResponse, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *ListUserResponse
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.FilterRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.ListUsers' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.ListUsers"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ListUsers(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.ListUserResponse", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) PatchGroupById(ctx context.Context, in *PatchGroupRequest) (*Group, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *Group
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.PatchGroupRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.PatchGroupById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.PatchGroupById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.PatchGroupById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.Group", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) PatchUserById(ctx context.Context, in *PatchUserRequest) (*User, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *User
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.PatchUserRequest", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.PatchUserById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.PatchUserById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.PatchUserById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.User", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) ReplaceGroupById(ctx context.Context, in *Group) (*Group, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *Group
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.Group", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.ReplaceGroupById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.ReplaceGroupById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ReplaceGroupById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.Group", rsp)...)

	return rsp, nil
}
func (s *customPublicAPISrv) ReplaceUserById(ctx context.Context, in *User) (*User, error) {
	ah := s.svc.GetAPIHandler("ves.io.schema.scim.CustomPublicAPI")
	cah, ok := ah.(CustomPublicAPIServer)
	if !ok {
		return nil, fmt.Errorf("ah %v is not of type *CustomPublicAPIServer", ah)
	}

	var (
		rsp *User
		err error
	)

	bodyFields := svcfw.GenAuditReqBodyFields(ctx, s.svc, "ves.io.schema.scim.User", in)
	defer func() {
		if len(bodyFields) > 0 {
			server.ExtendAPIAudit(ctx, svcfw.PublicAPIBodyLog.Uid, bodyFields)
		}
		userMsg := "The 'CustomPublicAPI.ReplaceUserById' operation on 'scim'"
		if err == nil {
			userMsg += " was successfully performed."
		} else {
			userMsg += " failed to be performed."
		}
		server.AddUserMsgToAPIAudit(ctx, userMsg)
	}()

	if err := svcfw.FillOneofDefaultChoice(ctx, s.svc, in); err != nil {
		err = server.MaybePublicRestError(ctx, errors.Wrapf(err, "Filling oneof default choice"))
		return nil, server.GRPCStatusFromError(err).Err()
	}

	if s.svc.Config().EnableAPIValidation {
		if rvFn := s.svc.GetRPCValidator("ves.io.schema.scim.CustomPublicAPI.ReplaceUserById"); rvFn != nil {
			if verr := rvFn(ctx, in); verr != nil {
				err = server.MaybePublicRestError(ctx, errors.Wrapf(verr, "Validating Request"))
				return nil, server.GRPCStatusFromError(err).Err()
			}
		}
	}

	rsp, err = cah.ReplaceUserById(ctx, in)
	if err != nil {
		return rsp, server.GRPCStatusFromError(server.MaybePublicRestError(ctx, err)).Err()
	}

	bodyFields = append(bodyFields, svcfw.GenAuditRspBodyFields(ctx, s.svc, "ves.io.schema.scim.User", rsp)...)

	return rsp, nil
}

func NewCustomPublicAPIServer(svc svcfw.Service) CustomPublicAPIServer {
	return &customPublicAPISrv{svc: svc}
}

var CustomPublicAPISwaggerJSON string = `{
    "swagger": "2.0",
    "info": {
        "title": "SCIM",
        "description": "This schema specification details Volterra's support for SCIM protocol.\nAdmin can use SCIM feature on top of SSO to enable automated provisioning of\nuser and user groups from external identity provider into the F5 saas platform.\nWith this feature, complete life cycle management of user and groups can be\nachieved from single source of truth which is managed by tenant's admin.\n\ncurrent protocol support is using schema version v2.0 https://datatracker.ietf.org/doc/html/rfc7643 \n\nSCIM feature can be enabled part of SSO configuration (using RPC -UpdateScimIntegration- under oidc_provider resource)\nBy default, Volterra will not sync groups and users. Admin is required to set object identifier of group \nin external identity provider to corresponding user_group resource in volterra. Users with corresponding\ngroup membership if exist in external identity provider will be synced.",
        "version": "version not set"
    },
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [],
    "paths": {},
    "definitions": {
        "apiHttpBody": {
            "type": "object",
            "description": "Message that represents an arbitrary HTTP body. It should only be used for\npayload formats that can't be represented as JSON, such as raw binary or\nan HTML page.\n\n\nThis message can be used both in streaming and non-streaming API methods in\nthe request as well as the response.\n\nIt can be used as a top-level request field, which is convenient if one\nwants to extract parameters from either the URL or HTTP template into the\nrequest fields and also want access to the raw HTTP body.\n\nExample:\n\n    message GetResourceRequest {\n      // A unique request id.\n      string request_id = 1;\n\n      // The raw HTTP body is bound to this field.\n      google.api.HttpBody http_body = 2;\n    }\n\n    service ResourceService {\n      rpc GetResource(GetResourceRequest) returns (google.api.HttpBody);\n      rpc UpdateResource(google.api.HttpBody) returns\n      (google.protobuf.Empty);\n    }\n\nExample with streaming methods:\n\n    service CaldavService {\n      rpc GetCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n      rpc UpdateCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n    }\n\nUse of this type only changes how the request and response bodies are\nhandled, all other features will continue to work unchanged.",
            "properties": {
                "content_type": {
                    "type": "string",
                    "description": "The HTTP Content-Type header value specifying the content type of the body."
                },
                "data": {
                    "type": "string",
                    "description": "The HTTP request/response body as raw binary.",
                    "format": "byte"
                },
                "extensions": {
                    "type": "array",
                    "description": "Application specific response metadata. Must be set in the first response\nfor streaming APIs.",
                    "items": {
                        "$ref": "#/definitions/protobufAny"
                    }
                }
            }
        },
        "protobufAny": {
            "type": "object",
            "description": "-Any- contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an -Any- value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field -@type- which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n-value- which holds the custom JSON in addition to the -@type-\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "properties": {
                "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n-path/google.protobuf.Duration-). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme -http-, -https-, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, -https- is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than -http-, -https- (or the empty scheme) might be\nused with implementation specific semantics."
                },
                "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "byte"
                }
            }
        },
        "protobufNullValue": {
            "type": "string",
            "description": "-NullValue- is a singleton enumeration to represent the null value for the\n-Value- type union.\n\n The JSON representation for -NullValue- is JSON -null-.\n\n - NULL_VALUE: Null value.",
            "enum": [
                "NULL_VALUE"
            ],
            "default": "NULL_VALUE"
        },
        "scimCreateGroupRequest": {
            "type": "object",
            "description": "x-displayName: \"CreateGroupRequest\"\nRequest for creating group.",
            "title": "CreateGroupRequest",
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "x-displayName: \"displayName\"\nx-example: \"display name\"\nGroup display name.",
                    "title": "displayName"
                },
                "externalId": {
                    "type": "string",
                    "description": "x-displayName: \"ExternalId\"\nx-example: \"external Id\"\nexternal Id for the group.",
                    "title": "ExternalId"
                },
                "id": {
                    "type": "string",
                    "description": "x-displayName: \"id\"\nx-example: \"id of object in external identity provider\"\nDefines id of the obj",
                    "title": "Id"
                },
                "members": {
                    "type": "array",
                    "description": "x-displayName: \"members\"\nx-example: \"List group members i.e users\"\nList of group members reference.",
                    "title": "members",
                    "items": {
                        "$ref": "#/definitions/scimGroupMembers"
                    }
                },
                "meta": {
                    "description": "x-displayName: \"meta\"\nx-example: \"meta information for the group\"\nmeta information about group.",
                    "title": "meta",
                    "$ref": "#/definitions/scimMeta"
                },
                "schemas": {
                    "type": "array",
                    "description": "x-displayName: \"schemas\"\nx-example: \"scim spec defined schemas\"\nschemas defined as per scim spec.",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "scimCreateUserRequest": {
            "type": "object",
            "description": "x-displayName: \"CreateUserRequest\"\nCreateUserRequest is the request for creating a user.",
            "title": "CreateUserRequest",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "x-displayName: \"active\"\nx-example: \"true/false\"\nactive is boolean representing if user is active or not.",
                    "title": "active",
                    "format": "boolean"
                },
                "displayName": {
                    "type": "string",
                    "description": "x-displayName: \"displayName\"\nx-example: \"Rod Rob\"\ndisplayName refers to the name to be displayed for the user. default is name.",
                    "title": "displayName"
                },
                "emails": {
                    "type": "array",
                    "description": "x-displayName: \"emails\"\nx-example: \"sam@test.com\"\nemails can be list of emails to be used by user work, personal etc.",
                    "title": "emails",
                    "items": {
                        "$ref": "#/definitions/scimEmail"
                    }
                },
                "externalId": {
                    "type": "string",
                    "description": "x-displayName: \"externalId\"\nx-example: \"rod_123\"\nexternalId refers to the id for user represented in the external system like azure etc.",
                    "title": "externalId"
                },
                "groups": {
                    "type": "array",
                    "description": "x-displayName: \"groups\"\nx-example: \"groupid\"\ngroups to which user belongs to.",
                    "title": "groups",
                    "items": {
                        "$ref": "#/definitions/scimUserGroup"
                    }
                },
                "meta": {
                    "description": "x-displayName: \"meta\"\nmeta specifies the created date, location, resource type, modified time date and version.",
                    "title": "meta",
                    "$ref": "#/definitions/scimMeta"
                },
                "name": {
                    "description": "x-displayName: \"name\"\nx-example: \"Rodney Robilliard\"\nname of user.",
                    "title": "name",
                    "$ref": "#/definitions/scimName"
                },
                "roles": {
                    "type": "array",
                    "description": "x-displayName: \"roles\"\nx-required\nx-example: \"roles\"\nroles defined for the user.",
                    "title": "roles",
                    "items": {
                        "type": "string"
                    }
                },
                "schemas": {
                    "type": "array",
                    "description": "x-displayName: \"schemas\"\nx-example: \"urn:ietf:params:scim:schemas:core:2.0:User\"\nschemas represent the schema from scim spec to be used for creating the user.",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    }
                },
                "userName": {
                    "type": "string",
                    "description": "x-displayName: \"userName\"\nx-example: \"rod_123\"\nuserName refers to the unique userName for this user. Can be emailId or username used in yahoo gmail etc.",
                    "title": "userName"
                },
                "userType": {
                    "description": "x-displayName: \"userType\"\nx-example: \"Contractor\"\nuserType represents the type of user can be permanent employee or contractor etc.",
                    "title": "userType",
                    "$ref": "#/definitions/userUserType"
                }
            }
        },
        "scimEmail": {
            "type": "object",
            "description": "x-displayName: \"Email\"\nEmail for user can be primary or secondary",
            "title": "Email",
            "properties": {
                "primary": {
                    "type": "boolean",
                    "description": "x-displayName: \"primary\"\nx-example: \"true\"\nprimary boolean describing whether it is primary or not.",
                    "title": "primary",
                    "format": "boolean"
                },
                "type": {
                    "type": "string",
                    "description": "x-displayName: \"type\"\nx-example: \"work\"\ntype of email describing whether it is work or personal.",
                    "title": "type"
                },
                "value": {
                    "type": "string",
                    "description": "x-displayName: \"value\"\nx-example: \"newEmail@domain.com\"\nvalue.",
                    "title": "value"
                }
            }
        },
        "scimFilter": {
            "type": "object",
            "description": "x-displayName: \"Filter\"\nFilter.",
            "title": "Filter",
            "properties": {
                "maxResults": {
                    "type": "string",
                    "description": "x-displayName: \"schemas\"\nx-example: \"5\"\nx-required\nmaximum results to be displayed.",
                    "title": "maxResults",
                    "format": "uint64"
                },
                "supported": {
                    "type": "boolean",
                    "description": "x-displayName: \"supported\"\nx-example: \"true/false\"\nx-required\nis filtering supported.",
                    "title": "supported",
                    "format": "boolean"
                }
            }
        },
        "scimGroup": {
            "type": "object",
            "description": "x-displayName: \"Group\"\nGroup.",
            "title": "Group",
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "x-displayName: \"displayName\"\nx-example: \"group display name\"\ndisplay name for the group.",
                    "title": "displayName"
                },
                "externalId": {
                    "type": "string",
                    "description": "x-displayName: \"ExternalId\"\nx-example: \"external Id\"\nexternal Id for the group.",
                    "title": "ExternalId"
                },
                "id": {
                    "type": "string",
                    "description": "x-displayName: \"id\"\nx-example: \"value\"\nunique Id for the group.",
                    "title": "id"
                },
                "members": {
                    "type": "array",
                    "description": "x-displayName: \"GroupMembers\"\nx-example: \"Users with unique Id\"\nusers with unique Id.",
                    "title": "GroupMembers",
                    "items": {
                        "$ref": "#/definitions/scimGroupMembers"
                    }
                },
                "meta": {
                    "description": "x-displayName: \"meta\"\nx-example: \"meta information for the group\"\nmeta information for the group.",
                    "title": "meta",
                    "$ref": "#/definitions/scimMeta"
                },
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"Name\"\nx-example: \"group name\"\ndisplay name for the group.",
                    "title": "Name"
                },
                "schemas": {
                    "type": "array",
                    "description": "x-displayName: \"schemas\"\nx-example: \"schema per scim spec.\"\nschemas per scim spec.",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "scimGroupMembers": {
            "type": "object",
            "description": "x-displayName: \"GroupMembers\"\nGroupMembers.",
            "title": "GroupMembers",
            "properties": {
                "ref": {
                    "type": "string",
                    "description": "x-displayName: \"$ref\"\nx-example: \"$ref\"\nurl of the users or groups",
                    "title": "$ref"
                },
                "value": {
                    "type": "string",
                    "description": "x-displayName: \"value\"\nx-example: \"value\"\nunique Id of the users or groups",
                    "title": "value"
                }
            }
        },
        "scimListGroupResources": {
            "type": "object",
            "description": "x-displayName: \"ListGroupResources\"\nList group objects.",
            "title": "ListGroup;resources",
            "properties": {
                "Resources": {
                    "type": "array",
                    "description": "x-displayName: \"groups\"\nx-example: \"list of groups\"\nList of available groups.",
                    "title": "groups",
                    "items": {
                        "$ref": "#/definitions/scimGroup"
                    }
                },
                "itemsPerPage": {
                    "type": "string",
                    "description": "x-displayName: \"itemsPerPage\"\nx-required\nitemsPerPage The number of resources returned in a list response page",
                    "title": "itemsPerPage",
                    "format": "uint64"
                },
                "schemas": {
                    "type": "array",
                    "description": "x-displayName: \"schemas\"\nx-example: \"scim spec referred schema\"\nschema defined as per scim spec.",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    }
                },
                "startIndex": {
                    "type": "string",
                    "description": "x-displayName: \"startIndex\"\nx-required\nstartIndex The 1-based index of the first result in the current set of list results.",
                    "title": "startIndex",
                    "format": "uint64"
                },
                "totalResults": {
                    "type": "string",
                    "description": "x-displayName: \"totalResults\"\nx-example: \"10 15\"\ntotalGroup objects available.",
                    "title": "id",
                    "format": "uint64"
                }
            }
        },
        "scimListUserResponse": {
            "type": "object",
            "description": "x-displayName: \"ListUserResources\"\nListUserResources list all the user objects.",
            "title": "ListUserResources",
            "properties": {
                "Resources": {
                    "type": "array",
                    "description": "x-displayName: \"Resources\"\nx-required\nResources representing all the user objects.",
                    "title": "Resources",
                    "items": {
                        "$ref": "#/definitions/scimUser"
                    }
                },
                "itemsPerPage": {
                    "type": "string",
                    "description": "x-displayName: \"itemsPerPage\"\nx-required\nitemsPerPage The number of resources returned in a list response page",
                    "title": "itemsPerPage",
                    "format": "uint64"
                },
                "schemas": {
                    "type": "array",
                    "description": "x-displayName: \"schemas\"\nx-required\nschemas for listing the user.",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    }
                },
                "startIndex": {
                    "type": "string",
                    "description": "x-displayName: \"startIndex\"\nx-required\nstartIndex The 1-based index of the first result in the current set of list results.",
                    "title": "startIndex",
                    "format": "uint64"
                },
                "totalResults": {
                    "type": "string",
                    "description": "x-displayName: \"totalResults\"\nx-required\ntotalResults for the search criteria.",
                    "title": "totalResults",
                    "format": "uint64"
                }
            }
        },
        "scimMeta": {
            "type": "object",
            "description": "x-displayName: \"Meta\"\nx-example: \"Meta\"\nx-required\nResource meta information..",
            "title": "Meta",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "x-displayName: \"created\"\nx-example: \"2011-08-08T04:56:22Z\"\nx-required\ncreate date.",
                    "title": "created"
                },
                "lastModified": {
                    "type": "string",
                    "description": "x-displayName: \"lastModified\"\nx-example: \"2011-08-08T08:00:12Z\"\nx-required\nlast modification date and time.",
                    "title": "lastModified"
                },
                "location": {
                    "type": "string",
                    "description": "x-displayName: \"location\"\nx-example: \"/ResourceType/Users\"\n[x-required]\nlocation for resource.",
                    "title": "location"
                },
                "resourceType": {
                    "type": "string",
                    "description": "x-displayName: \"schemas\"\nx-example: \"User\"\nx-required\ntype of resource.",
                    "title": "resourceType"
                },
                "version": {
                    "type": "string",
                    "description": "x-displayName: \"version\"\nx-example: \"2.0\"\nx-required\nversion for resource type.",
                    "title": "version"
                }
            }
        },
        "scimName": {
            "type": "object",
            "description": "x-displayName: \"Name\"\nName is the name of user.",
            "title": "Name",
            "properties": {
                "familyName": {
                    "type": "string",
                    "description": "x-displayName: \"familyName\"\nx-example: \"Downey\"\nFamily name.",
                    "title": "familyName"
                },
                "formatted": {
                    "type": "string",
                    "description": "x-displayName: \"formatted\"\nx-example: \"R Downey Jr\"\nFormatted name is detailed name of person.",
                    "title": "formatted"
                },
                "givenName": {
                    "type": "string",
                    "description": "x-displayName: \"givenName\"\nx-example: \"Robert J Downey Jr\"\nGiven name of the person.",
                    "title": "givenName"
                },
                "honorificPrefix": {
                    "type": "string",
                    "description": "x-displayName: \"honorificPrefix\"\nx-example: \"Mr\"\nPrefix for the name. Mr Ms. etc.",
                    "title": "honorificPrefix"
                },
                "honorificSuffix": {
                    "type": "string",
                    "description": "x-displayName: \"honorificSuffix\"\nx-example: \"IV\"\nSuffix for the name like Jr Sr I II III etc.",
                    "title": "honorificSuffix"
                },
                "middleName": {
                    "type": "string",
                    "description": "x-displayName: \"middleName\"\nx-example: \"K\"\nMiddle name of the person.",
                    "title": "middleName"
                }
            }
        },
        "scimPatchGroupRequest": {
            "type": "object",
            "description": "x-displayName: \"PatchGroupOperation\"\nPatch operation to modify group.",
            "title": "PatchGroupOperation",
            "properties": {
                "Operations": {
                    "type": "array",
                    "description": "x-displayName: \"Operations\"\nx-example: \"add, remove, replace, delete\"\nx-required\nOperations to modify or delete group.",
                    "title": "Operations",
                    "items": {
                        "$ref": "#/definitions/scimPatchOperation"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "x-displayName: \"id\"\nx-example: \"value\"\nx-required\nunique Id for the group.",
                    "title": "id"
                },
                "schemas": {
                    "type": "array",
                    "description": "x-displayName: \"schemas\"\nx-example: \"schemas per scim spec\"\nx-required\nschemas as per scim spec.",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "scimPatchOperation": {
            "type": "object",
            "description": "x-displayName: \"Patch Operation\"\nPatchOperation is the patch operation where user can be  updated replaced or remove..\nsupported op types are add, remove, replace\nremove is remove a specific entry.",
            "title": "PatchOperation",
            "properties": {
                "op": {
                    "type": "string",
                    "description": "x-displayName: \"op\"\nx-example: \"\"op\": \"add\"\"\nop \"add\", \"replace\", \"remove\", \"delete\"",
                    "title": "op"
                },
                "path": {
                    "type": "string",
                    "description": "x-displayName: \"path\"\nx-example: \"\"path\": \"name.formatted\"\"\npath to the field where the change needs to happen.",
                    "title": "path"
                },
                "value": {
                    "type": "object",
                    "description": "x-displayName: \"value\"\nx-example: \"\"value\": \"New Formatted Name\"\"\nvalue to be used for modifying the object. In case of delete nothing needs to be specified.",
                    "title": "value"
                }
            }
        },
        "scimPatchUserRequest": {
            "type": "object",
            "description": "x-displayName: \"PatchUserRequest\"\nx-example: {\n    \"schemas\": [\n        \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\n    ],\n   operation\": [{\n    \"op\": \"add\",\n    \"path\": \"name.preferredName\",\n    \"value\": \"New preferred Name\"\n    }]\n},\n\"id\": \"1234-5678-901234\"\n\n}\nPatchUserRequest patches the user object or deletes it.",
            "title": "PatchUserRequest",
            "properties": {
                "Operations": {
                    "type": "array",
                    "description": "x-displayName: \"operations\"\nx-example: \"\"operations\": [{\n    \"op\": \"add\",\n    \"path\": \"name.preferredName\",\n    \"value\": \"new name\"\n    }]\n}\"\"\nx-required\noperations that will modify or delete the user object.",
                    "title": "operations",
                    "items": {
                        "$ref": "#/definitions/scimPatchOperation"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "x-displayName: \"id\"\nx-example: \"\"id\": \"1234-5678-901234\"\"\nx-required\nid of the user object that needs patching.",
                    "title": "id"
                },
                "schemas": {
                    "type": "array",
                    "description": "x-displayName: \"schemas\"\nx-example: \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"\nx-required\nschemas for patch.",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "scimResource": {
            "type": "object",
            "description": "x-displayName: \"Resource\"\nResource",
            "title": "Resource",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "x-displayName: \"endPoint\"\n[x-example: \"/Groups\"]\n[x-required]\nendpoint for the resource..",
                    "title": "endpoint"
                },
                "id": {
                    "type": "string",
                    "description": "x-displayName: \"id\"\n[x-example: \"Group\"]\n[x-required]\nId of the resource.",
                    "title": "Id"
                },
                "meta": {
                    "description": "x-displayName: \"meta\"\n[x-example: \"ResourceType]\n[x-required]\nmeta describes the resource type and location.",
                    "title": "meta",
                    "$ref": "#/definitions/scimResourceMeta"
                },
                "name": {
                    "type": "string",
                    "description": "x-displayName: \"name\"\n[x-example: \"Group\"]\n[x-required]\nname of the resource.",
                    "title": "name"
                },
                "schema": {
                    "type": "string",
                    "description": "x-displayName: \"schema\"\n[x-example: \"urn:ietf:params:scim:schemas:core:2.0:ResourceType]\n[x-required]\nSchema defined in scim spec..",
                    "title": "schema"
                },
                "schemas": {
                    "type": "array",
                    "description": "x-displayName: \"schemas\"\n[x-example: \"urn:ietf:params:scim:api:messages:2.0:ListResponse\"]\n[x-required]\nschemas defined in scim spec.",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "scimResourceMeta": {
            "type": "object",
            "description": "x-displayName: \"ResourceMeta\"\nResourceMeta.",
            "title": "ResourceMeta",
            "properties": {
                "location": {
                    "type": "string",
                    "description": "x-displayName: \"location\"\nx-example: \"/Resurce/User\"\nx-required\nlocation of resource.",
                    "title": "location"
                },
                "resourceType": {
                    "type": "string",
                    "description": "x-displayName: \"resourceType\"\nx-example: \"User\"\nx-required\nresourceType represents resource.",
                    "title": "resourceType"
                }
            }
        },
        "scimResourceTypesResponse": {
            "type": "object",
            "description": "x-displayName: \"ResourceTypesResponse\"\nResourceTypesResponse",
            "title": "ResourceTypesResponse",
            "properties": {
                "resources": {
                    "type": "array",
                    "description": "x-displayName: \"resources\"\n[x-example: \"resources\"]\n[x-required]\nResources for the query.",
                    "title": "resources",
                    "items": {
                        "$ref": "#/definitions/scimResource"
                    }
                },
                "schemas": {
                    "type": "array",
                    "description": "x-displayName: \"schemas\"\n[x-example: \"urn:ietf:params:scim:schemas:core:2.0:ResourceType\"]\n[x-required]\nschemas defined by scim spec..",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    }
                },
                "totalResults": {
                    "type": "string",
                    "description": "x-displayName: \"totalResults\"\n[x-example: \"8\"]\n[x-required]\nNo of results for the query.",
                    "title": "totalResults",
                    "format": "uint64"
                }
            }
        },
        "scimServiceProviderConfigResponse": {
            "type": "object",
            "description": "x-displayName: \"ServiceProviderConfigResponse\"\nServiceProviderConfigResponse.",
            "title": "ServiceProviderConfigResponse",
            "properties": {
                "authenticationSchemes": {
                    "type": "array",
                    "description": "x-displayName: \"authenticationSchemes\"\nx-example: \"--\"\nx-required\nsupported authenticationSchemes for the resource.",
                    "title": "authenticationSchemes",
                    "items": {
                        "type": "string"
                    }
                },
                "bulk": {
                    "description": "x-displayName: \"bulk\"\nx-example: \"--\"\nx-required\nbulk for resources..",
                    "title": "bulk",
                    "$ref": "#/definitions/scimSupport"
                },
                "changePassword": {
                    "description": "x-displayName: \"changePassword\"\nx-example: \"true\"\nx-required\nchangePassword support for changing the password.",
                    "title": "changePassword",
                    "$ref": "#/definitions/scimSupport"
                },
                "documentationUri": {
                    "type": "string",
                    "description": "x-displayName: \"documentationUri\"\nx-example: \"https://example.com./scumentation/uri\"\nx-required\nuri for documentation.",
                    "title": "documentationUri"
                },
                "etag": {
                    "description": "x-displayName: \"etag\"\nx-example: \"etag\"\nx-required\netag for resource.",
                    "title": "etag",
                    "$ref": "#/definitions/scimSupport"
                },
                "filter": {
                    "description": "x-displayName: \"filter\"\nx-example: \"user\"\nx-required\nfilter for the resources.",
                    "title": "filter",
                    "$ref": "#/definitions/scimFilter"
                },
                "patch": {
                    "description": "x-displayName: \"patch\"\nx-example: \"--\"\nx-required\npatch for the resource.",
                    "title": "patch",
                    "$ref": "#/definitions/scimSupport"
                },
                "schemas": {
                    "type": "array",
                    "description": "x-displayName: \"schemas\"\nx-example: \"urn:ietf:params:scim:schemas:core:2.0:ResourceType\"\nx-required\nschemas scim spec.",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    }
                },
                "sort": {
                    "description": "x-displayName: \"sort\"\nx-example: \"true\"\nx-required\nsorting support.",
                    "title": "sort",
                    "$ref": "#/definitions/scimSupport"
                }
            }
        },
        "scimSupport": {
            "type": "object",
            "description": "x-displayName: \"Support\"\nSupport.",
            "title": "Support",
            "properties": {
                "supported": {
                    "type": "boolean",
                    "description": "x-displayName: \"supported\"\nx-example: \"true/false\"\nx-required\nis support supported.",
                    "title": "supported",
                    "format": "boolean"
                }
            }
        },
        "scimUser": {
            "type": "object",
            "description": "x-displayName: \"User\"\nUser object representing the user created.",
            "title": "User",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "x-displayName: \"active\"\nx-example: \"true/false\"\nactive specifies if user is active or not.",
                    "title": "active",
                    "format": "boolean"
                },
                "detail": {
                    "type": "string",
                    "description": "x-displayName: \"detail\"\nx-example: \"detail\"\ndetail provides more information when user not found",
                    "title": "detail"
                },
                "displayName": {
                    "type": "string",
                    "description": "x-displayName: \"displayName\"\nx-example: \"Rodney\"\ndisplayName for the user.",
                    "title": "displayName"
                },
                "emails": {
                    "type": "array",
                    "description": "x-displayName: \"emails\"\nx-example: \"test@email.com\"\nemails for the user whether primary or secondary.",
                    "title": "emails",
                    "items": {
                        "$ref": "#/definitions/scimEmail"
                    }
                },
                "externalId": {
                    "type": "string",
                    "description": "x-displayName: \"externalId\"\nx-example: \"rod_1234\"\nx-required\nexternalId specifies the id for the user object in external system.",
                    "title": "externalId"
                },
                "groups": {
                    "type": "array",
                    "description": "x-displayName: \"groups\"\nx-required\nx-example: \"group-id\"\ngroups to which user is part of.",
                    "title": "groups",
                    "items": {
                        "$ref": "#/definitions/scimUserGroup"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "x-displayName: \"id\"\nx-required\nx-example: \"123-456-789012\"\nid for user object.",
                    "title": "id"
                },
                "meta": {
                    "description": "x-displayName: \"meta\"\nmeta specifies the created date, location, resource type, modified time date and version.",
                    "title": "meta",
                    "$ref": "#/definitions/scimMeta"
                },
                "name": {
                    "description": "x-displayName: \"name\"\nx-example: \"Rodney Robilliard\"\nname of user.",
                    "title": "name",
                    "$ref": "#/definitions/scimName"
                },
                "nickName": {
                    "type": "string",
                    "description": "x-displayName: \"nickName\"\nx-example: \"Rod\"\nnickName for the user.",
                    "title": "nickName"
                },
                "roles": {
                    "type": "array",
                    "description": "x-displayName: \"roles\"\nx-required\nx-example: \"roles\"\nroles defined for the user.",
                    "title": "roles",
                    "items": {
                        "type": "string"
                    }
                },
                "schemas": {
                    "type": "array",
                    "description": "x-displayName: \"schemas\"\nx-required\nx-example: \"urn:ietf:params:scim:schemas:core:2.0:User\"\nschemas for user object as per scim spec 2.0.",
                    "title": "schemas",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "x-displayName: \"status\"\nx-example: \"status\"\nstatus set to 404 when user not found",
                    "title": "status"
                },
                "userName": {
                    "type": "string",
                    "description": "x-displayName: \"userName\"\nx-required\nx-example: \"rod_1234\"\nuserName for the user.",
                    "title": "userName"
                },
                "userType": {
                    "description": "x-displayName: \"userType\"\nx-example: \"Employee\"\nuserType type of user.",
                    "title": "userType",
                    "$ref": "#/definitions/userUserType"
                }
            }
        },
        "scimUserGroup": {
            "type": "object",
            "description": "x-displayName: \"UserGroup\"\nUserGroup.",
            "title": "UserGroup",
            "properties": {
                "display": {
                    "type": "string",
                    "description": "x-displayName: \"display\"\nx-example: \"Group-1\"\ndisplay for the user group name.",
                    "title": "display"
                },
                "id": {
                    "type": "string",
                    "description": "x-displayName: \"id\"\nx-example: \"1234-2345-123456\"\nId of the group to which user belongs.",
                    "title": "id"
                }
            }
        },
        "userUserType": {
            "type": "string",
            "description": "x-displayName: \"User Type\"\nUserType is to identify the type of user\n\n - USER: User\nx-displayName: \"User\"\nRegular User\n - SERVICE: Service User\nx-displayName: \"Service User\"\nUser for accessing only APIs/services\n - DEBUG: Debug\nx-displayName: \"Debug\"\nUser which was created by tenant admin for volterra-support team.",
            "title": "UserType",
            "enum": [
                "USER",
                "SERVICE",
                "DEBUG"
            ],
            "default": "USER"
        }
    },
    "x-displayname": "System for Cross-domain Identity Management (SCIM)",
    "x-ves-proto-file": "ves.io/schema/scim/public_customapi.proto"
}`
