//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package scim

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *CreateGroupRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *CreateGroupRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *CreateGroupRequest) DeepCopy() *CreateGroupRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &CreateGroupRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *CreateGroupRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *CreateGroupRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return CreateGroupRequestValidator().Validate(ctx, m, opts...)
}

type ValidateCreateGroupRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateCreateGroupRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*CreateGroupRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *CreateGroupRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["displayName"]; exists {

		vOpts := append(opts, db.WithValidateField("displayName"))
		if err := fv(ctx, m.GetDisplayName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["externalId"]; exists {

		vOpts := append(opts, db.WithValidateField("externalId"))
		if err := fv(ctx, m.GetExternalId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["id"]; exists {

		vOpts := append(opts, db.WithValidateField("id"))
		if err := fv(ctx, m.GetId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["members"]; exists {

		vOpts := append(opts, db.WithValidateField("members"))
		for idx, item := range m.GetMembers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["meta"]; exists {

		vOpts := append(opts, db.WithValidateField("meta"))
		if err := fv(ctx, m.GetMeta(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["schemas"]; exists {

		vOpts := append(opts, db.WithValidateField("schemas"))
		for idx, item := range m.GetSchemas() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultCreateGroupRequestValidator = func() *ValidateCreateGroupRequest {
	v := &ValidateCreateGroupRequest{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["meta"] = MetaValidator().Validate

	return v
}()

func CreateGroupRequestValidator() db.Validator {
	return DefaultCreateGroupRequestValidator
}

// augmented methods on protoc/std generated struct

func (m *Group) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Group) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Group) DeepCopy() *Group {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Group{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Group) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Group) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GroupValidator().Validate(ctx, m, opts...)
}

type ValidateGroup struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGroup) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Group)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Group got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["displayName"]; exists {

		vOpts := append(opts, db.WithValidateField("displayName"))
		if err := fv(ctx, m.GetDisplayName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["externalId"]; exists {

		vOpts := append(opts, db.WithValidateField("externalId"))
		if err := fv(ctx, m.GetExternalId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["id"]; exists {

		vOpts := append(opts, db.WithValidateField("id"))
		if err := fv(ctx, m.GetId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["members"]; exists {

		vOpts := append(opts, db.WithValidateField("members"))
		for idx, item := range m.GetMembers() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["meta"]; exists {

		vOpts := append(opts, db.WithValidateField("meta"))
		if err := fv(ctx, m.GetMeta(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["schemas"]; exists {

		vOpts := append(opts, db.WithValidateField("schemas"))
		for idx, item := range m.GetSchemas() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGroupValidator = func() *ValidateGroup {
	v := &ValidateGroup{FldValidators: map[string]db.ValidatorFunc{}}

	v.FldValidators["meta"] = MetaValidator().Validate

	return v
}()

func GroupValidator() db.Validator {
	return DefaultGroupValidator
}

// augmented methods on protoc/std generated struct

func (m *GroupMembers) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *GroupMembers) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *GroupMembers) DeepCopy() *GroupMembers {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &GroupMembers{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *GroupMembers) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *GroupMembers) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return GroupMembersValidator().Validate(ctx, m, opts...)
}

type ValidateGroupMembers struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateGroupMembers) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*GroupMembers)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *GroupMembers got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["ref"]; exists {

		vOpts := append(opts, db.WithValidateField("ref"))
		if err := fv(ctx, m.GetRef(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["value"]; exists {

		vOpts := append(opts, db.WithValidateField("value"))
		if err := fv(ctx, m.GetValue(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultGroupMembersValidator = func() *ValidateGroupMembers {
	v := &ValidateGroupMembers{FldValidators: map[string]db.ValidatorFunc{}}

	return v
}()

func GroupMembersValidator() db.Validator {
	return DefaultGroupMembersValidator
}

// augmented methods on protoc/std generated struct

func (m *ListGroupResources) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ListGroupResources) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ListGroupResources) DeepCopy() *ListGroupResources {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ListGroupResources{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ListGroupResources) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ListGroupResources) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ListGroupResourcesValidator().Validate(ctx, m, opts...)
}

type ValidateListGroupResources struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateListGroupResources) StartIndexValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint64ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for startIndex")
	}

	return validatorFn, nil
}

func (v *ValidateListGroupResources) ItemsPerPageValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint64ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for itemsPerPage")
	}

	return validatorFn, nil
}

func (v *ValidateListGroupResources) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ListGroupResources)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ListGroupResources got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["Resources"]; exists {

		vOpts := append(opts, db.WithValidateField("Resources"))
		for idx, item := range m.GetResources() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["itemsPerPage"]; exists {

		vOpts := append(opts, db.WithValidateField("itemsPerPage"))
		if err := fv(ctx, m.GetItemsPerPage(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["schemas"]; exists {

		vOpts := append(opts, db.WithValidateField("schemas"))
		for idx, item := range m.GetSchemas() {
			vOpts := append(vOpts, db.WithValidateRepItem(idx), db.WithValidateIsRepItem(true))
			if err := fv(ctx, item, vOpts...); err != nil {
				return err
			}
		}

	}

	if fv, exists := v.FldValidators["startIndex"]; exists {

		vOpts := append(opts, db.WithValidateField("startIndex"))
		if err := fv(ctx, m.GetStartIndex(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["totalResults"]; exists {

		vOpts := append(opts, db.WithValidateField("totalResults"))
		if err := fv(ctx, m.GetTotalResults(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultListGroupResourcesValidator = func() *ValidateListGroupResources {
	v := &ValidateListGroupResources{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhStartIndex := v.StartIndexValidationRuleHandler
	rulesStartIndex := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhStartIndex(rulesStartIndex)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ListGroupResources.startIndex: %s", err)
		panic(errMsg)
	}
	v.FldValidators["startIndex"] = vFn

	vrhItemsPerPage := v.ItemsPerPageValidationRuleHandler
	rulesItemsPerPage := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhItemsPerPage(rulesItemsPerPage)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ListGroupResources.itemsPerPage: %s", err)
		panic(errMsg)
	}
	v.FldValidators["itemsPerPage"] = vFn

	v.FldValidators["Resources"] = GroupValidator().Validate

	return v
}()

func ListGroupResourcesValidator() db.Validator {
	return DefaultListGroupResourcesValidator
}

// augmented methods on protoc/std generated struct

func (m *PatchGroupRequest) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *PatchGroupRequest) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *PatchGroupRequest) DeepCopy() *PatchGroupRequest {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &PatchGroupRequest{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *PatchGroupRequest) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *PatchGroupRequest) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return PatchGroupRequestValidator().Validate(ctx, m, opts...)
}

type ValidatePatchGroupRequest struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidatePatchGroupRequest) SchemasValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for schemas")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for schemas")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated schemas")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items schemas")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePatchGroupRequest) IdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for id")
	}

	return validatorFn, nil
}

func (v *ValidatePatchGroupRequest) OperationsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*PatchOperation, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := PatchOperationValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for Operations")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*PatchOperation)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*PatchOperation, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated Operations")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items Operations")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidatePatchGroupRequest) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*PatchGroupRequest)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *PatchGroupRequest got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["Operations"]; exists {
		vOpts := append(opts, db.WithValidateField("Operations"))
		if err := fv(ctx, m.GetOperations(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["id"]; exists {

		vOpts := append(opts, db.WithValidateField("id"))
		if err := fv(ctx, m.GetId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["schemas"]; exists {
		vOpts := append(opts, db.WithValidateField("schemas"))
		if err := fv(ctx, m.GetSchemas(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultPatchGroupRequestValidator = func() *ValidatePatchGroupRequest {
	v := &ValidatePatchGroupRequest{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSchemas := v.SchemasValidationRuleHandler
	rulesSchemas := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSchemas(rulesSchemas)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PatchGroupRequest.schemas: %s", err)
		panic(errMsg)
	}
	v.FldValidators["schemas"] = vFn

	vrhId := v.IdValidationRuleHandler
	rulesId := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhId(rulesId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PatchGroupRequest.id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["id"] = vFn

	vrhOperations := v.OperationsValidationRuleHandler
	rulesOperations := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhOperations(rulesOperations)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for PatchGroupRequest.Operations: %s", err)
		panic(errMsg)
	}
	v.FldValidators["Operations"] = vFn

	return v
}()

func PatchGroupRequestValidator() db.Validator {
	return DefaultPatchGroupRequestValidator
}
