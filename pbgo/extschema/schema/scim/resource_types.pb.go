// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/scim/resource_types.proto

package scim

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Resource
//
// x-displayName: "Resource"
// Resource
type Resource struct {
	// schemas
	//
	// x-displayName: "schemas"
	// [x-example: "urn:ietf:params:scim:api:messages:2.0:ListResponse"]
	// [x-required]
	// schemas defined in scim spec.
	Schemas []string `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
	// Id
	//
	// x-displayName: "id"
	// [x-example: "Group"]
	// [x-required]
	// Id of the resource.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// meta
	//
	// x-displayName: "meta"
	// [x-example: "ResourceType]
	// [x-required]
	// meta describes the resource type and location.
	Meta *ResourceMeta `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	// name
	//
	// x-displayName: "name"
	// [x-example: "Group"]
	// [x-required]
	// name of the resource.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// endpoint
	//
	// x-displayName: "endPoint"
	// [x-example: "/Groups"]
	// [x-required]
	// endpoint for the resource..
	Endpoint string `protobuf:"bytes,5,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// schema
	//
	// x-displayName: "schema"
	// [x-example: "urn:ietf:params:scim:schemas:core:2.0:ResourceType]
	// [x-required]
	// Schema defined in scim spec..
	Schema string `protobuf:"bytes,6,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (m *Resource) Reset()      { *m = Resource{} }
func (*Resource) ProtoMessage() {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6f4413d1ffcb1ec, []int{0}
}
func (m *Resource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return m.Size()
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetSchemas() []string {
	if m != nil {
		return m.Schemas
	}
	return nil
}

func (m *Resource) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Resource) GetMeta() *ResourceMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Resource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Resource) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Resource) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

// ResourceTypesResponse
//
// x-displayName: "ResourceTypesResponse"
// ResourceTypesResponse
type ResourceTypesResponse struct {
	// schemas
	//
	// x-displayName: "schemas"
	// [x-example: "urn:ietf:params:scim:schemas:core:2.0:ResourceType"]
	// [x-required]
	// schemas defined by scim spec..
	Schemas []string `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
	// totalResults
	//
	// x-displayName: "totalResults"
	// [x-example: "8"]
	// [x-required]
	// No of results for the query.
	TotalResults uint64 `protobuf:"varint,2,opt,name=totalResults,proto3" json:"totalResults,omitempty"`
	// resources
	//
	// x-displayName: "resources"
	// [x-example: "resources"]
	// [x-required]
	// Resources for the query.
	Resources []*Resource `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (m *ResourceTypesResponse) Reset()      { *m = ResourceTypesResponse{} }
func (*ResourceTypesResponse) ProtoMessage() {}
func (*ResourceTypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6f4413d1ffcb1ec, []int{1}
}
func (m *ResourceTypesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceTypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ResourceTypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceTypesResponse.Merge(m, src)
}
func (m *ResourceTypesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ResourceTypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceTypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceTypesResponse proto.InternalMessageInfo

func (m *ResourceTypesResponse) GetSchemas() []string {
	if m != nil {
		return m.Schemas
	}
	return nil
}

func (m *ResourceTypesResponse) GetTotalResults() uint64 {
	if m != nil {
		return m.TotalResults
	}
	return 0
}

func (m *ResourceTypesResponse) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func init() {
	proto.RegisterType((*Resource)(nil), "ves.io.schema.scim.Resource")
	golang_proto.RegisterType((*Resource)(nil), "ves.io.schema.scim.Resource")
	proto.RegisterType((*ResourceTypesResponse)(nil), "ves.io.schema.scim.ResourceTypesResponse")
	golang_proto.RegisterType((*ResourceTypesResponse)(nil), "ves.io.schema.scim.ResourceTypesResponse")
}

func init() {
	proto.RegisterFile("ves.io/schema/scim/resource_types.proto", fileDescriptor_a6f4413d1ffcb1ec)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/scim/resource_types.proto", fileDescriptor_a6f4413d1ffcb1ec)
}

var fileDescriptor_a6f4413d1ffcb1ec = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xb1, 0x8e, 0xd3, 0x40,
	0x10, 0x86, 0x3d, 0x49, 0x08, 0x97, 0x3d, 0x84, 0xd0, 0x4a, 0x20, 0x2b, 0x42, 0x23, 0x2b, 0x0d,
	0x69, 0xb2, 0x96, 0x0e, 0xaa, 0x2b, 0xa9, 0x68, 0x68, 0x2c, 0x2a, 0x9a, 0x93, 0x93, 0xec, 0xf9,
	0x56, 0xc4, 0x9e, 0xd5, 0xee, 0x3a, 0x40, 0x47, 0x45, 0x0d, 0x6f, 0xc1, 0x33, 0x40, 0x43, 0x89,
	0xa8, 0x52, 0xa6, 0x24, 0xeb, 0x86, 0xf2, 0x1e, 0x01, 0xdd, 0x3a, 0x0e, 0x9c, 0x38, 0x5d, 0x37,
	0xff, 0xce, 0xa7, 0x7f, 0xf6, 0xd7, 0x0c, 0x7b, 0xb2, 0x96, 0x56, 0x28, 0x4a, 0xed, 0xe2, 0x42,
	0x96, 0x79, 0x6a, 0x17, 0xaa, 0x4c, 0x8d, 0xb4, 0x54, 0x9b, 0x85, 0x3c, 0x73, 0xef, 0xb5, 0xb4,
	0x42, 0x1b, 0x72, 0xc4, 0x79, 0x0b, 0x8a, 0x16, 0x14, 0x57, 0xe0, 0x78, 0x56, 0x28, 0x77, 0x51,
	0xcf, 0xc5, 0x82, 0xca, 0xb4, 0xa0, 0x82, 0xd2, 0x80, 0xce, 0xeb, 0xf3, 0xa0, 0x82, 0x08, 0x55,
	0x6b, 0x31, 0xc6, 0x1b, 0x66, 0xfd, 0x33, 0x62, 0x9c, 0x5c, 0xef, 0xaf, 0x95, 0x7c, 0x7b, 0x46,
	0xda, 0x29, 0xaa, 0xf6, 0xc4, 0xe4, 0x2b, 0xb0, 0xa3, 0x6c, 0xff, 0x3b, 0x1e, 0xb3, 0xbb, 0x2d,
	0x69, 0x63, 0x48, 0xfa, 0xd3, 0x51, 0xd6, 0x49, 0x7e, 0x9f, 0xf5, 0xd4, 0x32, 0xee, 0x25, 0x30,
	0x1d, 0x65, 0x3d, 0xb5, 0xe4, 0xcf, 0xd8, 0xa0, 0x94, 0x2e, 0x8f, 0xfb, 0x09, 0x4c, 0x8f, 0x4f,
	0x12, 0xf1, 0x7f, 0x14, 0xd1, 0xb9, 0xbe, 0x94, 0x2e, 0xcf, 0x02, 0xcd, 0x39, 0x1b, 0x54, 0x79,
	0x29, 0xe3, 0x41, 0xf0, 0x09, 0x35, 0x1f, 0xb3, 0x23, 0x59, 0x2d, 0x35, 0xa9, 0xca, 0xc5, 0x77,
	0xc2, 0xfb, 0x41, 0xf3, 0x47, 0x6c, 0xd8, 0x3a, 0xc6, 0xc3, 0xd0, 0xd9, 0xab, 0xd3, 0xe1, 0xcf,
	0x6f, 0xd0, 0x7b, 0x00, 0x93, 0xcf, 0xc0, 0x1e, 0x76, 0x63, 0x5e, 0x5d, 0xc5, 0xce, 0xa4, 0xd5,
	0x54, 0xd9, 0xdb, 0x92, 0x4c, 0xd8, 0x3d, 0x47, 0x2e, 0x5f, 0x65, 0xd2, 0xd6, 0x2b, 0x67, 0x43,
	0xa6, 0x41, 0x76, 0xed, 0x8d, 0x9f, 0xb2, 0x51, 0xb7, 0x31, 0x1b, 0xf7, 0x93, 0xfe, 0xf4, 0xf8,
	0xe4, 0xf1, 0x6d, 0x11, 0xb3, 0xbf, 0xf8, 0xf3, 0x8f, 0xb0, 0xd9, 0x61, 0xb4, 0xdd, 0x61, 0x74,
	0xb9, 0x43, 0xf8, 0xe0, 0x11, 0xbe, 0x78, 0x84, 0x1f, 0x1e, 0x61, 0xe3, 0x11, 0xb6, 0x1e, 0xe1,
	0x97, 0x47, 0xf8, 0xed, 0x31, 0xba, 0xf4, 0x08, 0x9f, 0x1a, 0x8c, 0xbe, 0x37, 0x08, 0x9b, 0x06,
	0xa3, 0x6d, 0x83, 0xd1, 0xeb, 0x17, 0x05, 0xe9, 0x37, 0x85, 0x58, 0xd3, 0xca, 0x49, 0x63, 0x72,
	0x51, 0xdb, 0x34, 0x14, 0xe7, 0x64, 0xca, 0x99, 0x36, 0xb4, 0x56, 0x4b, 0x69, 0x66, 0x5d, 0x3b,
	0xd5, 0xf3, 0x82, 0x52, 0xf9, 0xce, 0x1d, 0x0e, 0xe0, 0x70, 0x07, 0xf3, 0x61, 0x58, 0xf0, 0xd3,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x58, 0x4f, 0x50, 0x7a, 0x90, 0x02, 0x00, 0x00,
}

func (this *Resource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Resource)
	if !ok {
		that2, ok := that.(Resource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Schemas) != len(that1.Schemas) {
		return false
	}
	for i := range this.Schemas {
		if this.Schemas[i] != that1.Schemas[i] {
			return false
		}
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Meta.Equal(that1.Meta) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Endpoint != that1.Endpoint {
		return false
	}
	if this.Schema != that1.Schema {
		return false
	}
	return true
}
func (this *ResourceTypesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResourceTypesResponse)
	if !ok {
		that2, ok := that.(ResourceTypesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Schemas) != len(that1.Schemas) {
		return false
	}
	for i := range this.Schemas {
		if this.Schemas[i] != that1.Schemas[i] {
			return false
		}
	}
	if this.TotalResults != that1.TotalResults {
		return false
	}
	if len(this.Resources) != len(that1.Resources) {
		return false
	}
	for i := range this.Resources {
		if !this.Resources[i].Equal(that1.Resources[i]) {
			return false
		}
	}
	return true
}
func (this *Resource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&scim.Resource{")
	s = append(s, "Schemas: "+fmt.Sprintf("%#v", this.Schemas)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Meta != nil {
		s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Endpoint: "+fmt.Sprintf("%#v", this.Endpoint)+",\n")
	s = append(s, "Schema: "+fmt.Sprintf("%#v", this.Schema)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResourceTypesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&scim.ResourceTypesResponse{")
	s = append(s, "Schemas: "+fmt.Sprintf("%#v", this.Schemas)+",\n")
	s = append(s, "TotalResults: "+fmt.Sprintf("%#v", this.TotalResults)+",\n")
	if this.Resources != nil {
		s = append(s, "Resources: "+fmt.Sprintf("%#v", this.Resources)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringResourceTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintResourceTypes(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintResourceTypes(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintResourceTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourceTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintResourceTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Schemas) > 0 {
		for iNdEx := len(m.Schemas) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Schemas[iNdEx])
			copy(dAtA[i:], m.Schemas[iNdEx])
			i = encodeVarintResourceTypes(dAtA, i, uint64(len(m.Schemas[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResourceTypesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceTypesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceTypesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResourceTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TotalResults != 0 {
		i = encodeVarintResourceTypes(dAtA, i, uint64(m.TotalResults))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Schemas) > 0 {
		for iNdEx := len(m.Schemas) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Schemas[iNdEx])
			copy(dAtA[i:], m.Schemas[iNdEx])
			i = encodeVarintResourceTypes(dAtA, i, uint64(len(m.Schemas[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintResourceTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovResourceTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Resource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Schemas) > 0 {
		for _, s := range m.Schemas {
			l = len(s)
			n += 1 + l + sovResourceTypes(uint64(l))
		}
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovResourceTypes(uint64(l))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovResourceTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovResourceTypes(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovResourceTypes(uint64(l))
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovResourceTypes(uint64(l))
	}
	return n
}

func (m *ResourceTypesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Schemas) > 0 {
		for _, s := range m.Schemas {
			l = len(s)
			n += 1 + l + sovResourceTypes(uint64(l))
		}
	}
	if m.TotalResults != 0 {
		n += 1 + sovResourceTypes(uint64(m.TotalResults))
	}
	if len(m.Resources) > 0 {
		for _, e := range m.Resources {
			l = e.Size()
			n += 1 + l + sovResourceTypes(uint64(l))
		}
	}
	return n
}

func sovResourceTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResourceTypes(x uint64) (n int) {
	return sovResourceTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Resource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Resource{`,
		`Schemas:` + fmt.Sprintf("%v", this.Schemas) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Meta:` + strings.Replace(fmt.Sprintf("%v", this.Meta), "ResourceMeta", "ResourceMeta", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Endpoint:` + fmt.Sprintf("%v", this.Endpoint) + `,`,
		`Schema:` + fmt.Sprintf("%v", this.Schema) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResourceTypesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResources := "[]*Resource{"
	for _, f := range this.Resources {
		repeatedStringForResources += strings.Replace(f.String(), "Resource", "Resource", 1) + ","
	}
	repeatedStringForResources += "}"
	s := strings.Join([]string{`&ResourceTypesResponse{`,
		`Schemas:` + fmt.Sprintf("%v", this.Schemas) + `,`,
		`TotalResults:` + fmt.Sprintf("%v", this.TotalResults) + `,`,
		`Resources:` + repeatedStringForResources + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringResourceTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schemas = append(m.Schemas, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ResourceMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResourceTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthResourceTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceTypesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceTypesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceTypesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schemas = append(m.Schemas, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalResults", wireType)
			}
			m.TotalResults = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalResults |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, &Resource{})
			if err := m.Resources[len(m.Resources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResourceTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthResourceTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResourceTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResourceTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourceTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourceTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResourceTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResourceTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResourceTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResourceTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResourceTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResourceTypes = fmt.Errorf("proto: unexpected end of group")
)
