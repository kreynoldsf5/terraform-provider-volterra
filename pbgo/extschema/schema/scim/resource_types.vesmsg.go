//
// Copyright (c) 2022 F5, Inc. All rights reserved.
// Code generated by ves-gen-schema-go. DO NOT EDIT.
//
package scim

import (
	"context"
	"fmt"
	"strings"

	"github.com/gogo/protobuf/proto"

	"gopkg.volterra.us/stdlib/codec"
	"gopkg.volterra.us/stdlib/db"
	"gopkg.volterra.us/stdlib/errors"
)

var (
	// dummy imports in case file has no message with Refs
	_ db.Interface
	_ = errors.Wrap
	_ = strings.Split
)

// augmented methods on protoc/std generated struct

func (m *Resource) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *Resource) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *Resource) DeepCopy() *Resource {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &Resource{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *Resource) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *Resource) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ResourceValidator().Validate(ctx, m, opts...)
}

type ValidateResource struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateResource) SchemasValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for schemas")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for schemas")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated schemas")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items schemas")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateResource) IdValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for id")
	}

	return validatorFn, nil
}

func (v *ValidateResource) MetaValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	reqdValidatorFn, err := db.NewMessageValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "MessageValidationRuleHandler for meta")
	}
	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		if err := reqdValidatorFn(ctx, val, opts...); err != nil {
			return err
		}

		if err := ResourceMetaValidator().Validate(ctx, val, opts...); err != nil {
			return err
		}

		return nil
	}

	return validatorFn, nil
}

func (v *ValidateResource) NameValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for name")
	}

	return validatorFn, nil
}

func (v *ValidateResource) EndpointValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for endpoint")
	}

	return validatorFn, nil
}

func (v *ValidateResource) SchemaValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewStringValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for schema")
	}

	return validatorFn, nil
}

func (v *ValidateResource) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*Resource)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *Resource got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["endpoint"]; exists {

		vOpts := append(opts, db.WithValidateField("endpoint"))
		if err := fv(ctx, m.GetEndpoint(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["id"]; exists {

		vOpts := append(opts, db.WithValidateField("id"))
		if err := fv(ctx, m.GetId(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["meta"]; exists {

		vOpts := append(opts, db.WithValidateField("meta"))
		if err := fv(ctx, m.GetMeta(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["name"]; exists {

		vOpts := append(opts, db.WithValidateField("name"))
		if err := fv(ctx, m.GetName(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["schema"]; exists {

		vOpts := append(opts, db.WithValidateField("schema"))
		if err := fv(ctx, m.GetSchema(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["schemas"]; exists {
		vOpts := append(opts, db.WithValidateField("schemas"))
		if err := fv(ctx, m.GetSchemas(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultResourceValidator = func() *ValidateResource {
	v := &ValidateResource{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSchemas := v.SchemasValidationRuleHandler
	rulesSchemas := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSchemas(rulesSchemas)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Resource.schemas: %s", err)
		panic(errMsg)
	}
	v.FldValidators["schemas"] = vFn

	vrhId := v.IdValidationRuleHandler
	rulesId := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhId(rulesId)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Resource.id: %s", err)
		panic(errMsg)
	}
	v.FldValidators["id"] = vFn

	vrhMeta := v.MetaValidationRuleHandler
	rulesMeta := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhMeta(rulesMeta)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Resource.meta: %s", err)
		panic(errMsg)
	}
	v.FldValidators["meta"] = vFn

	vrhName := v.NameValidationRuleHandler
	rulesName := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhName(rulesName)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Resource.name: %s", err)
		panic(errMsg)
	}
	v.FldValidators["name"] = vFn

	vrhEndpoint := v.EndpointValidationRuleHandler
	rulesEndpoint := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhEndpoint(rulesEndpoint)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Resource.endpoint: %s", err)
		panic(errMsg)
	}
	v.FldValidators["endpoint"] = vFn

	vrhSchema := v.SchemaValidationRuleHandler
	rulesSchema := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSchema(rulesSchema)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for Resource.schema: %s", err)
		panic(errMsg)
	}
	v.FldValidators["schema"] = vFn

	return v
}()

func ResourceValidator() db.Validator {
	return DefaultResourceValidator
}

// augmented methods on protoc/std generated struct

func (m *ResourceTypesResponse) ToJSON() (string, error) {
	return codec.ToJSON(m)
}

func (m *ResourceTypesResponse) ToYAML() (string, error) {
	return codec.ToYAML(m)
}

func (m *ResourceTypesResponse) DeepCopy() *ResourceTypesResponse {
	if m == nil {
		return nil
	}
	ser, err := m.Marshal()
	if err != nil {
		return nil
	}
	c := &ResourceTypesResponse{}
	err = c.Unmarshal(ser)
	if err != nil {
		return nil
	}
	return c
}

func (m *ResourceTypesResponse) DeepCopyProto() proto.Message {
	if m == nil {
		return nil
	}
	return m.DeepCopy()
}

func (m *ResourceTypesResponse) Validate(ctx context.Context, opts ...db.ValidateOpt) error {
	return ResourceTypesResponseValidator().Validate(ctx, m, opts...)
}

type ValidateResourceTypesResponse struct {
	FldValidators map[string]db.ValidatorFunc
}

func (v *ValidateResourceTypesResponse) SchemasValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemRules := db.GetRepStringItemRules(rules)
	itemValFn, err := db.NewStringValidationRuleHandler(itemRules)
	if err != nil {
		return nil, errors.Wrap(err, "Item ValidationRuleHandler for schemas")
	}
	itemsValidatorFn := func(ctx context.Context, elems []string, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := itemValFn(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for schemas")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]string)
		if !ok {
			return fmt.Errorf("Repeated validation expected []string, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal := fmt.Sprintf("%v", elem)
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated schemas")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items schemas")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateResourceTypesResponse) TotalResultsValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	validatorFn, err := db.NewUint64ValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "ValidationRuleHandler for totalResults")
	}

	return validatorFn, nil
}

func (v *ValidateResourceTypesResponse) ResourcesValidationRuleHandler(rules map[string]string) (db.ValidatorFunc, error) {

	itemsValidatorFn := func(ctx context.Context, elems []*Resource, opts ...db.ValidateOpt) error {
		for i, el := range elems {
			if err := ResourceValidator().Validate(ctx, el, opts...); err != nil {
				return errors.Wrap(err, fmt.Sprintf("element %d", i))
			}
		}
		return nil
	}
	repValFn, err := db.NewRepeatedValidationRuleHandler(rules)
	if err != nil {
		return nil, errors.Wrap(err, "Repeated ValidationRuleHandler for resources")
	}

	validatorFn := func(ctx context.Context, val interface{}, opts ...db.ValidateOpt) error {
		elems, ok := val.([]*Resource)
		if !ok {
			return fmt.Errorf("Repeated validation expected []*Resource, got %T", val)
		}
		l := []string{}
		for _, elem := range elems {
			strVal, err := codec.ToJSON(elem, codec.ToWithUseProtoFieldName())
			if err != nil {
				return errors.Wrapf(err, "Converting %v to JSON", elem)
			}
			l = append(l, strVal)
		}
		if err := repValFn(ctx, l, opts...); err != nil {
			return errors.Wrap(err, "repeated resources")
		}
		if err := itemsValidatorFn(ctx, elems, opts...); err != nil {
			return errors.Wrap(err, "items resources")
		}
		return nil
	}

	return validatorFn, nil
}

func (v *ValidateResourceTypesResponse) Validate(ctx context.Context, pm interface{}, opts ...db.ValidateOpt) error {
	m, ok := pm.(*ResourceTypesResponse)
	if !ok {
		switch t := pm.(type) {
		case nil:
			return nil
		default:
			return fmt.Errorf("Expected type *ResourceTypesResponse got type %s", t)
		}
	}
	if m == nil {
		return nil
	}

	if fv, exists := v.FldValidators["resources"]; exists {
		vOpts := append(opts, db.WithValidateField("resources"))
		if err := fv(ctx, m.GetResources(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["schemas"]; exists {
		vOpts := append(opts, db.WithValidateField("schemas"))
		if err := fv(ctx, m.GetSchemas(), vOpts...); err != nil {
			return err
		}

	}

	if fv, exists := v.FldValidators["totalResults"]; exists {

		vOpts := append(opts, db.WithValidateField("totalResults"))
		if err := fv(ctx, m.GetTotalResults(), vOpts...); err != nil {
			return err
		}

	}

	return nil
}

// Well-known symbol for default validator implementation
var DefaultResourceTypesResponseValidator = func() *ValidateResourceTypesResponse {
	v := &ValidateResourceTypesResponse{FldValidators: map[string]db.ValidatorFunc{}}

	var (
		err error
		vFn db.ValidatorFunc
	)
	_, _ = err, vFn
	vFnMap := map[string]db.ValidatorFunc{}
	_ = vFnMap

	vrhSchemas := v.SchemasValidationRuleHandler
	rulesSchemas := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhSchemas(rulesSchemas)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ResourceTypesResponse.schemas: %s", err)
		panic(errMsg)
	}
	v.FldValidators["schemas"] = vFn

	vrhTotalResults := v.TotalResultsValidationRuleHandler
	rulesTotalResults := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhTotalResults(rulesTotalResults)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ResourceTypesResponse.totalResults: %s", err)
		panic(errMsg)
	}
	v.FldValidators["totalResults"] = vFn

	vrhResources := v.ResourcesValidationRuleHandler
	rulesResources := map[string]string{
		"ves.io.schema.rules.message.required": "true",
	}
	vFn, err = vrhResources(rulesResources)
	if err != nil {
		errMsg := fmt.Sprintf("ValidationRuleHandler for ResourceTypesResponse.resources: %s", err)
		panic(errMsg)
	}
	v.FldValidators["resources"] = vFn

	return v
}()

func ResourceTypesResponseValidator() db.Validator {
	return DefaultResourceTypesResponseValidator
}
