// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/api_definition/custom_api.proto

// api definition object

package api_definition

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetBasePathSuggestionsRequest is used to get suggestions of base paths
//
// x-displayName: "Get Base paths Suggestions Request"
// This is the input message of the 'GetBasePathSuggestions' RPC
type GetBasePathSuggestionsRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "default"
	// Namespace for the object to be configured
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "all-api"
	// Name of the object to be configured
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// match_value
	//
	// x-displayName: "Match Value"
	// x-example: "some-substring"
	// A substring that must be present in either the value or description of each SuggestedItem in the response.
	MatchValue string `protobuf:"bytes,3,opt,name=match_value,json=matchValue,proto3" json:"match_value,omitempty"`
}

func (m *GetBasePathSuggestionsRequest) Reset()      { *m = GetBasePathSuggestionsRequest{} }
func (*GetBasePathSuggestionsRequest) ProtoMessage() {}
func (*GetBasePathSuggestionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f49c799e21c3da10, []int{0}
}
func (m *GetBasePathSuggestionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBasePathSuggestionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBasePathSuggestionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBasePathSuggestionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBasePathSuggestionsRequest.Merge(m, src)
}
func (m *GetBasePathSuggestionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBasePathSuggestionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBasePathSuggestionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBasePathSuggestionsRequest proto.InternalMessageInfo

func (m *GetBasePathSuggestionsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetBasePathSuggestionsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetBasePathSuggestionsRequest) GetMatchValue() string {
	if m != nil {
		return m.MatchValue
	}
	return ""
}

// GetApiEndpointPathsSuggestionsRequest is used to get suggestions of api endpoint paths
//
// x-displayName: "Get Api Endpoint Paths Suggestions Request"
// This is the input message of the 'GetApiEndpointPathsSuggestions' RPC
type GetApiEndpointPathsSuggestionsRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "default"
	// Namespace for the object to be configured
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "all-api"
	// Name of the object to be configured
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Base Path
	//
	// x-displayName: "Base Path"
	// x-example: "/api/v1/project"
	// The base path to which suggested paths is required
	BasePath string `protobuf:"bytes,3,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`
	// match_value
	//
	// x-displayName: "Match Value"
	// x-example: "some-substring"
	// A substring that must be present in either the value or description of each SuggestedItem in the response.
	MatchValue string `protobuf:"bytes,4,opt,name=match_value,json=matchValue,proto3" json:"match_value,omitempty"`
}

func (m *GetApiEndpointPathsSuggestionsRequest) Reset()      { *m = GetApiEndpointPathsSuggestionsRequest{} }
func (*GetApiEndpointPathsSuggestionsRequest) ProtoMessage() {}
func (*GetApiEndpointPathsSuggestionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f49c799e21c3da10, []int{1}
}
func (m *GetApiEndpointPathsSuggestionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetApiEndpointPathsSuggestionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetApiEndpointPathsSuggestionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetApiEndpointPathsSuggestionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetApiEndpointPathsSuggestionsRequest.Merge(m, src)
}
func (m *GetApiEndpointPathsSuggestionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetApiEndpointPathsSuggestionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetApiEndpointPathsSuggestionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetApiEndpointPathsSuggestionsRequest proto.InternalMessageInfo

func (m *GetApiEndpointPathsSuggestionsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetApiEndpointPathsSuggestionsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetApiEndpointPathsSuggestionsRequest) GetBasePath() string {
	if m != nil {
		return m.BasePath
	}
	return ""
}

func (m *GetApiEndpointPathsSuggestionsRequest) GetMatchValue() string {
	if m != nil {
		return m.MatchValue
	}
	return ""
}

// GetMethodsSuggestionsRequest is used to get suggestion of methods for api endpoint path (and base path)
//
// x-displayName: "Get Methods Suggestion Request"
// This is the input message of the 'GetMethodsSuggestions' RPC
type GetMethodsSuggestionsRequest struct {
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "default"
	// Namespace for the object to be configured
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Name
	//
	// x-displayName: "Name"
	// x-example: "all-api"
	// Name of the object to be configured
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Base Path
	//
	// x-displayName: "Base Path"
	// x-example: "/api/v1/project"
	// The base Path to which suggested methods is required
	BasePath string `protobuf:"bytes,3,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`
	// Api Endpoint Path
	//
	// x-displayName: "Api Endpoint Path"
	// x-required
	// x-example: "/project/{username}/{project}/envvar"
	// The api endpoint path to which suggested methods are required
	ApiEndpointPath string `protobuf:"bytes,4,opt,name=api_endpoint_path,json=apiEndpointPath,proto3" json:"api_endpoint_path,omitempty"`
}

func (m *GetMethodsSuggestionsRequest) Reset()      { *m = GetMethodsSuggestionsRequest{} }
func (*GetMethodsSuggestionsRequest) ProtoMessage() {}
func (*GetMethodsSuggestionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f49c799e21c3da10, []int{2}
}
func (m *GetMethodsSuggestionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMethodsSuggestionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMethodsSuggestionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMethodsSuggestionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMethodsSuggestionsRequest.Merge(m, src)
}
func (m *GetMethodsSuggestionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMethodsSuggestionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMethodsSuggestionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMethodsSuggestionsRequest proto.InternalMessageInfo

func (m *GetMethodsSuggestionsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetMethodsSuggestionsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetMethodsSuggestionsRequest) GetBasePath() string {
	if m != nil {
		return m.BasePath
	}
	return ""
}

func (m *GetMethodsSuggestionsRequest) GetApiEndpointPath() string {
	if m != nil {
		return m.ApiEndpointPath
	}
	return ""
}

func init() {
	proto.RegisterType((*GetBasePathSuggestionsRequest)(nil), "ves.io.schema.views.api_definition.GetBasePathSuggestionsRequest")
	proto.RegisterType((*GetApiEndpointPathsSuggestionsRequest)(nil), "ves.io.schema.views.api_definition.GetApiEndpointPathsSuggestionsRequest")
	proto.RegisterType((*GetMethodsSuggestionsRequest)(nil), "ves.io.schema.views.api_definition.GetMethodsSuggestionsRequest")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/api_definition/custom_api.proto", fileDescriptor_f49c799e21c3da10)
}

var fileDescriptor_f49c799e21c3da10 = []byte{
	// 604 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xc1, 0x6b, 0x13, 0x4f,
	0x18, 0xcd, 0x24, 0xe9, 0x8f, 0x5f, 0xc6, 0x83, 0xba, 0xa2, 0x84, 0x98, 0x0e, 0x65, 0x41, 0x14,
	0xa5, 0x3b, 0x60, 0x6f, 0x5e, 0xb4, 0x15, 0x29, 0x45, 0x84, 0xb2, 0xc5, 0x52, 0x7a, 0x30, 0x4e,
	0x92, 0xaf, 0x9b, 0xc1, 0xec, 0xce, 0xb8, 0x33, 0x59, 0x15, 0xa9, 0x14, 0xff, 0x00, 0x29, 0xf8,
	0x4f, 0x78, 0xf3, 0x6c, 0xbd, 0xf4, 0xe8, 0xb1, 0x20, 0x42, 0x2f, 0x82, 0xdd, 0x78, 0xa8, 0x07,
	0xa1, 0x7f, 0x82, 0xec, 0x64, 0x1b, 0xdd, 0xb5, 0xa6, 0x41, 0x8a, 0xb7, 0xd9, 0x79, 0xfb, 0xbe,
	0xef, 0xbd, 0x6f, 0xde, 0xce, 0xe2, 0x99, 0x08, 0x94, 0xc3, 0x05, 0x55, 0xad, 0x0e, 0xf8, 0x8c,
	0x46, 0x1c, 0x9e, 0x28, 0xca, 0x24, 0x6f, 0xb4, 0x61, 0x8d, 0x07, 0x5c, 0x73, 0x11, 0xd0, 0x56,
	0x4f, 0x69, 0xe1, 0x37, 0x98, 0xe4, 0x8e, 0x0c, 0x85, 0x16, 0x96, 0x3d, 0x20, 0x39, 0x03, 0x92,
	0x63, 0x48, 0x4e, 0x96, 0x54, 0xab, 0x7b, 0x42, 0x78, 0x5d, 0x48, 0x6a, 0x51, 0x16, 0x04, 0x42,
	0xb3, 0x64, 0x5b, 0x0d, 0x2a, 0xd4, 0x2e, 0x66, 0xdb, 0x0a, 0xf9, 0x2b, 0x38, 0x99, 0x05, 0x65,
	0xa4, 0x1b, 0xfa, 0x99, 0x84, 0x43, 0xb8, 0x9e, 0x93, 0xcc, 0xba, 0xbc, 0xcd, 0x34, 0xa4, 0xa8,
	0x9d, 0x43, 0x41, 0x41, 0x10, 0x65, 0x1b, 0xd8, 0x2f, 0xf0, 0xe4, 0x3c, 0xe8, 0x39, 0xa6, 0x60,
	0x91, 0xe9, 0xce, 0x52, 0xcf, 0xf3, 0x40, 0x19, 0xdc, 0x85, 0xc7, 0x3d, 0x50, 0xda, 0xaa, 0xe3,
	0x4a, 0xc0, 0x7c, 0x50, 0x92, 0xb5, 0xa0, 0x8a, 0xa6, 0xd0, 0x95, 0x8a, 0xfb, 0x73, 0xc3, 0xb2,
	0x70, 0x39, 0x79, 0xa8, 0x16, 0x0d, 0x60, 0xd6, 0xd6, 0x35, 0x7c, 0xca, 0x67, 0xba, 0xd5, 0x69,
	0x44, 0xac, 0xdb, 0x83, 0x6a, 0x29, 0x81, 0xe6, 0xf0, 0xd6, 0xb7, 0xed, 0xd2, 0x44, 0x58, 0xaa,
	0x6e, 0x14, 0x5d, 0x6c, 0xe0, 0xe5, 0x04, 0xb5, 0xdf, 0x22, 0x7c, 0x69, 0x1e, 0xf4, 0xac, 0xe4,
	0x77, 0x82, 0xb6, 0x14, 0x3c, 0xd0, 0x89, 0x0e, 0x75, 0x22, 0x42, 0x2e, 0xe3, 0x4a, 0x93, 0x29,
	0x68, 0x48, 0xa6, 0x3b, 0x39, 0x19, 0xfb, 0x45, 0xe4, 0xfe, 0xdf, 0x4c, 0x5d, 0xe7, 0x15, 0x97,
	0x47, 0x2a, 0xde, 0x42, 0xb8, 0x3e, 0x0f, 0xfa, 0x1e, 0xe8, 0x8e, 0x68, 0xff, 0x63, 0xa1, 0x37,
	0xf1, 0xd9, 0x24, 0x5b, 0x90, 0x8e, 0x6a, 0x40, 0x18, 0xc8, 0x3d, 0x97, 0x10, 0xca, 0x61, 0xf1,
	0x0c, 0x4a, 0x99, 0x9b, 0x25, 0xe4, 0x9e, 0x66, 0xd9, 0xb9, 0x5e, 0x7f, 0x37, 0x81, 0x2b, 0xb7,
	0x4d, 0x86, 0x67, 0x17, 0x17, 0xac, 0x4f, 0x08, 0x5f, 0x38, 0xfa, 0xf4, 0xad, 0x59, 0xe7, 0xf8,
	0x60, 0x3b, 0x23, 0x93, 0x53, 0x9b, 0xca, 0x95, 0x48, 0x5f, 0x31, 0x53, 0x54, 0x2e, 0x28, 0x69,
	0x2f, 0xbf, 0xfc, 0xf8, 0xf5, 0x75, 0x71, 0xd1, 0xbe, 0x4b, 0x65, 0xc8, 0x23, 0xa6, 0x81, 0x0e,
	0xe7, 0xa4, 0xe8, 0xf3, 0xe1, 0x7a, 0x3d, 0xf7, 0x15, 0xa6, 0xd8, 0x3a, 0x1d, 0x0e, 0x8d, 0xaa,
	0x61, 0xfb, 0x1b, 0xe8, 0xaa, 0xf5, 0x1d, 0x61, 0x32, 0x3a, 0x54, 0xd6, 0xc2, 0x98, 0xfe, 0x8e,
	0x0f, 0xe6, 0x18, 0x3e, 0x1f, 0x18, 0x9f, 0x2b, 0xf6, 0xd2, 0x5f, 0xfa, 0xfc, 0xed, 0xcc, 0x73,
	0x7e, 0x3f, 0x23, 0x7c, 0xfe, 0xc8, 0x48, 0x5a, 0xb7, 0xc6, 0xb4, 0xf9, 0xc7, 0x34, 0x8f, 0xe1,
	0xee, 0xa1, 0x71, 0xb7, 0x6a, 0xdf, 0x3f, 0x09, 0x77, 0xbe, 0x11, 0x92, 0xf5, 0x57, 0x2b, 0x6f,
	0xbf, 0x47, 0xe5, 0xb9, 0x57, 0x68, 0x67, 0x8f, 0x14, 0x76, 0xf7, 0x48, 0xe1, 0x60, 0x8f, 0xa0,
	0x8d, 0x98, 0xa0, 0x37, 0x31, 0x41, 0x1f, 0x62, 0x82, 0x76, 0x62, 0x82, 0xbe, 0xc4, 0x04, 0xed,
	0xc7, 0xa4, 0x70, 0x10, 0x13, 0xb4, 0xd9, 0x27, 0x85, 0x9d, 0x3e, 0x29, 0xec, 0xf6, 0x49, 0x61,
	0x75, 0xc5, 0x13, 0xf2, 0x91, 0xe7, 0x44, 0xa2, 0xab, 0x21, 0x0c, 0x99, 0xd3, 0x53, 0xd4, 0x2c,
	0xd6, 0x44, 0xe8, 0x4f, 0xcb, 0x50, 0x44, 0xbc, 0x0d, 0xe1, 0xf4, 0x21, 0x4c, 0x65, 0xd3, 0x13,
	0x14, 0x9e, 0xea, 0xf4, 0xd2, 0x1c, 0xf1, 0x33, 0x68, 0xfe, 0x67, 0xae, 0xd0, 0x99, 0x1f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x24, 0x45, 0x80, 0xb7, 0x39, 0x06, 0x00, 0x00,
}

func (this *GetBasePathSuggestionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetBasePathSuggestionsRequest)
	if !ok {
		that2, ok := that.(GetBasePathSuggestionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.MatchValue != that1.MatchValue {
		return false
	}
	return true
}
func (this *GetApiEndpointPathsSuggestionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetApiEndpointPathsSuggestionsRequest)
	if !ok {
		that2, ok := that.(GetApiEndpointPathsSuggestionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.BasePath != that1.BasePath {
		return false
	}
	if this.MatchValue != that1.MatchValue {
		return false
	}
	return true
}
func (this *GetMethodsSuggestionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMethodsSuggestionsRequest)
	if !ok {
		that2, ok := that.(GetMethodsSuggestionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.BasePath != that1.BasePath {
		return false
	}
	if this.ApiEndpointPath != that1.ApiEndpointPath {
		return false
	}
	return true
}
func (this *GetBasePathSuggestionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api_definition.GetBasePathSuggestionsRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "MatchValue: "+fmt.Sprintf("%#v", this.MatchValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetApiEndpointPathsSuggestionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&api_definition.GetApiEndpointPathsSuggestionsRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "BasePath: "+fmt.Sprintf("%#v", this.BasePath)+",\n")
	s = append(s, "MatchValue: "+fmt.Sprintf("%#v", this.MatchValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMethodsSuggestionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&api_definition.GetMethodsSuggestionsRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "BasePath: "+fmt.Sprintf("%#v", this.BasePath)+",\n")
	s = append(s, "ApiEndpointPath: "+fmt.Sprintf("%#v", this.ApiEndpointPath)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCustomApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Get base-path suggestions
	//
	// x-displayName: "Get Base Path Suggestions"
	// Get the suggestions for base paths
	GetBasePathSuggestions(ctx context.Context, in *GetBasePathSuggestionsRequest, opts ...grpc.CallOption) (*schema.SuggestValuesResp, error)
	// Get ApiEndpointPaths suggestions
	//
	// x-displayName: "Get Api Endpoint Paths Suggestions"
	// Get the suggestions for api endpoint paths for specific base path
	GetApiEndpointPathsSuggestions(ctx context.Context, in *GetApiEndpointPathsSuggestionsRequest, opts ...grpc.CallOption) (*schema.SuggestValuesResp, error)
	// Get methods suggestions
	//
	// x-displayName: "Get Methods Suggestions"
	// Get the suggestions for methods for specific api endpoint path (and base path)
	GetMethodsSuggestions(ctx context.Context, in *GetMethodsSuggestionsRequest, opts ...grpc.CallOption) (*schema.SuggestValuesResp, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) GetBasePathSuggestions(ctx context.Context, in *GetBasePathSuggestionsRequest, opts ...grpc.CallOption) (*schema.SuggestValuesResp, error) {
	out := new(schema.SuggestValuesResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.api_definition.CustomAPI/GetBasePathSuggestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetApiEndpointPathsSuggestions(ctx context.Context, in *GetApiEndpointPathsSuggestionsRequest, opts ...grpc.CallOption) (*schema.SuggestValuesResp, error) {
	out := new(schema.SuggestValuesResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.api_definition.CustomAPI/GetApiEndpointPathsSuggestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) GetMethodsSuggestions(ctx context.Context, in *GetMethodsSuggestionsRequest, opts ...grpc.CallOption) (*schema.SuggestValuesResp, error) {
	out := new(schema.SuggestValuesResp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.api_definition.CustomAPI/GetMethodsSuggestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Get base-path suggestions
	//
	// x-displayName: "Get Base Path Suggestions"
	// Get the suggestions for base paths
	GetBasePathSuggestions(context.Context, *GetBasePathSuggestionsRequest) (*schema.SuggestValuesResp, error)
	// Get ApiEndpointPaths suggestions
	//
	// x-displayName: "Get Api Endpoint Paths Suggestions"
	// Get the suggestions for api endpoint paths for specific base path
	GetApiEndpointPathsSuggestions(context.Context, *GetApiEndpointPathsSuggestionsRequest) (*schema.SuggestValuesResp, error)
	// Get methods suggestions
	//
	// x-displayName: "Get Methods Suggestions"
	// Get the suggestions for methods for specific api endpoint path (and base path)
	GetMethodsSuggestions(context.Context, *GetMethodsSuggestionsRequest) (*schema.SuggestValuesResp, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) GetBasePathSuggestions(ctx context.Context, req *GetBasePathSuggestionsRequest) (*schema.SuggestValuesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasePathSuggestions not implemented")
}
func (*UnimplementedCustomAPIServer) GetApiEndpointPathsSuggestions(ctx context.Context, req *GetApiEndpointPathsSuggestionsRequest) (*schema.SuggestValuesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiEndpointPathsSuggestions not implemented")
}
func (*UnimplementedCustomAPIServer) GetMethodsSuggestions(ctx context.Context, req *GetMethodsSuggestionsRequest) (*schema.SuggestValuesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMethodsSuggestions not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_GetBasePathSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasePathSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetBasePathSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.api_definition.CustomAPI/GetBasePathSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetBasePathSuggestions(ctx, req.(*GetBasePathSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetApiEndpointPathsSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiEndpointPathsSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetApiEndpointPathsSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.api_definition.CustomAPI/GetApiEndpointPathsSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetApiEndpointPathsSuggestions(ctx, req.(*GetApiEndpointPathsSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_GetMethodsSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMethodsSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetMethodsSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.api_definition.CustomAPI/GetMethodsSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetMethodsSuggestions(ctx, req.(*GetMethodsSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.views.api_definition.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBasePathSuggestions",
			Handler:    _CustomAPI_GetBasePathSuggestions_Handler,
		},
		{
			MethodName: "GetApiEndpointPathsSuggestions",
			Handler:    _CustomAPI_GetApiEndpointPathsSuggestions_Handler,
		},
		{
			MethodName: "GetMethodsSuggestions",
			Handler:    _CustomAPI_GetMethodsSuggestions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/views/api_definition/custom_api.proto",
}

func (m *GetBasePathSuggestionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBasePathSuggestionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBasePathSuggestionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MatchValue) > 0 {
		i -= len(m.MatchValue)
		copy(dAtA[i:], m.MatchValue)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.MatchValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetApiEndpointPathsSuggestionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetApiEndpointPathsSuggestionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetApiEndpointPathsSuggestionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MatchValue) > 0 {
		i -= len(m.MatchValue)
		copy(dAtA[i:], m.MatchValue)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.MatchValue)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BasePath) > 0 {
		i -= len(m.BasePath)
		copy(dAtA[i:], m.BasePath)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.BasePath)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMethodsSuggestionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMethodsSuggestionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMethodsSuggestionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiEndpointPath) > 0 {
		i -= len(m.ApiEndpointPath)
		copy(dAtA[i:], m.ApiEndpointPath)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.ApiEndpointPath)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BasePath) > 0 {
		i -= len(m.BasePath)
		copy(dAtA[i:], m.BasePath)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.BasePath)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintCustomApi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCustomApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovCustomApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetBasePathSuggestionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.MatchValue)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *GetApiEndpointPathsSuggestionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.BasePath)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.MatchValue)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func (m *GetMethodsSuggestionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.BasePath)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	l = len(m.ApiEndpointPath)
	if l > 0 {
		n += 1 + l + sovCustomApi(uint64(l))
	}
	return n
}

func sovCustomApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCustomApi(x uint64) (n int) {
	return sovCustomApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetBasePathSuggestionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBasePathSuggestionsRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`MatchValue:` + fmt.Sprintf("%v", this.MatchValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetApiEndpointPathsSuggestionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetApiEndpointPathsSuggestionsRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`BasePath:` + fmt.Sprintf("%v", this.BasePath) + `,`,
		`MatchValue:` + fmt.Sprintf("%v", this.MatchValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetMethodsSuggestionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetMethodsSuggestionsRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`BasePath:` + fmt.Sprintf("%v", this.BasePath) + `,`,
		`ApiEndpointPath:` + fmt.Sprintf("%v", this.ApiEndpointPath) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCustomApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetBasePathSuggestionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBasePathSuggestionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBasePathSuggestionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetApiEndpointPathsSuggestionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetApiEndpointPathsSuggestionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetApiEndpointPathsSuggestionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMethodsSuggestionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMethodsSuggestionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMethodsSuggestionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEndpointPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCustomApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCustomApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCustomApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCustomApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCustomApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCustomApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCustomApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCustomApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCustomApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCustomApi = fmt.Errorf("proto: unexpected end of group")
)
