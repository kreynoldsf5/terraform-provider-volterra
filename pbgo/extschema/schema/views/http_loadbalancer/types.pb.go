// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/http_loadbalancer/types.proto

package http_loadbalancer

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	schema "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/policy"
	rate_limiter "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/rate_limiter"
	route "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/route"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy"
	service_policy_rule "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/service_policy_rule"
	views "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	rate_limiter_policy "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/rate_limiter_policy"
	virtual_host "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host"
	virtual_host_dns_info "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/virtual_host_dns_info"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// URLSchemeType
//
// x-displayName: "URL Scheme"
// SchemeType is used to indicate URL scheme.
type URLScheme int32

const (
	// BOTH
	//
	// x-displayName: "BOTH"
	// URL scheme for https:// or http://.
	BOTH URLScheme = 0
	// HTTP
	//
	// x-displayName: "HTTP"
	// URL scheme http:// only.
	HTTP URLScheme = 1
	// HTTPS
	//
	// x-displayName: "HTTPS"
	// URL scheme https:// only.
	HTTPS URLScheme = 2
)

var URLScheme_name = map[int32]string{
	0: "BOTH",
	1: "HTTP",
	2: "HTTPS",
}

var URLScheme_value = map[string]int32{
	"BOTH":  0,
	"HTTP":  1,
	"HTTPS": 2,
}

func (URLScheme) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{0}
}

// ShapeBotDefenseRegion
//
// x-displayName: "Bot Defense Region"
// Defines a selection for Bot Defense regional endpoint
type ShapeBotDefenseRegion int32

const (
	// AUTO
	//
	// x-displayName: "Auto"
	// Automatic selection based on client IP address
	AUTO ShapeBotDefenseRegion = 0
	// US
	//
	// x-displayName: "US"
	// US regional endpoint
	US ShapeBotDefenseRegion = 1
	// EU
	//
	// x-displayName: "EU"
	// European Union regional endpoint
	EU ShapeBotDefenseRegion = 2
	// ASIA
	//
	// x-displayName: "Asia"
	// Asia regional endpoint
	ASIA ShapeBotDefenseRegion = 3
)

var ShapeBotDefenseRegion_name = map[int32]string{
	0: "AUTO",
	1: "US",
	2: "EU",
	3: "ASIA",
}

var ShapeBotDefenseRegion_value = map[string]int32{
	"AUTO": 0,
	"US":   1,
	"EU":   2,
	"ASIA": 3,
}

func (ShapeBotDefenseRegion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{1}
}

// JavaScriptLocation
//
// x-displayName: "JavaScript Location"
// All inside networks.
type JavaScriptLocation int32

const (
	// x-displayName: "After <head> tag"
	// Insert JavaScript after <head> tag
	AFTER_HEAD JavaScriptLocation = 0
	// x-displayName: "After </title> tag"
	// Insert JavaScript after </title> tag.
	AFTER_TITLE_END JavaScriptLocation = 1
	// x-displayName: "Before <script> tag"
	// Insert JavaScript before first <script> tag
	BEFORE_SCRIPT JavaScriptLocation = 2
)

var JavaScriptLocation_name = map[int32]string{
	0: "AFTER_HEAD",
	1: "AFTER_TITLE_END",
	2: "BEFORE_SCRIPT",
}

var JavaScriptLocation_value = map[string]int32{
	"AFTER_HEAD":      0,
	"AFTER_TITLE_END": 1,
	"BEFORE_SCRIPT":   2,
}

func (JavaScriptLocation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{2}
}

// InlineRateLimiter
//
// x-displayName: "InlineRateLimiter"
type InlineRateLimiter struct {
	// threshold
	//
	// x-displayName: "Threshold"
	// x-example: "1"
	// x-required
	// The total number of allowed requests for 1 unit (e.g. SECOND/MINUTE/HOUR etc.) of the specified period.
	Threshold uint32 `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// rate
	//
	// x-displayName: "Duration"
	// x-required
	// Unit for the period per which the rate limit is applied.
	Unit rate_limiter.RateLimitPeriodUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=ves.io.schema.rate_limiter.RateLimitPeriodUnit" json:"unit,omitempty"`
	// Count by
	//
	// x-displayName: "Count By"
	// x-required
	// The classification criteria for requests counts.
	//
	// Types that are valid to be assigned to CountByChoice:
	//	*InlineRateLimiter_UseHttpLbUserId
	//	*InlineRateLimiter_RefUserId
	CountByChoice isInlineRateLimiter_CountByChoice `protobuf_oneof:"count_by_choice"`
}

func (m *InlineRateLimiter) Reset()      { *m = InlineRateLimiter{} }
func (*InlineRateLimiter) ProtoMessage() {}
func (*InlineRateLimiter) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{0}
}
func (m *InlineRateLimiter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InlineRateLimiter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InlineRateLimiter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InlineRateLimiter.Merge(m, src)
}
func (m *InlineRateLimiter) XXX_Size() int {
	return m.Size()
}
func (m *InlineRateLimiter) XXX_DiscardUnknown() {
	xxx_messageInfo_InlineRateLimiter.DiscardUnknown(m)
}

var xxx_messageInfo_InlineRateLimiter proto.InternalMessageInfo

type isInlineRateLimiter_CountByChoice interface {
	isInlineRateLimiter_CountByChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type InlineRateLimiter_UseHttpLbUserId struct {
	UseHttpLbUserId *schema.Empty `protobuf:"bytes,4,opt,name=use_http_lb_user_id,json=useHttpLbUserId,proto3,oneof" json:"use_http_lb_user_id,omitempty"`
}
type InlineRateLimiter_RefUserId struct {
	RefUserId *views.ObjectRefType `protobuf:"bytes,5,opt,name=ref_user_id,json=refUserId,proto3,oneof" json:"ref_user_id,omitempty"`
}

func (*InlineRateLimiter_UseHttpLbUserId) isInlineRateLimiter_CountByChoice() {}
func (*InlineRateLimiter_RefUserId) isInlineRateLimiter_CountByChoice()       {}

func (m *InlineRateLimiter) GetCountByChoice() isInlineRateLimiter_CountByChoice {
	if m != nil {
		return m.CountByChoice
	}
	return nil
}

func (m *InlineRateLimiter) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *InlineRateLimiter) GetUnit() rate_limiter.RateLimitPeriodUnit {
	if m != nil {
		return m.Unit
	}
	return rate_limiter.SECOND
}

func (m *InlineRateLimiter) GetUseHttpLbUserId() *schema.Empty {
	if x, ok := m.GetCountByChoice().(*InlineRateLimiter_UseHttpLbUserId); ok {
		return x.UseHttpLbUserId
	}
	return nil
}

func (m *InlineRateLimiter) GetRefUserId() *views.ObjectRefType {
	if x, ok := m.GetCountByChoice().(*InlineRateLimiter_RefUserId); ok {
		return x.RefUserId
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InlineRateLimiter) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InlineRateLimiter_UseHttpLbUserId)(nil),
		(*InlineRateLimiter_RefUserId)(nil),
	}
}

// ServerUrlRule
//
// x-displayName: "ServerUrlRule"
type ServerUrlRule struct {
	// domain choices
	//
	// x-displayName: "Domain"
	// x-required
	// Choose if the rule will apply for all domains or a specific one.
	//
	// Types that are valid to be assigned to DomainChoice:
	//	*ServerUrlRule_AnyDomain
	//	*ServerUrlRule_SpecificDomain
	DomainChoice isServerUrlRule_DomainChoice `protobuf_oneof:"domain_choice"`
	// base path
	//
	// x-displayName: "Base Path"
	// x-example: "/"
	// x-required
	// Prefix of the request path.
	BasePath string `protobuf:"bytes,4,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`
	// Rate limit values
	//
	// x-displayName: "Rate Limiter Values"
	// x-required
	// This defines the values of the rate limiter.
	//
	// Types that are valid to be assigned to RateLimiterChoice:
	//	*ServerUrlRule_InlineRateLimiter
	//	*ServerUrlRule_RefRateLimiter
	RateLimiterChoice isServerUrlRule_RateLimiterChoice `protobuf_oneof:"rate_limiter_choice"`
}

func (m *ServerUrlRule) Reset()      { *m = ServerUrlRule{} }
func (*ServerUrlRule) ProtoMessage() {}
func (*ServerUrlRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{1}
}
func (m *ServerUrlRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerUrlRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServerUrlRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerUrlRule.Merge(m, src)
}
func (m *ServerUrlRule) XXX_Size() int {
	return m.Size()
}
func (m *ServerUrlRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerUrlRule.DiscardUnknown(m)
}

var xxx_messageInfo_ServerUrlRule proto.InternalMessageInfo

type isServerUrlRule_DomainChoice interface {
	isServerUrlRule_DomainChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isServerUrlRule_RateLimiterChoice interface {
	isServerUrlRule_RateLimiterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ServerUrlRule_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,2,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type ServerUrlRule_SpecificDomain struct {
	SpecificDomain string `protobuf:"bytes,3,opt,name=specific_domain,json=specificDomain,proto3,oneof" json:"specific_domain,omitempty"`
}
type ServerUrlRule_InlineRateLimiter struct {
	InlineRateLimiter *InlineRateLimiter `protobuf:"bytes,6,opt,name=inline_rate_limiter,json=inlineRateLimiter,proto3,oneof" json:"inline_rate_limiter,omitempty"`
}
type ServerUrlRule_RefRateLimiter struct {
	RefRateLimiter *views.ObjectRefType `protobuf:"bytes,7,opt,name=ref_rate_limiter,json=refRateLimiter,proto3,oneof" json:"ref_rate_limiter,omitempty"`
}

func (*ServerUrlRule_AnyDomain) isServerUrlRule_DomainChoice()              {}
func (*ServerUrlRule_SpecificDomain) isServerUrlRule_DomainChoice()         {}
func (*ServerUrlRule_InlineRateLimiter) isServerUrlRule_RateLimiterChoice() {}
func (*ServerUrlRule_RefRateLimiter) isServerUrlRule_RateLimiterChoice()    {}

func (m *ServerUrlRule) GetDomainChoice() isServerUrlRule_DomainChoice {
	if m != nil {
		return m.DomainChoice
	}
	return nil
}
func (m *ServerUrlRule) GetRateLimiterChoice() isServerUrlRule_RateLimiterChoice {
	if m != nil {
		return m.RateLimiterChoice
	}
	return nil
}

func (m *ServerUrlRule) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainChoice().(*ServerUrlRule_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *ServerUrlRule) GetSpecificDomain() string {
	if x, ok := m.GetDomainChoice().(*ServerUrlRule_SpecificDomain); ok {
		return x.SpecificDomain
	}
	return ""
}

func (m *ServerUrlRule) GetBasePath() string {
	if m != nil {
		return m.BasePath
	}
	return ""
}

func (m *ServerUrlRule) GetInlineRateLimiter() *InlineRateLimiter {
	if x, ok := m.GetRateLimiterChoice().(*ServerUrlRule_InlineRateLimiter); ok {
		return x.InlineRateLimiter
	}
	return nil
}

func (m *ServerUrlRule) GetRefRateLimiter() *views.ObjectRefType {
	if x, ok := m.GetRateLimiterChoice().(*ServerUrlRule_RefRateLimiter); ok {
		return x.RefRateLimiter
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ServerUrlRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ServerUrlRule_AnyDomain)(nil),
		(*ServerUrlRule_SpecificDomain)(nil),
		(*ServerUrlRule_InlineRateLimiter)(nil),
		(*ServerUrlRule_RefRateLimiter)(nil),
	}
}

// ApiEndpointRule
//
// x-displayName: "ApiEndpointRule"
type ApiEndpointRule struct {
	// domain choices
	//
	// x-displayName: "Domain"
	// x-required
	// Choose if the rule will apply for all domains or a specific one.
	//
	// Types that are valid to be assigned to DomainChoice:
	//	*ApiEndpointRule_AnyDomain
	//	*ApiEndpointRule_SpecificDomain
	DomainChoice isApiEndpointRule_DomainChoice `protobuf_oneof:"domain_choice"`
	// base path
	//
	// x-required
	// x-example: "/"
	// x-displayName: "Base Path"
	// The request base path.
	BasePath string `protobuf:"bytes,4,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`
	// api endpoint path
	//
	// x-displayName: "API Endpoint"
	// x-example: "value"
	// x-required
	// The endpoint (path) of the request.
	ApiEndpointPath string `protobuf:"bytes,5,opt,name=api_endpoint_path,json=apiEndpointPath,proto3" json:"api_endpoint_path,omitempty"`
	// method
	//
	// x-displayName: "HTTP Methods"
	// The list of expected values for the HTTP method in the request API. The actual value of the HTTP method is extracted from the HTTP request.
	// The predicate evaluates to true if the actual HTTP method belongs is present in the list of expected values.
	ApiEndpointMethod *policy.HttpMethodMatcherType `protobuf:"bytes,6,opt,name=api_endpoint_method,json=apiEndpointMethod,proto3" json:"api_endpoint_method,omitempty"`
	// Rate limit values
	//
	// x-displayName: "Rate Limiter Values"
	// x-required
	// This defines the values of the rate limiter.
	//
	// Types that are valid to be assigned to RateLimiterChoice:
	//	*ApiEndpointRule_InlineRateLimiter
	//	*ApiEndpointRule_RefRateLimiter
	RateLimiterChoice isApiEndpointRule_RateLimiterChoice `protobuf_oneof:"rate_limiter_choice"`
}

func (m *ApiEndpointRule) Reset()      { *m = ApiEndpointRule{} }
func (*ApiEndpointRule) ProtoMessage() {}
func (*ApiEndpointRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{2}
}
func (m *ApiEndpointRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiEndpointRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiEndpointRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiEndpointRule.Merge(m, src)
}
func (m *ApiEndpointRule) XXX_Size() int {
	return m.Size()
}
func (m *ApiEndpointRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiEndpointRule.DiscardUnknown(m)
}

var xxx_messageInfo_ApiEndpointRule proto.InternalMessageInfo

type isApiEndpointRule_DomainChoice interface {
	isApiEndpointRule_DomainChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isApiEndpointRule_RateLimiterChoice interface {
	isApiEndpointRule_RateLimiterChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ApiEndpointRule_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,2,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type ApiEndpointRule_SpecificDomain struct {
	SpecificDomain string `protobuf:"bytes,3,opt,name=specific_domain,json=specificDomain,proto3,oneof" json:"specific_domain,omitempty"`
}
type ApiEndpointRule_InlineRateLimiter struct {
	InlineRateLimiter *InlineRateLimiter `protobuf:"bytes,8,opt,name=inline_rate_limiter,json=inlineRateLimiter,proto3,oneof" json:"inline_rate_limiter,omitempty"`
}
type ApiEndpointRule_RefRateLimiter struct {
	RefRateLimiter *views.ObjectRefType `protobuf:"bytes,9,opt,name=ref_rate_limiter,json=refRateLimiter,proto3,oneof" json:"ref_rate_limiter,omitempty"`
}

func (*ApiEndpointRule_AnyDomain) isApiEndpointRule_DomainChoice()              {}
func (*ApiEndpointRule_SpecificDomain) isApiEndpointRule_DomainChoice()         {}
func (*ApiEndpointRule_InlineRateLimiter) isApiEndpointRule_RateLimiterChoice() {}
func (*ApiEndpointRule_RefRateLimiter) isApiEndpointRule_RateLimiterChoice()    {}

func (m *ApiEndpointRule) GetDomainChoice() isApiEndpointRule_DomainChoice {
	if m != nil {
		return m.DomainChoice
	}
	return nil
}
func (m *ApiEndpointRule) GetRateLimiterChoice() isApiEndpointRule_RateLimiterChoice {
	if m != nil {
		return m.RateLimiterChoice
	}
	return nil
}

func (m *ApiEndpointRule) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainChoice().(*ApiEndpointRule_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *ApiEndpointRule) GetSpecificDomain() string {
	if x, ok := m.GetDomainChoice().(*ApiEndpointRule_SpecificDomain); ok {
		return x.SpecificDomain
	}
	return ""
}

func (m *ApiEndpointRule) GetBasePath() string {
	if m != nil {
		return m.BasePath
	}
	return ""
}

func (m *ApiEndpointRule) GetApiEndpointPath() string {
	if m != nil {
		return m.ApiEndpointPath
	}
	return ""
}

func (m *ApiEndpointRule) GetApiEndpointMethod() *policy.HttpMethodMatcherType {
	if m != nil {
		return m.ApiEndpointMethod
	}
	return nil
}

func (m *ApiEndpointRule) GetInlineRateLimiter() *InlineRateLimiter {
	if x, ok := m.GetRateLimiterChoice().(*ApiEndpointRule_InlineRateLimiter); ok {
		return x.InlineRateLimiter
	}
	return nil
}

func (m *ApiEndpointRule) GetRefRateLimiter() *views.ObjectRefType {
	if x, ok := m.GetRateLimiterChoice().(*ApiEndpointRule_RefRateLimiter); ok {
		return x.RefRateLimiter
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ApiEndpointRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ApiEndpointRule_AnyDomain)(nil),
		(*ApiEndpointRule_SpecificDomain)(nil),
		(*ApiEndpointRule_InlineRateLimiter)(nil),
		(*ApiEndpointRule_RefRateLimiter)(nil),
	}
}

// APIRateLimit
//
// x-displayName: "APIRateLimit"
type APIRateLimit struct {
	// IP Allowed List
	//
	// x-displayName: "IP(s) Allowed without Rate Limiting"
	// x-required
	// Allowed List of IPs for which rate limiting will be disabled.
	//
	// Types that are valid to be assigned to IpAllowedListChoice:
	//	*APIRateLimit_NoIpAllowedList
	//	*APIRateLimit_IpAllowedList
	//	*APIRateLimit_CustomIpAllowedList
	IpAllowedListChoice isAPIRateLimit_IpAllowedListChoice `protobuf_oneof:"ip_allowed_list_choice"`
	// server_url_policy
	//
	// x-displayName: "Server URLs"
	// Set of rules for entire domain or base path that contain multiple endpoints.
	// Order is matter as it uses first match policy.
	// For matching also specific endpoints you can use the API endpoint rules set bellow.
	ServerUrlRules []*ServerUrlRule `protobuf:"bytes,5,rep,name=server_url_rules,json=serverUrlRules,proto3" json:"server_url_rules,omitempty"`
	// api_endpoint_policy
	//
	// x-displayName: "API Endpoints"
	// Sets of rules for a specific endpoints.
	// Order is matter as it uses first match policy.
	// For creating rule that contain a whole domain or group of endpoints, please use the server URL rules above.
	ApiEndpointRules []*ApiEndpointRule `protobuf:"bytes,6,rep,name=api_endpoint_rules,json=apiEndpointRules,proto3" json:"api_endpoint_rules,omitempty"`
}

func (m *APIRateLimit) Reset()      { *m = APIRateLimit{} }
func (*APIRateLimit) ProtoMessage() {}
func (*APIRateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{3}
}
func (m *APIRateLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIRateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *APIRateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIRateLimit.Merge(m, src)
}
func (m *APIRateLimit) XXX_Size() int {
	return m.Size()
}
func (m *APIRateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_APIRateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_APIRateLimit proto.InternalMessageInfo

type isAPIRateLimit_IpAllowedListChoice interface {
	isAPIRateLimit_IpAllowedListChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type APIRateLimit_NoIpAllowedList struct {
	NoIpAllowedList *schema.Empty `protobuf:"bytes,2,opt,name=no_ip_allowed_list,json=noIpAllowedList,proto3,oneof" json:"no_ip_allowed_list,omitempty"`
}
type APIRateLimit_IpAllowedList struct {
	IpAllowedList *views.PrefixStringListType `protobuf:"bytes,3,opt,name=ip_allowed_list,json=ipAllowedList,proto3,oneof" json:"ip_allowed_list,omitempty"`
}
type APIRateLimit_CustomIpAllowedList struct {
	CustomIpAllowedList *CustomIpAllowedList `protobuf:"bytes,4,opt,name=custom_ip_allowed_list,json=customIpAllowedList,proto3,oneof" json:"custom_ip_allowed_list,omitempty"`
}

func (*APIRateLimit_NoIpAllowedList) isAPIRateLimit_IpAllowedListChoice()     {}
func (*APIRateLimit_IpAllowedList) isAPIRateLimit_IpAllowedListChoice()       {}
func (*APIRateLimit_CustomIpAllowedList) isAPIRateLimit_IpAllowedListChoice() {}

func (m *APIRateLimit) GetIpAllowedListChoice() isAPIRateLimit_IpAllowedListChoice {
	if m != nil {
		return m.IpAllowedListChoice
	}
	return nil
}

func (m *APIRateLimit) GetNoIpAllowedList() *schema.Empty {
	if x, ok := m.GetIpAllowedListChoice().(*APIRateLimit_NoIpAllowedList); ok {
		return x.NoIpAllowedList
	}
	return nil
}

func (m *APIRateLimit) GetIpAllowedList() *views.PrefixStringListType {
	if x, ok := m.GetIpAllowedListChoice().(*APIRateLimit_IpAllowedList); ok {
		return x.IpAllowedList
	}
	return nil
}

func (m *APIRateLimit) GetCustomIpAllowedList() *CustomIpAllowedList {
	if x, ok := m.GetIpAllowedListChoice().(*APIRateLimit_CustomIpAllowedList); ok {
		return x.CustomIpAllowedList
	}
	return nil
}

func (m *APIRateLimit) GetServerUrlRules() []*ServerUrlRule {
	if m != nil {
		return m.ServerUrlRules
	}
	return nil
}

func (m *APIRateLimit) GetApiEndpointRules() []*ApiEndpointRule {
	if m != nil {
		return m.ApiEndpointRules
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*APIRateLimit) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*APIRateLimit_NoIpAllowedList)(nil),
		(*APIRateLimit_IpAllowedList)(nil),
		(*APIRateLimit_CustomIpAllowedList)(nil),
	}
}

// DownstreamTlsValidationContext
//
// x-displayName: "Clients TLS validation context"
// Validation context for downstream client TLS connections
type DownstreamTlsValidationContext struct {
	// trusted_ca_url
	//
	// x-displayName: "Trusted CA"
	// x-example: "value"
	// x-required
	// The URL for a trust store
	TrustedCaUrl string `protobuf:"bytes,2,opt,name=trusted_ca_url,json=trustedCaUrl,proto3" json:"trusted_ca_url,omitempty"`
	// crl choice
	//
	// x-displayName: "Verify client certificate with CRL"
	// Whether to verify client certificate revocation status with
	// certificate revocation list
	//
	// Types that are valid to be assigned to CrlChoice:
	//	*DownstreamTlsValidationContext_NoCrl
	//	*DownstreamTlsValidationContext_Crl
	CrlChoice isDownstreamTlsValidationContext_CrlChoice `protobuf_oneof:"crl_choice"`
}

func (m *DownstreamTlsValidationContext) Reset()      { *m = DownstreamTlsValidationContext{} }
func (*DownstreamTlsValidationContext) ProtoMessage() {}
func (*DownstreamTlsValidationContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{4}
}
func (m *DownstreamTlsValidationContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamTlsValidationContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DownstreamTlsValidationContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamTlsValidationContext.Merge(m, src)
}
func (m *DownstreamTlsValidationContext) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamTlsValidationContext) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamTlsValidationContext.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamTlsValidationContext proto.InternalMessageInfo

type isDownstreamTlsValidationContext_CrlChoice interface {
	isDownstreamTlsValidationContext_CrlChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DownstreamTlsValidationContext_NoCrl struct {
	NoCrl *schema.Empty `protobuf:"bytes,4,opt,name=no_crl,json=noCrl,proto3,oneof" json:"no_crl,omitempty"`
}
type DownstreamTlsValidationContext_Crl struct {
	Crl *views.ObjectRefType `protobuf:"bytes,5,opt,name=crl,proto3,oneof" json:"crl,omitempty"`
}

func (*DownstreamTlsValidationContext_NoCrl) isDownstreamTlsValidationContext_CrlChoice() {}
func (*DownstreamTlsValidationContext_Crl) isDownstreamTlsValidationContext_CrlChoice()   {}

func (m *DownstreamTlsValidationContext) GetCrlChoice() isDownstreamTlsValidationContext_CrlChoice {
	if m != nil {
		return m.CrlChoice
	}
	return nil
}

func (m *DownstreamTlsValidationContext) GetTrustedCaUrl() string {
	if m != nil {
		return m.TrustedCaUrl
	}
	return ""
}

func (m *DownstreamTlsValidationContext) GetNoCrl() *schema.Empty {
	if x, ok := m.GetCrlChoice().(*DownstreamTlsValidationContext_NoCrl); ok {
		return x.NoCrl
	}
	return nil
}

func (m *DownstreamTlsValidationContext) GetCrl() *views.ObjectRefType {
	if x, ok := m.GetCrlChoice().(*DownstreamTlsValidationContext_Crl); ok {
		return x.Crl
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DownstreamTlsValidationContext) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DownstreamTlsValidationContext_NoCrl)(nil),
		(*DownstreamTlsValidationContext_Crl)(nil),
	}
}

// DownstreamTlsParamsType
//
// x-displayName: "HTTP Loadbalancer TLS Parameters"
// TLS parameters for HTTP loadbalancer.
type DownstreamTlsParamsType struct {
	// TLS Config
	//
	// x-displayName: "TLS Config"
	// Configuration for TLS parameters such as min/max TLS version and ciphers
	TlsConfig *views.TlsConfig `protobuf:"bytes,1,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
	// tls_certificates
	//
	// x-displayName: "TLS Certificates"
	// x-required
	// Set of TLS certificates
	TlsCertificates []*schema.TlsCertificateType `protobuf:"bytes,2,rep,name=tls_certificates,json=tlsCertificates,proto3" json:"tls_certificates,omitempty"`
	// mTLS choice
	//
	// x-displayName: "mTLS choice with clients"
	// x-required
	// mTLS choice between clients and HTTP loadbalancer
	//
	// Types that are valid to be assigned to MtlsChoice:
	//	*DownstreamTlsParamsType_NoMtls
	//	*DownstreamTlsParamsType_UseMtls
	MtlsChoice isDownstreamTlsParamsType_MtlsChoice `protobuf_oneof:"mtls_choice"`
}

func (m *DownstreamTlsParamsType) Reset()      { *m = DownstreamTlsParamsType{} }
func (*DownstreamTlsParamsType) ProtoMessage() {}
func (*DownstreamTlsParamsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{5}
}
func (m *DownstreamTlsParamsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamTlsParamsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DownstreamTlsParamsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamTlsParamsType.Merge(m, src)
}
func (m *DownstreamTlsParamsType) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamTlsParamsType) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamTlsParamsType.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamTlsParamsType proto.InternalMessageInfo

type isDownstreamTlsParamsType_MtlsChoice interface {
	isDownstreamTlsParamsType_MtlsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DownstreamTlsParamsType_NoMtls struct {
	NoMtls *schema.Empty `protobuf:"bytes,3,opt,name=no_mtls,json=noMtls,proto3,oneof" json:"no_mtls,omitempty"`
}
type DownstreamTlsParamsType_UseMtls struct {
	UseMtls *DownstreamTlsValidationContext `protobuf:"bytes,4,opt,name=use_mtls,json=useMtls,proto3,oneof" json:"use_mtls,omitempty"`
}

func (*DownstreamTlsParamsType_NoMtls) isDownstreamTlsParamsType_MtlsChoice()  {}
func (*DownstreamTlsParamsType_UseMtls) isDownstreamTlsParamsType_MtlsChoice() {}

func (m *DownstreamTlsParamsType) GetMtlsChoice() isDownstreamTlsParamsType_MtlsChoice {
	if m != nil {
		return m.MtlsChoice
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetTlsConfig() *views.TlsConfig {
	if m != nil {
		return m.TlsConfig
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetTlsCertificates() []*schema.TlsCertificateType {
	if m != nil {
		return m.TlsCertificates
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetNoMtls() *schema.Empty {
	if x, ok := m.GetMtlsChoice().(*DownstreamTlsParamsType_NoMtls); ok {
		return x.NoMtls
	}
	return nil
}

func (m *DownstreamTlsParamsType) GetUseMtls() *DownstreamTlsValidationContext {
	if x, ok := m.GetMtlsChoice().(*DownstreamTlsParamsType_UseMtls); ok {
		return x.UseMtls
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DownstreamTlsParamsType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DownstreamTlsParamsType_NoMtls)(nil),
		(*DownstreamTlsParamsType_UseMtls)(nil),
	}
}

// BYOC HTTPS Choice
//
// x-displayName: "BYOC HTTPS Choice"
// Choice for selecting HTTP proxy with bring your own certificates
type ProxyTypeHttps struct {
	// HTTP Redirect
	//
	// x-displayName: "HTTP Redirect to HTTPS"
	// Redirect HTTP traffic to corresponding HTTPS
	HttpRedirect bool `protobuf:"varint,1,opt,name=http_redirect,json=httpRedirect,proto3" json:"http_redirect,omitempty"`
	// Add HSTS
	//
	// x-displayName: "Add HSTS Header"
	// Add HTTP Strict-Transport-Security response header
	AddHsts bool `protobuf:"varint,2,opt,name=add_hsts,json=addHsts,proto3" json:"add_hsts,omitempty"`
	// TLS parameters.
	//
	// x-displayName: "HTTP Loadbalancer TLS Parameters"
	// TLS parameters for downstream connections.
	TlsParameters *DownstreamTlsParamsType `protobuf:"bytes,3,opt,name=tls_parameters,json=tlsParameters,proto3" json:"tls_parameters,omitempty"`
	// Server Header configuration
	//
	// x-displayName: "Server Header value to be used in response"
	// Specify Server Header value to be used in responses
	//
	// Types that are valid to be assigned to ServerHeaderChoice:
	//	*ProxyTypeHttps_DefaultHeader
	//	*ProxyTypeHttps_ServerName
	//	*ProxyTypeHttps_AppendServerName
	//	*ProxyTypeHttps_PassThrough
	ServerHeaderChoice isProxyTypeHttps_ServerHeaderChoice `protobuf_oneof:"server_header_choice"`
	// Normalize Path
	//
	// x-displayName: "Path normalize"
	//
	// x-required
	// Should paths be normalized before any processing of requests.
	//
	// In addition to path normalization according to RFC 3986, adjacent slashes in the path
	// will be merged into one when this flag is enabled.
	//
	// It should be noted that normalized path is sent to the origin server.
	//
	// See Normalization and Comparison <https://tools.ietf.org/html/rfc3986#section-6> for details of normalization.
	// Note that Volterra does not perform case normalization <https://tools.ietf.org/html/rfc3986#section-6.2.2.1>
	//
	// Types that are valid to be assigned to PathNormalizeChoice:
	//	*ProxyTypeHttps_EnablePathNormalize
	//	*ProxyTypeHttps_DisablePathNormalize
	PathNormalizeChoice isProxyTypeHttps_PathNormalizeChoice `protobuf_oneof:"path_normalize_choice"`
	// port
	//
	// x-displayName: "HTTPs Port"
	// x-example: "443"
	// Https Port
	Port uint32 `protobuf:"varint,15,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *ProxyTypeHttps) Reset()      { *m = ProxyTypeHttps{} }
func (*ProxyTypeHttps) ProtoMessage() {}
func (*ProxyTypeHttps) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{6}
}
func (m *ProxyTypeHttps) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyTypeHttps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProxyTypeHttps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyTypeHttps.Merge(m, src)
}
func (m *ProxyTypeHttps) XXX_Size() int {
	return m.Size()
}
func (m *ProxyTypeHttps) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyTypeHttps.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyTypeHttps proto.InternalMessageInfo

type isProxyTypeHttps_ServerHeaderChoice interface {
	isProxyTypeHttps_ServerHeaderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProxyTypeHttps_PathNormalizeChoice interface {
	isProxyTypeHttps_PathNormalizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProxyTypeHttps_DefaultHeader struct {
	DefaultHeader *schema.Empty `protobuf:"bytes,5,opt,name=default_header,json=defaultHeader,proto3,oneof" json:"default_header,omitempty"`
}
type ProxyTypeHttps_ServerName struct {
	ServerName string `protobuf:"bytes,6,opt,name=server_name,json=serverName,proto3,oneof" json:"server_name,omitempty"`
}
type ProxyTypeHttps_AppendServerName struct {
	AppendServerName string `protobuf:"bytes,7,opt,name=append_server_name,json=appendServerName,proto3,oneof" json:"append_server_name,omitempty"`
}
type ProxyTypeHttps_PassThrough struct {
	PassThrough *schema.Empty `protobuf:"bytes,8,opt,name=pass_through,json=passThrough,proto3,oneof" json:"pass_through,omitempty"`
}
type ProxyTypeHttps_EnablePathNormalize struct {
	EnablePathNormalize *schema.Empty `protobuf:"bytes,10,opt,name=enable_path_normalize,json=enablePathNormalize,proto3,oneof" json:"enable_path_normalize,omitempty"`
}
type ProxyTypeHttps_DisablePathNormalize struct {
	DisablePathNormalize *schema.Empty `protobuf:"bytes,11,opt,name=disable_path_normalize,json=disablePathNormalize,proto3,oneof" json:"disable_path_normalize,omitempty"`
}

func (*ProxyTypeHttps_DefaultHeader) isProxyTypeHttps_ServerHeaderChoice()         {}
func (*ProxyTypeHttps_ServerName) isProxyTypeHttps_ServerHeaderChoice()            {}
func (*ProxyTypeHttps_AppendServerName) isProxyTypeHttps_ServerHeaderChoice()      {}
func (*ProxyTypeHttps_PassThrough) isProxyTypeHttps_ServerHeaderChoice()           {}
func (*ProxyTypeHttps_EnablePathNormalize) isProxyTypeHttps_PathNormalizeChoice()  {}
func (*ProxyTypeHttps_DisablePathNormalize) isProxyTypeHttps_PathNormalizeChoice() {}

func (m *ProxyTypeHttps) GetServerHeaderChoice() isProxyTypeHttps_ServerHeaderChoice {
	if m != nil {
		return m.ServerHeaderChoice
	}
	return nil
}
func (m *ProxyTypeHttps) GetPathNormalizeChoice() isProxyTypeHttps_PathNormalizeChoice {
	if m != nil {
		return m.PathNormalizeChoice
	}
	return nil
}

func (m *ProxyTypeHttps) GetHttpRedirect() bool {
	if m != nil {
		return m.HttpRedirect
	}
	return false
}

func (m *ProxyTypeHttps) GetAddHsts() bool {
	if m != nil {
		return m.AddHsts
	}
	return false
}

func (m *ProxyTypeHttps) GetTlsParameters() *DownstreamTlsParamsType {
	if m != nil {
		return m.TlsParameters
	}
	return nil
}

func (m *ProxyTypeHttps) GetDefaultHeader() *schema.Empty {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttps_DefaultHeader); ok {
		return x.DefaultHeader
	}
	return nil
}

func (m *ProxyTypeHttps) GetServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttps_ServerName); ok {
		return x.ServerName
	}
	return ""
}

func (m *ProxyTypeHttps) GetAppendServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttps_AppendServerName); ok {
		return x.AppendServerName
	}
	return ""
}

func (m *ProxyTypeHttps) GetPassThrough() *schema.Empty {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttps_PassThrough); ok {
		return x.PassThrough
	}
	return nil
}

func (m *ProxyTypeHttps) GetEnablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*ProxyTypeHttps_EnablePathNormalize); ok {
		return x.EnablePathNormalize
	}
	return nil
}

func (m *ProxyTypeHttps) GetDisablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*ProxyTypeHttps_DisablePathNormalize); ok {
		return x.DisablePathNormalize
	}
	return nil
}

func (m *ProxyTypeHttps) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProxyTypeHttps) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProxyTypeHttps_DefaultHeader)(nil),
		(*ProxyTypeHttps_ServerName)(nil),
		(*ProxyTypeHttps_AppendServerName)(nil),
		(*ProxyTypeHttps_PassThrough)(nil),
		(*ProxyTypeHttps_EnablePathNormalize)(nil),
		(*ProxyTypeHttps_DisablePathNormalize)(nil),
	}
}

// HTTP Choice
//
// x-displayName: "HTTP Choice"
// Choice for selecting HTTP proxy
type ProxyTypeHttp struct {
	// Manage DNS Domain
	//
	// x-displayName: "Automatically Manage DNS Records"
	// DNS records for domains will be managed automatically by Volterra.
	// This requires the domain to be delegated to Volterra using the Delegated Domain feature.
	DnsVolterraManaged bool `protobuf:"varint,1,opt,name=dns_volterra_managed,json=dnsVolterraManaged,proto3" json:"dns_volterra_managed,omitempty"`
	// port
	//
	// x-displayName: "HTTP Port"
	// x-example: "80"
	// Http Port
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *ProxyTypeHttp) Reset()      { *m = ProxyTypeHttp{} }
func (*ProxyTypeHttp) ProtoMessage() {}
func (*ProxyTypeHttp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{7}
}
func (m *ProxyTypeHttp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyTypeHttp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProxyTypeHttp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyTypeHttp.Merge(m, src)
}
func (m *ProxyTypeHttp) XXX_Size() int {
	return m.Size()
}
func (m *ProxyTypeHttp) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyTypeHttp.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyTypeHttp proto.InternalMessageInfo

func (m *ProxyTypeHttp) GetDnsVolterraManaged() bool {
	if m != nil {
		return m.DnsVolterraManaged
	}
	return false
}

func (m *ProxyTypeHttp) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// HTTPS with Auto Certs Choice
//
// x-displayName: "HTTPS with Auto Certs Choice"
// Choice for selecting HTTP proxy with bring your own certificates
type ProxyTypeHttpsAutoCerts struct {
	// HTTP Redirect
	//
	// x-displayName: "HTTP Redirect to HTTPS"
	// Redirect HTTP traffic to corresponding HTTPS
	HttpRedirect bool `protobuf:"varint,1,opt,name=http_redirect,json=httpRedirect,proto3" json:"http_redirect,omitempty"`
	// Add HSTS
	//
	// x-displayName: "Add HSTS Header"
	// Add HTTP Strict-Transport-Security response header
	AddHsts bool `protobuf:"varint,2,opt,name=add_hsts,json=addHsts,proto3" json:"add_hsts,omitempty"`
	// TLS Config
	//
	// x-displayName: "TLS Config"
	// Configuration for TLS parameters such as min/max TLS version and ciphers
	TlsConfig *views.TlsConfig `protobuf:"bytes,3,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
	// mTLS choice
	//
	// x-displayName: "mTLS choice with clients"
	// x-required
	// mTLS choice between clients and HTTP loadbalancer
	//
	// Types that are valid to be assigned to MtlsChoice:
	//	*ProxyTypeHttpsAutoCerts_NoMtls
	//	*ProxyTypeHttpsAutoCerts_UseMtls
	MtlsChoice isProxyTypeHttpsAutoCerts_MtlsChoice `protobuf_oneof:"mtls_choice"`
	// Server Header configuration
	//
	// x-displayName: "Server Header value to be used in response"
	// Specify Server Header value to be used in responses
	//
	// Types that are valid to be assigned to ServerHeaderChoice:
	//	*ProxyTypeHttpsAutoCerts_DefaultHeader
	//	*ProxyTypeHttpsAutoCerts_ServerName
	//	*ProxyTypeHttpsAutoCerts_AppendServerName
	//	*ProxyTypeHttpsAutoCerts_PassThrough
	ServerHeaderChoice isProxyTypeHttpsAutoCerts_ServerHeaderChoice `protobuf_oneof:"server_header_choice"`
	// Normalize Path
	//
	// x-displayName: "Path normalize"
	// x-required
	//
	// Should paths be normalized before any processing of requests.
	//
	// In addition to path normalization according to RFC 3986, adjacent slashes in the path
	// will be merged into one when this flag is enabled.
	//
	// It should be noted that normalized path is sent to the origin server.
	//
	// See Normalization and Comparison <https://tools.ietf.org/html/rfc3986#section-6> for details of normalization.
	// Note that Volterra does not perform case normalization <https://tools.ietf.org/html/rfc3986#section-6.2.2.1>
	//
	// Types that are valid to be assigned to PathNormalizeChoice:
	//	*ProxyTypeHttpsAutoCerts_EnablePathNormalize
	//	*ProxyTypeHttpsAutoCerts_DisablePathNormalize
	PathNormalizeChoice isProxyTypeHttpsAutoCerts_PathNormalizeChoice `protobuf_oneof:"path_normalize_choice"`
	// port
	//
	// x-displayName: "HTTPs Port"
	// x-example: "443"
	// Https Port
	Port uint32 `protobuf:"varint,18,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *ProxyTypeHttpsAutoCerts) Reset()      { *m = ProxyTypeHttpsAutoCerts{} }
func (*ProxyTypeHttpsAutoCerts) ProtoMessage() {}
func (*ProxyTypeHttpsAutoCerts) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{8}
}
func (m *ProxyTypeHttpsAutoCerts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyTypeHttpsAutoCerts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProxyTypeHttpsAutoCerts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyTypeHttpsAutoCerts.Merge(m, src)
}
func (m *ProxyTypeHttpsAutoCerts) XXX_Size() int {
	return m.Size()
}
func (m *ProxyTypeHttpsAutoCerts) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyTypeHttpsAutoCerts.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyTypeHttpsAutoCerts proto.InternalMessageInfo

type isProxyTypeHttpsAutoCerts_MtlsChoice interface {
	isProxyTypeHttpsAutoCerts_MtlsChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProxyTypeHttpsAutoCerts_ServerHeaderChoice interface {
	isProxyTypeHttpsAutoCerts_ServerHeaderChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isProxyTypeHttpsAutoCerts_PathNormalizeChoice interface {
	isProxyTypeHttpsAutoCerts_PathNormalizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProxyTypeHttpsAutoCerts_NoMtls struct {
	NoMtls *schema.Empty `protobuf:"bytes,5,opt,name=no_mtls,json=noMtls,proto3,oneof" json:"no_mtls,omitempty"`
}
type ProxyTypeHttpsAutoCerts_UseMtls struct {
	UseMtls *DownstreamTlsValidationContext `protobuf:"bytes,6,opt,name=use_mtls,json=useMtls,proto3,oneof" json:"use_mtls,omitempty"`
}
type ProxyTypeHttpsAutoCerts_DefaultHeader struct {
	DefaultHeader *schema.Empty `protobuf:"bytes,8,opt,name=default_header,json=defaultHeader,proto3,oneof" json:"default_header,omitempty"`
}
type ProxyTypeHttpsAutoCerts_ServerName struct {
	ServerName string `protobuf:"bytes,9,opt,name=server_name,json=serverName,proto3,oneof" json:"server_name,omitempty"`
}
type ProxyTypeHttpsAutoCerts_AppendServerName struct {
	AppendServerName string `protobuf:"bytes,10,opt,name=append_server_name,json=appendServerName,proto3,oneof" json:"append_server_name,omitempty"`
}
type ProxyTypeHttpsAutoCerts_PassThrough struct {
	PassThrough *schema.Empty `protobuf:"bytes,11,opt,name=pass_through,json=passThrough,proto3,oneof" json:"pass_through,omitempty"`
}
type ProxyTypeHttpsAutoCerts_EnablePathNormalize struct {
	EnablePathNormalize *schema.Empty `protobuf:"bytes,13,opt,name=enable_path_normalize,json=enablePathNormalize,proto3,oneof" json:"enable_path_normalize,omitempty"`
}
type ProxyTypeHttpsAutoCerts_DisablePathNormalize struct {
	DisablePathNormalize *schema.Empty `protobuf:"bytes,14,opt,name=disable_path_normalize,json=disablePathNormalize,proto3,oneof" json:"disable_path_normalize,omitempty"`
}

func (*ProxyTypeHttpsAutoCerts_NoMtls) isProxyTypeHttpsAutoCerts_MtlsChoice()                       {}
func (*ProxyTypeHttpsAutoCerts_UseMtls) isProxyTypeHttpsAutoCerts_MtlsChoice()                      {}
func (*ProxyTypeHttpsAutoCerts_DefaultHeader) isProxyTypeHttpsAutoCerts_ServerHeaderChoice()        {}
func (*ProxyTypeHttpsAutoCerts_ServerName) isProxyTypeHttpsAutoCerts_ServerHeaderChoice()           {}
func (*ProxyTypeHttpsAutoCerts_AppendServerName) isProxyTypeHttpsAutoCerts_ServerHeaderChoice()     {}
func (*ProxyTypeHttpsAutoCerts_PassThrough) isProxyTypeHttpsAutoCerts_ServerHeaderChoice()          {}
func (*ProxyTypeHttpsAutoCerts_EnablePathNormalize) isProxyTypeHttpsAutoCerts_PathNormalizeChoice() {}
func (*ProxyTypeHttpsAutoCerts_DisablePathNormalize) isProxyTypeHttpsAutoCerts_PathNormalizeChoice() {
}

func (m *ProxyTypeHttpsAutoCerts) GetMtlsChoice() isProxyTypeHttpsAutoCerts_MtlsChoice {
	if m != nil {
		return m.MtlsChoice
	}
	return nil
}
func (m *ProxyTypeHttpsAutoCerts) GetServerHeaderChoice() isProxyTypeHttpsAutoCerts_ServerHeaderChoice {
	if m != nil {
		return m.ServerHeaderChoice
	}
	return nil
}
func (m *ProxyTypeHttpsAutoCerts) GetPathNormalizeChoice() isProxyTypeHttpsAutoCerts_PathNormalizeChoice {
	if m != nil {
		return m.PathNormalizeChoice
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetHttpRedirect() bool {
	if m != nil {
		return m.HttpRedirect
	}
	return false
}

func (m *ProxyTypeHttpsAutoCerts) GetAddHsts() bool {
	if m != nil {
		return m.AddHsts
	}
	return false
}

func (m *ProxyTypeHttpsAutoCerts) GetTlsConfig() *views.TlsConfig {
	if m != nil {
		return m.TlsConfig
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetNoMtls() *schema.Empty {
	if x, ok := m.GetMtlsChoice().(*ProxyTypeHttpsAutoCerts_NoMtls); ok {
		return x.NoMtls
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetUseMtls() *DownstreamTlsValidationContext {
	if x, ok := m.GetMtlsChoice().(*ProxyTypeHttpsAutoCerts_UseMtls); ok {
		return x.UseMtls
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetDefaultHeader() *schema.Empty {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_DefaultHeader); ok {
		return x.DefaultHeader
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_ServerName); ok {
		return x.ServerName
	}
	return ""
}

func (m *ProxyTypeHttpsAutoCerts) GetAppendServerName() string {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_AppendServerName); ok {
		return x.AppendServerName
	}
	return ""
}

func (m *ProxyTypeHttpsAutoCerts) GetPassThrough() *schema.Empty {
	if x, ok := m.GetServerHeaderChoice().(*ProxyTypeHttpsAutoCerts_PassThrough); ok {
		return x.PassThrough
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetEnablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*ProxyTypeHttpsAutoCerts_EnablePathNormalize); ok {
		return x.EnablePathNormalize
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetDisablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*ProxyTypeHttpsAutoCerts_DisablePathNormalize); ok {
		return x.DisablePathNormalize
	}
	return nil
}

func (m *ProxyTypeHttpsAutoCerts) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProxyTypeHttpsAutoCerts) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProxyTypeHttpsAutoCerts_NoMtls)(nil),
		(*ProxyTypeHttpsAutoCerts_UseMtls)(nil),
		(*ProxyTypeHttpsAutoCerts_DefaultHeader)(nil),
		(*ProxyTypeHttpsAutoCerts_ServerName)(nil),
		(*ProxyTypeHttpsAutoCerts_AppendServerName)(nil),
		(*ProxyTypeHttpsAutoCerts_PassThrough)(nil),
		(*ProxyTypeHttpsAutoCerts_EnablePathNormalize)(nil),
		(*ProxyTypeHttpsAutoCerts_DisablePathNormalize)(nil),
	}
}

// Hash Policy List
//
// x-displayName: "Hash Policy List"
// List of hash policy rules
type HashPolicyListType struct {
	// hash_policy
	//
	// x-displayName: "Hash Policy"
	// x-required
	// Specifies a list of hash policies to use for ring hash load balancing. Each
	// hash policy is evaluated individually and the combined result is used to
	// route the request
	HashPolicy []*route.HashPolicyType `protobuf:"bytes,16,rep,name=hash_policy,json=hashPolicy,proto3" json:"hash_policy,omitempty"`
}

func (m *HashPolicyListType) Reset()      { *m = HashPolicyListType{} }
func (*HashPolicyListType) ProtoMessage() {}
func (*HashPolicyListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{9}
}
func (m *HashPolicyListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HashPolicyListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HashPolicyListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashPolicyListType.Merge(m, src)
}
func (m *HashPolicyListType) XXX_Size() int {
	return m.Size()
}
func (m *HashPolicyListType) XXX_DiscardUnknown() {
	xxx_messageInfo_HashPolicyListType.DiscardUnknown(m)
}

var xxx_messageInfo_HashPolicyListType proto.InternalMessageInfo

func (m *HashPolicyListType) GetHashPolicy() []*route.HashPolicyType {
	if m != nil {
		return m.HashPolicy
	}
	return nil
}

// MirrorPolicyType
//
// x-displayName: "Mirror Policy"
// MirrorPolicy is used for shadowing traffic from one origin pool to another. The approach used
// is "fire and forget", meaning it will not wait for the shadow origin pool to
// respond before returning the response from the primary origin pool. All normal statistics are
// collected for the shadow origin pool making this feature useful for testing and troubleshooting.
type MirrorPolicyType struct {
	// cluster
	//
	// x-displayName: "Mirror Destination Cluster"
	// x-required
	// Specifies the cluster to which the requests will be mirrored. The cluster object
	// referred here must be present.
	OriginPool *views.ObjectRefType `protobuf:"bytes,1,opt,name=origin_pool,json=originPool,proto3" json:"origin_pool,omitempty"`
	// percent
	//
	// x-displayName: "Mirror Percentage"
	// x-required
	// Percentage of requests to be mirrored
	Percent *schema.FractionalPercent `protobuf:"bytes,2,opt,name=percent,proto3" json:"percent,omitempty"`
}

func (m *MirrorPolicyType) Reset()      { *m = MirrorPolicyType{} }
func (*MirrorPolicyType) ProtoMessage() {}
func (*MirrorPolicyType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{10}
}
func (m *MirrorPolicyType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MirrorPolicyType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MirrorPolicyType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MirrorPolicyType.Merge(m, src)
}
func (m *MirrorPolicyType) XXX_Size() int {
	return m.Size()
}
func (m *MirrorPolicyType) XXX_DiscardUnknown() {
	xxx_messageInfo_MirrorPolicyType.DiscardUnknown(m)
}

var xxx_messageInfo_MirrorPolicyType proto.InternalMessageInfo

func (m *MirrorPolicyType) GetOriginPool() *views.ObjectRefType {
	if m != nil {
		return m.OriginPool
	}
	return nil
}

func (m *MirrorPolicyType) GetPercent() *schema.FractionalPercent {
	if m != nil {
		return m.Percent
	}
	return nil
}

// Advanced Route Options
//
// x-displayName: "Advanced Route Options"
// Configure advanced options for route like path rewrite, hash policy, etc.
type RouteSimpleAdvancedOptions struct {
	// Hash Policy Choice
	//
	// x-displayName: "Hash Policy Choice"
	// x-required
	// Enable route specific hash policy for this route
	//
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*RouteSimpleAdvancedOptions_CommonHashPolicy
	//	*RouteSimpleAdvancedOptions_SpecificHashPolicy
	HashPolicyChoice isRouteSimpleAdvancedOptions_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	// priority
	//
	// x-displayName: "Priority"
	// Priority routing for each route. Different connection pools are used based on the priority of the route.
	// Also, circuit-breaker configuration at destination cluster is chosen based on the route priority.
	Priority schema.RoutingPriority `protobuf:"varint,4,opt,name=priority,proto3,enum=ves.io.schema.RoutingPriority" json:"priority,omitempty"`
	// Origin Servers Subset
	//
	// x-displayName: "Origin Servers Subsets"
	// x-example: "value"
	// Upstream origin pool may be configured to divide its origin servers into subsets based on metadata
	// attached to the origin servers. Routes may then specify the metadata that a endpoint must match in
	// order to be selected by the load balancer
	//
	// For origin servers which are discovered in K8S or Consul cluster, the label of the service is merged with
	// endpoint's labels. In case of Consul, the label is derived from the "Tag" field.
	// For labels that are common between configured endpoint and discovered service, labels from discovered service
	// takes precedence.
	//
	// List of key-value pairs that will be used as matching metadata. Only those origin servers of
	// upstream origin pool which match this metadata will be selected for load balancing
	EndpointSubsets map[string]string `protobuf:"bytes,5,rep,name=endpoint_subsets,json=endpointSubsets,proto3" json:"endpoint_subsets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Enable Prefix Rewrite
	//
	// x-displayName: "Enable Prefix Rewrite"
	// x-required
	// Select to enable or disable prefix rewrite
	//
	// Types that are valid to be assigned to RewriteChoice:
	//	*RouteSimpleAdvancedOptions_DisablePrefixRewrite
	//	*RouteSimpleAdvancedOptions_PrefixRewrite
	RewriteChoice isRouteSimpleAdvancedOptions_RewriteChoice `protobuf_oneof:"rewrite_choice"`
	// Headers to add in request
	//
	// x-displayName: "Add Request Headers"
	// Headers are key-value pairs to be added to HTTP request being routed towards upstream.
	RequestHeadersToAdd []*schema.HeaderManipulationOptionType `protobuf:"bytes,9,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// Header to be removed from request
	//
	// x-displayName: "Remove Request Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP request being sent towards upstream.
	RequestHeadersToRemove []string `protobuf:"bytes,10,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// Headers to add in response
	//
	// x-displayName: "Add Response Headers"
	// Headers are key-value pairs to be added to HTTP response being sent towards downstream.
	ResponseHeadersToAdd []*schema.HeaderManipulationOptionType `protobuf:"bytes,11,rep,name=response_headers_to_add,json=responseHeadersToAdd,proto3" json:"response_headers_to_add,omitempty"`
	// Header to be removed from response
	//
	// x-displayName: "Remove Response Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP response being sent towards downstream.
	ResponseHeadersToRemove []string `protobuf:"bytes,12,rep,name=response_headers_to_remove,json=responseHeadersToRemove,proto3" json:"response_headers_to_remove,omitempty"`
	// disable_location_add
	//
	// x-displayName: "Disable Location Addition"
	// x-example: true
	// disables append of x-volterra-location = <re-site-name> at route level, if it is configured at
	// virtual-host level. This configuration is ignored on CE sites.
	DisableLocationAdd bool `protobuf:"varint,13,opt,name=disable_location_add,json=disableLocationAdd,proto3" json:"disable_location_add,omitempty"`
	// Enable the WAF (Web Application Firewall) functionality for VirtualHost
	//
	// x-displayName: "Select Web Application Firewall (WAF) Config"
	//
	// WAF can be used to analyze inbound and outbound http/https traffic.
	// WAF can be configured either in BLOCKing Mode or ALERTing Mode.
	// In BLOCKing mode if WAF detects suspicious inbound/outbound traffic it blocks the request or response.
	// In ALERTing mode if suspicious traffic is detected, WAF generates ALERTs with details on the
	// suspicious traffic (instead of blocking traffic).
	//
	// Types that are valid to be assigned to WafChoice:
	//	*RouteSimpleAdvancedOptions_DisableWaf
	//	*RouteSimpleAdvancedOptions_Waf
	//	*RouteSimpleAdvancedOptions_WafRule
	//	*RouteSimpleAdvancedOptions_AppFirewall
	WafChoice isRouteSimpleAdvancedOptions_WafChoice `protobuf_oneof:"waf_choice"`
	// cors_policy
	//
	// x-displayName: "CORS Policy"
	// Cross-Origin Resource Sharing requests configuration
	//
	// CORS is a mechanism that uses additional HTTP headers to tell a browser to let
	// a web application running at one origin (domain) have permission to access selected
	// resources from a server at a different origin
	CorsPolicy *schema.CorsPolicy `protobuf:"bytes,18,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	// SPDY Choice
	//
	// x-displayName: "Enable/Disable SPDY Upgrade"
	// x-required
	// Select to enable or disable spdy upgrade
	//
	// Types that are valid to be assigned to SpdyChoice:
	//	*RouteSimpleAdvancedOptions_DisableSpdy
	//	*RouteSimpleAdvancedOptions_EnableSpdy
	SpdyChoice isRouteSimpleAdvancedOptions_SpdyChoice `protobuf_oneof:"spdy_choice"`
	// Websocket Choice
	//
	// x-displayName: "Enable/Disable Websocket Upgrade"
	// x-required
	// Select to enable or disable websocket upgrade
	//
	// Types that are valid to be assigned to WebsocketChoice:
	//	*RouteSimpleAdvancedOptions_DisableWebSocketConfig
	//	*RouteSimpleAdvancedOptions_WebSocketConfig
	WebsocketChoice isRouteSimpleAdvancedOptions_WebsocketChoice `protobuf_oneof:"websocket_choice"`
	//  Retry Policy Choice
	//
	// x-displayName: "Select Retry Policy"
	// x-required
	// Select default retry policy or configure custom
	//
	// Types that are valid to be assigned to RetryPolicyChoice:
	//	*RouteSimpleAdvancedOptions_DefaultRetryPolicy
	//	*RouteSimpleAdvancedOptions_RetryPolicy
	RetryPolicyChoice isRouteSimpleAdvancedOptions_RetryPolicyChoice `protobuf_oneof:"retry_policy_choice"`
	// timeout
	//
	// x-displayName: "Timeout"
	// x-example: "2000"
	// The timeout for the route including all retries, in milliseconds.
	// Should be set to a high value or 0 (infinite timeout) for server-side streaming.
	Timeout uint32 `protobuf:"varint,28,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Enable Route Specific Buffering
	//
	// x-displayName: "Enable Route Specific Buffering"
	// x-required
	// Enable or disable route specific buffering
	//
	// Types that are valid to be assigned to BufferChoice:
	//	*RouteSimpleAdvancedOptions_CommonBuffering
	//	*RouteSimpleAdvancedOptions_BufferPolicy
	BufferChoice isRouteSimpleAdvancedOptions_BufferChoice `protobuf_oneof:"buffer_choice"`
	// Mirroring
	//
	// x-displayName: "Mirroring"
	// x-required
	// Enable/disable Mirroring
	//
	// Types that are valid to be assigned to MirroringChoice:
	//	*RouteSimpleAdvancedOptions_DisableMirroring
	//	*RouteSimpleAdvancedOptions_MirrorPolicy
	MirroringChoice isRouteSimpleAdvancedOptions_MirroringChoice `protobuf_oneof:"mirroring_choice"`
	// Oneof for Cluster retraction
	//
	// x-displayName: "Select Cluster retract option"
	// x-required
	// Specifies whether retraction of cluster has to be enabled or
	// disabled
	//
	// Types that are valid to be assigned to ClusterRetractChoice:
	//	*RouteSimpleAdvancedOptions_RetractCluster
	//	*RouteSimpleAdvancedOptions_DoNotRetractCluster
	ClusterRetractChoice isRouteSimpleAdvancedOptions_ClusterRetractChoice `protobuf_oneof:"cluster_retract_choice"`
}

func (m *RouteSimpleAdvancedOptions) Reset()      { *m = RouteSimpleAdvancedOptions{} }
func (*RouteSimpleAdvancedOptions) ProtoMessage() {}
func (*RouteSimpleAdvancedOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{11}
}
func (m *RouteSimpleAdvancedOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteSimpleAdvancedOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RouteSimpleAdvancedOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteSimpleAdvancedOptions.Merge(m, src)
}
func (m *RouteSimpleAdvancedOptions) XXX_Size() int {
	return m.Size()
}
func (m *RouteSimpleAdvancedOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteSimpleAdvancedOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RouteSimpleAdvancedOptions proto.InternalMessageInfo

type isRouteSimpleAdvancedOptions_HashPolicyChoice interface {
	isRouteSimpleAdvancedOptions_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_RewriteChoice interface {
	isRouteSimpleAdvancedOptions_RewriteChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_WafChoice interface {
	isRouteSimpleAdvancedOptions_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_SpdyChoice interface {
	isRouteSimpleAdvancedOptions_SpdyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_WebsocketChoice interface {
	isRouteSimpleAdvancedOptions_WebsocketChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_RetryPolicyChoice interface {
	isRouteSimpleAdvancedOptions_RetryPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_BufferChoice interface {
	isRouteSimpleAdvancedOptions_BufferChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_MirroringChoice interface {
	isRouteSimpleAdvancedOptions_MirroringChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRouteSimpleAdvancedOptions_ClusterRetractChoice interface {
	isRouteSimpleAdvancedOptions_ClusterRetractChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RouteSimpleAdvancedOptions_CommonHashPolicy struct {
	CommonHashPolicy *schema.Empty `protobuf:"bytes,2,opt,name=common_hash_policy,json=commonHashPolicy,proto3,oneof" json:"common_hash_policy,omitempty"`
}
type RouteSimpleAdvancedOptions_SpecificHashPolicy struct {
	SpecificHashPolicy *HashPolicyListType `protobuf:"bytes,3,opt,name=specific_hash_policy,json=specificHashPolicy,proto3,oneof" json:"specific_hash_policy,omitempty"`
}
type RouteSimpleAdvancedOptions_DisablePrefixRewrite struct {
	DisablePrefixRewrite *schema.Empty `protobuf:"bytes,7,opt,name=disable_prefix_rewrite,json=disablePrefixRewrite,proto3,oneof" json:"disable_prefix_rewrite,omitempty"`
}
type RouteSimpleAdvancedOptions_PrefixRewrite struct {
	PrefixRewrite string `protobuf:"bytes,8,opt,name=prefix_rewrite,json=prefixRewrite,proto3,oneof" json:"prefix_rewrite,omitempty"`
}
type RouteSimpleAdvancedOptions_DisableWaf struct {
	DisableWaf *schema.Empty `protobuf:"bytes,15,opt,name=disable_waf,json=disableWaf,proto3,oneof" json:"disable_waf,omitempty"`
}
type RouteSimpleAdvancedOptions_Waf struct {
	Waf *views.ObjectRefType `protobuf:"bytes,16,opt,name=waf,proto3,oneof" json:"waf,omitempty"`
}
type RouteSimpleAdvancedOptions_WafRule struct {
	WafRule *views.ObjectRefType `protobuf:"bytes,17,opt,name=waf_rule,json=wafRule,proto3,oneof" json:"waf_rule,omitempty"`
}
type RouteSimpleAdvancedOptions_AppFirewall struct {
	AppFirewall *views.ObjectRefType `protobuf:"bytes,52,opt,name=app_firewall,json=appFirewall,proto3,oneof" json:"app_firewall,omitempty"`
}
type RouteSimpleAdvancedOptions_DisableSpdy struct {
	DisableSpdy *schema.Empty `protobuf:"bytes,20,opt,name=disable_spdy,json=disableSpdy,proto3,oneof" json:"disable_spdy,omitempty"`
}
type RouteSimpleAdvancedOptions_EnableSpdy struct {
	EnableSpdy *schema.Empty `protobuf:"bytes,21,opt,name=enable_spdy,json=enableSpdy,proto3,oneof" json:"enable_spdy,omitempty"`
}
type RouteSimpleAdvancedOptions_DisableWebSocketConfig struct {
	DisableWebSocketConfig *schema.Empty `protobuf:"bytes,23,opt,name=disable_web_socket_config,json=disableWebSocketConfig,proto3,oneof" json:"disable_web_socket_config,omitempty"`
}
type RouteSimpleAdvancedOptions_WebSocketConfig struct {
	WebSocketConfig *route.WebsocketConfigType `protobuf:"bytes,24,opt,name=web_socket_config,json=webSocketConfig,proto3,oneof" json:"web_socket_config,omitempty"`
}
type RouteSimpleAdvancedOptions_DefaultRetryPolicy struct {
	DefaultRetryPolicy *schema.Empty `protobuf:"bytes,26,opt,name=default_retry_policy,json=defaultRetryPolicy,proto3,oneof" json:"default_retry_policy,omitempty"`
}
type RouteSimpleAdvancedOptions_RetryPolicy struct {
	RetryPolicy *schema.RetryPolicyType `protobuf:"bytes,27,opt,name=retry_policy,json=retryPolicy,proto3,oneof" json:"retry_policy,omitempty"`
}
type RouteSimpleAdvancedOptions_CommonBuffering struct {
	CommonBuffering *schema.Empty `protobuf:"bytes,30,opt,name=common_buffering,json=commonBuffering,proto3,oneof" json:"common_buffering,omitempty"`
}
type RouteSimpleAdvancedOptions_BufferPolicy struct {
	BufferPolicy *schema.BufferConfigType `protobuf:"bytes,31,opt,name=buffer_policy,json=bufferPolicy,proto3,oneof" json:"buffer_policy,omitempty"`
}
type RouteSimpleAdvancedOptions_DisableMirroring struct {
	DisableMirroring *schema.Empty `protobuf:"bytes,33,opt,name=disable_mirroring,json=disableMirroring,proto3,oneof" json:"disable_mirroring,omitempty"`
}
type RouteSimpleAdvancedOptions_MirrorPolicy struct {
	MirrorPolicy *MirrorPolicyType `protobuf:"bytes,34,opt,name=mirror_policy,json=mirrorPolicy,proto3,oneof" json:"mirror_policy,omitempty"`
}
type RouteSimpleAdvancedOptions_RetractCluster struct {
	RetractCluster *schema.Empty `protobuf:"bytes,36,opt,name=retract_cluster,json=retractCluster,proto3,oneof" json:"retract_cluster,omitempty"`
}
type RouteSimpleAdvancedOptions_DoNotRetractCluster struct {
	DoNotRetractCluster *schema.Empty `protobuf:"bytes,37,opt,name=do_not_retract_cluster,json=doNotRetractCluster,proto3,oneof" json:"do_not_retract_cluster,omitempty"`
}

func (*RouteSimpleAdvancedOptions_CommonHashPolicy) isRouteSimpleAdvancedOptions_HashPolicyChoice() {}
func (*RouteSimpleAdvancedOptions_SpecificHashPolicy) isRouteSimpleAdvancedOptions_HashPolicyChoice() {
}
func (*RouteSimpleAdvancedOptions_DisablePrefixRewrite) isRouteSimpleAdvancedOptions_RewriteChoice() {
}
func (*RouteSimpleAdvancedOptions_PrefixRewrite) isRouteSimpleAdvancedOptions_RewriteChoice() {}
func (*RouteSimpleAdvancedOptions_DisableWaf) isRouteSimpleAdvancedOptions_WafChoice()        {}
func (*RouteSimpleAdvancedOptions_Waf) isRouteSimpleAdvancedOptions_WafChoice()               {}
func (*RouteSimpleAdvancedOptions_WafRule) isRouteSimpleAdvancedOptions_WafChoice()           {}
func (*RouteSimpleAdvancedOptions_AppFirewall) isRouteSimpleAdvancedOptions_WafChoice()       {}
func (*RouteSimpleAdvancedOptions_DisableSpdy) isRouteSimpleAdvancedOptions_SpdyChoice()      {}
func (*RouteSimpleAdvancedOptions_EnableSpdy) isRouteSimpleAdvancedOptions_SpdyChoice()       {}
func (*RouteSimpleAdvancedOptions_DisableWebSocketConfig) isRouteSimpleAdvancedOptions_WebsocketChoice() {
}
func (*RouteSimpleAdvancedOptions_WebSocketConfig) isRouteSimpleAdvancedOptions_WebsocketChoice() {}
func (*RouteSimpleAdvancedOptions_DefaultRetryPolicy) isRouteSimpleAdvancedOptions_RetryPolicyChoice() {
}
func (*RouteSimpleAdvancedOptions_RetryPolicy) isRouteSimpleAdvancedOptions_RetryPolicyChoice()    {}
func (*RouteSimpleAdvancedOptions_CommonBuffering) isRouteSimpleAdvancedOptions_BufferChoice()     {}
func (*RouteSimpleAdvancedOptions_BufferPolicy) isRouteSimpleAdvancedOptions_BufferChoice()        {}
func (*RouteSimpleAdvancedOptions_DisableMirroring) isRouteSimpleAdvancedOptions_MirroringChoice() {}
func (*RouteSimpleAdvancedOptions_MirrorPolicy) isRouteSimpleAdvancedOptions_MirroringChoice()     {}
func (*RouteSimpleAdvancedOptions_RetractCluster) isRouteSimpleAdvancedOptions_ClusterRetractChoice() {
}
func (*RouteSimpleAdvancedOptions_DoNotRetractCluster) isRouteSimpleAdvancedOptions_ClusterRetractChoice() {
}

func (m *RouteSimpleAdvancedOptions) GetHashPolicyChoice() isRouteSimpleAdvancedOptions_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetRewriteChoice() isRouteSimpleAdvancedOptions_RewriteChoice {
	if m != nil {
		return m.RewriteChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetWafChoice() isRouteSimpleAdvancedOptions_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetSpdyChoice() isRouteSimpleAdvancedOptions_SpdyChoice {
	if m != nil {
		return m.SpdyChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetWebsocketChoice() isRouteSimpleAdvancedOptions_WebsocketChoice {
	if m != nil {
		return m.WebsocketChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetRetryPolicyChoice() isRouteSimpleAdvancedOptions_RetryPolicyChoice {
	if m != nil {
		return m.RetryPolicyChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetBufferChoice() isRouteSimpleAdvancedOptions_BufferChoice {
	if m != nil {
		return m.BufferChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetMirroringChoice() isRouteSimpleAdvancedOptions_MirroringChoice {
	if m != nil {
		return m.MirroringChoice
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) GetClusterRetractChoice() isRouteSimpleAdvancedOptions_ClusterRetractChoice {
	if m != nil {
		return m.ClusterRetractChoice
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetCommonHashPolicy() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*RouteSimpleAdvancedOptions_CommonHashPolicy); ok {
		return x.CommonHashPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetSpecificHashPolicy() *HashPolicyListType {
	if x, ok := m.GetHashPolicyChoice().(*RouteSimpleAdvancedOptions_SpecificHashPolicy); ok {
		return x.SpecificHashPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetPriority() schema.RoutingPriority {
	if m != nil {
		return m.Priority
	}
	return schema.DEFAULT
}

func (m *RouteSimpleAdvancedOptions) GetEndpointSubsets() map[string]string {
	if m != nil {
		return m.EndpointSubsets
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDisablePrefixRewrite() *schema.Empty {
	if x, ok := m.GetRewriteChoice().(*RouteSimpleAdvancedOptions_DisablePrefixRewrite); ok {
		return x.DisablePrefixRewrite
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetPrefixRewrite() string {
	if x, ok := m.GetRewriteChoice().(*RouteSimpleAdvancedOptions_PrefixRewrite); ok {
		return x.PrefixRewrite
	}
	return ""
}

func (m *RouteSimpleAdvancedOptions) GetRequestHeadersToAdd() []*schema.HeaderManipulationOptionType {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetResponseHeadersToAdd() []*schema.HeaderManipulationOptionType {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDisableLocationAdd() bool {
	if m != nil {
		return m.DisableLocationAdd
	}
	return false
}

func (m *RouteSimpleAdvancedOptions) GetDisableWaf() *schema.Empty {
	if x, ok := m.GetWafChoice().(*RouteSimpleAdvancedOptions_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetWaf() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*RouteSimpleAdvancedOptions_Waf); ok {
		return x.Waf
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetWafRule() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*RouteSimpleAdvancedOptions_WafRule); ok {
		return x.WafRule
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetAppFirewall() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*RouteSimpleAdvancedOptions_AppFirewall); ok {
		return x.AppFirewall
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDisableSpdy() *schema.Empty {
	if x, ok := m.GetSpdyChoice().(*RouteSimpleAdvancedOptions_DisableSpdy); ok {
		return x.DisableSpdy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetEnableSpdy() *schema.Empty {
	if x, ok := m.GetSpdyChoice().(*RouteSimpleAdvancedOptions_EnableSpdy); ok {
		return x.EnableSpdy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDisableWebSocketConfig() *schema.Empty {
	if x, ok := m.GetWebsocketChoice().(*RouteSimpleAdvancedOptions_DisableWebSocketConfig); ok {
		return x.DisableWebSocketConfig
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetWebSocketConfig() *route.WebsocketConfigType {
	if x, ok := m.GetWebsocketChoice().(*RouteSimpleAdvancedOptions_WebSocketConfig); ok {
		return x.WebSocketConfig
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDefaultRetryPolicy() *schema.Empty {
	if x, ok := m.GetRetryPolicyChoice().(*RouteSimpleAdvancedOptions_DefaultRetryPolicy); ok {
		return x.DefaultRetryPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetRetryPolicy() *schema.RetryPolicyType {
	if x, ok := m.GetRetryPolicyChoice().(*RouteSimpleAdvancedOptions_RetryPolicy); ok {
		return x.RetryPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *RouteSimpleAdvancedOptions) GetCommonBuffering() *schema.Empty {
	if x, ok := m.GetBufferChoice().(*RouteSimpleAdvancedOptions_CommonBuffering); ok {
		return x.CommonBuffering
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetBufferPolicy() *schema.BufferConfigType {
	if x, ok := m.GetBufferChoice().(*RouteSimpleAdvancedOptions_BufferPolicy); ok {
		return x.BufferPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDisableMirroring() *schema.Empty {
	if x, ok := m.GetMirroringChoice().(*RouteSimpleAdvancedOptions_DisableMirroring); ok {
		return x.DisableMirroring
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetMirrorPolicy() *MirrorPolicyType {
	if x, ok := m.GetMirroringChoice().(*RouteSimpleAdvancedOptions_MirrorPolicy); ok {
		return x.MirrorPolicy
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*RouteSimpleAdvancedOptions_RetractCluster); ok {
		return x.RetractCluster
	}
	return nil
}

func (m *RouteSimpleAdvancedOptions) GetDoNotRetractCluster() *schema.Empty {
	if x, ok := m.GetClusterRetractChoice().(*RouteSimpleAdvancedOptions_DoNotRetractCluster); ok {
		return x.DoNotRetractCluster
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RouteSimpleAdvancedOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RouteSimpleAdvancedOptions_CommonHashPolicy)(nil),
		(*RouteSimpleAdvancedOptions_SpecificHashPolicy)(nil),
		(*RouteSimpleAdvancedOptions_DisablePrefixRewrite)(nil),
		(*RouteSimpleAdvancedOptions_PrefixRewrite)(nil),
		(*RouteSimpleAdvancedOptions_DisableWaf)(nil),
		(*RouteSimpleAdvancedOptions_Waf)(nil),
		(*RouteSimpleAdvancedOptions_WafRule)(nil),
		(*RouteSimpleAdvancedOptions_AppFirewall)(nil),
		(*RouteSimpleAdvancedOptions_DisableSpdy)(nil),
		(*RouteSimpleAdvancedOptions_EnableSpdy)(nil),
		(*RouteSimpleAdvancedOptions_DisableWebSocketConfig)(nil),
		(*RouteSimpleAdvancedOptions_WebSocketConfig)(nil),
		(*RouteSimpleAdvancedOptions_DefaultRetryPolicy)(nil),
		(*RouteSimpleAdvancedOptions_RetryPolicy)(nil),
		(*RouteSimpleAdvancedOptions_CommonBuffering)(nil),
		(*RouteSimpleAdvancedOptions_BufferPolicy)(nil),
		(*RouteSimpleAdvancedOptions_DisableMirroring)(nil),
		(*RouteSimpleAdvancedOptions_MirrorPolicy)(nil),
		(*RouteSimpleAdvancedOptions_RetractCluster)(nil),
		(*RouteSimpleAdvancedOptions_DoNotRetractCluster)(nil),
	}
}

// RouteTypeSimpleWithDefaultOriginPool
//
// x-displayName: "Simple Route"
// A simple route matches on path and/or HTTP method and forwards the matching traffic to the default origin pool specified outside
type RouteTypeSimpleWithDefaultOriginPool struct {
	// http_method
	//
	// x-displayName: "HTTP Method"
	// The name of the HTTP Method (GET, PUT, POST, etc)
	HttpMethod schema.HttpMethod `protobuf:"varint,1,opt,name=http_method,json=httpMethod,proto3,enum=ves.io.schema.HttpMethod" json:"http_method,omitempty"`
	// path
	//
	// x-displayName: "Path"
	// URI path of route
	Path *schema.PathMatcherType `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// HostRewriteParams
	//
	// x-displayName: "Select Host Rewrite Method"
	// x-required
	// Specifies how the host header can be modified during forwarding
	//
	// Types that are valid to be assigned to HostRewriteParams:
	//	*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite
	//	*RouteTypeSimpleWithDefaultOriginPool_HostRewrite
	//	*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite
	HostRewriteParams isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams `protobuf_oneof:"host_rewrite_params"`
}

func (m *RouteTypeSimpleWithDefaultOriginPool) Reset()      { *m = RouteTypeSimpleWithDefaultOriginPool{} }
func (*RouteTypeSimpleWithDefaultOriginPool) ProtoMessage() {}
func (*RouteTypeSimpleWithDefaultOriginPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{12}
}
func (m *RouteTypeSimpleWithDefaultOriginPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteTypeSimpleWithDefaultOriginPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RouteTypeSimpleWithDefaultOriginPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTypeSimpleWithDefaultOriginPool.Merge(m, src)
}
func (m *RouteTypeSimpleWithDefaultOriginPool) XXX_Size() int {
	return m.Size()
}
func (m *RouteTypeSimpleWithDefaultOriginPool) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTypeSimpleWithDefaultOriginPool.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTypeSimpleWithDefaultOriginPool proto.InternalMessageInfo

type isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams interface {
	isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite struct {
	AutoHostRewrite *schema.Empty `protobuf:"bytes,4,opt,name=auto_host_rewrite,json=autoHostRewrite,proto3,oneof" json:"auto_host_rewrite,omitempty"`
}
type RouteTypeSimpleWithDefaultOriginPool_HostRewrite struct {
	HostRewrite string `protobuf:"bytes,5,opt,name=host_rewrite,json=hostRewrite,proto3,oneof" json:"host_rewrite,omitempty"`
}
type RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite struct {
	DisableHostRewrite *schema.Empty `protobuf:"bytes,6,opt,name=disable_host_rewrite,json=disableHostRewrite,proto3,oneof" json:"disable_host_rewrite,omitempty"`
}

func (*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams() {
}
func (*RouteTypeSimpleWithDefaultOriginPool_HostRewrite) isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams() {
}
func (*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams() {
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetHostRewriteParams() isRouteTypeSimpleWithDefaultOriginPool_HostRewriteParams {
	if m != nil {
		return m.HostRewriteParams
	}
	return nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetHttpMethod() schema.HttpMethod {
	if m != nil {
		return m.HttpMethod
	}
	return schema.ANY
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetPath() *schema.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetAutoHostRewrite() *schema.Empty {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite); ok {
		return x.AutoHostRewrite
	}
	return nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetHostRewrite() string {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_HostRewrite); ok {
		return x.HostRewrite
	}
	return ""
}

func (m *RouteTypeSimpleWithDefaultOriginPool) GetDisableHostRewrite() *schema.Empty {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite); ok {
		return x.DisableHostRewrite
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RouteTypeSimpleWithDefaultOriginPool) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite)(nil),
		(*RouteTypeSimpleWithDefaultOriginPool_HostRewrite)(nil),
		(*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite)(nil),
	}
}

// RouteTypeSimple
//
// x-displayName: "Simple Route"
// A simple route matches on path and/or HTTP method and forwards the matching traffic to the associated pools
type RouteTypeSimple struct {
	// path
	//
	// x-displayName: "Path"
	// URI path of route
	Path *schema.PathMatcherType `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// http_method
	//
	// x-displayName: "HTTP Method"
	// The name of the HTTP Method (GET, PUT, POST, etc)
	HttpMethod schema.HttpMethod `protobuf:"varint,2,opt,name=http_method,json=httpMethod,proto3,enum=ves.io.schema.HttpMethod" json:"http_method,omitempty"`
	// Origin Pools
	//
	// x-displayName: "Origin Pools"
	// Origin Pools for this route
	OriginPools []*views.OriginPoolWithWeight `protobuf:"bytes,3,rep,name=origin_pools,json=originPools,proto3" json:"origin_pools,omitempty"`
	// HostRewriteParams
	//
	// x-displayName: "Select Host Rewrite Method"
	// x-required
	// Specifies how the host header can be modified during forwarding
	//
	// Types that are valid to be assigned to HostRewriteParams:
	//	*RouteTypeSimple_AutoHostRewrite
	//	*RouteTypeSimple_HostRewrite
	//	*RouteTypeSimple_DisableHostRewrite
	HostRewriteParams isRouteTypeSimple_HostRewriteParams `protobuf_oneof:"host_rewrite_params"`
	// headers
	//
	// x-displayName: "Headers"
	// List of (key, value) headers
	Headers []*schema.HeaderMatcherType `protobuf:"bytes,9,rep,name=headers,proto3" json:"headers,omitempty"`
	// Advanced Options
	//
	// x-displayName: "Advanced Options"
	// Configure Advanced per route options
	AdvancedOptions *RouteSimpleAdvancedOptions `protobuf:"bytes,8,opt,name=advanced_options,json=advancedOptions,proto3" json:"advanced_options,omitempty"`
}

func (m *RouteTypeSimple) Reset()      { *m = RouteTypeSimple{} }
func (*RouteTypeSimple) ProtoMessage() {}
func (*RouteTypeSimple) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{13}
}
func (m *RouteTypeSimple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteTypeSimple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RouteTypeSimple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTypeSimple.Merge(m, src)
}
func (m *RouteTypeSimple) XXX_Size() int {
	return m.Size()
}
func (m *RouteTypeSimple) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTypeSimple.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTypeSimple proto.InternalMessageInfo

type isRouteTypeSimple_HostRewriteParams interface {
	isRouteTypeSimple_HostRewriteParams()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RouteTypeSimple_AutoHostRewrite struct {
	AutoHostRewrite *schema.Empty `protobuf:"bytes,5,opt,name=auto_host_rewrite,json=autoHostRewrite,proto3,oneof" json:"auto_host_rewrite,omitempty"`
}
type RouteTypeSimple_HostRewrite struct {
	HostRewrite string `protobuf:"bytes,6,opt,name=host_rewrite,json=hostRewrite,proto3,oneof" json:"host_rewrite,omitempty"`
}
type RouteTypeSimple_DisableHostRewrite struct {
	DisableHostRewrite *schema.Empty `protobuf:"bytes,7,opt,name=disable_host_rewrite,json=disableHostRewrite,proto3,oneof" json:"disable_host_rewrite,omitempty"`
}

func (*RouteTypeSimple_AutoHostRewrite) isRouteTypeSimple_HostRewriteParams()    {}
func (*RouteTypeSimple_HostRewrite) isRouteTypeSimple_HostRewriteParams()        {}
func (*RouteTypeSimple_DisableHostRewrite) isRouteTypeSimple_HostRewriteParams() {}

func (m *RouteTypeSimple) GetHostRewriteParams() isRouteTypeSimple_HostRewriteParams {
	if m != nil {
		return m.HostRewriteParams
	}
	return nil
}

func (m *RouteTypeSimple) GetPath() *schema.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *RouteTypeSimple) GetHttpMethod() schema.HttpMethod {
	if m != nil {
		return m.HttpMethod
	}
	return schema.ANY
}

func (m *RouteTypeSimple) GetOriginPools() []*views.OriginPoolWithWeight {
	if m != nil {
		return m.OriginPools
	}
	return nil
}

func (m *RouteTypeSimple) GetAutoHostRewrite() *schema.Empty {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimple_AutoHostRewrite); ok {
		return x.AutoHostRewrite
	}
	return nil
}

func (m *RouteTypeSimple) GetHostRewrite() string {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimple_HostRewrite); ok {
		return x.HostRewrite
	}
	return ""
}

func (m *RouteTypeSimple) GetDisableHostRewrite() *schema.Empty {
	if x, ok := m.GetHostRewriteParams().(*RouteTypeSimple_DisableHostRewrite); ok {
		return x.DisableHostRewrite
	}
	return nil
}

func (m *RouteTypeSimple) GetHeaders() []*schema.HeaderMatcherType {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *RouteTypeSimple) GetAdvancedOptions() *RouteSimpleAdvancedOptions {
	if m != nil {
		return m.AdvancedOptions
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RouteTypeSimple) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RouteTypeSimple_AutoHostRewrite)(nil),
		(*RouteTypeSimple_HostRewrite)(nil),
		(*RouteTypeSimple_DisableHostRewrite)(nil),
	}
}

// RouteTypeRedirect
//
// x-displayName: "Redirect Route"
// A redirect route matches on patch and/or HTTP method and redirects the matching traffic to a different URL
type RouteTypeRedirect struct {
	// path
	//
	// x-displayName: "Path"
	// URI path of route
	Path *schema.PathMatcherType `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// http_method
	//
	// x-displayName: "HTTP Method"
	// The name of the HTTP Method (GET, PUT, POST, etc)
	HttpMethod schema.HttpMethod `protobuf:"varint,2,opt,name=http_method,json=httpMethod,proto3,enum=ves.io.schema.HttpMethod" json:"http_method,omitempty"`
	// route_redirect
	//
	// x-displayName: "Redirect Parameters"
	// Send redirect response
	RouteRedirect *route.RouteRedirect `protobuf:"bytes,3,opt,name=route_redirect,json=routeRedirect,proto3" json:"route_redirect,omitempty"`
	// headers
	//
	// x-displayName: "Headers"
	// List of (key, value) headers
	Headers []*schema.HeaderMatcherType `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (m *RouteTypeRedirect) Reset()      { *m = RouteTypeRedirect{} }
func (*RouteTypeRedirect) ProtoMessage() {}
func (*RouteTypeRedirect) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{14}
}
func (m *RouteTypeRedirect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteTypeRedirect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RouteTypeRedirect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTypeRedirect.Merge(m, src)
}
func (m *RouteTypeRedirect) XXX_Size() int {
	return m.Size()
}
func (m *RouteTypeRedirect) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTypeRedirect.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTypeRedirect proto.InternalMessageInfo

func (m *RouteTypeRedirect) GetPath() *schema.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *RouteTypeRedirect) GetHttpMethod() schema.HttpMethod {
	if m != nil {
		return m.HttpMethod
	}
	return schema.ANY
}

func (m *RouteTypeRedirect) GetRouteRedirect() *route.RouteRedirect {
	if m != nil {
		return m.RouteRedirect
	}
	return nil
}

func (m *RouteTypeRedirect) GetHeaders() []*schema.HeaderMatcherType {
	if m != nil {
		return m.Headers
	}
	return nil
}

// RouteTypeDirectResponse
//
// x-displayName: "Direct Response Route"
// A direct response route matches on patch and/or HTTP method and responds directly to the matching traffic
type RouteTypeDirectResponse struct {
	// path
	//
	// x-displayName: "Path"
	// URI path of route
	Path *schema.PathMatcherType `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// http_method
	//
	// x-displayName: "HTTP Method"
	// The name of the HTTP Method (GET, PUT, POST, etc)
	HttpMethod schema.HttpMethod `protobuf:"varint,2,opt,name=http_method,json=httpMethod,proto3,enum=ves.io.schema.HttpMethod" json:"http_method,omitempty"`
	// route_direct_response
	//
	// x-displayName: "Direct Response"
	// Send direct response
	RouteDirectResponse *route.RouteDirectResponse `protobuf:"bytes,3,opt,name=route_direct_response,json=routeDirectResponse,proto3" json:"route_direct_response,omitempty"`
	// headers
	//
	// x-displayName: "Headers"
	// List of (key, value) headers
	Headers []*schema.HeaderMatcherType `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (m *RouteTypeDirectResponse) Reset()      { *m = RouteTypeDirectResponse{} }
func (*RouteTypeDirectResponse) ProtoMessage() {}
func (*RouteTypeDirectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{15}
}
func (m *RouteTypeDirectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteTypeDirectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RouteTypeDirectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTypeDirectResponse.Merge(m, src)
}
func (m *RouteTypeDirectResponse) XXX_Size() int {
	return m.Size()
}
func (m *RouteTypeDirectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTypeDirectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTypeDirectResponse proto.InternalMessageInfo

func (m *RouteTypeDirectResponse) GetPath() *schema.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *RouteTypeDirectResponse) GetHttpMethod() schema.HttpMethod {
	if m != nil {
		return m.HttpMethod
	}
	return schema.ANY
}

func (m *RouteTypeDirectResponse) GetRouteDirectResponse() *route.RouteDirectResponse {
	if m != nil {
		return m.RouteDirectResponse
	}
	return nil
}

func (m *RouteTypeDirectResponse) GetHeaders() []*schema.HeaderMatcherType {
	if m != nil {
		return m.Headers
	}
	return nil
}

// RouteTypeCustomRoute
//
// x-displayName: "Custom Route Object"
// A custom route uses a route object created outside of this view.
type RouteTypeCustomRoute struct {
	// route_refs
	//
	// x-displayName: "Reference to Custom Route"
	// Reference to a custom route object
	RouteRef *views.ObjectRefType `protobuf:"bytes,1,opt,name=route_ref,json=routeRef,proto3" json:"route_ref,omitempty"`
}

func (m *RouteTypeCustomRoute) Reset()      { *m = RouteTypeCustomRoute{} }
func (*RouteTypeCustomRoute) ProtoMessage() {}
func (*RouteTypeCustomRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{16}
}
func (m *RouteTypeCustomRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteTypeCustomRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RouteTypeCustomRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTypeCustomRoute.Merge(m, src)
}
func (m *RouteTypeCustomRoute) XXX_Size() int {
	return m.Size()
}
func (m *RouteTypeCustomRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTypeCustomRoute.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTypeCustomRoute proto.InternalMessageInfo

func (m *RouteTypeCustomRoute) GetRouteRef() *views.ObjectRefType {
	if m != nil {
		return m.RouteRef
	}
	return nil
}

// RouteType
//
// x-displayName: "Route Type"
// This defines various options to define a route
type RouteType struct {
	// route choice
	//
	// x-displayName: "Select Type of Route"
	// x-required
	// Selection of different types of routes
	//
	// Types that are valid to be assigned to Choice:
	//	*RouteType_SimpleRoute
	//	*RouteType_RedirectRoute
	//	*RouteType_DirectResponseRoute
	//	*RouteType_CustomRouteObject
	Choice isRouteType_Choice `protobuf_oneof:"choice"`
}

func (m *RouteType) Reset()      { *m = RouteType{} }
func (*RouteType) ProtoMessage() {}
func (*RouteType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{17}
}
func (m *RouteType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RouteType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteType.Merge(m, src)
}
func (m *RouteType) XXX_Size() int {
	return m.Size()
}
func (m *RouteType) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteType.DiscardUnknown(m)
}

var xxx_messageInfo_RouteType proto.InternalMessageInfo

type isRouteType_Choice interface {
	isRouteType_Choice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RouteType_SimpleRoute struct {
	SimpleRoute *RouteTypeSimple `protobuf:"bytes,1,opt,name=simple_route,json=simpleRoute,proto3,oneof" json:"simple_route,omitempty"`
}
type RouteType_RedirectRoute struct {
	RedirectRoute *RouteTypeRedirect `protobuf:"bytes,2,opt,name=redirect_route,json=redirectRoute,proto3,oneof" json:"redirect_route,omitempty"`
}
type RouteType_DirectResponseRoute struct {
	DirectResponseRoute *RouteTypeDirectResponse `protobuf:"bytes,3,opt,name=direct_response_route,json=directResponseRoute,proto3,oneof" json:"direct_response_route,omitempty"`
}
type RouteType_CustomRouteObject struct {
	CustomRouteObject *RouteTypeCustomRoute `protobuf:"bytes,4,opt,name=custom_route_object,json=customRouteObject,proto3,oneof" json:"custom_route_object,omitempty"`
}

func (*RouteType_SimpleRoute) isRouteType_Choice()         {}
func (*RouteType_RedirectRoute) isRouteType_Choice()       {}
func (*RouteType_DirectResponseRoute) isRouteType_Choice() {}
func (*RouteType_CustomRouteObject) isRouteType_Choice()   {}

func (m *RouteType) GetChoice() isRouteType_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (m *RouteType) GetSimpleRoute() *RouteTypeSimple {
	if x, ok := m.GetChoice().(*RouteType_SimpleRoute); ok {
		return x.SimpleRoute
	}
	return nil
}

func (m *RouteType) GetRedirectRoute() *RouteTypeRedirect {
	if x, ok := m.GetChoice().(*RouteType_RedirectRoute); ok {
		return x.RedirectRoute
	}
	return nil
}

func (m *RouteType) GetDirectResponseRoute() *RouteTypeDirectResponse {
	if x, ok := m.GetChoice().(*RouteType_DirectResponseRoute); ok {
		return x.DirectResponseRoute
	}
	return nil
}

func (m *RouteType) GetCustomRouteObject() *RouteTypeCustomRoute {
	if x, ok := m.GetChoice().(*RouteType_CustomRouteObject); ok {
		return x.CustomRouteObject
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RouteType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RouteType_SimpleRoute)(nil),
		(*RouteType_RedirectRoute)(nil),
		(*RouteType_DirectResponseRoute)(nil),
		(*RouteType_CustomRouteObject)(nil),
	}
}

// Advanced options
//
// x-displayName: "Advanced Options"
// This defines various options to define a route
type AdvancedOptionsType struct {
	// Headers to add in request
	//
	// x-displayName: "Add Request Headers"
	// Headers are key-value pairs to be added to HTTP request being routed towards upstream.
	// Headers specified at this level are applied after headers from matched Route are applied
	RequestHeadersToAdd []*schema.HeaderManipulationOptionType `protobuf:"bytes,1,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// Header to be removed from request
	//
	// x-displayName: "Remove Request Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP request being sent towards upstream.
	RequestHeadersToRemove []string `protobuf:"bytes,2,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// Headers to add in response
	//
	// x-displayName: "Add Response Headers"
	// Headers are key-value pairs to be added to HTTP response being sent towards downstream.
	// Headers specified at this level are applied after headers from matched Route are applied
	ResponseHeadersToAdd []*schema.HeaderManipulationOptionType `protobuf:"bytes,3,rep,name=response_headers_to_add,json=responseHeadersToAdd,proto3" json:"response_headers_to_add,omitempty"`
	// Header to be removed from response
	//
	// x-displayName: "Remove Response Headers"
	// x-example: "host"
	// List of keys of Headers to be removed from the HTTP response being sent towards downstream.
	ResponseHeadersToRemove []string `protobuf:"bytes,4,rep,name=response_headers_to_remove,json=responseHeadersToRemove,proto3" json:"response_headers_to_remove,omitempty"`
	// Maximum request header size
	//
	// x-displayName: "Maximum Request Header Size"
	// x-example: "60"
	// The maximum request header size for downstream connections, in KiB.
	// A HTTP 431 (Request Header Fields Too Large) error code is sent for requests that exceed this size.
	//
	// If multiple loadbalancers share the same advertise_policy, the highest value configured across all
	// such loadbalancers is used for all the loadbalancers in question.
	MaxRequestHeaderSize uint32 `protobuf:"varint,5,opt,name=max_request_header_size,json=maxRequestHeaderSize,proto3" json:"max_request_header_size,omitempty"`
	// Buffer configuration for requests
	//
	// x-displayName: "Buffer Policy"
	// Some upstream applications are not capable of handling streamed data and high network latency.
	// This config enables buffering the entire request before sending to upstream application. We can
	// specify the maximum buffer size and buffer interval with this config.
	BufferPolicy *schema.BufferConfigType `protobuf:"bytes,6,opt,name=buffer_policy,json=bufferPolicy,proto3" json:"buffer_policy,omitempty"`
	// Compression configuration
	//
	// x-displayName: "Compression Parameters"
	// Enables loadbalancer to compress dispatched data from an upstream service upon client request.
	// Only GZIP compression is supported
	CompressionParams *virtual_host.CompressionType `protobuf:"bytes,7,opt,name=compression_params,json=compressionParams,proto3" json:"compression_params,omitempty"`
	// Custom Errors
	//
	// x-displayName: "Custom Error Responses"
	// x-example: "value"
	// Map of integer error codes as keys and string values that can be used to provide custom
	// http pages for each error code.
	// Key of the map can be either response code class or HTTP Error code. Response code classes
	// for key is configured as follows
	// 3 -- for 3xx response code class
	// 4 -- for 4xx response code class
	// 5 -- for 5xx response code class
	// Value of the map is string which represents custom HTTP responses.
	// Specific response code takes preference when both response code and response code class
	// matches for a request.
	CustomErrors map[uint32]string `protobuf:"bytes,8,rep,name=custom_errors,json=customErrors,proto3" json:"custom_errors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// javascript_info
	//
	// x-displayName: "Javascript Info"
	// Custom JavaScript Configuration. Custom JavaScript code can be executed at various stages of request processing.
	JavascriptInfo *virtual_host.JavaScriptConfigType `protobuf:"bytes,9,opt,name=javascript_info,json=javascriptInfo,proto3" json:"javascript_info,omitempty"`
	// JSON Web Token authentication (JWT) configuration for requests
	//
	// x-displayName: "JWT Config"
	// This HTTP filter specifies how to verify JSON Web Token (JWT). It will verify its signature,
	// audiences and issuer
	Jwt []*views.ObjectRefType `protobuf:"bytes,10,rep,name=jwt,proto3" json:"jwt,omitempty"`
	// Idle timeout
	//
	// x-displayName: "Idle Timeout"
	// x-example: "2000"
	// The amount of time that a stream can exist without upstream or downstream activity, in milliseconds.
	// The stream is terminated with a HTTP 408 (Request Timeout) error code if no upstream response header has been
	// received, otherwise the stream is reset.
	IdleTimeout uint32 `protobuf:"varint,11,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Disable the use of default Volterra error pages
	//
	// x-displayName: "Disable Default Error Pages"
	// Disable the use of default Volterra error pages.
	DisableDefaultErrorPages bool `protobuf:"varint,13,opt,name=disable_default_error_pages,json=disableDefaultErrorPages,proto3" json:"disable_default_error_pages,omitempty"`
	// Normalize Path
	//
	// x-displayName: "Path normalize"
	//
	// Should paths be normalized before any processing of requests.
	//
	// In addition to path normalization according to RFC 3986, adjacent slashes in the path
	// will be merged into one when this flag is enabled.
	//
	// It should be noted that normalized path is sent to the origin server.
	//
	// For HTTP loadbalancer, this configuration is ignored and path normalization is always enabled
	//
	// See Normalization and Comparison <https://tools.ietf.org/html/rfc3986#section-6> for details of normalization.
	// Note that Volterra does not perform case normalization <https://tools.ietf.org/html/rfc3986#section-6.2.2.1>
	//
	// Types that are valid to be assigned to PathNormalizeChoice:
	//	*AdvancedOptionsType_EnablePathNormalize
	//	*AdvancedOptionsType_DisablePathNormalize
	PathNormalizeChoice isAdvancedOptionsType_PathNormalizeChoice `protobuf_oneof:"path_normalize_choice"`
	// Strict check of SNI and Host header
	//
	// x-displayName: "Strict SNI and Host header check"
	//
	// Volterra allows request only if Server Name Indication(SNI) and Host header match.
	// The domains for which this check needs to be bypassed can be configured here.
	//
	// Types that are valid to be assigned to StrictSniHostHeaderCheckChoice:
	//	*AdvancedOptionsType_EnableStrictSniHostHeaderCheck
	//	*AdvancedOptionsType_AdditionalDomains
	StrictSniHostHeaderCheckChoice isAdvancedOptionsType_StrictSniHostHeaderCheckChoice `protobuf_oneof:"strict_sni_host_header_check_choice"`
}

func (m *AdvancedOptionsType) Reset()      { *m = AdvancedOptionsType{} }
func (*AdvancedOptionsType) ProtoMessage() {}
func (*AdvancedOptionsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{18}
}
func (m *AdvancedOptionsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvancedOptionsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AdvancedOptionsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvancedOptionsType.Merge(m, src)
}
func (m *AdvancedOptionsType) XXX_Size() int {
	return m.Size()
}
func (m *AdvancedOptionsType) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvancedOptionsType.DiscardUnknown(m)
}

var xxx_messageInfo_AdvancedOptionsType proto.InternalMessageInfo

type isAdvancedOptionsType_PathNormalizeChoice interface {
	isAdvancedOptionsType_PathNormalizeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAdvancedOptionsType_StrictSniHostHeaderCheckChoice interface {
	isAdvancedOptionsType_StrictSniHostHeaderCheckChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AdvancedOptionsType_EnablePathNormalize struct {
	EnablePathNormalize *schema.Empty `protobuf:"bytes,15,opt,name=enable_path_normalize,json=enablePathNormalize,proto3,oneof" json:"enable_path_normalize,omitempty"`
}
type AdvancedOptionsType_DisablePathNormalize struct {
	DisablePathNormalize *schema.Empty `protobuf:"bytes,16,opt,name=disable_path_normalize,json=disablePathNormalize,proto3,oneof" json:"disable_path_normalize,omitempty"`
}
type AdvancedOptionsType_EnableStrictSniHostHeaderCheck struct {
	EnableStrictSniHostHeaderCheck *schema.Empty `protobuf:"bytes,18,opt,name=enable_strict_sni_host_header_check,json=enableStrictSniHostHeaderCheck,proto3,oneof" json:"enable_strict_sni_host_header_check,omitempty"`
}
type AdvancedOptionsType_AdditionalDomains struct {
	AdditionalDomains *schema.DomainNameList `protobuf:"bytes,19,opt,name=additional_domains,json=additionalDomains,proto3,oneof" json:"additional_domains,omitempty"`
}

func (*AdvancedOptionsType_EnablePathNormalize) isAdvancedOptionsType_PathNormalizeChoice()  {}
func (*AdvancedOptionsType_DisablePathNormalize) isAdvancedOptionsType_PathNormalizeChoice() {}
func (*AdvancedOptionsType_EnableStrictSniHostHeaderCheck) isAdvancedOptionsType_StrictSniHostHeaderCheckChoice() {
}
func (*AdvancedOptionsType_AdditionalDomains) isAdvancedOptionsType_StrictSniHostHeaderCheckChoice() {
}

func (m *AdvancedOptionsType) GetPathNormalizeChoice() isAdvancedOptionsType_PathNormalizeChoice {
	if m != nil {
		return m.PathNormalizeChoice
	}
	return nil
}
func (m *AdvancedOptionsType) GetStrictSniHostHeaderCheckChoice() isAdvancedOptionsType_StrictSniHostHeaderCheckChoice {
	if m != nil {
		return m.StrictSniHostHeaderCheckChoice
	}
	return nil
}

func (m *AdvancedOptionsType) GetRequestHeadersToAdd() []*schema.HeaderManipulationOptionType {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *AdvancedOptionsType) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *AdvancedOptionsType) GetResponseHeadersToAdd() []*schema.HeaderManipulationOptionType {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *AdvancedOptionsType) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *AdvancedOptionsType) GetMaxRequestHeaderSize() uint32 {
	if m != nil {
		return m.MaxRequestHeaderSize
	}
	return 0
}

func (m *AdvancedOptionsType) GetBufferPolicy() *schema.BufferConfigType {
	if m != nil {
		return m.BufferPolicy
	}
	return nil
}

func (m *AdvancedOptionsType) GetCompressionParams() *virtual_host.CompressionType {
	if m != nil {
		return m.CompressionParams
	}
	return nil
}

func (m *AdvancedOptionsType) GetCustomErrors() map[uint32]string {
	if m != nil {
		return m.CustomErrors
	}
	return nil
}

func (m *AdvancedOptionsType) GetJavascriptInfo() *virtual_host.JavaScriptConfigType {
	if m != nil {
		return m.JavascriptInfo
	}
	return nil
}

func (m *AdvancedOptionsType) GetJwt() []*views.ObjectRefType {
	if m != nil {
		return m.Jwt
	}
	return nil
}

func (m *AdvancedOptionsType) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *AdvancedOptionsType) GetDisableDefaultErrorPages() bool {
	if m != nil {
		return m.DisableDefaultErrorPages
	}
	return false
}

// Deprecated: Do not use.
func (m *AdvancedOptionsType) GetEnablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*AdvancedOptionsType_EnablePathNormalize); ok {
		return x.EnablePathNormalize
	}
	return nil
}

// Deprecated: Do not use.
func (m *AdvancedOptionsType) GetDisablePathNormalize() *schema.Empty {
	if x, ok := m.GetPathNormalizeChoice().(*AdvancedOptionsType_DisablePathNormalize); ok {
		return x.DisablePathNormalize
	}
	return nil
}

func (m *AdvancedOptionsType) GetEnableStrictSniHostHeaderCheck() *schema.Empty {
	if x, ok := m.GetStrictSniHostHeaderCheckChoice().(*AdvancedOptionsType_EnableStrictSniHostHeaderCheck); ok {
		return x.EnableStrictSniHostHeaderCheck
	}
	return nil
}

func (m *AdvancedOptionsType) GetAdditionalDomains() *schema.DomainNameList {
	if x, ok := m.GetStrictSniHostHeaderCheckChoice().(*AdvancedOptionsType_AdditionalDomains); ok {
		return x.AdditionalDomains
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AdvancedOptionsType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AdvancedOptionsType_EnablePathNormalize)(nil),
		(*AdvancedOptionsType_DisablePathNormalize)(nil),
		(*AdvancedOptionsType_EnableStrictSniHostHeaderCheck)(nil),
		(*AdvancedOptionsType_AdditionalDomains)(nil),
	}
}

// policy based challenge
//
// x-displayName: "Policy Based Challenge"
// Specifies the settings for policy rule based challenge
type PolicyBasedChallenge struct {
	// Javascript challenge parameters choice
	//
	// x-displayName: "Javascript Challenge Parameters"
	// Select Default or Custom Parameters
	//
	// Types that are valid to be assigned to JsChallengeParametersChoice:
	//	*PolicyBasedChallenge_DefaultJsChallengeParameters
	//	*PolicyBasedChallenge_JsChallengeParameters
	JsChallengeParametersChoice isPolicyBasedChallenge_JsChallengeParametersChoice `protobuf_oneof:"js_challenge_parameters_choice"`
	// Captcha challenge parameters choice
	//
	// x-displayName: "Captcha Challenge Parameters"
	// Select Default or Custom Parameters
	//
	// Types that are valid to be assigned to CaptchaChallengeParametersChoice:
	//	*PolicyBasedChallenge_DefaultCaptchaChallengeParameters
	//	*PolicyBasedChallenge_CaptchaChallengeParameters
	CaptchaChallengeParametersChoice isPolicyBasedChallenge_CaptchaChallengeParametersChoice `protobuf_oneof:"captcha_challenge_parameters_choice"`
	// Temporary blocking parameters choice
	//
	// x-displayName: "Temporary Blocking Parameters"
	// Select Default or Custom Parameters
	//
	// Types that are valid to be assigned to TemporaryBlockingParametersChoice:
	//	*PolicyBasedChallenge_DefaultTemporaryBlockingParameters
	//	*PolicyBasedChallenge_TemporaryUserBlocking
	TemporaryBlockingParametersChoice isPolicyBasedChallenge_TemporaryBlockingParametersChoice `protobuf_oneof:"temporary_blocking_parameters_choice"`
	// Malicious user mitigation choice
	//
	// x-displayName: "Malicious User Mitigation Settings"
	// Settings that specify the actions to be taken when malicious users are determined to be at different threat levels.
	// User's activity is monitored and continuously analyzed for malicious behavior. From this analysis, a threat-level
	// is assigned to each user. The settings defined in malicious user mitigation specify what mitigation actions to take
	// for user determined to be at different threat levels.
	//
	// Types that are valid to be assigned to MaliciousUserMitigationChoice:
	//	*PolicyBasedChallenge_DefaultMitigationSettings
	//	*PolicyBasedChallenge_MaliciousUserMitigation
	MaliciousUserMitigationChoice isPolicyBasedChallenge_MaliciousUserMitigationChoice `protobuf_oneof:"malicious_user_mitigation_choice"`
	// challenge choice
	//
	// x-displayName: "Select Type of Challenge"
	// x-required
	// Select the default challenge type for all requests. This can be overriden using the challenge rule list.
	//
	// Types that are valid to be assigned to ChallengeChoice:
	//	*PolicyBasedChallenge_NoChallenge
	//	*PolicyBasedChallenge_AlwaysEnableJsChallenge
	//	*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge
	ChallengeChoice isPolicyBasedChallenge_ChallengeChoice `protobuf_oneof:"challenge_choice"`
	// Challenge rule list
	//
	// x-displayName: "Challenge rule list"
	// list challenge rules to be used in policy based challenge
	RuleList *ChallengeRuleList `protobuf:"bytes,18,opt,name=rule_list,json=ruleList,proto3" json:"rule_list,omitempty"`
}

func (m *PolicyBasedChallenge) Reset()      { *m = PolicyBasedChallenge{} }
func (*PolicyBasedChallenge) ProtoMessage() {}
func (*PolicyBasedChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{19}
}
func (m *PolicyBasedChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyBasedChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PolicyBasedChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyBasedChallenge.Merge(m, src)
}
func (m *PolicyBasedChallenge) XXX_Size() int {
	return m.Size()
}
func (m *PolicyBasedChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyBasedChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyBasedChallenge proto.InternalMessageInfo

type isPolicyBasedChallenge_JsChallengeParametersChoice interface {
	isPolicyBasedChallenge_JsChallengeParametersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPolicyBasedChallenge_CaptchaChallengeParametersChoice interface {
	isPolicyBasedChallenge_CaptchaChallengeParametersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPolicyBasedChallenge_TemporaryBlockingParametersChoice interface {
	isPolicyBasedChallenge_TemporaryBlockingParametersChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPolicyBasedChallenge_MaliciousUserMitigationChoice interface {
	isPolicyBasedChallenge_MaliciousUserMitigationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPolicyBasedChallenge_ChallengeChoice interface {
	isPolicyBasedChallenge_ChallengeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PolicyBasedChallenge_DefaultJsChallengeParameters struct {
	DefaultJsChallengeParameters *schema.Empty `protobuf:"bytes,2,opt,name=default_js_challenge_parameters,json=defaultJsChallengeParameters,proto3,oneof" json:"default_js_challenge_parameters,omitempty"`
}
type PolicyBasedChallenge_JsChallengeParameters struct {
	JsChallengeParameters *virtual_host.JavascriptChallengeType `protobuf:"bytes,3,opt,name=js_challenge_parameters,json=jsChallengeParameters,proto3,oneof" json:"js_challenge_parameters,omitempty"`
}
type PolicyBasedChallenge_DefaultCaptchaChallengeParameters struct {
	DefaultCaptchaChallengeParameters *schema.Empty `protobuf:"bytes,5,opt,name=default_captcha_challenge_parameters,json=defaultCaptchaChallengeParameters,proto3,oneof" json:"default_captcha_challenge_parameters,omitempty"`
}
type PolicyBasedChallenge_CaptchaChallengeParameters struct {
	CaptchaChallengeParameters *virtual_host.CaptchaChallengeType `protobuf:"bytes,6,opt,name=captcha_challenge_parameters,json=captchaChallengeParameters,proto3,oneof" json:"captcha_challenge_parameters,omitempty"`
}
type PolicyBasedChallenge_DefaultTemporaryBlockingParameters struct {
	DefaultTemporaryBlockingParameters *schema.Empty `protobuf:"bytes,8,opt,name=default_temporary_blocking_parameters,json=defaultTemporaryBlockingParameters,proto3,oneof" json:"default_temporary_blocking_parameters,omitempty"`
}
type PolicyBasedChallenge_TemporaryUserBlocking struct {
	TemporaryUserBlocking *virtual_host.TemporaryUserBlockingType `protobuf:"bytes,9,opt,name=temporary_user_blocking,json=temporaryUserBlocking,proto3,oneof" json:"temporary_user_blocking,omitempty"`
}
type PolicyBasedChallenge_DefaultMitigationSettings struct {
	DefaultMitigationSettings *schema.Empty `protobuf:"bytes,11,opt,name=default_mitigation_settings,json=defaultMitigationSettings,proto3,oneof" json:"default_mitigation_settings,omitempty"`
}
type PolicyBasedChallenge_MaliciousUserMitigation struct {
	MaliciousUserMitigation *views.ObjectRefType `protobuf:"bytes,12,opt,name=malicious_user_mitigation,json=maliciousUserMitigation,proto3,oneof" json:"malicious_user_mitigation,omitempty"`
}
type PolicyBasedChallenge_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,14,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type PolicyBasedChallenge_AlwaysEnableJsChallenge struct {
	AlwaysEnableJsChallenge *schema.Empty `protobuf:"bytes,15,opt,name=always_enable_js_challenge,json=alwaysEnableJsChallenge,proto3,oneof" json:"always_enable_js_challenge,omitempty"`
}
type PolicyBasedChallenge_AlwaysEnableCaptchaChallenge struct {
	AlwaysEnableCaptchaChallenge *schema.Empty `protobuf:"bytes,16,opt,name=always_enable_captcha_challenge,json=alwaysEnableCaptchaChallenge,proto3,oneof" json:"always_enable_captcha_challenge,omitempty"`
}

func (*PolicyBasedChallenge_DefaultJsChallengeParameters) isPolicyBasedChallenge_JsChallengeParametersChoice() {
}
func (*PolicyBasedChallenge_JsChallengeParameters) isPolicyBasedChallenge_JsChallengeParametersChoice() {
}
func (*PolicyBasedChallenge_DefaultCaptchaChallengeParameters) isPolicyBasedChallenge_CaptchaChallengeParametersChoice() {
}
func (*PolicyBasedChallenge_CaptchaChallengeParameters) isPolicyBasedChallenge_CaptchaChallengeParametersChoice() {
}
func (*PolicyBasedChallenge_DefaultTemporaryBlockingParameters) isPolicyBasedChallenge_TemporaryBlockingParametersChoice() {
}
func (*PolicyBasedChallenge_TemporaryUserBlocking) isPolicyBasedChallenge_TemporaryBlockingParametersChoice() {
}
func (*PolicyBasedChallenge_DefaultMitigationSettings) isPolicyBasedChallenge_MaliciousUserMitigationChoice() {
}
func (*PolicyBasedChallenge_MaliciousUserMitigation) isPolicyBasedChallenge_MaliciousUserMitigationChoice() {
}
func (*PolicyBasedChallenge_NoChallenge) isPolicyBasedChallenge_ChallengeChoice()                  {}
func (*PolicyBasedChallenge_AlwaysEnableJsChallenge) isPolicyBasedChallenge_ChallengeChoice()      {}
func (*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) isPolicyBasedChallenge_ChallengeChoice() {}

func (m *PolicyBasedChallenge) GetJsChallengeParametersChoice() isPolicyBasedChallenge_JsChallengeParametersChoice {
	if m != nil {
		return m.JsChallengeParametersChoice
	}
	return nil
}
func (m *PolicyBasedChallenge) GetCaptchaChallengeParametersChoice() isPolicyBasedChallenge_CaptchaChallengeParametersChoice {
	if m != nil {
		return m.CaptchaChallengeParametersChoice
	}
	return nil
}
func (m *PolicyBasedChallenge) GetTemporaryBlockingParametersChoice() isPolicyBasedChallenge_TemporaryBlockingParametersChoice {
	if m != nil {
		return m.TemporaryBlockingParametersChoice
	}
	return nil
}
func (m *PolicyBasedChallenge) GetMaliciousUserMitigationChoice() isPolicyBasedChallenge_MaliciousUserMitigationChoice {
	if m != nil {
		return m.MaliciousUserMitigationChoice
	}
	return nil
}
func (m *PolicyBasedChallenge) GetChallengeChoice() isPolicyBasedChallenge_ChallengeChoice {
	if m != nil {
		return m.ChallengeChoice
	}
	return nil
}

func (m *PolicyBasedChallenge) GetDefaultJsChallengeParameters() *schema.Empty {
	if x, ok := m.GetJsChallengeParametersChoice().(*PolicyBasedChallenge_DefaultJsChallengeParameters); ok {
		return x.DefaultJsChallengeParameters
	}
	return nil
}

func (m *PolicyBasedChallenge) GetJsChallengeParameters() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetJsChallengeParametersChoice().(*PolicyBasedChallenge_JsChallengeParameters); ok {
		return x.JsChallengeParameters
	}
	return nil
}

func (m *PolicyBasedChallenge) GetDefaultCaptchaChallengeParameters() *schema.Empty {
	if x, ok := m.GetCaptchaChallengeParametersChoice().(*PolicyBasedChallenge_DefaultCaptchaChallengeParameters); ok {
		return x.DefaultCaptchaChallengeParameters
	}
	return nil
}

func (m *PolicyBasedChallenge) GetCaptchaChallengeParameters() *virtual_host.CaptchaChallengeType {
	if x, ok := m.GetCaptchaChallengeParametersChoice().(*PolicyBasedChallenge_CaptchaChallengeParameters); ok {
		return x.CaptchaChallengeParameters
	}
	return nil
}

func (m *PolicyBasedChallenge) GetDefaultTemporaryBlockingParameters() *schema.Empty {
	if x, ok := m.GetTemporaryBlockingParametersChoice().(*PolicyBasedChallenge_DefaultTemporaryBlockingParameters); ok {
		return x.DefaultTemporaryBlockingParameters
	}
	return nil
}

func (m *PolicyBasedChallenge) GetTemporaryUserBlocking() *virtual_host.TemporaryUserBlockingType {
	if x, ok := m.GetTemporaryBlockingParametersChoice().(*PolicyBasedChallenge_TemporaryUserBlocking); ok {
		return x.TemporaryUserBlocking
	}
	return nil
}

func (m *PolicyBasedChallenge) GetDefaultMitigationSettings() *schema.Empty {
	if x, ok := m.GetMaliciousUserMitigationChoice().(*PolicyBasedChallenge_DefaultMitigationSettings); ok {
		return x.DefaultMitigationSettings
	}
	return nil
}

func (m *PolicyBasedChallenge) GetMaliciousUserMitigation() *views.ObjectRefType {
	if x, ok := m.GetMaliciousUserMitigationChoice().(*PolicyBasedChallenge_MaliciousUserMitigation); ok {
		return x.MaliciousUserMitigation
	}
	return nil
}

func (m *PolicyBasedChallenge) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeChoice().(*PolicyBasedChallenge_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetAlwaysEnableJsChallenge() *schema.Empty {
	if x, ok := m.GetChallengeChoice().(*PolicyBasedChallenge_AlwaysEnableJsChallenge); ok {
		return x.AlwaysEnableJsChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetAlwaysEnableCaptchaChallenge() *schema.Empty {
	if x, ok := m.GetChallengeChoice().(*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge); ok {
		return x.AlwaysEnableCaptchaChallenge
	}
	return nil
}

func (m *PolicyBasedChallenge) GetRuleList() *ChallengeRuleList {
	if m != nil {
		return m.RuleList
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PolicyBasedChallenge) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PolicyBasedChallenge_DefaultJsChallengeParameters)(nil),
		(*PolicyBasedChallenge_JsChallengeParameters)(nil),
		(*PolicyBasedChallenge_DefaultCaptchaChallengeParameters)(nil),
		(*PolicyBasedChallenge_CaptchaChallengeParameters)(nil),
		(*PolicyBasedChallenge_DefaultTemporaryBlockingParameters)(nil),
		(*PolicyBasedChallenge_TemporaryUserBlocking)(nil),
		(*PolicyBasedChallenge_DefaultMitigationSettings)(nil),
		(*PolicyBasedChallenge_MaliciousUserMitigation)(nil),
		(*PolicyBasedChallenge_NoChallenge)(nil),
		(*PolicyBasedChallenge_AlwaysEnableJsChallenge)(nil),
		(*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge)(nil),
	}
}

// Challenge Rule
//
// x-displayName: "Challenge Rule"
// Challenge rule
type ChallengeRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// spec
	//
	// x-displayName: "Challenge Rule Specification"
	// x-required
	// Specification for the rule including match predicates and actions.
	Spec *service_policy_rule.ChallengeRuleSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *ChallengeRule) Reset()      { *m = ChallengeRule{} }
func (*ChallengeRule) ProtoMessage() {}
func (*ChallengeRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{20}
}
func (m *ChallengeRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ChallengeRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeRule.Merge(m, src)
}
func (m *ChallengeRule) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeRule.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeRule proto.InternalMessageInfo

func (m *ChallengeRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ChallengeRule) GetSpec() *service_policy_rule.ChallengeRuleSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// Challenge Rule List
//
// x-displayName: "Challenge Rule List"
// List of challenge rules to be used in policy based challenge
type ChallengeRuleList struct {
	// Rules
	//
	// x-displayName: "Rules"
	// Rules that specify the match conditions and challenge type to be launched.
	// When a challenge type is selected to be always enabled,
	// these rules can be used to disable challenge or launch a different challenge for requests that match the specified conditions
	Rules []*ChallengeRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *ChallengeRuleList) Reset()      { *m = ChallengeRuleList{} }
func (*ChallengeRuleList) ProtoMessage() {}
func (*ChallengeRuleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{21}
}
func (m *ChallengeRuleList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeRuleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ChallengeRuleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeRuleList.Merge(m, src)
}
func (m *ChallengeRuleList) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeRuleList) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeRuleList.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeRuleList proto.InternalMessageInfo

func (m *ChallengeRuleList) GetRules() []*ChallengeRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// HTTP Header
//
// x-displayName: "HTTP Header"
// Request header name and value pairs
type HttpHeaderMatcherList struct {
	// headers
	//
	// x-displayName: "HTTP Headers"
	// x-required
	// List of HTTP header name and value pairs
	Headers []*schema.HeaderMatcherType `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (m *HttpHeaderMatcherList) Reset()      { *m = HttpHeaderMatcherList{} }
func (*HttpHeaderMatcherList) ProtoMessage() {}
func (*HttpHeaderMatcherList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{22}
}
func (m *HttpHeaderMatcherList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpHeaderMatcherList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HttpHeaderMatcherList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpHeaderMatcherList.Merge(m, src)
}
func (m *HttpHeaderMatcherList) XXX_Size() int {
	return m.Size()
}
func (m *HttpHeaderMatcherList) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpHeaderMatcherList.DiscardUnknown(m)
}

var xxx_messageInfo_HttpHeaderMatcherList proto.InternalMessageInfo

func (m *HttpHeaderMatcherList) GetHeaders() []*schema.HeaderMatcherType {
	if m != nil {
		return m.Headers
	}
	return nil
}

// SimpleClientSrcRule
//
// x-displayName: "Simple Client Src Rule"
// Simple client source rule specifies the sources to be blocked or trusted (skip WAF)
type SimpleClientSrcRule struct {
	// Client Identifier
	//
	// x-displayName: "Client Identifier"
	// x-required
	// Client Identifier that should be used for the trusted client rule
	//
	// Types that are valid to be assigned to ClientSourceChoice:
	//	*SimpleClientSrcRule_IpPrefix
	//	*SimpleClientSrcRule_AsNumber
	//	*SimpleClientSrcRule_HttpHeader
	ClientSourceChoice isSimpleClientSrcRule_ClientSourceChoice `protobuf_oneof:"client_source_choice"`
	// expiration timestamp
	//
	// x-displayName: "Expiration Timestamp"
	// x-example: "2019-12-31:44:34.171543432Z"
	// The expiration_timestamp is the RFC 3339 format timestamp at which the containing rule is considered to be logically expired. The rule continues to exist in
	// the configuration but is not applied anymore.
	ExpirationTimestamp *types.Timestamp `protobuf:"bytes,9,opt,name=expiration_timestamp,json=expirationTimestamp,proto3" json:"expiration_timestamp,omitempty"`
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// action
	//
	// x-displayName: "Action"
	// Action that should be taken when client identifier matches the rule
	//
	// Types that are valid to be assigned to ActionChoice:
	//	*SimpleClientSrcRule_SkipProcessing
	//	*SimpleClientSrcRule_WafSkipProcessing
	//	*SimpleClientSrcRule_BotSkipProcessing
	ActionChoice isSimpleClientSrcRule_ActionChoice `protobuf_oneof:"action_choice"`
}

func (m *SimpleClientSrcRule) Reset()      { *m = SimpleClientSrcRule{} }
func (*SimpleClientSrcRule) ProtoMessage() {}
func (*SimpleClientSrcRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{23}
}
func (m *SimpleClientSrcRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleClientSrcRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SimpleClientSrcRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleClientSrcRule.Merge(m, src)
}
func (m *SimpleClientSrcRule) XXX_Size() int {
	return m.Size()
}
func (m *SimpleClientSrcRule) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleClientSrcRule.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleClientSrcRule proto.InternalMessageInfo

type isSimpleClientSrcRule_ClientSourceChoice interface {
	isSimpleClientSrcRule_ClientSourceChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSimpleClientSrcRule_ActionChoice interface {
	isSimpleClientSrcRule_ActionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SimpleClientSrcRule_IpPrefix struct {
	IpPrefix string `protobuf:"bytes,4,opt,name=ip_prefix,json=ipPrefix,proto3,oneof" json:"ip_prefix,omitempty"`
}
type SimpleClientSrcRule_AsNumber struct {
	AsNumber uint32 `protobuf:"varint,5,opt,name=as_number,json=asNumber,proto3,oneof" json:"as_number,omitempty"`
}
type SimpleClientSrcRule_HttpHeader struct {
	HttpHeader *HttpHeaderMatcherList `protobuf:"bytes,15,opt,name=http_header,json=httpHeader,proto3,oneof" json:"http_header,omitempty"`
}
type SimpleClientSrcRule_SkipProcessing struct {
	SkipProcessing *schema.Empty `protobuf:"bytes,12,opt,name=skip_processing,json=skipProcessing,proto3,oneof" json:"skip_processing,omitempty"`
}
type SimpleClientSrcRule_WafSkipProcessing struct {
	WafSkipProcessing *schema.Empty `protobuf:"bytes,13,opt,name=waf_skip_processing,json=wafSkipProcessing,proto3,oneof" json:"waf_skip_processing,omitempty"`
}
type SimpleClientSrcRule_BotSkipProcessing struct {
	BotSkipProcessing *schema.Empty `protobuf:"bytes,14,opt,name=bot_skip_processing,json=botSkipProcessing,proto3,oneof" json:"bot_skip_processing,omitempty"`
}

func (*SimpleClientSrcRule_IpPrefix) isSimpleClientSrcRule_ClientSourceChoice()    {}
func (*SimpleClientSrcRule_AsNumber) isSimpleClientSrcRule_ClientSourceChoice()    {}
func (*SimpleClientSrcRule_HttpHeader) isSimpleClientSrcRule_ClientSourceChoice()  {}
func (*SimpleClientSrcRule_SkipProcessing) isSimpleClientSrcRule_ActionChoice()    {}
func (*SimpleClientSrcRule_WafSkipProcessing) isSimpleClientSrcRule_ActionChoice() {}
func (*SimpleClientSrcRule_BotSkipProcessing) isSimpleClientSrcRule_ActionChoice() {}

func (m *SimpleClientSrcRule) GetClientSourceChoice() isSimpleClientSrcRule_ClientSourceChoice {
	if m != nil {
		return m.ClientSourceChoice
	}
	return nil
}
func (m *SimpleClientSrcRule) GetActionChoice() isSimpleClientSrcRule_ActionChoice {
	if m != nil {
		return m.ActionChoice
	}
	return nil
}

func (m *SimpleClientSrcRule) GetIpPrefix() string {
	if x, ok := m.GetClientSourceChoice().(*SimpleClientSrcRule_IpPrefix); ok {
		return x.IpPrefix
	}
	return ""
}

func (m *SimpleClientSrcRule) GetAsNumber() uint32 {
	if x, ok := m.GetClientSourceChoice().(*SimpleClientSrcRule_AsNumber); ok {
		return x.AsNumber
	}
	return 0
}

func (m *SimpleClientSrcRule) GetHttpHeader() *HttpHeaderMatcherList {
	if x, ok := m.GetClientSourceChoice().(*SimpleClientSrcRule_HttpHeader); ok {
		return x.HttpHeader
	}
	return nil
}

func (m *SimpleClientSrcRule) GetExpirationTimestamp() *types.Timestamp {
	if m != nil {
		return m.ExpirationTimestamp
	}
	return nil
}

func (m *SimpleClientSrcRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SimpleClientSrcRule) GetSkipProcessing() *schema.Empty {
	if x, ok := m.GetActionChoice().(*SimpleClientSrcRule_SkipProcessing); ok {
		return x.SkipProcessing
	}
	return nil
}

func (m *SimpleClientSrcRule) GetWafSkipProcessing() *schema.Empty {
	if x, ok := m.GetActionChoice().(*SimpleClientSrcRule_WafSkipProcessing); ok {
		return x.WafSkipProcessing
	}
	return nil
}

func (m *SimpleClientSrcRule) GetBotSkipProcessing() *schema.Empty {
	if x, ok := m.GetActionChoice().(*SimpleClientSrcRule_BotSkipProcessing); ok {
		return x.BotSkipProcessing
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SimpleClientSrcRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SimpleClientSrcRule_IpPrefix)(nil),
		(*SimpleClientSrcRule_AsNumber)(nil),
		(*SimpleClientSrcRule_HttpHeader)(nil),
		(*SimpleClientSrcRule_SkipProcessing)(nil),
		(*SimpleClientSrcRule_WafSkipProcessing)(nil),
		(*SimpleClientSrcRule_BotSkipProcessing)(nil),
	}
}

// DDoSClientSource
//
// x-displayName: "DDoS Client Source Choice"
// DDoS Mitigation sources to be blocked
type DDoSClientSource struct {
	// asn_list
	//
	// x-displayName: "ASN List"
	// Addresses that belong to the ASNs in the given list
	// The ASN is obtained by performing a lookup for the source IPv4 Address in a GeoIP DB.
	AsnList *policy.AsnMatchList `protobuf:"bytes,1,opt,name=asn_list,json=asnList,proto3" json:"asn_list,omitempty"`
	// country_list
	//
	// x-displayName: "Country List"
	// Sources that are located in one of the countries in the given list
	CountryList []policy.CountryCode `protobuf:"varint,3,rep,packed,name=country_list,json=countryList,proto3,enum=ves.io.schema.policy.CountryCode" json:"country_list,omitempty"`
	// TLS JA3 fingerprint matcher
	//
	// x-displayName: "TLS Fingerprint Matcher"
	// TLS JA3 fingerprints to be matched.
	// The predicate evaluates to true if the TLS fingerprint matches any of the exact values or classes of known TLS fingerprints.
	TlsFingerprintMatcher *policy.TlsFingerprintMatcherType `protobuf:"bytes,5,opt,name=tls_fingerprint_matcher,json=tlsFingerprintMatcher,proto3" json:"tls_fingerprint_matcher,omitempty"`
}

func (m *DDoSClientSource) Reset()      { *m = DDoSClientSource{} }
func (*DDoSClientSource) ProtoMessage() {}
func (*DDoSClientSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{24}
}
func (m *DDoSClientSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DDoSClientSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DDoSClientSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DDoSClientSource.Merge(m, src)
}
func (m *DDoSClientSource) XXX_Size() int {
	return m.Size()
}
func (m *DDoSClientSource) XXX_DiscardUnknown() {
	xxx_messageInfo_DDoSClientSource.DiscardUnknown(m)
}

var xxx_messageInfo_DDoSClientSource proto.InternalMessageInfo

func (m *DDoSClientSource) GetAsnList() *policy.AsnMatchList {
	if m != nil {
		return m.AsnList
	}
	return nil
}

func (m *DDoSClientSource) GetCountryList() []policy.CountryCode {
	if m != nil {
		return m.CountryList
	}
	return nil
}

func (m *DDoSClientSource) GetTlsFingerprintMatcher() *policy.TlsFingerprintMatcherType {
	if m != nil {
		return m.TlsFingerprintMatcher
	}
	return nil
}

// DDoSMitigationRule
//
// x-displayName: "DDoS Mitigation Rule"
// DDoS Mitigation Rule specifies the sources to be blocked
type DDoSMitigationRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// mitigation action
	//
	// x-displayName: "Mitigation Action"
	// x-required
	// The action to be taken for a specified mitigation choice
	//
	// Types that are valid to be assigned to MitigationAction:
	//	*DDoSMitigationRule_Block
	MitigationAction isDDoSMitigationRule_MitigationAction `protobuf_oneof:"mitigation_action"`
	// Mitigation Choice
	//
	// x-displayName: "Mitigation Choice"
	// x-required
	// Mitigation source to be matched
	//
	// Types that are valid to be assigned to MitigationChoice:
	//	*DDoSMitigationRule_DdosClientSource
	//	*DDoSMitigationRule_IpPrefixList
	MitigationChoice isDDoSMitigationRule_MitigationChoice `protobuf_oneof:"mitigation_choice"`
	// expiration timestamp
	//
	// x-displayName: "Expiration Timestamp"
	// x-example: "2019-12-31:44:34.171543432Z"
	// The expiration_timestamp is the RFC 3339 format timestamp at which the containing rule is considered to be logically expired. The rule continues to exist in
	// the configuration but is not applied anymore.
	ExpirationTimestamp *types.Timestamp `protobuf:"bytes,10,opt,name=expiration_timestamp,json=expirationTimestamp,proto3" json:"expiration_timestamp,omitempty"`
}

func (m *DDoSMitigationRule) Reset()      { *m = DDoSMitigationRule{} }
func (*DDoSMitigationRule) ProtoMessage() {}
func (*DDoSMitigationRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{25}
}
func (m *DDoSMitigationRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DDoSMitigationRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DDoSMitigationRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DDoSMitigationRule.Merge(m, src)
}
func (m *DDoSMitigationRule) XXX_Size() int {
	return m.Size()
}
func (m *DDoSMitigationRule) XXX_DiscardUnknown() {
	xxx_messageInfo_DDoSMitigationRule.DiscardUnknown(m)
}

var xxx_messageInfo_DDoSMitigationRule proto.InternalMessageInfo

type isDDoSMitigationRule_MitigationAction interface {
	isDDoSMitigationRule_MitigationAction()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isDDoSMitigationRule_MitigationChoice interface {
	isDDoSMitigationRule_MitigationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DDoSMitigationRule_Block struct {
	Block *schema.Empty `protobuf:"bytes,3,opt,name=block,proto3,oneof" json:"block,omitempty"`
}
type DDoSMitigationRule_DdosClientSource struct {
	DdosClientSource *DDoSClientSource `protobuf:"bytes,8,opt,name=ddos_client_source,json=ddosClientSource,proto3,oneof" json:"ddos_client_source,omitempty"`
}
type DDoSMitigationRule_IpPrefixList struct {
	IpPrefixList *policy.PrefixMatchList `protobuf:"bytes,9,opt,name=ip_prefix_list,json=ipPrefixList,proto3,oneof" json:"ip_prefix_list,omitempty"`
}

func (*DDoSMitigationRule_Block) isDDoSMitigationRule_MitigationAction()            {}
func (*DDoSMitigationRule_DdosClientSource) isDDoSMitigationRule_MitigationChoice() {}
func (*DDoSMitigationRule_IpPrefixList) isDDoSMitigationRule_MitigationChoice()     {}

func (m *DDoSMitigationRule) GetMitigationAction() isDDoSMitigationRule_MitigationAction {
	if m != nil {
		return m.MitigationAction
	}
	return nil
}
func (m *DDoSMitigationRule) GetMitigationChoice() isDDoSMitigationRule_MitigationChoice {
	if m != nil {
		return m.MitigationChoice
	}
	return nil
}

func (m *DDoSMitigationRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DDoSMitigationRule) GetBlock() *schema.Empty {
	if x, ok := m.GetMitigationAction().(*DDoSMitigationRule_Block); ok {
		return x.Block
	}
	return nil
}

func (m *DDoSMitigationRule) GetDdosClientSource() *DDoSClientSource {
	if x, ok := m.GetMitigationChoice().(*DDoSMitigationRule_DdosClientSource); ok {
		return x.DdosClientSource
	}
	return nil
}

func (m *DDoSMitigationRule) GetIpPrefixList() *policy.PrefixMatchList {
	if x, ok := m.GetMitigationChoice().(*DDoSMitigationRule_IpPrefixList); ok {
		return x.IpPrefixList
	}
	return nil
}

func (m *DDoSMitigationRule) GetExpirationTimestamp() *types.Timestamp {
	if m != nil {
		return m.ExpirationTimestamp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DDoSMitigationRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DDoSMitigationRule_Block)(nil),
		(*DDoSMitigationRule_DdosClientSource)(nil),
		(*DDoSMitigationRule_IpPrefixList)(nil),
	}
}

// Custom IP Allowed List
//
// x-displayName: "Custom IP Allowed List"
// IP Allowed list using existing ip_prefix_set objects
type CustomIpAllowedList struct {
	// rate_limiter_allowed_prefixes
	//
	// x-displayName: "List of IP Prefix Sets"
	// x-required
	// References to ip_prefix_set objects.
	// Requests from source IP addresses that are covered by one of the allowed IP Prefixes are not subjected to rate limiting.
	RateLimiterAllowedPrefixes []*views.ObjectRefType `protobuf:"bytes,22,rep,name=rate_limiter_allowed_prefixes,json=rateLimiterAllowedPrefixes,proto3" json:"rate_limiter_allowed_prefixes,omitempty"`
}

func (m *CustomIpAllowedList) Reset()      { *m = CustomIpAllowedList{} }
func (*CustomIpAllowedList) ProtoMessage() {}
func (*CustomIpAllowedList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{26}
}
func (m *CustomIpAllowedList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomIpAllowedList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CustomIpAllowedList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomIpAllowedList.Merge(m, src)
}
func (m *CustomIpAllowedList) XXX_Size() int {
	return m.Size()
}
func (m *CustomIpAllowedList) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomIpAllowedList.DiscardUnknown(m)
}

var xxx_messageInfo_CustomIpAllowedList proto.InternalMessageInfo

func (m *CustomIpAllowedList) GetRateLimiterAllowedPrefixes() []*views.ObjectRefType {
	if m != nil {
		return m.RateLimiterAllowedPrefixes
	}
	return nil
}

// RateLimitConfigType
//
// x-displayName: "RateLimitConfigType"
type RateLimitConfigType struct {
	// rate_limiter
	//
	// x-displayName: "Request Rate Limiter"
	// Requests to the virtual_host are rate limited based on the parameters specified in the rate_limiter.
	RateLimiter *rate_limiter.RateLimitValue `protobuf:"bytes,1,opt,name=rate_limiter,json=rateLimiter,proto3" json:"rate_limiter,omitempty"`
	// IP Allowed List
	//
	// x-displayName: "IP(s) Allowed without Rate Limiting"
	// x-required
	// Allowed List of IPs for which rate limiting will be disabled.
	//
	// Types that are valid to be assigned to IpAllowedListChoice:
	//	*RateLimitConfigType_NoIpAllowedList
	//	*RateLimitConfigType_IpAllowedList
	//	*RateLimitConfigType_CustomIpAllowedList
	IpAllowedListChoice isRateLimitConfigType_IpAllowedListChoice `protobuf_oneof:"ip_allowed_list_choice"`
	// policy choice
	//
	// x-displayName: "Rate Limiter Policies"
	// x-required
	// Manage rate limiter policies. Note that an implicit policy based on the IP Allowed List is always applied as the first policy.
	//
	// Types that are valid to be assigned to PolicyChoice:
	//	*RateLimitConfigType_NoPolicies
	//	*RateLimitConfigType_Policies
	PolicyChoice isRateLimitConfigType_PolicyChoice `protobuf_oneof:"policy_choice"`
}

func (m *RateLimitConfigType) Reset()      { *m = RateLimitConfigType{} }
func (*RateLimitConfigType) ProtoMessage() {}
func (*RateLimitConfigType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{27}
}
func (m *RateLimitConfigType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimitConfigType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RateLimitConfigType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitConfigType.Merge(m, src)
}
func (m *RateLimitConfigType) XXX_Size() int {
	return m.Size()
}
func (m *RateLimitConfigType) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitConfigType.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitConfigType proto.InternalMessageInfo

type isRateLimitConfigType_IpAllowedListChoice interface {
	isRateLimitConfigType_IpAllowedListChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isRateLimitConfigType_PolicyChoice interface {
	isRateLimitConfigType_PolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RateLimitConfigType_NoIpAllowedList struct {
	NoIpAllowedList *schema.Empty `protobuf:"bytes,3,opt,name=no_ip_allowed_list,json=noIpAllowedList,proto3,oneof" json:"no_ip_allowed_list,omitempty"`
}
type RateLimitConfigType_IpAllowedList struct {
	IpAllowedList *views.PrefixStringListType `protobuf:"bytes,4,opt,name=ip_allowed_list,json=ipAllowedList,proto3,oneof" json:"ip_allowed_list,omitempty"`
}
type RateLimitConfigType_CustomIpAllowedList struct {
	CustomIpAllowedList *CustomIpAllowedList `protobuf:"bytes,5,opt,name=custom_ip_allowed_list,json=customIpAllowedList,proto3,oneof" json:"custom_ip_allowed_list,omitempty"`
}
type RateLimitConfigType_NoPolicies struct {
	NoPolicies *schema.Empty `protobuf:"bytes,12,opt,name=no_policies,json=noPolicies,proto3,oneof" json:"no_policies,omitempty"`
}
type RateLimitConfigType_Policies struct {
	Policies *rate_limiter_policy.PolicyList `protobuf:"bytes,13,opt,name=policies,proto3,oneof" json:"policies,omitempty"`
}

func (*RateLimitConfigType_NoIpAllowedList) isRateLimitConfigType_IpAllowedListChoice()     {}
func (*RateLimitConfigType_IpAllowedList) isRateLimitConfigType_IpAllowedListChoice()       {}
func (*RateLimitConfigType_CustomIpAllowedList) isRateLimitConfigType_IpAllowedListChoice() {}
func (*RateLimitConfigType_NoPolicies) isRateLimitConfigType_PolicyChoice()                 {}
func (*RateLimitConfigType_Policies) isRateLimitConfigType_PolicyChoice()                   {}

func (m *RateLimitConfigType) GetIpAllowedListChoice() isRateLimitConfigType_IpAllowedListChoice {
	if m != nil {
		return m.IpAllowedListChoice
	}
	return nil
}
func (m *RateLimitConfigType) GetPolicyChoice() isRateLimitConfigType_PolicyChoice {
	if m != nil {
		return m.PolicyChoice
	}
	return nil
}

func (m *RateLimitConfigType) GetRateLimiter() *rate_limiter.RateLimitValue {
	if m != nil {
		return m.RateLimiter
	}
	return nil
}

func (m *RateLimitConfigType) GetNoIpAllowedList() *schema.Empty {
	if x, ok := m.GetIpAllowedListChoice().(*RateLimitConfigType_NoIpAllowedList); ok {
		return x.NoIpAllowedList
	}
	return nil
}

func (m *RateLimitConfigType) GetIpAllowedList() *views.PrefixStringListType {
	if x, ok := m.GetIpAllowedListChoice().(*RateLimitConfigType_IpAllowedList); ok {
		return x.IpAllowedList
	}
	return nil
}

func (m *RateLimitConfigType) GetCustomIpAllowedList() *CustomIpAllowedList {
	if x, ok := m.GetIpAllowedListChoice().(*RateLimitConfigType_CustomIpAllowedList); ok {
		return x.CustomIpAllowedList
	}
	return nil
}

func (m *RateLimitConfigType) GetNoPolicies() *schema.Empty {
	if x, ok := m.GetPolicyChoice().(*RateLimitConfigType_NoPolicies); ok {
		return x.NoPolicies
	}
	return nil
}

func (m *RateLimitConfigType) GetPolicies() *rate_limiter_policy.PolicyList {
	if x, ok := m.GetPolicyChoice().(*RateLimitConfigType_Policies); ok {
		return x.Policies
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RateLimitConfigType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RateLimitConfigType_NoIpAllowedList)(nil),
		(*RateLimitConfigType_IpAllowedList)(nil),
		(*RateLimitConfigType_CustomIpAllowedList)(nil),
		(*RateLimitConfigType_NoPolicies)(nil),
		(*RateLimitConfigType_Policies)(nil),
	}
}

// service policy list
//
// x-displayName: "Service Policy List"
// List of service policies.
type ServicePolicyList struct {
	// policies
	//
	// x-displayName: "Policies"
	// x-required
	// An ordered list of references to service_policy objects.
	Policies []*views.ObjectRefType `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (m *ServicePolicyList) Reset()      { *m = ServicePolicyList{} }
func (*ServicePolicyList) ProtoMessage() {}
func (*ServicePolicyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{28}
}
func (m *ServicePolicyList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicePolicyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServicePolicyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicePolicyList.Merge(m, src)
}
func (m *ServicePolicyList) XXX_Size() int {
	return m.Size()
}
func (m *ServicePolicyList) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicePolicyList.DiscardUnknown(m)
}

var xxx_messageInfo_ServicePolicyList proto.InternalMessageInfo

func (m *ServicePolicyList) GetPolicies() []*views.ObjectRefType {
	if m != nil {
		return m.Policies
	}
	return nil
}

// api definition list
//
// x-displayName: "API Definition List"
// List of api definitions.
type ApiDefinitionList struct {
	// API Definitions
	//
	// x-displayName: "API Definitions"
	// API Definitions using OpenAPI specification files
	ApiDefinitions []*views.ObjectRefType `protobuf:"bytes,1,rep,name=api_definitions,json=apiDefinitions,proto3" json:"api_definitions,omitempty"`
}

func (m *ApiDefinitionList) Reset()      { *m = ApiDefinitionList{} }
func (*ApiDefinitionList) ProtoMessage() {}
func (*ApiDefinitionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{29}
}
func (m *ApiDefinitionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiDefinitionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiDefinitionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiDefinitionList.Merge(m, src)
}
func (m *ApiDefinitionList) XXX_Size() int {
	return m.Size()
}
func (m *ApiDefinitionList) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiDefinitionList.DiscardUnknown(m)
}

var xxx_messageInfo_ApiDefinitionList proto.InternalMessageInfo

func (m *ApiDefinitionList) GetApiDefinitions() []*views.ObjectRefType {
	if m != nil {
		return m.ApiDefinitions
	}
	return nil
}

// API Discovery Setting
//
// x-displayName: "API Discovery Setting"
// Specifies the settings used for API discovery
type ApiDiscoverySetting struct {
	// Include or Exclude data in machine learning from traffic with redirect response in Business Logic Markup
	//
	// x-required
	// x-displayName: "Learn From Traffic With Redirect Response"
	// By default, the system only learns API Endpoints and patterns from traffic with response code 200
	// On enabling this, the AI engine will learn API Endpoints from traffic with response code 3xx in addition to 200
	//
	// Types that are valid to be assigned to LearnFromRedirectTraffic:
	//	*ApiDiscoverySetting_DisableLearnFromRedirectTraffic
	//	*ApiDiscoverySetting_EnableLearnFromRedirectTraffic
	LearnFromRedirectTraffic isApiDiscoverySetting_LearnFromRedirectTraffic `protobuf_oneof:"learn_from_redirect_traffic"`
}

func (m *ApiDiscoverySetting) Reset()      { *m = ApiDiscoverySetting{} }
func (*ApiDiscoverySetting) ProtoMessage() {}
func (*ApiDiscoverySetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{30}
}
func (m *ApiDiscoverySetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiDiscoverySetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ApiDiscoverySetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiDiscoverySetting.Merge(m, src)
}
func (m *ApiDiscoverySetting) XXX_Size() int {
	return m.Size()
}
func (m *ApiDiscoverySetting) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiDiscoverySetting.DiscardUnknown(m)
}

var xxx_messageInfo_ApiDiscoverySetting proto.InternalMessageInfo

type isApiDiscoverySetting_LearnFromRedirectTraffic interface {
	isApiDiscoverySetting_LearnFromRedirectTraffic()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ApiDiscoverySetting_DisableLearnFromRedirectTraffic struct {
	DisableLearnFromRedirectTraffic *schema.Empty `protobuf:"bytes,2,opt,name=disable_learn_from_redirect_traffic,json=disableLearnFromRedirectTraffic,proto3,oneof" json:"disable_learn_from_redirect_traffic,omitempty"`
}
type ApiDiscoverySetting_EnableLearnFromRedirectTraffic struct {
	EnableLearnFromRedirectTraffic *schema.Empty `protobuf:"bytes,3,opt,name=enable_learn_from_redirect_traffic,json=enableLearnFromRedirectTraffic,proto3,oneof" json:"enable_learn_from_redirect_traffic,omitempty"`
}

func (*ApiDiscoverySetting_DisableLearnFromRedirectTraffic) isApiDiscoverySetting_LearnFromRedirectTraffic() {
}
func (*ApiDiscoverySetting_EnableLearnFromRedirectTraffic) isApiDiscoverySetting_LearnFromRedirectTraffic() {
}

func (m *ApiDiscoverySetting) GetLearnFromRedirectTraffic() isApiDiscoverySetting_LearnFromRedirectTraffic {
	if m != nil {
		return m.LearnFromRedirectTraffic
	}
	return nil
}

func (m *ApiDiscoverySetting) GetDisableLearnFromRedirectTraffic() *schema.Empty {
	if x, ok := m.GetLearnFromRedirectTraffic().(*ApiDiscoverySetting_DisableLearnFromRedirectTraffic); ok {
		return x.DisableLearnFromRedirectTraffic
	}
	return nil
}

func (m *ApiDiscoverySetting) GetEnableLearnFromRedirectTraffic() *schema.Empty {
	if x, ok := m.GetLearnFromRedirectTraffic().(*ApiDiscoverySetting_EnableLearnFromRedirectTraffic); ok {
		return x.EnableLearnFromRedirectTraffic
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ApiDiscoverySetting) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ApiDiscoverySetting_DisableLearnFromRedirectTraffic)(nil),
		(*ApiDiscoverySetting_EnableLearnFromRedirectTraffic)(nil),
	}
}

// Single load balancer app setting
//
// x-displayName: "Single LoadBalancer App Setting"
// Specific settings for Machine learning analysis on this HTTP LB, independently from other LBs.
type SingleLoadBalancerAppSetting struct {
	// API Discovery Choice
	//
	// x-required
	// x-displayName: "API Discovery"
	// When enabled, sampled traffic passing through this load balancer is analyzed and
	// APIs exposed by the application are identified.
	// An API is identified by its canonical (collapsed) URL path and the method used to call it.
	// Once all APIs are identified, for each API, the system learns its possible schema.
	// The learnt schema for all APIs is used to automatically generate a swagger definition file for the entire API set exposed by this load balancer.
	//
	// Types that are valid to be assigned to ApiDiscoveryChoice:
	//	*SingleLoadBalancerAppSetting_EnableDiscovery
	//	*SingleLoadBalancerAppSetting_DisableDiscovery
	ApiDiscoveryChoice isSingleLoadBalancerAppSetting_ApiDiscoveryChoice `protobuf_oneof:"api_discovery_choice"`
	// DDoS Detection Choice
	//
	// x-required
	// x-displayName: "DDoS Detection"
	// When enabled, this Load Balancer's metrics are monitored and continuously analyzed for DDoS behavior.
	//
	// Types that are valid to be assigned to DdosDetectionChoice:
	//	*SingleLoadBalancerAppSetting_EnableDdosDetection
	//	*SingleLoadBalancerAppSetting_DisableDdosDetection
	DdosDetectionChoice isSingleLoadBalancerAppSetting_DdosDetectionChoice `protobuf_oneof:"ddos_detection_choice"`
	// Malicious User Detection Choice
	//
	// x-required
	// x-displayName: "Malicious User Detection"
	// Configuration for malicious user detection.
	//
	// Types that are valid to be assigned to MaliciousUserDetectionChoice:
	//	*SingleLoadBalancerAppSetting_EnableMaliciousUserDetection
	//	*SingleLoadBalancerAppSetting_DisableMaliciousUserDetection
	MaliciousUserDetectionChoice isSingleLoadBalancerAppSetting_MaliciousUserDetectionChoice `protobuf_oneof:"malicious_user_detection_choice"`
}

func (m *SingleLoadBalancerAppSetting) Reset()      { *m = SingleLoadBalancerAppSetting{} }
func (*SingleLoadBalancerAppSetting) ProtoMessage() {}
func (*SingleLoadBalancerAppSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{31}
}
func (m *SingleLoadBalancerAppSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SingleLoadBalancerAppSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SingleLoadBalancerAppSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleLoadBalancerAppSetting.Merge(m, src)
}
func (m *SingleLoadBalancerAppSetting) XXX_Size() int {
	return m.Size()
}
func (m *SingleLoadBalancerAppSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleLoadBalancerAppSetting.DiscardUnknown(m)
}

var xxx_messageInfo_SingleLoadBalancerAppSetting proto.InternalMessageInfo

type isSingleLoadBalancerAppSetting_ApiDiscoveryChoice interface {
	isSingleLoadBalancerAppSetting_ApiDiscoveryChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSingleLoadBalancerAppSetting_DdosDetectionChoice interface {
	isSingleLoadBalancerAppSetting_DdosDetectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isSingleLoadBalancerAppSetting_MaliciousUserDetectionChoice interface {
	isSingleLoadBalancerAppSetting_MaliciousUserDetectionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SingleLoadBalancerAppSetting_EnableDiscovery struct {
	EnableDiscovery *ApiDiscoverySetting `protobuf:"bytes,2,opt,name=enable_discovery,json=enableDiscovery,proto3,oneof" json:"enable_discovery,omitempty"`
}
type SingleLoadBalancerAppSetting_DisableDiscovery struct {
	DisableDiscovery *schema.Empty `protobuf:"bytes,3,opt,name=disable_discovery,json=disableDiscovery,proto3,oneof" json:"disable_discovery,omitempty"`
}
type SingleLoadBalancerAppSetting_EnableDdosDetection struct {
	EnableDdosDetection *schema.Empty `protobuf:"bytes,5,opt,name=enable_ddos_detection,json=enableDdosDetection,proto3,oneof" json:"enable_ddos_detection,omitempty"`
}
type SingleLoadBalancerAppSetting_DisableDdosDetection struct {
	DisableDdosDetection *schema.Empty `protobuf:"bytes,6,opt,name=disable_ddos_detection,json=disableDdosDetection,proto3,oneof" json:"disable_ddos_detection,omitempty"`
}
type SingleLoadBalancerAppSetting_EnableMaliciousUserDetection struct {
	EnableMaliciousUserDetection *schema.Empty `protobuf:"bytes,8,opt,name=enable_malicious_user_detection,json=enableMaliciousUserDetection,proto3,oneof" json:"enable_malicious_user_detection,omitempty"`
}
type SingleLoadBalancerAppSetting_DisableMaliciousUserDetection struct {
	DisableMaliciousUserDetection *schema.Empty `protobuf:"bytes,9,opt,name=disable_malicious_user_detection,json=disableMaliciousUserDetection,proto3,oneof" json:"disable_malicious_user_detection,omitempty"`
}

func (*SingleLoadBalancerAppSetting_EnableDiscovery) isSingleLoadBalancerAppSetting_ApiDiscoveryChoice() {
}
func (*SingleLoadBalancerAppSetting_DisableDiscovery) isSingleLoadBalancerAppSetting_ApiDiscoveryChoice() {
}
func (*SingleLoadBalancerAppSetting_EnableDdosDetection) isSingleLoadBalancerAppSetting_DdosDetectionChoice() {
}
func (*SingleLoadBalancerAppSetting_DisableDdosDetection) isSingleLoadBalancerAppSetting_DdosDetectionChoice() {
}
func (*SingleLoadBalancerAppSetting_EnableMaliciousUserDetection) isSingleLoadBalancerAppSetting_MaliciousUserDetectionChoice() {
}
func (*SingleLoadBalancerAppSetting_DisableMaliciousUserDetection) isSingleLoadBalancerAppSetting_MaliciousUserDetectionChoice() {
}

func (m *SingleLoadBalancerAppSetting) GetApiDiscoveryChoice() isSingleLoadBalancerAppSetting_ApiDiscoveryChoice {
	if m != nil {
		return m.ApiDiscoveryChoice
	}
	return nil
}
func (m *SingleLoadBalancerAppSetting) GetDdosDetectionChoice() isSingleLoadBalancerAppSetting_DdosDetectionChoice {
	if m != nil {
		return m.DdosDetectionChoice
	}
	return nil
}
func (m *SingleLoadBalancerAppSetting) GetMaliciousUserDetectionChoice() isSingleLoadBalancerAppSetting_MaliciousUserDetectionChoice {
	if m != nil {
		return m.MaliciousUserDetectionChoice
	}
	return nil
}

func (m *SingleLoadBalancerAppSetting) GetEnableDiscovery() *ApiDiscoverySetting {
	if x, ok := m.GetApiDiscoveryChoice().(*SingleLoadBalancerAppSetting_EnableDiscovery); ok {
		return x.EnableDiscovery
	}
	return nil
}

func (m *SingleLoadBalancerAppSetting) GetDisableDiscovery() *schema.Empty {
	if x, ok := m.GetApiDiscoveryChoice().(*SingleLoadBalancerAppSetting_DisableDiscovery); ok {
		return x.DisableDiscovery
	}
	return nil
}

func (m *SingleLoadBalancerAppSetting) GetEnableDdosDetection() *schema.Empty {
	if x, ok := m.GetDdosDetectionChoice().(*SingleLoadBalancerAppSetting_EnableDdosDetection); ok {
		return x.EnableDdosDetection
	}
	return nil
}

func (m *SingleLoadBalancerAppSetting) GetDisableDdosDetection() *schema.Empty {
	if x, ok := m.GetDdosDetectionChoice().(*SingleLoadBalancerAppSetting_DisableDdosDetection); ok {
		return x.DisableDdosDetection
	}
	return nil
}

func (m *SingleLoadBalancerAppSetting) GetEnableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*SingleLoadBalancerAppSetting_EnableMaliciousUserDetection); ok {
		return x.EnableMaliciousUserDetection
	}
	return nil
}

func (m *SingleLoadBalancerAppSetting) GetDisableMaliciousUserDetection() *schema.Empty {
	if x, ok := m.GetMaliciousUserDetectionChoice().(*SingleLoadBalancerAppSetting_DisableMaliciousUserDetection); ok {
		return x.DisableMaliciousUserDetection
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SingleLoadBalancerAppSetting) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SingleLoadBalancerAppSetting_EnableDiscovery)(nil),
		(*SingleLoadBalancerAppSetting_DisableDiscovery)(nil),
		(*SingleLoadBalancerAppSetting_EnableDdosDetection)(nil),
		(*SingleLoadBalancerAppSetting_DisableDdosDetection)(nil),
		(*SingleLoadBalancerAppSetting_EnableMaliciousUserDetection)(nil),
		(*SingleLoadBalancerAppSetting_DisableMaliciousUserDetection)(nil),
	}
}

// ShapeBotDefenseType
//
// x-displayName: "Bot Defense"
// This defines various configuration options for Bot Defense Policy.
type ShapeBotDefenseType struct {
	// Bot Defense Regional Endpoint
	//
	// x-displayName: "Bot Defense Regional Endpoint"
	// Specify Bot Defense regional endpoint to use
	// x-required
	RegionalEndpoint ShapeBotDefenseRegion `protobuf:"varint,1,opt,name=regional_endpoint,json=regionalEndpoint,proto3,enum=ves.io.schema.views.http_loadbalancer.ShapeBotDefenseRegion" json:"regional_endpoint,omitempty"`
	// ShapeBotDefensePolicyType
	//
	// x-displayName: "Bot Defense Policy"
	// x-required
	// Bot Defense Policy.
	Policy *ShapeBotDefensePolicyType `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	// timeout
	//
	// x-displayName: "Timeout"
	// x-example: "300"
	// The timeout for the inference check, in milliseconds.
	Timeout uint32 `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (m *ShapeBotDefenseType) Reset()      { *m = ShapeBotDefenseType{} }
func (*ShapeBotDefenseType) ProtoMessage() {}
func (*ShapeBotDefenseType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{32}
}
func (m *ShapeBotDefenseType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeBotDefenseType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeBotDefenseType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeBotDefenseType.Merge(m, src)
}
func (m *ShapeBotDefenseType) XXX_Size() int {
	return m.Size()
}
func (m *ShapeBotDefenseType) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeBotDefenseType.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeBotDefenseType proto.InternalMessageInfo

func (m *ShapeBotDefenseType) GetRegionalEndpoint() ShapeBotDefenseRegion {
	if m != nil {
		return m.RegionalEndpoint
	}
	return AUTO
}

func (m *ShapeBotDefenseType) GetPolicy() *ShapeBotDefensePolicyType {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *ShapeBotDefenseType) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

// ShapeShapeBotDefensePolicyType
//
// x-displayName: "Bot Defense Policy"
// This defines various configuration options for Bot Defense policy.
type ShapeBotDefensePolicyType struct {
	// AppEndpointType
	//
	// x-displayName: "App Endpoint Type"
	// x-required
	// List of protected application endpoints (max 128 items).
	ProtectedAppEndpoints []*AppEndpointType `protobuf:"bytes,1,rep,name=protected_app_endpoints,json=protectedAppEndpoints,proto3" json:"protected_app_endpoints,omitempty"`
	// JavaScript Choice
	//
	// x-displayName: "JavaScript Insertion Settings"
	// x-required
	// This defines a JavaScript insertion rule.
	//
	// Types that are valid to be assigned to JavaScriptChoice:
	//	*ShapeBotDefensePolicyType_DisableJsInsert
	//	*ShapeBotDefensePolicyType_JsInsertAllPages
	//	*ShapeBotDefensePolicyType_JsInsertAllPagesExcept
	//	*ShapeBotDefensePolicyType_JsInsertionRules
	JavaScriptChoice isShapeBotDefensePolicyType_JavaScriptChoice `protobuf_oneof:"java_script_choice"`
	// js_download_path
	//
	// x-displayName: "JavaScript Download Path"
	// x-example: "value"
	// Customize Bot Defense Client JavaScript path. If not specified, default `/common.js`
	JsDownloadPath string `protobuf:"bytes,2,opt,name=js_download_path,json=jsDownloadPath,proto3" json:"js_download_path,omitempty"`
}

func (m *ShapeBotDefensePolicyType) Reset()      { *m = ShapeBotDefensePolicyType{} }
func (*ShapeBotDefensePolicyType) ProtoMessage() {}
func (*ShapeBotDefensePolicyType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{33}
}
func (m *ShapeBotDefensePolicyType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeBotDefensePolicyType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeBotDefensePolicyType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeBotDefensePolicyType.Merge(m, src)
}
func (m *ShapeBotDefensePolicyType) XXX_Size() int {
	return m.Size()
}
func (m *ShapeBotDefensePolicyType) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeBotDefensePolicyType.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeBotDefensePolicyType proto.InternalMessageInfo

type isShapeBotDefensePolicyType_JavaScriptChoice interface {
	isShapeBotDefensePolicyType_JavaScriptChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ShapeBotDefensePolicyType_DisableJsInsert struct {
	DisableJsInsert *schema.Empty `protobuf:"bytes,4,opt,name=disable_js_insert,json=disableJsInsert,proto3,oneof" json:"disable_js_insert,omitempty"`
}
type ShapeBotDefensePolicyType_JsInsertAllPages struct {
	JsInsertAllPages *ShapeJavaScriptInsertAllType `protobuf:"bytes,5,opt,name=js_insert_all_pages,json=jsInsertAllPages,proto3,oneof" json:"js_insert_all_pages,omitempty"`
}
type ShapeBotDefensePolicyType_JsInsertAllPagesExcept struct {
	JsInsertAllPagesExcept *ShapeJavaScriptInsertAllWithExceptionsType `protobuf:"bytes,6,opt,name=js_insert_all_pages_except,json=jsInsertAllPagesExcept,proto3,oneof" json:"js_insert_all_pages_except,omitempty"`
}
type ShapeBotDefensePolicyType_JsInsertionRules struct {
	JsInsertionRules *ShapeJavaScriptInsertType `protobuf:"bytes,7,opt,name=js_insertion_rules,json=jsInsertionRules,proto3,oneof" json:"js_insertion_rules,omitempty"`
}

func (*ShapeBotDefensePolicyType_DisableJsInsert) isShapeBotDefensePolicyType_JavaScriptChoice()  {}
func (*ShapeBotDefensePolicyType_JsInsertAllPages) isShapeBotDefensePolicyType_JavaScriptChoice() {}
func (*ShapeBotDefensePolicyType_JsInsertAllPagesExcept) isShapeBotDefensePolicyType_JavaScriptChoice() {
}
func (*ShapeBotDefensePolicyType_JsInsertionRules) isShapeBotDefensePolicyType_JavaScriptChoice() {}

func (m *ShapeBotDefensePolicyType) GetJavaScriptChoice() isShapeBotDefensePolicyType_JavaScriptChoice {
	if m != nil {
		return m.JavaScriptChoice
	}
	return nil
}

func (m *ShapeBotDefensePolicyType) GetProtectedAppEndpoints() []*AppEndpointType {
	if m != nil {
		return m.ProtectedAppEndpoints
	}
	return nil
}

func (m *ShapeBotDefensePolicyType) GetDisableJsInsert() *schema.Empty {
	if x, ok := m.GetJavaScriptChoice().(*ShapeBotDefensePolicyType_DisableJsInsert); ok {
		return x.DisableJsInsert
	}
	return nil
}

func (m *ShapeBotDefensePolicyType) GetJsInsertAllPages() *ShapeJavaScriptInsertAllType {
	if x, ok := m.GetJavaScriptChoice().(*ShapeBotDefensePolicyType_JsInsertAllPages); ok {
		return x.JsInsertAllPages
	}
	return nil
}

func (m *ShapeBotDefensePolicyType) GetJsInsertAllPagesExcept() *ShapeJavaScriptInsertAllWithExceptionsType {
	if x, ok := m.GetJavaScriptChoice().(*ShapeBotDefensePolicyType_JsInsertAllPagesExcept); ok {
		return x.JsInsertAllPagesExcept
	}
	return nil
}

func (m *ShapeBotDefensePolicyType) GetJsInsertionRules() *ShapeJavaScriptInsertType {
	if x, ok := m.GetJavaScriptChoice().(*ShapeBotDefensePolicyType_JsInsertionRules); ok {
		return x.JsInsertionRules
	}
	return nil
}

func (m *ShapeBotDefensePolicyType) GetJsDownloadPath() string {
	if m != nil {
		return m.JsDownloadPath
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ShapeBotDefensePolicyType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ShapeBotDefensePolicyType_DisableJsInsert)(nil),
		(*ShapeBotDefensePolicyType_JsInsertAllPages)(nil),
		(*ShapeBotDefensePolicyType_JsInsertAllPagesExcept)(nil),
		(*ShapeBotDefensePolicyType_JsInsertionRules)(nil),
	}
}

// AppEndpointType
//
// x-displayName: "Application Endpoint"
// Application Endpoint.
type AppEndpointType struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// HTTP Methods
	//
	// x-displayName: "HTTP Methods"
	// x-required
	// List of HTTP methods.
	HttpMethods []schema.HttpMethod `protobuf:"varint,2,rep,packed,name=http_methods,json=httpMethods,proto3,enum=ves.io.schema.HttpMethod" json:"http_methods,omitempty"`
	// Protocol
	//
	// x-displayName: "Protocol"
	// Protocol.
	Protocol URLScheme `protobuf:"varint,3,opt,name=protocol,proto3,enum=ves.io.schema.views.http_loadbalancer.URLScheme" json:"protocol,omitempty"`
	// Path
	//
	// x-displayName: "Path"
	// x-required
	// Matching URI path of the route.
	Path *schema.PathMatcherType `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	// Domain Matcher
	//
	// x-displayName: "Domain Matcher"
	// This defines domain matcher.
	//
	// Types that are valid to be assigned to DomainMatcherChoice:
	//	*AppEndpointType_AnyDomain
	//	*AppEndpointType_Domain
	DomainMatcherChoice isAppEndpointType_DomainMatcherChoice `protobuf_oneof:"domain_matcher_choice"`
	// Application traffic type
	//
	// x-displayName: "Application Traffic Type"
	// x-required
	// Select application traffic type.
	//
	// Types that are valid to be assigned to AppTrafficTypeChoice:
	//	*AppEndpointType_Web
	//	*AppEndpointType_Mobile
	//	*AppEndpointType_WebMobile
	AppTrafficTypeChoice isAppEndpointType_AppTrafficTypeChoice `protobuf_oneof:"app_traffic_type_choice"`
	// Mitigation
	//
	// x-displayName: "Bot Traffic Mitigation"
	// x-required
	// Mitigation action.
	Mitigation *policy.ShapeBotMitigationAction `protobuf:"bytes,12,opt,name=mitigation,proto3" json:"mitigation,omitempty"`
}

func (m *AppEndpointType) Reset()      { *m = AppEndpointType{} }
func (*AppEndpointType) ProtoMessage() {}
func (*AppEndpointType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{34}
}
func (m *AppEndpointType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppEndpointType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppEndpointType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppEndpointType.Merge(m, src)
}
func (m *AppEndpointType) XXX_Size() int {
	return m.Size()
}
func (m *AppEndpointType) XXX_DiscardUnknown() {
	xxx_messageInfo_AppEndpointType.DiscardUnknown(m)
}

var xxx_messageInfo_AppEndpointType proto.InternalMessageInfo

type isAppEndpointType_DomainMatcherChoice interface {
	isAppEndpointType_DomainMatcherChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAppEndpointType_AppTrafficTypeChoice interface {
	isAppEndpointType_AppTrafficTypeChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AppEndpointType_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,6,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type AppEndpointType_Domain struct {
	Domain *schema.DomainType `protobuf:"bytes,7,opt,name=domain,proto3,oneof" json:"domain,omitempty"`
}
type AppEndpointType_Web struct {
	Web *schema.Empty `protobuf:"bytes,9,opt,name=web,proto3,oneof" json:"web,omitempty"`
}
type AppEndpointType_Mobile struct {
	Mobile *schema.Empty `protobuf:"bytes,10,opt,name=mobile,proto3,oneof" json:"mobile,omitempty"`
}
type AppEndpointType_WebMobile struct {
	WebMobile *WebMobileTrafficType `protobuf:"bytes,11,opt,name=web_mobile,json=webMobile,proto3,oneof" json:"web_mobile,omitempty"`
}

func (*AppEndpointType_AnyDomain) isAppEndpointType_DomainMatcherChoice()  {}
func (*AppEndpointType_Domain) isAppEndpointType_DomainMatcherChoice()     {}
func (*AppEndpointType_Web) isAppEndpointType_AppTrafficTypeChoice()       {}
func (*AppEndpointType_Mobile) isAppEndpointType_AppTrafficTypeChoice()    {}
func (*AppEndpointType_WebMobile) isAppEndpointType_AppTrafficTypeChoice() {}

func (m *AppEndpointType) GetDomainMatcherChoice() isAppEndpointType_DomainMatcherChoice {
	if m != nil {
		return m.DomainMatcherChoice
	}
	return nil
}
func (m *AppEndpointType) GetAppTrafficTypeChoice() isAppEndpointType_AppTrafficTypeChoice {
	if m != nil {
		return m.AppTrafficTypeChoice
	}
	return nil
}

func (m *AppEndpointType) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *AppEndpointType) GetHttpMethods() []schema.HttpMethod {
	if m != nil {
		return m.HttpMethods
	}
	return nil
}

func (m *AppEndpointType) GetProtocol() URLScheme {
	if m != nil {
		return m.Protocol
	}
	return BOTH
}

func (m *AppEndpointType) GetPath() *schema.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *AppEndpointType) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainMatcherChoice().(*AppEndpointType_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *AppEndpointType) GetDomain() *schema.DomainType {
	if x, ok := m.GetDomainMatcherChoice().(*AppEndpointType_Domain); ok {
		return x.Domain
	}
	return nil
}

func (m *AppEndpointType) GetWeb() *schema.Empty {
	if x, ok := m.GetAppTrafficTypeChoice().(*AppEndpointType_Web); ok {
		return x.Web
	}
	return nil
}

func (m *AppEndpointType) GetMobile() *schema.Empty {
	if x, ok := m.GetAppTrafficTypeChoice().(*AppEndpointType_Mobile); ok {
		return x.Mobile
	}
	return nil
}

func (m *AppEndpointType) GetWebMobile() *WebMobileTrafficType {
	if x, ok := m.GetAppTrafficTypeChoice().(*AppEndpointType_WebMobile); ok {
		return x.WebMobile
	}
	return nil
}

func (m *AppEndpointType) GetMitigation() *policy.ShapeBotMitigationAction {
	if m != nil {
		return m.Mitigation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AppEndpointType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AppEndpointType_AnyDomain)(nil),
		(*AppEndpointType_Domain)(nil),
		(*AppEndpointType_Web)(nil),
		(*AppEndpointType_Mobile)(nil),
		(*AppEndpointType_WebMobile)(nil),
	}
}

// WebMobileTrafficType
//
// x-displayName: "Web and Mobile traffic type"
// Web and Mobile traffic type
type WebMobileTrafficType struct {
	// Mobile header
	//
	// x-displayName: "Header"
	// x-required
	// Header that is used by mobile traffic.
	Header *policy.HeaderMatcherTypeBasic `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *WebMobileTrafficType) Reset()      { *m = WebMobileTrafficType{} }
func (*WebMobileTrafficType) ProtoMessage() {}
func (*WebMobileTrafficType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{35}
}
func (m *WebMobileTrafficType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebMobileTrafficType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WebMobileTrafficType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebMobileTrafficType.Merge(m, src)
}
func (m *WebMobileTrafficType) XXX_Size() int {
	return m.Size()
}
func (m *WebMobileTrafficType) XXX_DiscardUnknown() {
	xxx_messageInfo_WebMobileTrafficType.DiscardUnknown(m)
}

var xxx_messageInfo_WebMobileTrafficType proto.InternalMessageInfo

func (m *WebMobileTrafficType) GetHeader() *policy.HeaderMatcherTypeBasic {
	if m != nil {
		return m.Header
	}
	return nil
}

// ShapeJavaScriptInsertType
//
// x-displayName: "JavaScript Custom Insertion Rules"
// This defines custom JavaScript insertion rules for Bot Defense Policy.
type ShapeJavaScriptInsertType struct {
	// rules
	//
	// x-displayName: "JavaScript Insertions"
	// x-required
	// Required list of pages to insert Bot Defense client JavaScript.
	Rules []*ShapeJavaScriptInsertionRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
	// exclude_list
	//
	// x-displayName: "Exclude Paths"
	// Optional JavaScript insertions exclude list of domain and path matchers.
	ExcludeList []*ShapeJavaScriptExclusionRule `protobuf:"bytes,3,rep,name=exclude_list,json=excludeList,proto3" json:"exclude_list,omitempty"`
}

func (m *ShapeJavaScriptInsertType) Reset()      { *m = ShapeJavaScriptInsertType{} }
func (*ShapeJavaScriptInsertType) ProtoMessage() {}
func (*ShapeJavaScriptInsertType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{36}
}
func (m *ShapeJavaScriptInsertType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeJavaScriptInsertType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeJavaScriptInsertType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeJavaScriptInsertType.Merge(m, src)
}
func (m *ShapeJavaScriptInsertType) XXX_Size() int {
	return m.Size()
}
func (m *ShapeJavaScriptInsertType) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeJavaScriptInsertType.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeJavaScriptInsertType proto.InternalMessageInfo

func (m *ShapeJavaScriptInsertType) GetRules() []*ShapeJavaScriptInsertionRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *ShapeJavaScriptInsertType) GetExcludeList() []*ShapeJavaScriptExclusionRule {
	if m != nil {
		return m.ExcludeList
	}
	return nil
}

// ShapeJavaScriptInsertAllWithExceptionsType
//
// x-displayName: "Insert JavaScript in All Pages with the Exceptions"
// Insert Bot Defense JavaScript in all pages  with the exceptions
type ShapeJavaScriptInsertAllWithExceptionsType struct {
	// javascript_location
	//
	// x-displayName: "JavaScript Location"
	// Defines where to insert Bot Defense JavaScript in HTML page.
	JavascriptLocation JavaScriptLocation `protobuf:"varint,1,opt,name=javascript_location,json=javascriptLocation,proto3,enum=ves.io.schema.views.http_loadbalancer.JavaScriptLocation" json:"javascript_location,omitempty"`
	// exclude_list
	//
	// x-displayName: "Exclude Pages"
	// Optional JavaScript insertions exclude list of domain and path matchers.
	ExcludeList []*ShapeJavaScriptExclusionRule `protobuf:"bytes,2,rep,name=exclude_list,json=excludeList,proto3" json:"exclude_list,omitempty"`
}

func (m *ShapeJavaScriptInsertAllWithExceptionsType) Reset() {
	*m = ShapeJavaScriptInsertAllWithExceptionsType{}
}
func (*ShapeJavaScriptInsertAllWithExceptionsType) ProtoMessage() {}
func (*ShapeJavaScriptInsertAllWithExceptionsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{37}
}
func (m *ShapeJavaScriptInsertAllWithExceptionsType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeJavaScriptInsertAllWithExceptionsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeJavaScriptInsertAllWithExceptionsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeJavaScriptInsertAllWithExceptionsType.Merge(m, src)
}
func (m *ShapeJavaScriptInsertAllWithExceptionsType) XXX_Size() int {
	return m.Size()
}
func (m *ShapeJavaScriptInsertAllWithExceptionsType) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeJavaScriptInsertAllWithExceptionsType.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeJavaScriptInsertAllWithExceptionsType proto.InternalMessageInfo

func (m *ShapeJavaScriptInsertAllWithExceptionsType) GetJavascriptLocation() JavaScriptLocation {
	if m != nil {
		return m.JavascriptLocation
	}
	return AFTER_HEAD
}

func (m *ShapeJavaScriptInsertAllWithExceptionsType) GetExcludeList() []*ShapeJavaScriptExclusionRule {
	if m != nil {
		return m.ExcludeList
	}
	return nil
}

// ShapeJavaScriptInsertAllType
//
// x-displayName: "Insert Bot Defense JavaScript in All Pages"
// Insert Bot Defense JavaScript in all pages
type ShapeJavaScriptInsertAllType struct {
	// javascript_location
	//
	// x-displayName: "JavaScript Location"
	// Defines where to insert Bot Defense JavaScript in HTML page.
	JavascriptLocation JavaScriptLocation `protobuf:"varint,1,opt,name=javascript_location,json=javascriptLocation,proto3,enum=ves.io.schema.views.http_loadbalancer.JavaScriptLocation" json:"javascript_location,omitempty"`
}

func (m *ShapeJavaScriptInsertAllType) Reset()      { *m = ShapeJavaScriptInsertAllType{} }
func (*ShapeJavaScriptInsertAllType) ProtoMessage() {}
func (*ShapeJavaScriptInsertAllType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{38}
}
func (m *ShapeJavaScriptInsertAllType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeJavaScriptInsertAllType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeJavaScriptInsertAllType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeJavaScriptInsertAllType.Merge(m, src)
}
func (m *ShapeJavaScriptInsertAllType) XXX_Size() int {
	return m.Size()
}
func (m *ShapeJavaScriptInsertAllType) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeJavaScriptInsertAllType.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeJavaScriptInsertAllType proto.InternalMessageInfo

func (m *ShapeJavaScriptInsertAllType) GetJavascriptLocation() JavaScriptLocation {
	if m != nil {
		return m.JavascriptLocation
	}
	return AFTER_HEAD
}

// ShapeJavaScriptInsertionRule
//
// x-displayName: "JavaScript Insertion Rule"
// This defines a rule for Bot Defense JavaScript insertion.
type ShapeJavaScriptInsertionRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Domain Matcher
	//
	// x-displayName: "Domain Matcher"
	// x-required
	// This defines domain matcher.
	//
	// Types that are valid to be assigned to DomainMatcherChoice:
	//	*ShapeJavaScriptInsertionRule_AnyDomain
	//	*ShapeJavaScriptInsertionRule_Domain
	DomainMatcherChoice isShapeJavaScriptInsertionRule_DomainMatcherChoice `protobuf_oneof:"domain_matcher_choice"`
	// Path
	//
	// x-displayName: "Path"
	// x-required
	// URI path matcher.
	Path *schema.PathMatcherType `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	// javascript_location
	//
	// x-displayName: "JavaScript Location"
	// Defines where to insert Bot Defense JavaScript in HTML page.
	JavascriptLocation JavaScriptLocation `protobuf:"varint,6,opt,name=javascript_location,json=javascriptLocation,proto3,enum=ves.io.schema.views.http_loadbalancer.JavaScriptLocation" json:"javascript_location,omitempty"`
}

func (m *ShapeJavaScriptInsertionRule) Reset()      { *m = ShapeJavaScriptInsertionRule{} }
func (*ShapeJavaScriptInsertionRule) ProtoMessage() {}
func (*ShapeJavaScriptInsertionRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{39}
}
func (m *ShapeJavaScriptInsertionRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeJavaScriptInsertionRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeJavaScriptInsertionRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeJavaScriptInsertionRule.Merge(m, src)
}
func (m *ShapeJavaScriptInsertionRule) XXX_Size() int {
	return m.Size()
}
func (m *ShapeJavaScriptInsertionRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeJavaScriptInsertionRule.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeJavaScriptInsertionRule proto.InternalMessageInfo

type isShapeJavaScriptInsertionRule_DomainMatcherChoice interface {
	isShapeJavaScriptInsertionRule_DomainMatcherChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ShapeJavaScriptInsertionRule_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,3,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type ShapeJavaScriptInsertionRule_Domain struct {
	Domain *schema.DomainType `protobuf:"bytes,4,opt,name=domain,proto3,oneof" json:"domain,omitempty"`
}

func (*ShapeJavaScriptInsertionRule_AnyDomain) isShapeJavaScriptInsertionRule_DomainMatcherChoice() {}
func (*ShapeJavaScriptInsertionRule_Domain) isShapeJavaScriptInsertionRule_DomainMatcherChoice()    {}

func (m *ShapeJavaScriptInsertionRule) GetDomainMatcherChoice() isShapeJavaScriptInsertionRule_DomainMatcherChoice {
	if m != nil {
		return m.DomainMatcherChoice
	}
	return nil
}

func (m *ShapeJavaScriptInsertionRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ShapeJavaScriptInsertionRule) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainMatcherChoice().(*ShapeJavaScriptInsertionRule_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *ShapeJavaScriptInsertionRule) GetDomain() *schema.DomainType {
	if x, ok := m.GetDomainMatcherChoice().(*ShapeJavaScriptInsertionRule_Domain); ok {
		return x.Domain
	}
	return nil
}

func (m *ShapeJavaScriptInsertionRule) GetPath() *schema.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *ShapeJavaScriptInsertionRule) GetJavascriptLocation() JavaScriptLocation {
	if m != nil {
		return m.JavascriptLocation
	}
	return AFTER_HEAD
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ShapeJavaScriptInsertionRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ShapeJavaScriptInsertionRule_AnyDomain)(nil),
		(*ShapeJavaScriptInsertionRule_Domain)(nil),
	}
}

// ShapeJavaScriptExclusionRule
//
// x-displayName: "JavaScript Insertion Exclusion Rule"
// Define JavaScript insertion exclusion rule
type ShapeJavaScriptExclusionRule struct {
	// metadata
	//
	// x-displayName: "Metadata"
	// x-required
	// Common attributes for the rule including name and description.
	Metadata *schema.MessageMetaType `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Domain Matcher
	//
	// x-displayName: "Domain Matcher"
	// x-required
	// This defines domain matcher.
	//
	// Types that are valid to be assigned to DomainMatcherChoice:
	//	*ShapeJavaScriptExclusionRule_AnyDomain
	//	*ShapeJavaScriptExclusionRule_Domain
	DomainMatcherChoice isShapeJavaScriptExclusionRule_DomainMatcherChoice `protobuf_oneof:"domain_matcher_choice"`
	// Path
	//
	// x-displayName: "Path"
	// x-required
	// URI path matcher.
	Path *schema.PathMatcherType `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *ShapeJavaScriptExclusionRule) Reset()      { *m = ShapeJavaScriptExclusionRule{} }
func (*ShapeJavaScriptExclusionRule) ProtoMessage() {}
func (*ShapeJavaScriptExclusionRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{40}
}
func (m *ShapeJavaScriptExclusionRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShapeJavaScriptExclusionRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShapeJavaScriptExclusionRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeJavaScriptExclusionRule.Merge(m, src)
}
func (m *ShapeJavaScriptExclusionRule) XXX_Size() int {
	return m.Size()
}
func (m *ShapeJavaScriptExclusionRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeJavaScriptExclusionRule.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeJavaScriptExclusionRule proto.InternalMessageInfo

type isShapeJavaScriptExclusionRule_DomainMatcherChoice interface {
	isShapeJavaScriptExclusionRule_DomainMatcherChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ShapeJavaScriptExclusionRule_AnyDomain struct {
	AnyDomain *schema.Empty `protobuf:"bytes,3,opt,name=any_domain,json=anyDomain,proto3,oneof" json:"any_domain,omitempty"`
}
type ShapeJavaScriptExclusionRule_Domain struct {
	Domain *schema.DomainType `protobuf:"bytes,4,opt,name=domain,proto3,oneof" json:"domain,omitempty"`
}

func (*ShapeJavaScriptExclusionRule_AnyDomain) isShapeJavaScriptExclusionRule_DomainMatcherChoice() {}
func (*ShapeJavaScriptExclusionRule_Domain) isShapeJavaScriptExclusionRule_DomainMatcherChoice()    {}

func (m *ShapeJavaScriptExclusionRule) GetDomainMatcherChoice() isShapeJavaScriptExclusionRule_DomainMatcherChoice {
	if m != nil {
		return m.DomainMatcherChoice
	}
	return nil
}

func (m *ShapeJavaScriptExclusionRule) GetMetadata() *schema.MessageMetaType {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ShapeJavaScriptExclusionRule) GetAnyDomain() *schema.Empty {
	if x, ok := m.GetDomainMatcherChoice().(*ShapeJavaScriptExclusionRule_AnyDomain); ok {
		return x.AnyDomain
	}
	return nil
}

func (m *ShapeJavaScriptExclusionRule) GetDomain() *schema.DomainType {
	if x, ok := m.GetDomainMatcherChoice().(*ShapeJavaScriptExclusionRule_Domain); ok {
		return x.Domain
	}
	return nil
}

func (m *ShapeJavaScriptExclusionRule) GetPath() *schema.PathMatcherType {
	if m != nil {
		return m.Path
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ShapeJavaScriptExclusionRule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ShapeJavaScriptExclusionRule_AnyDomain)(nil),
		(*ShapeJavaScriptExclusionRule_Domain)(nil),
	}
}

// IP Threat Category List Type
//
// x-displayName: "IP Threat Category List"
// List of ip threat categories
type IPThreatCategoryListType struct {
	// IP Threat Categories
	//
	// x-displayName: "List of IP Threat Categories to choose"
	// x-required
	// If the source IP matches on atleast one of the enabled IP threat categories, the request will be denied.
	IpThreatCategories []policy.IPThreatCategory `protobuf:"varint,1,rep,packed,name=ip_threat_categories,json=ipThreatCategories,proto3,enum=ves.io.schema.policy.IPThreatCategory" json:"ip_threat_categories,omitempty"`
}

func (m *IPThreatCategoryListType) Reset()      { *m = IPThreatCategoryListType{} }
func (*IPThreatCategoryListType) ProtoMessage() {}
func (*IPThreatCategoryListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{41}
}
func (m *IPThreatCategoryListType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IPThreatCategoryListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IPThreatCategoryListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPThreatCategoryListType.Merge(m, src)
}
func (m *IPThreatCategoryListType) XXX_Size() int {
	return m.Size()
}
func (m *IPThreatCategoryListType) XXX_DiscardUnknown() {
	xxx_messageInfo_IPThreatCategoryListType.DiscardUnknown(m)
}

var xxx_messageInfo_IPThreatCategoryListType proto.InternalMessageInfo

func (m *IPThreatCategoryListType) GetIpThreatCategories() []policy.IPThreatCategory {
	if m != nil {
		return m.IpThreatCategories
	}
	return nil
}

// GlobalSpecType
//
// x-displayName: "Global Specification"
// Shape of the HTTP loadbalancer specification
type GlobalSpecType struct {
	// Domains
	//
	// x-displayName: "Domains"
	// x-example: "www.foo.com"
	// x-required
	// A list of domains (host/authority header) that will be matched to loadbalancer.
	// Wildcard hosts are supported in the suffix or prefix form
	//
	// Domain search order:
	//  1. Exact domain names: www.foo.com.
	//  2. Prefix domain wildcards: *.foo.com or *-bar.foo.com.
	//  3. Special wildcard * matching any domain.
	//
	// Wildcard will not match empty string.
	// e.g. *-bar.foo.com will match baz-bar.foo.com but not -bar.foo.com.
	// The longest wildcards match first.
	// Only a single virtual host in the entire route configuration can match on *.
	// Also a domain must be unique across all virtual hosts within an advertise policy.
	//
	// Domains are also used for SNI matching if the loadbalancer type is HTTPS
	// Domains also indicate the list of names for which DNS resolution will be done by VER
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Proxy choice
	//
	// x-displayName: "Select Type of Load Balancer"
	// x-required
	// Type of Load Balancer can be "http" or "https"
	//
	// Types that are valid to be assigned to LoadbalancerType:
	//	*GlobalSpecType_Http
	//	*GlobalSpecType_HttpsAutoCert
	//	*GlobalSpecType_Https
	LoadbalancerType isGlobalSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// download_tls_certificates_expiration_timestamp
	//
	// x-displayName: "Certificate(s) Expiration Timestamp"
	// In case of loadbalancer type of 'https'(BYOC) this lists expiration timestamp for certificate(s)
	// in the same order as the list of tls_parameters.tls_certificates.
	// In case of loadbalancer type of 'https_auto_cert' this has one element with the expiration
	// timestamp of the autogenerated certificate.
	DownstreamTlsCertificateExpirationTimestamps []*types.Timestamp `protobuf:"bytes,62,rep,name=downstream_tls_certificate_expiration_timestamps,json=downstreamTlsCertificateExpirationTimestamps,proto3" json:"downstream_tls_certificate_expiration_timestamps,omitempty"`
	// Advertise choice
	//
	// x-displayName: "Where to Advertise the VIP"
	// x-required
	// This is a choice to select method to advertise VIP.
	//
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*GlobalSpecType_DoNotAdvertise
	//	*GlobalSpecType_AdvertiseOnPublicDefaultVip
	//	*GlobalSpecType_AdvertiseOnPublic
	//	*GlobalSpecType_AdvertiseCustom
	AdvertiseChoice isGlobalSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	// Default Route Origin Pools
	//
	// x-displayName: "Origin Pools"
	// Origin Pools used when no route is specified (default route)
	DefaultRoutePools []*views.OriginPoolWithWeight `protobuf:"bytes,6,rep,name=default_route_pools,json=defaultRoutePools,proto3" json:"default_route_pools,omitempty"`
	// HostRewriteParams
	//
	// x-displayName: "Select Host Rewrite for Default Origin Servers"
	// Select how the host header can be modified during forwarding to the default origin servers(default route)
	//
	// Types that are valid to be assigned to HostRewriteParams:
	//	*GlobalSpecType_AutoHostRewrite
	//	*GlobalSpecType_HostRewrite
	//	*GlobalSpecType_DisableHostRewrite
	HostRewriteParams isGlobalSpecType_HostRewriteParams `protobuf_oneof:"host_rewrite_params"`
	// Routes
	//
	// x-displayName: "Routes"
	// Routes for this loadbalancer
	Routes []*RouteType `protobuf:"bytes,7,rep,name=routes,proto3" json:"routes,omitempty"`
	// Cross-Origin Resource Sharing (CORS) configuration for requests
	//
	// x-displayName: "CORS Policy"
	// CORS is a mechanism that uses additional HTTP headers to tell a browser to let
	// a web application running at one origin (domain) have permission to access selected
	// resources from a server at a different origin
	CorsPolicy *schema.CorsPolicy `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	// Enable the WAF (Web Application Firewall) functionality for VirtualHost
	//
	// x-displayName: "Select Web Application Firewall (WAF) Config"
	// x-required
	//
	// WAF can be used to analyze inbound and outbound http/https traffic.
	// WAF can be configured either in BLOCKing Mode or ALERTing Mode.
	// In BLOCKing mode if WAF detects suspicious inbound/outbound traffic it blocks the request or response.
	// In ALERTing mode if suspicious traffic is detected, WAF generates ALERTs with details on the
	// suspicious traffic (instead of blocking traffic).
	//
	// Types that are valid to be assigned to WafChoice:
	//	*GlobalSpecType_DisableWaf
	//	*GlobalSpecType_Waf
	//	*GlobalSpecType_WafRule
	//	*GlobalSpecType_AppFirewall
	WafChoice isGlobalSpecType_WafChoice `protobuf_oneof:"waf_choice"`
	// Add Site information
	//
	// x-displayName: "Add Location"
	// x-example: "true"
	// x-example: true
	// Appends header x-volterra-location = <re-site-name> in responses. This configuration
	// is ignored on CE sites.
	AddLocation bool `protobuf:"varint,17,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Challenge choice
	//
	// x-displayName: "Select Type of Challenge"
	// x-required
	// Selection of different types of challenge.
	// Selecting javascript or captcha challenge will enable it for all traffic served by this load balancer
	// Policy based challenge can be used to define policy rules to enable or bypass challenge
	//
	// Types that are valid to be assigned to ChallengeType:
	//	*GlobalSpecType_NoChallenge
	//	*GlobalSpecType_JsChallenge
	//	*GlobalSpecType_CaptchaChallenge
	//	*GlobalSpecType_PolicyBasedChallenge
	ChallengeType isGlobalSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	// More Options
	//
	// x-displayName: "More Options"
	// More options like header manipulation, compression etc.
	MoreOption *AdvancedOptionsType `protobuf:"bytes,19,opt,name=more_option,json=moreOption,proto3" json:"more_option,omitempty"`
	// User Identifier
	//
	// x-displayName: "User Identifier"
	// x-required
	// Select user identifier for rate limiting and malicious user mitigation.
	//
	// Types that are valid to be assigned to UserIdChoice:
	//	*GlobalSpecType_UserIdClientIp
	//	*GlobalSpecType_UserIdentification
	UserIdChoice isGlobalSpecType_UserIdChoice `protobuf_oneof:"user_id_choice"`
	// Enable Rate Limiting
	//
	// x-displayName: "Rate Limiting"
	// x-required
	// x-example: ""
	// Enable rate limiting per user(client) for this load balancer
	//
	// Types that are valid to be assigned to RateLimitChoice:
	//	*GlobalSpecType_DisableRateLimit
	//	*GlobalSpecType_ApiRateLimit
	//	*GlobalSpecType_RateLimit
	RateLimitChoice isGlobalSpecType_RateLimitChoice `protobuf_oneof:"rate_limit_choice"`
	// Malicious User Mitigation
	//
	// x-displayName: "Malicious User Mitigation"
	// Settings that specify the actions to be taken when malicious users are determined to be at different threat levels.
	// User's activity is monitored and continuously analyzed for malicious behavior. From this analysis, a threat level is assigned to each user.
	// The settings defined in malicious user mitigation specify what mitigation actions to take for users determined to be at different threat levels.
	MaliciousUserMitigation *views.ObjectRefType `protobuf:"bytes,32,opt,name=malicious_user_mitigation,json=maliciousUserMitigation,proto3" json:"malicious_user_mitigation,omitempty"` // Deprecated: Do not use.
	// WAF Exclusion Rules
	//
	// x-displayName: "WAF Exclusion Rules"
	// Rules that specify the match conditions and the corresponding WAF_RULE_IDs which should be excluded from WAF evaluation
	WafExclusionRules []*policy.SimpleWafExclusionRule `protobuf:"bytes,33,rep,name=waf_exclusion_rules,json=wafExclusionRules,proto3" json:"waf_exclusion_rules,omitempty"`
	// Data Guard Rules
	//
	// x-displayName: "Data Guard Rules"
	// Data Guard prevents responses from exposing sensitive information by masking the data.
	// The system masks credit card numbers and social security numbers leaked from the application from within the http response with a string of asterisks (*).
	// Note: App Firewall should be enabled, to use Data Guard feature.
	DataGuardRules []*policy.SimpleDataGuardRule `protobuf:"bytes,63,rep,name=data_guard_rules,json=dataGuardRules,proto3" json:"data_guard_rules,omitempty"`
	// Client Blocking Rules
	//
	// x-displayName: "Client Blocking Rules"
	// Rules that specify the clients to be blocked
	BlockedClients []*SimpleClientSrcRule `protobuf:"bytes,34,rep,name=blocked_clients,json=blockedClients,proto3" json:"blocked_clients,omitempty"`
	// Trusted Client Rules
	//
	// x-displayName: "Trusted Client Rules"
	// Rules that specify the clients to be trusted.
	// WAF or/and Bot processing can be skipped for trusted clients
	TrustedClients []*SimpleClientSrcRule `protobuf:"bytes,35,rep,name=trusted_clients,json=trustedClients,proto3" json:"trusted_clients,omitempty"`
	// DDoS Mitigation Rules
	//
	// x-displayName: "DDoS Mitigation Rules"
	// Rules that specify the DDoS clients to be blocked
	DdosMitigationRules []*DDoSMitigationRule `protobuf:"bytes,37,rep,name=ddos_mitigation_rules,json=ddosMitigationRules,proto3" json:"ddos_mitigation_rules,omitempty"`
	// Service Policies
	//
	// x-displayName: "Service Policies"
	// x-required
	// Select service policies to be applied.
	//
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*GlobalSpecType_ServicePoliciesFromNamespace
	//	*GlobalSpecType_NoServicePolicies
	//	*GlobalSpecType_ActiveServicePolicies
	ServicePolicyChoice isGlobalSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	// Load Balancing Control
	//
	// x-displayName: "Load Balancing Control"
	// x-required
	// Select how the request are Load balanced
	//
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*GlobalSpecType_RoundRobin
	//	*GlobalSpecType_LeastActive
	//	*GlobalSpecType_Random
	//	*GlobalSpecType_SourceIpStickiness
	//	*GlobalSpecType_CookieStickiness
	//	*GlobalSpecType_RingHash
	HashPolicyChoice isGlobalSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	// ML config choice
	//
	// x-displayName: "ML Config"
	// x-required
	// ML config choice
	//
	// Types that are valid to be assigned to MlConfigChoice:
	//	*GlobalSpecType_SingleLbApp
	//	*GlobalSpecType_MultiLbApp
	MlConfigChoice isGlobalSpecType_MlConfigChoice `protobuf_oneof:"ml_config_choice"`
	// Enable Bot Defense functionality for VirtualHost
	//
	// x-displayName: "Bot Defense Config"
	// Bot Defense protects your applications from automated attacks by leveraging JavaScript and API calls to collect telemetry and mitigate sophisticated attacks within the context of F5's Distributed Cloud global network. When automation is detected, and mitigation action is set to Block or Redirect, the client will receive the configured mitigation response. If action is set to Flag, automated requests are monitored by Bot Defense, but are allowed to proceed to the customer's server.
	//
	// Types that are valid to be assigned to BotDefenseChoice:
	//	*GlobalSpecType_DisableBotDefense
	//	*GlobalSpecType_BotDefense
	BotDefenseChoice isGlobalSpecType_BotDefenseChoice `protobuf_oneof:"bot_defense_choice"`
	// API Definition choice
	//
	// x-required
	// x-displayName: "API Definition"
	// API Definition choice
	//
	// Types that are valid to be assigned to ApiDefinitionChoice:
	//	*GlobalSpecType_DisableApiDefinition
	//	*GlobalSpecType_ApiDefinition
	//	*GlobalSpecType_ApiDefinitions
	ApiDefinitionChoice isGlobalSpecType_ApiDefinitionChoice `protobuf_oneof:"api_definition_choice"`
	// ip_reputation
	//
	// x-displayName: "IP Reputation"
	// IP reputation service analyzes IP threats and publishes a dynamic data set of millions of high-risk IP addresses, to protect users from inbound traffic from malicious IPs.
	// IP threat categories include Spam Sources, Windows Exploits, Web Attacks, BotNets, Scanners, Denial of Service, Reputation, Phishing, Proxy, Mobile Threats, and TOR Proxy.
	//
	// Types that are valid to be assigned to IpReputationChoice:
	//	*GlobalSpecType_DisableIpReputation
	//	*GlobalSpecType_EnableIpReputation
	IpReputationChoice isGlobalSpecType_IpReputationChoice `protobuf_oneof:"ip_reputation_choice"`
	// view_internal
	//
	// x-displayName: "View Internal"
	// Reference to view internal object
	ViewInternal *views.ObjectRefType `protobuf:"bytes,1000,opt,name=view_internal,json=viewInternal,proto3" json:"view_internal,omitempty"`
	// host name
	//
	// x-displayName: "Host Name"
	// x-example: "ves-io-cf8684b9-a18f-4843-a24f-1f9ee8ea2776.ac.vh.ves.io"
	// Internally generated host name to be used for the virtual host
	HostName string `protobuf:"bytes,1001,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// DNS information
	//
	// x-displayName: "DNS Information"
	// DNS information for this virtual host
	DnsInfo []*virtual_host_dns_info.DnsInfo `protobuf:"bytes,1002,rep,name=dns_info,json=dnsInfo,proto3" json:"dns_info,omitempty"`
	// Virtual Host state
	//
	// x-displayName: "Virtual Host State"
	// State of the virtual host
	State virtual_host.VirtualHostState `protobuf:"varint,1003,opt,name=state,proto3,enum=ves.io.schema.virtual_host.VirtualHostState" json:"state,omitempty"`
	// Auto Cert State
	//
	// x-displayName: "Auto Cert State"
	// State of auto certificate generation.
	AutoCertState virtual_host.CertificationState `protobuf:"varint,1004,opt,name=auto_cert_state,json=autoCertState,proto3,enum=ves.io.schema.virtual_host.CertificationState" json:"auto_cert_state,omitempty"` // Deprecated: Do not use.
	// Auto Cert Information
	//
	// x-displayName: "Auto Cert Information"
	// Auto certificate related information
	AutoCertInfo *virtual_host.AutoCertInfoType `protobuf:"bytes,1010,opt,name=auto_cert_info,json=autoCertInfo,proto3" json:"auto_cert_info,omitempty"`
}

func (m *GlobalSpecType) Reset()      { *m = GlobalSpecType{} }
func (*GlobalSpecType) ProtoMessage() {}
func (*GlobalSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{42}
}
func (m *GlobalSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GlobalSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSpecType.Merge(m, src)
}
func (m *GlobalSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GlobalSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSpecType proto.InternalMessageInfo

type isGlobalSpecType_LoadbalancerType interface {
	isGlobalSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_AdvertiseChoice interface {
	isGlobalSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_HostRewriteParams interface {
	isGlobalSpecType_HostRewriteParams()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_WafChoice interface {
	isGlobalSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ChallengeType interface {
	isGlobalSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_UserIdChoice interface {
	isGlobalSpecType_UserIdChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_RateLimitChoice interface {
	isGlobalSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ServicePolicyChoice interface {
	isGlobalSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_HashPolicyChoice interface {
	isGlobalSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_MlConfigChoice interface {
	isGlobalSpecType_MlConfigChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_BotDefenseChoice interface {
	isGlobalSpecType_BotDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_ApiDefinitionChoice interface {
	isGlobalSpecType_ApiDefinitionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGlobalSpecType_IpReputationChoice interface {
	isGlobalSpecType_IpReputationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GlobalSpecType_Http struct {
	Http *ProxyTypeHttp `protobuf:"bytes,2,opt,name=http,proto3,oneof" json:"http,omitempty"`
}
type GlobalSpecType_HttpsAutoCert struct {
	HttpsAutoCert *ProxyTypeHttpsAutoCerts `protobuf:"bytes,27,opt,name=https_auto_cert,json=httpsAutoCert,proto3,oneof" json:"https_auto_cert,omitempty"`
}
type GlobalSpecType_Https struct {
	Https *ProxyTypeHttps `protobuf:"bytes,3,opt,name=https,proto3,oneof" json:"https,omitempty"`
}
type GlobalSpecType_DoNotAdvertise struct {
	DoNotAdvertise *schema.Empty `protobuf:"bytes,12,opt,name=do_not_advertise,json=doNotAdvertise,proto3,oneof" json:"do_not_advertise,omitempty"`
}
type GlobalSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,13,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type GlobalSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,4,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type GlobalSpecType_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}
type GlobalSpecType_AutoHostRewrite struct {
	AutoHostRewrite *schema.Empty `protobuf:"bytes,28,opt,name=auto_host_rewrite,json=autoHostRewrite,proto3,oneof" json:"auto_host_rewrite,omitempty"`
}
type GlobalSpecType_HostRewrite struct {
	HostRewrite string `protobuf:"bytes,29,opt,name=host_rewrite,json=hostRewrite,proto3,oneof" json:"host_rewrite,omitempty"`
}
type GlobalSpecType_DisableHostRewrite struct {
	DisableHostRewrite *schema.Empty `protobuf:"bytes,30,opt,name=disable_host_rewrite,json=disableHostRewrite,proto3,oneof" json:"disable_host_rewrite,omitempty"`
}
type GlobalSpecType_DisableWaf struct {
	DisableWaf *schema.Empty `protobuf:"bytes,11,opt,name=disable_waf,json=disableWaf,proto3,oneof" json:"disable_waf,omitempty"`
}
type GlobalSpecType_Waf struct {
	Waf *views.ObjectRefType `protobuf:"bytes,9,opt,name=waf,proto3,oneof" json:"waf,omitempty"`
}
type GlobalSpecType_WafRule struct {
	WafRule *views.ObjectRefType `protobuf:"bytes,10,opt,name=waf_rule,json=wafRule,proto3,oneof" json:"waf_rule,omitempty"`
}
type GlobalSpecType_AppFirewall struct {
	AppFirewall *views.ObjectRefType `protobuf:"bytes,52,opt,name=app_firewall,json=appFirewall,proto3,oneof" json:"app_firewall,omitempty"`
}
type GlobalSpecType_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,26,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type GlobalSpecType_JsChallenge struct {
	JsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,18,opt,name=js_challenge,json=jsChallenge,proto3,oneof" json:"js_challenge,omitempty"`
}
type GlobalSpecType_CaptchaChallenge struct {
	CaptchaChallenge *virtual_host.CaptchaChallengeType `protobuf:"bytes,24,opt,name=captcha_challenge,json=captchaChallenge,proto3,oneof" json:"captcha_challenge,omitempty"`
}
type GlobalSpecType_PolicyBasedChallenge struct {
	PolicyBasedChallenge *PolicyBasedChallenge `protobuf:"bytes,51,opt,name=policy_based_challenge,json=policyBasedChallenge,proto3,oneof" json:"policy_based_challenge,omitempty"`
}
type GlobalSpecType_UserIdClientIp struct {
	UserIdClientIp *schema.Empty `protobuf:"bytes,60,opt,name=user_id_client_ip,json=userIdClientIp,proto3,oneof" json:"user_id_client_ip,omitempty"`
}
type GlobalSpecType_UserIdentification struct {
	UserIdentification *views.ObjectRefType `protobuf:"bytes,20,opt,name=user_identification,json=userIdentification,proto3,oneof" json:"user_identification,omitempty"`
}
type GlobalSpecType_DisableRateLimit struct {
	DisableRateLimit *schema.Empty `protobuf:"bytes,22,opt,name=disable_rate_limit,json=disableRateLimit,proto3,oneof" json:"disable_rate_limit,omitempty"`
}
type GlobalSpecType_ApiRateLimit struct {
	ApiRateLimit *APIRateLimit `protobuf:"bytes,68,opt,name=api_rate_limit,json=apiRateLimit,proto3,oneof" json:"api_rate_limit,omitempty"`
}
type GlobalSpecType_RateLimit struct {
	RateLimit *RateLimitConfigType `protobuf:"bytes,23,opt,name=rate_limit,json=rateLimit,proto3,oneof" json:"rate_limit,omitempty"`
}
type GlobalSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *schema.Empty `protobuf:"bytes,41,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,proto3,oneof" json:"service_policies_from_namespace,omitempty"`
}
type GlobalSpecType_NoServicePolicies struct {
	NoServicePolicies *schema.Empty `protobuf:"bytes,42,opt,name=no_service_policies,json=noServicePolicies,proto3,oneof" json:"no_service_policies,omitempty"`
}
type GlobalSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *ServicePolicyList `protobuf:"bytes,43,opt,name=active_service_policies,json=activeServicePolicies,proto3,oneof" json:"active_service_policies,omitempty"`
}
type GlobalSpecType_RoundRobin struct {
	RoundRobin *schema.Empty `protobuf:"bytes,45,opt,name=round_robin,json=roundRobin,proto3,oneof" json:"round_robin,omitempty"`
}
type GlobalSpecType_LeastActive struct {
	LeastActive *schema.Empty `protobuf:"bytes,46,opt,name=least_active,json=leastActive,proto3,oneof" json:"least_active,omitempty"`
}
type GlobalSpecType_Random struct {
	Random *schema.Empty `protobuf:"bytes,47,opt,name=random,proto3,oneof" json:"random,omitempty"`
}
type GlobalSpecType_SourceIpStickiness struct {
	SourceIpStickiness *schema.Empty `protobuf:"bytes,48,opt,name=source_ip_stickiness,json=sourceIpStickiness,proto3,oneof" json:"source_ip_stickiness,omitempty"`
}
type GlobalSpecType_CookieStickiness struct {
	CookieStickiness *route.CookieForHashing `protobuf:"bytes,49,opt,name=cookie_stickiness,json=cookieStickiness,proto3,oneof" json:"cookie_stickiness,omitempty"`
}
type GlobalSpecType_RingHash struct {
	RingHash *HashPolicyListType `protobuf:"bytes,50,opt,name=ring_hash,json=ringHash,proto3,oneof" json:"ring_hash,omitempty"`
}
type GlobalSpecType_SingleLbApp struct {
	SingleLbApp *SingleLoadBalancerAppSetting `protobuf:"bytes,54,opt,name=single_lb_app,json=singleLbApp,proto3,oneof" json:"single_lb_app,omitempty"`
}
type GlobalSpecType_MultiLbApp struct {
	MultiLbApp *schema.Empty `protobuf:"bytes,55,opt,name=multi_lb_app,json=multiLbApp,proto3,oneof" json:"multi_lb_app,omitempty"`
}
type GlobalSpecType_DisableBotDefense struct {
	DisableBotDefense *schema.Empty `protobuf:"bytes,57,opt,name=disable_bot_defense,json=disableBotDefense,proto3,oneof" json:"disable_bot_defense,omitempty"`
}
type GlobalSpecType_BotDefense struct {
	BotDefense *ShapeBotDefenseType `protobuf:"bytes,58,opt,name=bot_defense,json=botDefense,proto3,oneof" json:"bot_defense,omitempty"`
}
type GlobalSpecType_DisableApiDefinition struct {
	DisableApiDefinition *schema.Empty `protobuf:"bytes,70,opt,name=disable_api_definition,json=disableApiDefinition,proto3,oneof" json:"disable_api_definition,omitempty"`
}
type GlobalSpecType_ApiDefinition struct {
	ApiDefinition *views.ObjectRefType `protobuf:"bytes,71,opt,name=api_definition,json=apiDefinition,proto3,oneof" json:"api_definition,omitempty"`
}
type GlobalSpecType_ApiDefinitions struct {
	ApiDefinitions *ApiDefinitionList `protobuf:"bytes,61,opt,name=api_definitions,json=apiDefinitions,proto3,oneof" json:"api_definitions,omitempty"`
}
type GlobalSpecType_DisableIpReputation struct {
	DisableIpReputation *schema.Empty `protobuf:"bytes,65,opt,name=disable_ip_reputation,json=disableIpReputation,proto3,oneof" json:"disable_ip_reputation,omitempty"`
}
type GlobalSpecType_EnableIpReputation struct {
	EnableIpReputation *IPThreatCategoryListType `protobuf:"bytes,66,opt,name=enable_ip_reputation,json=enableIpReputation,proto3,oneof" json:"enable_ip_reputation,omitempty"`
}

func (*GlobalSpecType_Http) isGlobalSpecType_LoadbalancerType()                            {}
func (*GlobalSpecType_HttpsAutoCert) isGlobalSpecType_LoadbalancerType()                   {}
func (*GlobalSpecType_Https) isGlobalSpecType_LoadbalancerType()                           {}
func (*GlobalSpecType_DoNotAdvertise) isGlobalSpecType_AdvertiseChoice()                   {}
func (*GlobalSpecType_AdvertiseOnPublicDefaultVip) isGlobalSpecType_AdvertiseChoice()      {}
func (*GlobalSpecType_AdvertiseOnPublic) isGlobalSpecType_AdvertiseChoice()                {}
func (*GlobalSpecType_AdvertiseCustom) isGlobalSpecType_AdvertiseChoice()                  {}
func (*GlobalSpecType_AutoHostRewrite) isGlobalSpecType_HostRewriteParams()                {}
func (*GlobalSpecType_HostRewrite) isGlobalSpecType_HostRewriteParams()                    {}
func (*GlobalSpecType_DisableHostRewrite) isGlobalSpecType_HostRewriteParams()             {}
func (*GlobalSpecType_DisableWaf) isGlobalSpecType_WafChoice()                             {}
func (*GlobalSpecType_Waf) isGlobalSpecType_WafChoice()                                    {}
func (*GlobalSpecType_WafRule) isGlobalSpecType_WafChoice()                                {}
func (*GlobalSpecType_AppFirewall) isGlobalSpecType_WafChoice()                            {}
func (*GlobalSpecType_NoChallenge) isGlobalSpecType_ChallengeType()                        {}
func (*GlobalSpecType_JsChallenge) isGlobalSpecType_ChallengeType()                        {}
func (*GlobalSpecType_CaptchaChallenge) isGlobalSpecType_ChallengeType()                   {}
func (*GlobalSpecType_PolicyBasedChallenge) isGlobalSpecType_ChallengeType()               {}
func (*GlobalSpecType_UserIdClientIp) isGlobalSpecType_UserIdChoice()                      {}
func (*GlobalSpecType_UserIdentification) isGlobalSpecType_UserIdChoice()                  {}
func (*GlobalSpecType_DisableRateLimit) isGlobalSpecType_RateLimitChoice()                 {}
func (*GlobalSpecType_ApiRateLimit) isGlobalSpecType_RateLimitChoice()                     {}
func (*GlobalSpecType_RateLimit) isGlobalSpecType_RateLimitChoice()                        {}
func (*GlobalSpecType_ServicePoliciesFromNamespace) isGlobalSpecType_ServicePolicyChoice() {}
func (*GlobalSpecType_NoServicePolicies) isGlobalSpecType_ServicePolicyChoice()            {}
func (*GlobalSpecType_ActiveServicePolicies) isGlobalSpecType_ServicePolicyChoice()        {}
func (*GlobalSpecType_RoundRobin) isGlobalSpecType_HashPolicyChoice()                      {}
func (*GlobalSpecType_LeastActive) isGlobalSpecType_HashPolicyChoice()                     {}
func (*GlobalSpecType_Random) isGlobalSpecType_HashPolicyChoice()                          {}
func (*GlobalSpecType_SourceIpStickiness) isGlobalSpecType_HashPolicyChoice()              {}
func (*GlobalSpecType_CookieStickiness) isGlobalSpecType_HashPolicyChoice()                {}
func (*GlobalSpecType_RingHash) isGlobalSpecType_HashPolicyChoice()                        {}
func (*GlobalSpecType_SingleLbApp) isGlobalSpecType_MlConfigChoice()                       {}
func (*GlobalSpecType_MultiLbApp) isGlobalSpecType_MlConfigChoice()                        {}
func (*GlobalSpecType_DisableBotDefense) isGlobalSpecType_BotDefenseChoice()               {}
func (*GlobalSpecType_BotDefense) isGlobalSpecType_BotDefenseChoice()                      {}
func (*GlobalSpecType_DisableApiDefinition) isGlobalSpecType_ApiDefinitionChoice()         {}
func (*GlobalSpecType_ApiDefinition) isGlobalSpecType_ApiDefinitionChoice()                {}
func (*GlobalSpecType_ApiDefinitions) isGlobalSpecType_ApiDefinitionChoice()               {}
func (*GlobalSpecType_DisableIpReputation) isGlobalSpecType_IpReputationChoice()           {}
func (*GlobalSpecType_EnableIpReputation) isGlobalSpecType_IpReputationChoice()            {}

func (m *GlobalSpecType) GetLoadbalancerType() isGlobalSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *GlobalSpecType) GetAdvertiseChoice() isGlobalSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *GlobalSpecType) GetHostRewriteParams() isGlobalSpecType_HostRewriteParams {
	if m != nil {
		return m.HostRewriteParams
	}
	return nil
}
func (m *GlobalSpecType) GetWafChoice() isGlobalSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *GlobalSpecType) GetChallengeType() isGlobalSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *GlobalSpecType) GetUserIdChoice() isGlobalSpecType_UserIdChoice {
	if m != nil {
		return m.UserIdChoice
	}
	return nil
}
func (m *GlobalSpecType) GetRateLimitChoice() isGlobalSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}
func (m *GlobalSpecType) GetServicePolicyChoice() isGlobalSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}
func (m *GlobalSpecType) GetHashPolicyChoice() isGlobalSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *GlobalSpecType) GetMlConfigChoice() isGlobalSpecType_MlConfigChoice {
	if m != nil {
		return m.MlConfigChoice
	}
	return nil
}
func (m *GlobalSpecType) GetBotDefenseChoice() isGlobalSpecType_BotDefenseChoice {
	if m != nil {
		return m.BotDefenseChoice
	}
	return nil
}
func (m *GlobalSpecType) GetApiDefinitionChoice() isGlobalSpecType_ApiDefinitionChoice {
	if m != nil {
		return m.ApiDefinitionChoice
	}
	return nil
}
func (m *GlobalSpecType) GetIpReputationChoice() isGlobalSpecType_IpReputationChoice {
	if m != nil {
		return m.IpReputationChoice
	}
	return nil
}

func (m *GlobalSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GlobalSpecType) GetHttp() *ProxyTypeHttp {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *GlobalSpecType) GetHttpsAutoCert() *ProxyTypeHttpsAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *GlobalSpecType) GetHttps() *ProxyTypeHttps {
	if x, ok := m.GetLoadbalancerType().(*GlobalSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *GlobalSpecType) GetDownstreamTlsCertificateExpirationTimestamps() []*types.Timestamp {
	if m != nil {
		return m.DownstreamTlsCertificateExpirationTimestamps
	}
	return nil
}

func (m *GlobalSpecType) GetDoNotAdvertise() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *GlobalSpecType) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*GlobalSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *GlobalSpecType) GetDefaultRoutePools() []*views.OriginPoolWithWeight {
	if m != nil {
		return m.DefaultRoutePools
	}
	return nil
}

func (m *GlobalSpecType) GetAutoHostRewrite() *schema.Empty {
	if x, ok := m.GetHostRewriteParams().(*GlobalSpecType_AutoHostRewrite); ok {
		return x.AutoHostRewrite
	}
	return nil
}

func (m *GlobalSpecType) GetHostRewrite() string {
	if x, ok := m.GetHostRewriteParams().(*GlobalSpecType_HostRewrite); ok {
		return x.HostRewrite
	}
	return ""
}

func (m *GlobalSpecType) GetDisableHostRewrite() *schema.Empty {
	if x, ok := m.GetHostRewriteParams().(*GlobalSpecType_DisableHostRewrite); ok {
		return x.DisableHostRewrite
	}
	return nil
}

func (m *GlobalSpecType) GetRoutes() []*RouteType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *GlobalSpecType) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *GlobalSpecType) GetDisableWaf() *schema.Empty {
	if x, ok := m.GetWafChoice().(*GlobalSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *GlobalSpecType) GetWaf() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GlobalSpecType_Waf); ok {
		return x.Waf
	}
	return nil
}

func (m *GlobalSpecType) GetWafRule() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GlobalSpecType_WafRule); ok {
		return x.WafRule
	}
	return nil
}

func (m *GlobalSpecType) GetAppFirewall() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GlobalSpecType_AppFirewall); ok {
		return x.AppFirewall
	}
	return nil
}

func (m *GlobalSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *GlobalSpecType) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetCaptchaChallenge() *virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetPolicyBasedChallenge() *PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*GlobalSpecType_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *GlobalSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *GlobalSpecType) GetUserIdClientIp() *schema.Empty {
	if x, ok := m.GetUserIdChoice().(*GlobalSpecType_UserIdClientIp); ok {
		return x.UserIdClientIp
	}
	return nil
}

func (m *GlobalSpecType) GetUserIdentification() *views.ObjectRefType {
	if x, ok := m.GetUserIdChoice().(*GlobalSpecType_UserIdentification); ok {
		return x.UserIdentification
	}
	return nil
}

func (m *GlobalSpecType) GetDisableRateLimit() *schema.Empty {
	if x, ok := m.GetRateLimitChoice().(*GlobalSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *GlobalSpecType) GetApiRateLimit() *APIRateLimit {
	if x, ok := m.GetRateLimitChoice().(*GlobalSpecType_ApiRateLimit); ok {
		return x.ApiRateLimit
	}
	return nil
}

func (m *GlobalSpecType) GetRateLimit() *RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*GlobalSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetMaliciousUserMitigation() *views.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *GlobalSpecType) GetWafExclusionRules() []*policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *GlobalSpecType) GetDataGuardRules() []*policy.SimpleDataGuardRule {
	if m != nil {
		return m.DataGuardRules
	}
	return nil
}

func (m *GlobalSpecType) GetBlockedClients() []*SimpleClientSrcRule {
	if m != nil {
		return m.BlockedClients
	}
	return nil
}

func (m *GlobalSpecType) GetTrustedClients() []*SimpleClientSrcRule {
	if m != nil {
		return m.TrustedClients
	}
	return nil
}

func (m *GlobalSpecType) GetDdosMitigationRules() []*DDoSMitigationRule {
	if m != nil {
		return m.DdosMitigationRules
	}
	return nil
}

func (m *GlobalSpecType) GetServicePoliciesFromNamespace() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GlobalSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *GlobalSpecType) GetNoServicePolicies() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GlobalSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *GlobalSpecType) GetActiveServicePolicies() *ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*GlobalSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *GlobalSpecType) GetRoundRobin() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_RoundRobin); ok {
		return x.RoundRobin
	}
	return nil
}

func (m *GlobalSpecType) GetLeastActive() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_LeastActive); ok {
		return x.LeastActive
	}
	return nil
}

func (m *GlobalSpecType) GetRandom() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_Random); ok {
		return x.Random
	}
	return nil
}

func (m *GlobalSpecType) GetSourceIpStickiness() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_SourceIpStickiness); ok {
		return x.SourceIpStickiness
	}
	return nil
}

func (m *GlobalSpecType) GetCookieStickiness() *route.CookieForHashing {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_CookieStickiness); ok {
		return x.CookieStickiness
	}
	return nil
}

func (m *GlobalSpecType) GetRingHash() *HashPolicyListType {
	if x, ok := m.GetHashPolicyChoice().(*GlobalSpecType_RingHash); ok {
		return x.RingHash
	}
	return nil
}

func (m *GlobalSpecType) GetSingleLbApp() *SingleLoadBalancerAppSetting {
	if x, ok := m.GetMlConfigChoice().(*GlobalSpecType_SingleLbApp); ok {
		return x.SingleLbApp
	}
	return nil
}

func (m *GlobalSpecType) GetMultiLbApp() *schema.Empty {
	if x, ok := m.GetMlConfigChoice().(*GlobalSpecType_MultiLbApp); ok {
		return x.MultiLbApp
	}
	return nil
}

func (m *GlobalSpecType) GetDisableBotDefense() *schema.Empty {
	if x, ok := m.GetBotDefenseChoice().(*GlobalSpecType_DisableBotDefense); ok {
		return x.DisableBotDefense
	}
	return nil
}

func (m *GlobalSpecType) GetBotDefense() *ShapeBotDefenseType {
	if x, ok := m.GetBotDefenseChoice().(*GlobalSpecType_BotDefense); ok {
		return x.BotDefense
	}
	return nil
}

func (m *GlobalSpecType) GetDisableApiDefinition() *schema.Empty {
	if x, ok := m.GetApiDefinitionChoice().(*GlobalSpecType_DisableApiDefinition); ok {
		return x.DisableApiDefinition
	}
	return nil
}

func (m *GlobalSpecType) GetApiDefinition() *views.ObjectRefType {
	if x, ok := m.GetApiDefinitionChoice().(*GlobalSpecType_ApiDefinition); ok {
		return x.ApiDefinition
	}
	return nil
}

func (m *GlobalSpecType) GetApiDefinitions() *ApiDefinitionList {
	if x, ok := m.GetApiDefinitionChoice().(*GlobalSpecType_ApiDefinitions); ok {
		return x.ApiDefinitions
	}
	return nil
}

func (m *GlobalSpecType) GetDisableIpReputation() *schema.Empty {
	if x, ok := m.GetIpReputationChoice().(*GlobalSpecType_DisableIpReputation); ok {
		return x.DisableIpReputation
	}
	return nil
}

func (m *GlobalSpecType) GetEnableIpReputation() *IPThreatCategoryListType {
	if x, ok := m.GetIpReputationChoice().(*GlobalSpecType_EnableIpReputation); ok {
		return x.EnableIpReputation
	}
	return nil
}

func (m *GlobalSpecType) GetViewInternal() *views.ObjectRefType {
	if m != nil {
		return m.ViewInternal
	}
	return nil
}

func (m *GlobalSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GlobalSpecType) GetDnsInfo() []*virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

func (m *GlobalSpecType) GetState() virtual_host.VirtualHostState {
	if m != nil {
		return m.State
	}
	return virtual_host.VIRTUAL_HOST_READY
}

// Deprecated: Do not use.
func (m *GlobalSpecType) GetAutoCertState() virtual_host.CertificationState {
	if m != nil {
		return m.AutoCertState
	}
	return virtual_host.AutoCertDisabled
}

func (m *GlobalSpecType) GetAutoCertInfo() *virtual_host.AutoCertInfoType {
	if m != nil {
		return m.AutoCertInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GlobalSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GlobalSpecType_Http)(nil),
		(*GlobalSpecType_HttpsAutoCert)(nil),
		(*GlobalSpecType_Https)(nil),
		(*GlobalSpecType_DoNotAdvertise)(nil),
		(*GlobalSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*GlobalSpecType_AdvertiseOnPublic)(nil),
		(*GlobalSpecType_AdvertiseCustom)(nil),
		(*GlobalSpecType_AutoHostRewrite)(nil),
		(*GlobalSpecType_HostRewrite)(nil),
		(*GlobalSpecType_DisableHostRewrite)(nil),
		(*GlobalSpecType_DisableWaf)(nil),
		(*GlobalSpecType_Waf)(nil),
		(*GlobalSpecType_WafRule)(nil),
		(*GlobalSpecType_AppFirewall)(nil),
		(*GlobalSpecType_NoChallenge)(nil),
		(*GlobalSpecType_JsChallenge)(nil),
		(*GlobalSpecType_CaptchaChallenge)(nil),
		(*GlobalSpecType_PolicyBasedChallenge)(nil),
		(*GlobalSpecType_UserIdClientIp)(nil),
		(*GlobalSpecType_UserIdentification)(nil),
		(*GlobalSpecType_DisableRateLimit)(nil),
		(*GlobalSpecType_ApiRateLimit)(nil),
		(*GlobalSpecType_RateLimit)(nil),
		(*GlobalSpecType_ServicePoliciesFromNamespace)(nil),
		(*GlobalSpecType_NoServicePolicies)(nil),
		(*GlobalSpecType_ActiveServicePolicies)(nil),
		(*GlobalSpecType_RoundRobin)(nil),
		(*GlobalSpecType_LeastActive)(nil),
		(*GlobalSpecType_Random)(nil),
		(*GlobalSpecType_SourceIpStickiness)(nil),
		(*GlobalSpecType_CookieStickiness)(nil),
		(*GlobalSpecType_RingHash)(nil),
		(*GlobalSpecType_SingleLbApp)(nil),
		(*GlobalSpecType_MultiLbApp)(nil),
		(*GlobalSpecType_DisableBotDefense)(nil),
		(*GlobalSpecType_BotDefense)(nil),
		(*GlobalSpecType_DisableApiDefinition)(nil),
		(*GlobalSpecType_ApiDefinition)(nil),
		(*GlobalSpecType_ApiDefinitions)(nil),
		(*GlobalSpecType_DisableIpReputation)(nil),
		(*GlobalSpecType_EnableIpReputation)(nil),
	}
}

// CreateSpecType
//
// x-displayName: "Create HTTP Loadbalancer"
// Shape of the HTTP loadbalancer specification
type CreateSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*CreateSpecType_Http
	//	*CreateSpecType_HttpsAutoCert
	//	*CreateSpecType_Https
	LoadbalancerType isCreateSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*CreateSpecType_DoNotAdvertise
	//	*CreateSpecType_AdvertiseOnPublicDefaultVip
	//	*CreateSpecType_AdvertiseOnPublic
	//	*CreateSpecType_AdvertiseCustom
	AdvertiseChoice   isCreateSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	DefaultRoutePools []*views.OriginPoolWithWeight    `protobuf:"bytes,6,rep,name=default_route_pools,json=defaultRoutePools,proto3" json:"default_route_pools,omitempty"`
	Routes            []*RouteType                     `protobuf:"bytes,7,rep,name=routes,proto3" json:"routes,omitempty"`
	CorsPolicy        *schema.CorsPolicy               `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	// Types that are valid to be assigned to WafChoice:
	//	*CreateSpecType_DisableWaf
	//	*CreateSpecType_Waf
	//	*CreateSpecType_WafRule
	//	*CreateSpecType_AppFirewall
	WafChoice   isCreateSpecType_WafChoice `protobuf_oneof:"waf_choice"`
	AddLocation bool                       `protobuf:"varint,17,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Types that are valid to be assigned to ChallengeType:
	//	*CreateSpecType_NoChallenge
	//	*CreateSpecType_JsChallenge
	//	*CreateSpecType_CaptchaChallenge
	//	*CreateSpecType_PolicyBasedChallenge
	ChallengeType isCreateSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	MoreOption    *AdvancedOptionsType           `protobuf:"bytes,19,opt,name=more_option,json=moreOption,proto3" json:"more_option,omitempty"`
	// Types that are valid to be assigned to UserIdChoice:
	//	*CreateSpecType_UserIdClientIp
	//	*CreateSpecType_UserIdentification
	UserIdChoice isCreateSpecType_UserIdChoice `protobuf_oneof:"user_id_choice"`
	// Types that are valid to be assigned to RateLimitChoice:
	//	*CreateSpecType_DisableRateLimit
	//	*CreateSpecType_ApiRateLimit
	//	*CreateSpecType_RateLimit
	RateLimitChoice         isCreateSpecType_RateLimitChoice `protobuf_oneof:"rate_limit_choice"`
	MaliciousUserMitigation *views.ObjectRefType             `protobuf:"bytes,32,opt,name=malicious_user_mitigation,json=maliciousUserMitigation,proto3" json:"malicious_user_mitigation,omitempty"`
	WafExclusionRules       []*policy.SimpleWafExclusionRule `protobuf:"bytes,33,rep,name=waf_exclusion_rules,json=wafExclusionRules,proto3" json:"waf_exclusion_rules,omitempty"`
	DataGuardRules          []*policy.SimpleDataGuardRule    `protobuf:"bytes,63,rep,name=data_guard_rules,json=dataGuardRules,proto3" json:"data_guard_rules,omitempty"`
	BlockedClients          []*SimpleClientSrcRule           `protobuf:"bytes,34,rep,name=blocked_clients,json=blockedClients,proto3" json:"blocked_clients,omitempty"`
	TrustedClients          []*SimpleClientSrcRule           `protobuf:"bytes,35,rep,name=trusted_clients,json=trustedClients,proto3" json:"trusted_clients,omitempty"`
	DdosMitigationRules     []*DDoSMitigationRule            `protobuf:"bytes,37,rep,name=ddos_mitigation_rules,json=ddosMitigationRules,proto3" json:"ddos_mitigation_rules,omitempty"`
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*CreateSpecType_ServicePoliciesFromNamespace
	//	*CreateSpecType_NoServicePolicies
	//	*CreateSpecType_ActiveServicePolicies
	ServicePolicyChoice isCreateSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*CreateSpecType_RoundRobin
	//	*CreateSpecType_LeastActive
	//	*CreateSpecType_Random
	//	*CreateSpecType_SourceIpStickiness
	//	*CreateSpecType_CookieStickiness
	//	*CreateSpecType_RingHash
	HashPolicyChoice isCreateSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	// Types that are valid to be assigned to MlConfigChoice:
	//	*CreateSpecType_SingleLbApp
	//	*CreateSpecType_MultiLbApp
	MlConfigChoice isCreateSpecType_MlConfigChoice `protobuf_oneof:"ml_config_choice"`
	// Types that are valid to be assigned to BotDefenseChoice:
	//	*CreateSpecType_DisableBotDefense
	//	*CreateSpecType_BotDefense
	BotDefenseChoice isCreateSpecType_BotDefenseChoice `protobuf_oneof:"bot_defense_choice"`
	// Types that are valid to be assigned to ApiDefinitionChoice:
	//	*CreateSpecType_DisableApiDefinition
	//	*CreateSpecType_ApiDefinition
	//	*CreateSpecType_ApiDefinitions
	ApiDefinitionChoice isCreateSpecType_ApiDefinitionChoice `protobuf_oneof:"api_definition_choice"`
	// Types that are valid to be assigned to IpReputationChoice:
	//	*CreateSpecType_DisableIpReputation
	//	*CreateSpecType_EnableIpReputation
	IpReputationChoice isCreateSpecType_IpReputationChoice `protobuf_oneof:"ip_reputation_choice"`
}

func (m *CreateSpecType) Reset()      { *m = CreateSpecType{} }
func (*CreateSpecType) ProtoMessage() {}
func (*CreateSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{43}
}
func (m *CreateSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpecType.Merge(m, src)
}
func (m *CreateSpecType) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpecType proto.InternalMessageInfo

type isCreateSpecType_LoadbalancerType interface {
	isCreateSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_AdvertiseChoice interface {
	isCreateSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_WafChoice interface {
	isCreateSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ChallengeType interface {
	isCreateSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_UserIdChoice interface {
	isCreateSpecType_UserIdChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_RateLimitChoice interface {
	isCreateSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ServicePolicyChoice interface {
	isCreateSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_HashPolicyChoice interface {
	isCreateSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_MlConfigChoice interface {
	isCreateSpecType_MlConfigChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_BotDefenseChoice interface {
	isCreateSpecType_BotDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_ApiDefinitionChoice interface {
	isCreateSpecType_ApiDefinitionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isCreateSpecType_IpReputationChoice interface {
	isCreateSpecType_IpReputationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSpecType_Http struct {
	Http *ProxyTypeHttp `protobuf:"bytes,2,opt,name=http,proto3,oneof" json:"http,omitempty"`
}
type CreateSpecType_HttpsAutoCert struct {
	HttpsAutoCert *ProxyTypeHttpsAutoCerts `protobuf:"bytes,27,opt,name=https_auto_cert,json=httpsAutoCert,proto3,oneof" json:"https_auto_cert,omitempty"`
}
type CreateSpecType_Https struct {
	Https *ProxyTypeHttps `protobuf:"bytes,3,opt,name=https,proto3,oneof" json:"https,omitempty"`
}
type CreateSpecType_DoNotAdvertise struct {
	DoNotAdvertise *schema.Empty `protobuf:"bytes,12,opt,name=do_not_advertise,json=doNotAdvertise,proto3,oneof" json:"do_not_advertise,omitempty"`
}
type CreateSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,13,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type CreateSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,4,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type CreateSpecType_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}
type CreateSpecType_DisableWaf struct {
	DisableWaf *schema.Empty `protobuf:"bytes,11,opt,name=disable_waf,json=disableWaf,proto3,oneof" json:"disable_waf,omitempty"`
}
type CreateSpecType_Waf struct {
	Waf *views.ObjectRefType `protobuf:"bytes,9,opt,name=waf,proto3,oneof" json:"waf,omitempty"`
}
type CreateSpecType_WafRule struct {
	WafRule *views.ObjectRefType `protobuf:"bytes,10,opt,name=waf_rule,json=wafRule,proto3,oneof" json:"waf_rule,omitempty"`
}
type CreateSpecType_AppFirewall struct {
	AppFirewall *views.ObjectRefType `protobuf:"bytes,52,opt,name=app_firewall,json=appFirewall,proto3,oneof" json:"app_firewall,omitempty"`
}
type CreateSpecType_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,26,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type CreateSpecType_JsChallenge struct {
	JsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,18,opt,name=js_challenge,json=jsChallenge,proto3,oneof" json:"js_challenge,omitempty"`
}
type CreateSpecType_CaptchaChallenge struct {
	CaptchaChallenge *virtual_host.CaptchaChallengeType `protobuf:"bytes,24,opt,name=captcha_challenge,json=captchaChallenge,proto3,oneof" json:"captcha_challenge,omitempty"`
}
type CreateSpecType_PolicyBasedChallenge struct {
	PolicyBasedChallenge *PolicyBasedChallenge `protobuf:"bytes,51,opt,name=policy_based_challenge,json=policyBasedChallenge,proto3,oneof" json:"policy_based_challenge,omitempty"`
}
type CreateSpecType_UserIdClientIp struct {
	UserIdClientIp *schema.Empty `protobuf:"bytes,60,opt,name=user_id_client_ip,json=userIdClientIp,proto3,oneof" json:"user_id_client_ip,omitempty"`
}
type CreateSpecType_UserIdentification struct {
	UserIdentification *views.ObjectRefType `protobuf:"bytes,20,opt,name=user_identification,json=userIdentification,proto3,oneof" json:"user_identification,omitempty"`
}
type CreateSpecType_DisableRateLimit struct {
	DisableRateLimit *schema.Empty `protobuf:"bytes,22,opt,name=disable_rate_limit,json=disableRateLimit,proto3,oneof" json:"disable_rate_limit,omitempty"`
}
type CreateSpecType_ApiRateLimit struct {
	ApiRateLimit *APIRateLimit `protobuf:"bytes,68,opt,name=api_rate_limit,json=apiRateLimit,proto3,oneof" json:"api_rate_limit,omitempty"`
}
type CreateSpecType_RateLimit struct {
	RateLimit *RateLimitConfigType `protobuf:"bytes,23,opt,name=rate_limit,json=rateLimit,proto3,oneof" json:"rate_limit,omitempty"`
}
type CreateSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *schema.Empty `protobuf:"bytes,41,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,proto3,oneof" json:"service_policies_from_namespace,omitempty"`
}
type CreateSpecType_NoServicePolicies struct {
	NoServicePolicies *schema.Empty `protobuf:"bytes,42,opt,name=no_service_policies,json=noServicePolicies,proto3,oneof" json:"no_service_policies,omitempty"`
}
type CreateSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *ServicePolicyList `protobuf:"bytes,43,opt,name=active_service_policies,json=activeServicePolicies,proto3,oneof" json:"active_service_policies,omitempty"`
}
type CreateSpecType_RoundRobin struct {
	RoundRobin *schema.Empty `protobuf:"bytes,45,opt,name=round_robin,json=roundRobin,proto3,oneof" json:"round_robin,omitempty"`
}
type CreateSpecType_LeastActive struct {
	LeastActive *schema.Empty `protobuf:"bytes,46,opt,name=least_active,json=leastActive,proto3,oneof" json:"least_active,omitempty"`
}
type CreateSpecType_Random struct {
	Random *schema.Empty `protobuf:"bytes,47,opt,name=random,proto3,oneof" json:"random,omitempty"`
}
type CreateSpecType_SourceIpStickiness struct {
	SourceIpStickiness *schema.Empty `protobuf:"bytes,48,opt,name=source_ip_stickiness,json=sourceIpStickiness,proto3,oneof" json:"source_ip_stickiness,omitempty"`
}
type CreateSpecType_CookieStickiness struct {
	CookieStickiness *route.CookieForHashing `protobuf:"bytes,49,opt,name=cookie_stickiness,json=cookieStickiness,proto3,oneof" json:"cookie_stickiness,omitempty"`
}
type CreateSpecType_RingHash struct {
	RingHash *HashPolicyListType `protobuf:"bytes,50,opt,name=ring_hash,json=ringHash,proto3,oneof" json:"ring_hash,omitempty"`
}
type CreateSpecType_SingleLbApp struct {
	SingleLbApp *SingleLoadBalancerAppSetting `protobuf:"bytes,54,opt,name=single_lb_app,json=singleLbApp,proto3,oneof" json:"single_lb_app,omitempty"`
}
type CreateSpecType_MultiLbApp struct {
	MultiLbApp *schema.Empty `protobuf:"bytes,55,opt,name=multi_lb_app,json=multiLbApp,proto3,oneof" json:"multi_lb_app,omitempty"`
}
type CreateSpecType_DisableBotDefense struct {
	DisableBotDefense *schema.Empty `protobuf:"bytes,57,opt,name=disable_bot_defense,json=disableBotDefense,proto3,oneof" json:"disable_bot_defense,omitempty"`
}
type CreateSpecType_BotDefense struct {
	BotDefense *ShapeBotDefenseType `protobuf:"bytes,58,opt,name=bot_defense,json=botDefense,proto3,oneof" json:"bot_defense,omitempty"`
}
type CreateSpecType_DisableApiDefinition struct {
	DisableApiDefinition *schema.Empty `protobuf:"bytes,70,opt,name=disable_api_definition,json=disableApiDefinition,proto3,oneof" json:"disable_api_definition,omitempty"`
}
type CreateSpecType_ApiDefinition struct {
	ApiDefinition *views.ObjectRefType `protobuf:"bytes,71,opt,name=api_definition,json=apiDefinition,proto3,oneof" json:"api_definition,omitempty"`
}
type CreateSpecType_ApiDefinitions struct {
	ApiDefinitions *ApiDefinitionList `protobuf:"bytes,61,opt,name=api_definitions,json=apiDefinitions,proto3,oneof" json:"api_definitions,omitempty"`
}
type CreateSpecType_DisableIpReputation struct {
	DisableIpReputation *schema.Empty `protobuf:"bytes,65,opt,name=disable_ip_reputation,json=disableIpReputation,proto3,oneof" json:"disable_ip_reputation,omitempty"`
}
type CreateSpecType_EnableIpReputation struct {
	EnableIpReputation *IPThreatCategoryListType `protobuf:"bytes,66,opt,name=enable_ip_reputation,json=enableIpReputation,proto3,oneof" json:"enable_ip_reputation,omitempty"`
}

func (*CreateSpecType_Http) isCreateSpecType_LoadbalancerType()                            {}
func (*CreateSpecType_HttpsAutoCert) isCreateSpecType_LoadbalancerType()                   {}
func (*CreateSpecType_Https) isCreateSpecType_LoadbalancerType()                           {}
func (*CreateSpecType_DoNotAdvertise) isCreateSpecType_AdvertiseChoice()                   {}
func (*CreateSpecType_AdvertiseOnPublicDefaultVip) isCreateSpecType_AdvertiseChoice()      {}
func (*CreateSpecType_AdvertiseOnPublic) isCreateSpecType_AdvertiseChoice()                {}
func (*CreateSpecType_AdvertiseCustom) isCreateSpecType_AdvertiseChoice()                  {}
func (*CreateSpecType_DisableWaf) isCreateSpecType_WafChoice()                             {}
func (*CreateSpecType_Waf) isCreateSpecType_WafChoice()                                    {}
func (*CreateSpecType_WafRule) isCreateSpecType_WafChoice()                                {}
func (*CreateSpecType_AppFirewall) isCreateSpecType_WafChoice()                            {}
func (*CreateSpecType_NoChallenge) isCreateSpecType_ChallengeType()                        {}
func (*CreateSpecType_JsChallenge) isCreateSpecType_ChallengeType()                        {}
func (*CreateSpecType_CaptchaChallenge) isCreateSpecType_ChallengeType()                   {}
func (*CreateSpecType_PolicyBasedChallenge) isCreateSpecType_ChallengeType()               {}
func (*CreateSpecType_UserIdClientIp) isCreateSpecType_UserIdChoice()                      {}
func (*CreateSpecType_UserIdentification) isCreateSpecType_UserIdChoice()                  {}
func (*CreateSpecType_DisableRateLimit) isCreateSpecType_RateLimitChoice()                 {}
func (*CreateSpecType_ApiRateLimit) isCreateSpecType_RateLimitChoice()                     {}
func (*CreateSpecType_RateLimit) isCreateSpecType_RateLimitChoice()                        {}
func (*CreateSpecType_ServicePoliciesFromNamespace) isCreateSpecType_ServicePolicyChoice() {}
func (*CreateSpecType_NoServicePolicies) isCreateSpecType_ServicePolicyChoice()            {}
func (*CreateSpecType_ActiveServicePolicies) isCreateSpecType_ServicePolicyChoice()        {}
func (*CreateSpecType_RoundRobin) isCreateSpecType_HashPolicyChoice()                      {}
func (*CreateSpecType_LeastActive) isCreateSpecType_HashPolicyChoice()                     {}
func (*CreateSpecType_Random) isCreateSpecType_HashPolicyChoice()                          {}
func (*CreateSpecType_SourceIpStickiness) isCreateSpecType_HashPolicyChoice()              {}
func (*CreateSpecType_CookieStickiness) isCreateSpecType_HashPolicyChoice()                {}
func (*CreateSpecType_RingHash) isCreateSpecType_HashPolicyChoice()                        {}
func (*CreateSpecType_SingleLbApp) isCreateSpecType_MlConfigChoice()                       {}
func (*CreateSpecType_MultiLbApp) isCreateSpecType_MlConfigChoice()                        {}
func (*CreateSpecType_DisableBotDefense) isCreateSpecType_BotDefenseChoice()               {}
func (*CreateSpecType_BotDefense) isCreateSpecType_BotDefenseChoice()                      {}
func (*CreateSpecType_DisableApiDefinition) isCreateSpecType_ApiDefinitionChoice()         {}
func (*CreateSpecType_ApiDefinition) isCreateSpecType_ApiDefinitionChoice()                {}
func (*CreateSpecType_ApiDefinitions) isCreateSpecType_ApiDefinitionChoice()               {}
func (*CreateSpecType_DisableIpReputation) isCreateSpecType_IpReputationChoice()           {}
func (*CreateSpecType_EnableIpReputation) isCreateSpecType_IpReputationChoice()            {}

func (m *CreateSpecType) GetLoadbalancerType() isCreateSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *CreateSpecType) GetAdvertiseChoice() isCreateSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *CreateSpecType) GetWafChoice() isCreateSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *CreateSpecType) GetChallengeType() isCreateSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *CreateSpecType) GetUserIdChoice() isCreateSpecType_UserIdChoice {
	if m != nil {
		return m.UserIdChoice
	}
	return nil
}
func (m *CreateSpecType) GetRateLimitChoice() isCreateSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}
func (m *CreateSpecType) GetServicePolicyChoice() isCreateSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}
func (m *CreateSpecType) GetHashPolicyChoice() isCreateSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *CreateSpecType) GetMlConfigChoice() isCreateSpecType_MlConfigChoice {
	if m != nil {
		return m.MlConfigChoice
	}
	return nil
}
func (m *CreateSpecType) GetBotDefenseChoice() isCreateSpecType_BotDefenseChoice {
	if m != nil {
		return m.BotDefenseChoice
	}
	return nil
}
func (m *CreateSpecType) GetApiDefinitionChoice() isCreateSpecType_ApiDefinitionChoice {
	if m != nil {
		return m.ApiDefinitionChoice
	}
	return nil
}
func (m *CreateSpecType) GetIpReputationChoice() isCreateSpecType_IpReputationChoice {
	if m != nil {
		return m.IpReputationChoice
	}
	return nil
}

func (m *CreateSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *CreateSpecType) GetHttp() *ProxyTypeHttp {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *CreateSpecType) GetHttpsAutoCert() *ProxyTypeHttpsAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *CreateSpecType) GetHttps() *ProxyTypeHttps {
	if x, ok := m.GetLoadbalancerType().(*CreateSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *CreateSpecType) GetDoNotAdvertise() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *CreateSpecType) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*CreateSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *CreateSpecType) GetDefaultRoutePools() []*views.OriginPoolWithWeight {
	if m != nil {
		return m.DefaultRoutePools
	}
	return nil
}

func (m *CreateSpecType) GetRoutes() []*RouteType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *CreateSpecType) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *CreateSpecType) GetDisableWaf() *schema.Empty {
	if x, ok := m.GetWafChoice().(*CreateSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *CreateSpecType) GetWaf() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*CreateSpecType_Waf); ok {
		return x.Waf
	}
	return nil
}

func (m *CreateSpecType) GetWafRule() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*CreateSpecType_WafRule); ok {
		return x.WafRule
	}
	return nil
}

func (m *CreateSpecType) GetAppFirewall() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*CreateSpecType_AppFirewall); ok {
		return x.AppFirewall
	}
	return nil
}

func (m *CreateSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *CreateSpecType) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeType().(*CreateSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *CreateSpecType) GetJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*CreateSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *CreateSpecType) GetCaptchaChallenge() *virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*CreateSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *CreateSpecType) GetPolicyBasedChallenge() *PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*CreateSpecType_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *CreateSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *CreateSpecType) GetUserIdClientIp() *schema.Empty {
	if x, ok := m.GetUserIdChoice().(*CreateSpecType_UserIdClientIp); ok {
		return x.UserIdClientIp
	}
	return nil
}

func (m *CreateSpecType) GetUserIdentification() *views.ObjectRefType {
	if x, ok := m.GetUserIdChoice().(*CreateSpecType_UserIdentification); ok {
		return x.UserIdentification
	}
	return nil
}

func (m *CreateSpecType) GetDisableRateLimit() *schema.Empty {
	if x, ok := m.GetRateLimitChoice().(*CreateSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *CreateSpecType) GetApiRateLimit() *APIRateLimit {
	if x, ok := m.GetRateLimitChoice().(*CreateSpecType_ApiRateLimit); ok {
		return x.ApiRateLimit
	}
	return nil
}

func (m *CreateSpecType) GetRateLimit() *RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*CreateSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *CreateSpecType) GetMaliciousUserMitigation() *views.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *CreateSpecType) GetWafExclusionRules() []*policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *CreateSpecType) GetDataGuardRules() []*policy.SimpleDataGuardRule {
	if m != nil {
		return m.DataGuardRules
	}
	return nil
}

func (m *CreateSpecType) GetBlockedClients() []*SimpleClientSrcRule {
	if m != nil {
		return m.BlockedClients
	}
	return nil
}

func (m *CreateSpecType) GetTrustedClients() []*SimpleClientSrcRule {
	if m != nil {
		return m.TrustedClients
	}
	return nil
}

func (m *CreateSpecType) GetDdosMitigationRules() []*DDoSMitigationRule {
	if m != nil {
		return m.DdosMitigationRules
	}
	return nil
}

func (m *CreateSpecType) GetServicePoliciesFromNamespace() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*CreateSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *CreateSpecType) GetNoServicePolicies() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*CreateSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *CreateSpecType) GetActiveServicePolicies() *ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*CreateSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *CreateSpecType) GetRoundRobin() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_RoundRobin); ok {
		return x.RoundRobin
	}
	return nil
}

func (m *CreateSpecType) GetLeastActive() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_LeastActive); ok {
		return x.LeastActive
	}
	return nil
}

func (m *CreateSpecType) GetRandom() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_Random); ok {
		return x.Random
	}
	return nil
}

func (m *CreateSpecType) GetSourceIpStickiness() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_SourceIpStickiness); ok {
		return x.SourceIpStickiness
	}
	return nil
}

func (m *CreateSpecType) GetCookieStickiness() *route.CookieForHashing {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_CookieStickiness); ok {
		return x.CookieStickiness
	}
	return nil
}

func (m *CreateSpecType) GetRingHash() *HashPolicyListType {
	if x, ok := m.GetHashPolicyChoice().(*CreateSpecType_RingHash); ok {
		return x.RingHash
	}
	return nil
}

func (m *CreateSpecType) GetSingleLbApp() *SingleLoadBalancerAppSetting {
	if x, ok := m.GetMlConfigChoice().(*CreateSpecType_SingleLbApp); ok {
		return x.SingleLbApp
	}
	return nil
}

func (m *CreateSpecType) GetMultiLbApp() *schema.Empty {
	if x, ok := m.GetMlConfigChoice().(*CreateSpecType_MultiLbApp); ok {
		return x.MultiLbApp
	}
	return nil
}

func (m *CreateSpecType) GetDisableBotDefense() *schema.Empty {
	if x, ok := m.GetBotDefenseChoice().(*CreateSpecType_DisableBotDefense); ok {
		return x.DisableBotDefense
	}
	return nil
}

func (m *CreateSpecType) GetBotDefense() *ShapeBotDefenseType {
	if x, ok := m.GetBotDefenseChoice().(*CreateSpecType_BotDefense); ok {
		return x.BotDefense
	}
	return nil
}

func (m *CreateSpecType) GetDisableApiDefinition() *schema.Empty {
	if x, ok := m.GetApiDefinitionChoice().(*CreateSpecType_DisableApiDefinition); ok {
		return x.DisableApiDefinition
	}
	return nil
}

func (m *CreateSpecType) GetApiDefinition() *views.ObjectRefType {
	if x, ok := m.GetApiDefinitionChoice().(*CreateSpecType_ApiDefinition); ok {
		return x.ApiDefinition
	}
	return nil
}

func (m *CreateSpecType) GetApiDefinitions() *ApiDefinitionList {
	if x, ok := m.GetApiDefinitionChoice().(*CreateSpecType_ApiDefinitions); ok {
		return x.ApiDefinitions
	}
	return nil
}

func (m *CreateSpecType) GetDisableIpReputation() *schema.Empty {
	if x, ok := m.GetIpReputationChoice().(*CreateSpecType_DisableIpReputation); ok {
		return x.DisableIpReputation
	}
	return nil
}

func (m *CreateSpecType) GetEnableIpReputation() *IPThreatCategoryListType {
	if x, ok := m.GetIpReputationChoice().(*CreateSpecType_EnableIpReputation); ok {
		return x.EnableIpReputation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSpecType_Http)(nil),
		(*CreateSpecType_HttpsAutoCert)(nil),
		(*CreateSpecType_Https)(nil),
		(*CreateSpecType_DoNotAdvertise)(nil),
		(*CreateSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*CreateSpecType_AdvertiseOnPublic)(nil),
		(*CreateSpecType_AdvertiseCustom)(nil),
		(*CreateSpecType_DisableWaf)(nil),
		(*CreateSpecType_Waf)(nil),
		(*CreateSpecType_WafRule)(nil),
		(*CreateSpecType_AppFirewall)(nil),
		(*CreateSpecType_NoChallenge)(nil),
		(*CreateSpecType_JsChallenge)(nil),
		(*CreateSpecType_CaptchaChallenge)(nil),
		(*CreateSpecType_PolicyBasedChallenge)(nil),
		(*CreateSpecType_UserIdClientIp)(nil),
		(*CreateSpecType_UserIdentification)(nil),
		(*CreateSpecType_DisableRateLimit)(nil),
		(*CreateSpecType_ApiRateLimit)(nil),
		(*CreateSpecType_RateLimit)(nil),
		(*CreateSpecType_ServicePoliciesFromNamespace)(nil),
		(*CreateSpecType_NoServicePolicies)(nil),
		(*CreateSpecType_ActiveServicePolicies)(nil),
		(*CreateSpecType_RoundRobin)(nil),
		(*CreateSpecType_LeastActive)(nil),
		(*CreateSpecType_Random)(nil),
		(*CreateSpecType_SourceIpStickiness)(nil),
		(*CreateSpecType_CookieStickiness)(nil),
		(*CreateSpecType_RingHash)(nil),
		(*CreateSpecType_SingleLbApp)(nil),
		(*CreateSpecType_MultiLbApp)(nil),
		(*CreateSpecType_DisableBotDefense)(nil),
		(*CreateSpecType_BotDefense)(nil),
		(*CreateSpecType_DisableApiDefinition)(nil),
		(*CreateSpecType_ApiDefinition)(nil),
		(*CreateSpecType_ApiDefinitions)(nil),
		(*CreateSpecType_DisableIpReputation)(nil),
		(*CreateSpecType_EnableIpReputation)(nil),
	}
}

// ReplaceSpecType
//
// x-displayName: "Replace HTTP Loadbalancer"
// Shape of the HTTP loadbalancer specification
type ReplaceSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*ReplaceSpecType_Http
	//	*ReplaceSpecType_HttpsAutoCert
	//	*ReplaceSpecType_Https
	LoadbalancerType isReplaceSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*ReplaceSpecType_DoNotAdvertise
	//	*ReplaceSpecType_AdvertiseOnPublicDefaultVip
	//	*ReplaceSpecType_AdvertiseOnPublic
	//	*ReplaceSpecType_AdvertiseCustom
	AdvertiseChoice   isReplaceSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	DefaultRoutePools []*views.OriginPoolWithWeight     `protobuf:"bytes,6,rep,name=default_route_pools,json=defaultRoutePools,proto3" json:"default_route_pools,omitempty"`
	Routes            []*RouteType                      `protobuf:"bytes,7,rep,name=routes,proto3" json:"routes,omitempty"`
	CorsPolicy        *schema.CorsPolicy                `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	// Types that are valid to be assigned to WafChoice:
	//	*ReplaceSpecType_DisableWaf
	//	*ReplaceSpecType_Waf
	//	*ReplaceSpecType_WafRule
	//	*ReplaceSpecType_AppFirewall
	WafChoice   isReplaceSpecType_WafChoice `protobuf_oneof:"waf_choice"`
	AddLocation bool                        `protobuf:"varint,17,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Types that are valid to be assigned to ChallengeType:
	//	*ReplaceSpecType_NoChallenge
	//	*ReplaceSpecType_JsChallenge
	//	*ReplaceSpecType_CaptchaChallenge
	//	*ReplaceSpecType_PolicyBasedChallenge
	ChallengeType isReplaceSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	MoreOption    *AdvancedOptionsType            `protobuf:"bytes,19,opt,name=more_option,json=moreOption,proto3" json:"more_option,omitempty"`
	// Types that are valid to be assigned to UserIdChoice:
	//	*ReplaceSpecType_UserIdClientIp
	//	*ReplaceSpecType_UserIdentification
	UserIdChoice isReplaceSpecType_UserIdChoice `protobuf_oneof:"user_id_choice"`
	// Types that are valid to be assigned to RateLimitChoice:
	//	*ReplaceSpecType_DisableRateLimit
	//	*ReplaceSpecType_ApiRateLimit
	//	*ReplaceSpecType_RateLimit
	RateLimitChoice         isReplaceSpecType_RateLimitChoice `protobuf_oneof:"rate_limit_choice"`
	MaliciousUserMitigation *views.ObjectRefType              `protobuf:"bytes,32,opt,name=malicious_user_mitigation,json=maliciousUserMitigation,proto3" json:"malicious_user_mitigation,omitempty"`
	WafExclusionRules       []*policy.SimpleWafExclusionRule  `protobuf:"bytes,33,rep,name=waf_exclusion_rules,json=wafExclusionRules,proto3" json:"waf_exclusion_rules,omitempty"`
	DataGuardRules          []*policy.SimpleDataGuardRule     `protobuf:"bytes,63,rep,name=data_guard_rules,json=dataGuardRules,proto3" json:"data_guard_rules,omitempty"`
	BlockedClients          []*SimpleClientSrcRule            `protobuf:"bytes,34,rep,name=blocked_clients,json=blockedClients,proto3" json:"blocked_clients,omitempty"`
	TrustedClients          []*SimpleClientSrcRule            `protobuf:"bytes,35,rep,name=trusted_clients,json=trustedClients,proto3" json:"trusted_clients,omitempty"`
	DdosMitigationRules     []*DDoSMitigationRule             `protobuf:"bytes,37,rep,name=ddos_mitigation_rules,json=ddosMitigationRules,proto3" json:"ddos_mitigation_rules,omitempty"`
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*ReplaceSpecType_ServicePoliciesFromNamespace
	//	*ReplaceSpecType_NoServicePolicies
	//	*ReplaceSpecType_ActiveServicePolicies
	ServicePolicyChoice isReplaceSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*ReplaceSpecType_RoundRobin
	//	*ReplaceSpecType_LeastActive
	//	*ReplaceSpecType_Random
	//	*ReplaceSpecType_SourceIpStickiness
	//	*ReplaceSpecType_CookieStickiness
	//	*ReplaceSpecType_RingHash
	HashPolicyChoice isReplaceSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	// Types that are valid to be assigned to MlConfigChoice:
	//	*ReplaceSpecType_SingleLbApp
	//	*ReplaceSpecType_MultiLbApp
	MlConfigChoice isReplaceSpecType_MlConfigChoice `protobuf_oneof:"ml_config_choice"`
	// Types that are valid to be assigned to BotDefenseChoice:
	//	*ReplaceSpecType_DisableBotDefense
	//	*ReplaceSpecType_BotDefense
	BotDefenseChoice isReplaceSpecType_BotDefenseChoice `protobuf_oneof:"bot_defense_choice"`
	// Types that are valid to be assigned to ApiDefinitionChoice:
	//	*ReplaceSpecType_DisableApiDefinition
	//	*ReplaceSpecType_ApiDefinition
	//	*ReplaceSpecType_ApiDefinitions
	ApiDefinitionChoice isReplaceSpecType_ApiDefinitionChoice `protobuf_oneof:"api_definition_choice"`
	// Types that are valid to be assigned to IpReputationChoice:
	//	*ReplaceSpecType_DisableIpReputation
	//	*ReplaceSpecType_EnableIpReputation
	IpReputationChoice isReplaceSpecType_IpReputationChoice `protobuf_oneof:"ip_reputation_choice"`
}

func (m *ReplaceSpecType) Reset()      { *m = ReplaceSpecType{} }
func (*ReplaceSpecType) ProtoMessage() {}
func (*ReplaceSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{44}
}
func (m *ReplaceSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplaceSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceSpecType.Merge(m, src)
}
func (m *ReplaceSpecType) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceSpecType proto.InternalMessageInfo

type isReplaceSpecType_LoadbalancerType interface {
	isReplaceSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_AdvertiseChoice interface {
	isReplaceSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_WafChoice interface {
	isReplaceSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ChallengeType interface {
	isReplaceSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_UserIdChoice interface {
	isReplaceSpecType_UserIdChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_RateLimitChoice interface {
	isReplaceSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ServicePolicyChoice interface {
	isReplaceSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_HashPolicyChoice interface {
	isReplaceSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_MlConfigChoice interface {
	isReplaceSpecType_MlConfigChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_BotDefenseChoice interface {
	isReplaceSpecType_BotDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_ApiDefinitionChoice interface {
	isReplaceSpecType_ApiDefinitionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isReplaceSpecType_IpReputationChoice interface {
	isReplaceSpecType_IpReputationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplaceSpecType_Http struct {
	Http *ProxyTypeHttp `protobuf:"bytes,2,opt,name=http,proto3,oneof" json:"http,omitempty"`
}
type ReplaceSpecType_HttpsAutoCert struct {
	HttpsAutoCert *ProxyTypeHttpsAutoCerts `protobuf:"bytes,27,opt,name=https_auto_cert,json=httpsAutoCert,proto3,oneof" json:"https_auto_cert,omitempty"`
}
type ReplaceSpecType_Https struct {
	Https *ProxyTypeHttps `protobuf:"bytes,3,opt,name=https,proto3,oneof" json:"https,omitempty"`
}
type ReplaceSpecType_DoNotAdvertise struct {
	DoNotAdvertise *schema.Empty `protobuf:"bytes,12,opt,name=do_not_advertise,json=doNotAdvertise,proto3,oneof" json:"do_not_advertise,omitempty"`
}
type ReplaceSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,13,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type ReplaceSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,4,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type ReplaceSpecType_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}
type ReplaceSpecType_DisableWaf struct {
	DisableWaf *schema.Empty `protobuf:"bytes,11,opt,name=disable_waf,json=disableWaf,proto3,oneof" json:"disable_waf,omitempty"`
}
type ReplaceSpecType_Waf struct {
	Waf *views.ObjectRefType `protobuf:"bytes,9,opt,name=waf,proto3,oneof" json:"waf,omitempty"`
}
type ReplaceSpecType_WafRule struct {
	WafRule *views.ObjectRefType `protobuf:"bytes,10,opt,name=waf_rule,json=wafRule,proto3,oneof" json:"waf_rule,omitempty"`
}
type ReplaceSpecType_AppFirewall struct {
	AppFirewall *views.ObjectRefType `protobuf:"bytes,52,opt,name=app_firewall,json=appFirewall,proto3,oneof" json:"app_firewall,omitempty"`
}
type ReplaceSpecType_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,26,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type ReplaceSpecType_JsChallenge struct {
	JsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,18,opt,name=js_challenge,json=jsChallenge,proto3,oneof" json:"js_challenge,omitempty"`
}
type ReplaceSpecType_CaptchaChallenge struct {
	CaptchaChallenge *virtual_host.CaptchaChallengeType `protobuf:"bytes,24,opt,name=captcha_challenge,json=captchaChallenge,proto3,oneof" json:"captcha_challenge,omitempty"`
}
type ReplaceSpecType_PolicyBasedChallenge struct {
	PolicyBasedChallenge *PolicyBasedChallenge `protobuf:"bytes,51,opt,name=policy_based_challenge,json=policyBasedChallenge,proto3,oneof" json:"policy_based_challenge,omitempty"`
}
type ReplaceSpecType_UserIdClientIp struct {
	UserIdClientIp *schema.Empty `protobuf:"bytes,60,opt,name=user_id_client_ip,json=userIdClientIp,proto3,oneof" json:"user_id_client_ip,omitempty"`
}
type ReplaceSpecType_UserIdentification struct {
	UserIdentification *views.ObjectRefType `protobuf:"bytes,20,opt,name=user_identification,json=userIdentification,proto3,oneof" json:"user_identification,omitempty"`
}
type ReplaceSpecType_DisableRateLimit struct {
	DisableRateLimit *schema.Empty `protobuf:"bytes,22,opt,name=disable_rate_limit,json=disableRateLimit,proto3,oneof" json:"disable_rate_limit,omitempty"`
}
type ReplaceSpecType_ApiRateLimit struct {
	ApiRateLimit *APIRateLimit `protobuf:"bytes,68,opt,name=api_rate_limit,json=apiRateLimit,proto3,oneof" json:"api_rate_limit,omitempty"`
}
type ReplaceSpecType_RateLimit struct {
	RateLimit *RateLimitConfigType `protobuf:"bytes,23,opt,name=rate_limit,json=rateLimit,proto3,oneof" json:"rate_limit,omitempty"`
}
type ReplaceSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *schema.Empty `protobuf:"bytes,41,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,proto3,oneof" json:"service_policies_from_namespace,omitempty"`
}
type ReplaceSpecType_NoServicePolicies struct {
	NoServicePolicies *schema.Empty `protobuf:"bytes,42,opt,name=no_service_policies,json=noServicePolicies,proto3,oneof" json:"no_service_policies,omitempty"`
}
type ReplaceSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *ServicePolicyList `protobuf:"bytes,43,opt,name=active_service_policies,json=activeServicePolicies,proto3,oneof" json:"active_service_policies,omitempty"`
}
type ReplaceSpecType_RoundRobin struct {
	RoundRobin *schema.Empty `protobuf:"bytes,45,opt,name=round_robin,json=roundRobin,proto3,oneof" json:"round_robin,omitempty"`
}
type ReplaceSpecType_LeastActive struct {
	LeastActive *schema.Empty `protobuf:"bytes,46,opt,name=least_active,json=leastActive,proto3,oneof" json:"least_active,omitempty"`
}
type ReplaceSpecType_Random struct {
	Random *schema.Empty `protobuf:"bytes,47,opt,name=random,proto3,oneof" json:"random,omitempty"`
}
type ReplaceSpecType_SourceIpStickiness struct {
	SourceIpStickiness *schema.Empty `protobuf:"bytes,48,opt,name=source_ip_stickiness,json=sourceIpStickiness,proto3,oneof" json:"source_ip_stickiness,omitempty"`
}
type ReplaceSpecType_CookieStickiness struct {
	CookieStickiness *route.CookieForHashing `protobuf:"bytes,49,opt,name=cookie_stickiness,json=cookieStickiness,proto3,oneof" json:"cookie_stickiness,omitempty"`
}
type ReplaceSpecType_RingHash struct {
	RingHash *HashPolicyListType `protobuf:"bytes,50,opt,name=ring_hash,json=ringHash,proto3,oneof" json:"ring_hash,omitempty"`
}
type ReplaceSpecType_SingleLbApp struct {
	SingleLbApp *SingleLoadBalancerAppSetting `protobuf:"bytes,54,opt,name=single_lb_app,json=singleLbApp,proto3,oneof" json:"single_lb_app,omitempty"`
}
type ReplaceSpecType_MultiLbApp struct {
	MultiLbApp *schema.Empty `protobuf:"bytes,55,opt,name=multi_lb_app,json=multiLbApp,proto3,oneof" json:"multi_lb_app,omitempty"`
}
type ReplaceSpecType_DisableBotDefense struct {
	DisableBotDefense *schema.Empty `protobuf:"bytes,57,opt,name=disable_bot_defense,json=disableBotDefense,proto3,oneof" json:"disable_bot_defense,omitempty"`
}
type ReplaceSpecType_BotDefense struct {
	BotDefense *ShapeBotDefenseType `protobuf:"bytes,58,opt,name=bot_defense,json=botDefense,proto3,oneof" json:"bot_defense,omitempty"`
}
type ReplaceSpecType_DisableApiDefinition struct {
	DisableApiDefinition *schema.Empty `protobuf:"bytes,70,opt,name=disable_api_definition,json=disableApiDefinition,proto3,oneof" json:"disable_api_definition,omitempty"`
}
type ReplaceSpecType_ApiDefinition struct {
	ApiDefinition *views.ObjectRefType `protobuf:"bytes,71,opt,name=api_definition,json=apiDefinition,proto3,oneof" json:"api_definition,omitempty"`
}
type ReplaceSpecType_ApiDefinitions struct {
	ApiDefinitions *ApiDefinitionList `protobuf:"bytes,61,opt,name=api_definitions,json=apiDefinitions,proto3,oneof" json:"api_definitions,omitempty"`
}
type ReplaceSpecType_DisableIpReputation struct {
	DisableIpReputation *schema.Empty `protobuf:"bytes,65,opt,name=disable_ip_reputation,json=disableIpReputation,proto3,oneof" json:"disable_ip_reputation,omitempty"`
}
type ReplaceSpecType_EnableIpReputation struct {
	EnableIpReputation *IPThreatCategoryListType `protobuf:"bytes,66,opt,name=enable_ip_reputation,json=enableIpReputation,proto3,oneof" json:"enable_ip_reputation,omitempty"`
}

func (*ReplaceSpecType_Http) isReplaceSpecType_LoadbalancerType()                            {}
func (*ReplaceSpecType_HttpsAutoCert) isReplaceSpecType_LoadbalancerType()                   {}
func (*ReplaceSpecType_Https) isReplaceSpecType_LoadbalancerType()                           {}
func (*ReplaceSpecType_DoNotAdvertise) isReplaceSpecType_AdvertiseChoice()                   {}
func (*ReplaceSpecType_AdvertiseOnPublicDefaultVip) isReplaceSpecType_AdvertiseChoice()      {}
func (*ReplaceSpecType_AdvertiseOnPublic) isReplaceSpecType_AdvertiseChoice()                {}
func (*ReplaceSpecType_AdvertiseCustom) isReplaceSpecType_AdvertiseChoice()                  {}
func (*ReplaceSpecType_DisableWaf) isReplaceSpecType_WafChoice()                             {}
func (*ReplaceSpecType_Waf) isReplaceSpecType_WafChoice()                                    {}
func (*ReplaceSpecType_WafRule) isReplaceSpecType_WafChoice()                                {}
func (*ReplaceSpecType_AppFirewall) isReplaceSpecType_WafChoice()                            {}
func (*ReplaceSpecType_NoChallenge) isReplaceSpecType_ChallengeType()                        {}
func (*ReplaceSpecType_JsChallenge) isReplaceSpecType_ChallengeType()                        {}
func (*ReplaceSpecType_CaptchaChallenge) isReplaceSpecType_ChallengeType()                   {}
func (*ReplaceSpecType_PolicyBasedChallenge) isReplaceSpecType_ChallengeType()               {}
func (*ReplaceSpecType_UserIdClientIp) isReplaceSpecType_UserIdChoice()                      {}
func (*ReplaceSpecType_UserIdentification) isReplaceSpecType_UserIdChoice()                  {}
func (*ReplaceSpecType_DisableRateLimit) isReplaceSpecType_RateLimitChoice()                 {}
func (*ReplaceSpecType_ApiRateLimit) isReplaceSpecType_RateLimitChoice()                     {}
func (*ReplaceSpecType_RateLimit) isReplaceSpecType_RateLimitChoice()                        {}
func (*ReplaceSpecType_ServicePoliciesFromNamespace) isReplaceSpecType_ServicePolicyChoice() {}
func (*ReplaceSpecType_NoServicePolicies) isReplaceSpecType_ServicePolicyChoice()            {}
func (*ReplaceSpecType_ActiveServicePolicies) isReplaceSpecType_ServicePolicyChoice()        {}
func (*ReplaceSpecType_RoundRobin) isReplaceSpecType_HashPolicyChoice()                      {}
func (*ReplaceSpecType_LeastActive) isReplaceSpecType_HashPolicyChoice()                     {}
func (*ReplaceSpecType_Random) isReplaceSpecType_HashPolicyChoice()                          {}
func (*ReplaceSpecType_SourceIpStickiness) isReplaceSpecType_HashPolicyChoice()              {}
func (*ReplaceSpecType_CookieStickiness) isReplaceSpecType_HashPolicyChoice()                {}
func (*ReplaceSpecType_RingHash) isReplaceSpecType_HashPolicyChoice()                        {}
func (*ReplaceSpecType_SingleLbApp) isReplaceSpecType_MlConfigChoice()                       {}
func (*ReplaceSpecType_MultiLbApp) isReplaceSpecType_MlConfigChoice()                        {}
func (*ReplaceSpecType_DisableBotDefense) isReplaceSpecType_BotDefenseChoice()               {}
func (*ReplaceSpecType_BotDefense) isReplaceSpecType_BotDefenseChoice()                      {}
func (*ReplaceSpecType_DisableApiDefinition) isReplaceSpecType_ApiDefinitionChoice()         {}
func (*ReplaceSpecType_ApiDefinition) isReplaceSpecType_ApiDefinitionChoice()                {}
func (*ReplaceSpecType_ApiDefinitions) isReplaceSpecType_ApiDefinitionChoice()               {}
func (*ReplaceSpecType_DisableIpReputation) isReplaceSpecType_IpReputationChoice()           {}
func (*ReplaceSpecType_EnableIpReputation) isReplaceSpecType_IpReputationChoice()            {}

func (m *ReplaceSpecType) GetLoadbalancerType() isReplaceSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *ReplaceSpecType) GetAdvertiseChoice() isReplaceSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetWafChoice() isReplaceSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetChallengeType() isReplaceSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *ReplaceSpecType) GetUserIdChoice() isReplaceSpecType_UserIdChoice {
	if m != nil {
		return m.UserIdChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetRateLimitChoice() isReplaceSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetServicePolicyChoice() isReplaceSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetHashPolicyChoice() isReplaceSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetMlConfigChoice() isReplaceSpecType_MlConfigChoice {
	if m != nil {
		return m.MlConfigChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetBotDefenseChoice() isReplaceSpecType_BotDefenseChoice {
	if m != nil {
		return m.BotDefenseChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetApiDefinitionChoice() isReplaceSpecType_ApiDefinitionChoice {
	if m != nil {
		return m.ApiDefinitionChoice
	}
	return nil
}
func (m *ReplaceSpecType) GetIpReputationChoice() isReplaceSpecType_IpReputationChoice {
	if m != nil {
		return m.IpReputationChoice
	}
	return nil
}

func (m *ReplaceSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *ReplaceSpecType) GetHttp() *ProxyTypeHttp {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *ReplaceSpecType) GetHttpsAutoCert() *ProxyTypeHttpsAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *ReplaceSpecType) GetHttps() *ProxyTypeHttps {
	if x, ok := m.GetLoadbalancerType().(*ReplaceSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *ReplaceSpecType) GetDoNotAdvertise() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *ReplaceSpecType) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*ReplaceSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *ReplaceSpecType) GetDefaultRoutePools() []*views.OriginPoolWithWeight {
	if m != nil {
		return m.DefaultRoutePools
	}
	return nil
}

func (m *ReplaceSpecType) GetRoutes() []*RouteType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *ReplaceSpecType) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableWaf() *schema.Empty {
	if x, ok := m.GetWafChoice().(*ReplaceSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *ReplaceSpecType) GetWaf() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*ReplaceSpecType_Waf); ok {
		return x.Waf
	}
	return nil
}

func (m *ReplaceSpecType) GetWafRule() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*ReplaceSpecType_WafRule); ok {
		return x.WafRule
	}
	return nil
}

func (m *ReplaceSpecType) GetAppFirewall() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*ReplaceSpecType_AppFirewall); ok {
		return x.AppFirewall
	}
	return nil
}

func (m *ReplaceSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *ReplaceSpecType) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetCaptchaChallenge() *virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetPolicyBasedChallenge() *PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*ReplaceSpecType_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *ReplaceSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *ReplaceSpecType) GetUserIdClientIp() *schema.Empty {
	if x, ok := m.GetUserIdChoice().(*ReplaceSpecType_UserIdClientIp); ok {
		return x.UserIdClientIp
	}
	return nil
}

func (m *ReplaceSpecType) GetUserIdentification() *views.ObjectRefType {
	if x, ok := m.GetUserIdChoice().(*ReplaceSpecType_UserIdentification); ok {
		return x.UserIdentification
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableRateLimit() *schema.Empty {
	if x, ok := m.GetRateLimitChoice().(*ReplaceSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *ReplaceSpecType) GetApiRateLimit() *APIRateLimit {
	if x, ok := m.GetRateLimitChoice().(*ReplaceSpecType_ApiRateLimit); ok {
		return x.ApiRateLimit
	}
	return nil
}

func (m *ReplaceSpecType) GetRateLimit() *RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*ReplaceSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *ReplaceSpecType) GetMaliciousUserMitigation() *views.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *ReplaceSpecType) GetWafExclusionRules() []*policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *ReplaceSpecType) GetDataGuardRules() []*policy.SimpleDataGuardRule {
	if m != nil {
		return m.DataGuardRules
	}
	return nil
}

func (m *ReplaceSpecType) GetBlockedClients() []*SimpleClientSrcRule {
	if m != nil {
		return m.BlockedClients
	}
	return nil
}

func (m *ReplaceSpecType) GetTrustedClients() []*SimpleClientSrcRule {
	if m != nil {
		return m.TrustedClients
	}
	return nil
}

func (m *ReplaceSpecType) GetDdosMitigationRules() []*DDoSMitigationRule {
	if m != nil {
		return m.DdosMitigationRules
	}
	return nil
}

func (m *ReplaceSpecType) GetServicePoliciesFromNamespace() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*ReplaceSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *ReplaceSpecType) GetNoServicePolicies() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*ReplaceSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *ReplaceSpecType) GetActiveServicePolicies() *ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*ReplaceSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *ReplaceSpecType) GetRoundRobin() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_RoundRobin); ok {
		return x.RoundRobin
	}
	return nil
}

func (m *ReplaceSpecType) GetLeastActive() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_LeastActive); ok {
		return x.LeastActive
	}
	return nil
}

func (m *ReplaceSpecType) GetRandom() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_Random); ok {
		return x.Random
	}
	return nil
}

func (m *ReplaceSpecType) GetSourceIpStickiness() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_SourceIpStickiness); ok {
		return x.SourceIpStickiness
	}
	return nil
}

func (m *ReplaceSpecType) GetCookieStickiness() *route.CookieForHashing {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_CookieStickiness); ok {
		return x.CookieStickiness
	}
	return nil
}

func (m *ReplaceSpecType) GetRingHash() *HashPolicyListType {
	if x, ok := m.GetHashPolicyChoice().(*ReplaceSpecType_RingHash); ok {
		return x.RingHash
	}
	return nil
}

func (m *ReplaceSpecType) GetSingleLbApp() *SingleLoadBalancerAppSetting {
	if x, ok := m.GetMlConfigChoice().(*ReplaceSpecType_SingleLbApp); ok {
		return x.SingleLbApp
	}
	return nil
}

func (m *ReplaceSpecType) GetMultiLbApp() *schema.Empty {
	if x, ok := m.GetMlConfigChoice().(*ReplaceSpecType_MultiLbApp); ok {
		return x.MultiLbApp
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableBotDefense() *schema.Empty {
	if x, ok := m.GetBotDefenseChoice().(*ReplaceSpecType_DisableBotDefense); ok {
		return x.DisableBotDefense
	}
	return nil
}

func (m *ReplaceSpecType) GetBotDefense() *ShapeBotDefenseType {
	if x, ok := m.GetBotDefenseChoice().(*ReplaceSpecType_BotDefense); ok {
		return x.BotDefense
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableApiDefinition() *schema.Empty {
	if x, ok := m.GetApiDefinitionChoice().(*ReplaceSpecType_DisableApiDefinition); ok {
		return x.DisableApiDefinition
	}
	return nil
}

func (m *ReplaceSpecType) GetApiDefinition() *views.ObjectRefType {
	if x, ok := m.GetApiDefinitionChoice().(*ReplaceSpecType_ApiDefinition); ok {
		return x.ApiDefinition
	}
	return nil
}

func (m *ReplaceSpecType) GetApiDefinitions() *ApiDefinitionList {
	if x, ok := m.GetApiDefinitionChoice().(*ReplaceSpecType_ApiDefinitions); ok {
		return x.ApiDefinitions
	}
	return nil
}

func (m *ReplaceSpecType) GetDisableIpReputation() *schema.Empty {
	if x, ok := m.GetIpReputationChoice().(*ReplaceSpecType_DisableIpReputation); ok {
		return x.DisableIpReputation
	}
	return nil
}

func (m *ReplaceSpecType) GetEnableIpReputation() *IPThreatCategoryListType {
	if x, ok := m.GetIpReputationChoice().(*ReplaceSpecType_EnableIpReputation); ok {
		return x.EnableIpReputation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplaceSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplaceSpecType_Http)(nil),
		(*ReplaceSpecType_HttpsAutoCert)(nil),
		(*ReplaceSpecType_Https)(nil),
		(*ReplaceSpecType_DoNotAdvertise)(nil),
		(*ReplaceSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*ReplaceSpecType_AdvertiseOnPublic)(nil),
		(*ReplaceSpecType_AdvertiseCustom)(nil),
		(*ReplaceSpecType_DisableWaf)(nil),
		(*ReplaceSpecType_Waf)(nil),
		(*ReplaceSpecType_WafRule)(nil),
		(*ReplaceSpecType_AppFirewall)(nil),
		(*ReplaceSpecType_NoChallenge)(nil),
		(*ReplaceSpecType_JsChallenge)(nil),
		(*ReplaceSpecType_CaptchaChallenge)(nil),
		(*ReplaceSpecType_PolicyBasedChallenge)(nil),
		(*ReplaceSpecType_UserIdClientIp)(nil),
		(*ReplaceSpecType_UserIdentification)(nil),
		(*ReplaceSpecType_DisableRateLimit)(nil),
		(*ReplaceSpecType_ApiRateLimit)(nil),
		(*ReplaceSpecType_RateLimit)(nil),
		(*ReplaceSpecType_ServicePoliciesFromNamespace)(nil),
		(*ReplaceSpecType_NoServicePolicies)(nil),
		(*ReplaceSpecType_ActiveServicePolicies)(nil),
		(*ReplaceSpecType_RoundRobin)(nil),
		(*ReplaceSpecType_LeastActive)(nil),
		(*ReplaceSpecType_Random)(nil),
		(*ReplaceSpecType_SourceIpStickiness)(nil),
		(*ReplaceSpecType_CookieStickiness)(nil),
		(*ReplaceSpecType_RingHash)(nil),
		(*ReplaceSpecType_SingleLbApp)(nil),
		(*ReplaceSpecType_MultiLbApp)(nil),
		(*ReplaceSpecType_DisableBotDefense)(nil),
		(*ReplaceSpecType_BotDefense)(nil),
		(*ReplaceSpecType_DisableApiDefinition)(nil),
		(*ReplaceSpecType_ApiDefinition)(nil),
		(*ReplaceSpecType_ApiDefinitions)(nil),
		(*ReplaceSpecType_DisableIpReputation)(nil),
		(*ReplaceSpecType_EnableIpReputation)(nil),
	}
}

// GetSpecType
//
// x-displayName: "Get HTTP Loadbalancer"
// Shape of the HTTP loadbalancer specification
type GetSpecType struct {
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// Types that are valid to be assigned to LoadbalancerType:
	//	*GetSpecType_Http
	//	*GetSpecType_HttpsAutoCert
	//	*GetSpecType_Https
	LoadbalancerType                             isGetSpecType_LoadbalancerType `protobuf_oneof:"loadbalancer_type"`
	DownstreamTlsCertificateExpirationTimestamps []*types.Timestamp             `protobuf:"bytes,62,rep,name=downstream_tls_certificate_expiration_timestamps,json=downstreamTlsCertificateExpirationTimestamps,proto3" json:"downstream_tls_certificate_expiration_timestamps,omitempty"`
	// Types that are valid to be assigned to AdvertiseChoice:
	//	*GetSpecType_DoNotAdvertise
	//	*GetSpecType_AdvertiseOnPublicDefaultVip
	//	*GetSpecType_AdvertiseOnPublic
	//	*GetSpecType_AdvertiseCustom
	AdvertiseChoice   isGetSpecType_AdvertiseChoice `protobuf_oneof:"advertise_choice"`
	DefaultRoutePools []*views.OriginPoolWithWeight `protobuf:"bytes,6,rep,name=default_route_pools,json=defaultRoutePools,proto3" json:"default_route_pools,omitempty"`
	Routes            []*RouteType                  `protobuf:"bytes,7,rep,name=routes,proto3" json:"routes,omitempty"`
	CorsPolicy        *schema.CorsPolicy            `protobuf:"bytes,8,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	// Types that are valid to be assigned to WafChoice:
	//	*GetSpecType_DisableWaf
	//	*GetSpecType_Waf
	//	*GetSpecType_WafRule
	//	*GetSpecType_AppFirewall
	WafChoice   isGetSpecType_WafChoice `protobuf_oneof:"waf_choice"`
	AddLocation bool                    `protobuf:"varint,17,opt,name=add_location,json=addLocation,proto3" json:"add_location,omitempty"`
	// Types that are valid to be assigned to ChallengeType:
	//	*GetSpecType_NoChallenge
	//	*GetSpecType_JsChallenge
	//	*GetSpecType_CaptchaChallenge
	//	*GetSpecType_PolicyBasedChallenge
	ChallengeType isGetSpecType_ChallengeType `protobuf_oneof:"challenge_type"`
	MoreOption    *AdvancedOptionsType        `protobuf:"bytes,19,opt,name=more_option,json=moreOption,proto3" json:"more_option,omitempty"`
	// Types that are valid to be assigned to UserIdChoice:
	//	*GetSpecType_UserIdClientIp
	//	*GetSpecType_UserIdentification
	UserIdChoice isGetSpecType_UserIdChoice `protobuf_oneof:"user_id_choice"`
	// Types that are valid to be assigned to RateLimitChoice:
	//	*GetSpecType_DisableRateLimit
	//	*GetSpecType_ApiRateLimit
	//	*GetSpecType_RateLimit
	RateLimitChoice         isGetSpecType_RateLimitChoice    `protobuf_oneof:"rate_limit_choice"`
	MaliciousUserMitigation *views.ObjectRefType             `protobuf:"bytes,32,opt,name=malicious_user_mitigation,json=maliciousUserMitigation,proto3" json:"malicious_user_mitigation,omitempty"`
	WafExclusionRules       []*policy.SimpleWafExclusionRule `protobuf:"bytes,33,rep,name=waf_exclusion_rules,json=wafExclusionRules,proto3" json:"waf_exclusion_rules,omitempty"`
	DataGuardRules          []*policy.SimpleDataGuardRule    `protobuf:"bytes,63,rep,name=data_guard_rules,json=dataGuardRules,proto3" json:"data_guard_rules,omitempty"`
	BlockedClients          []*SimpleClientSrcRule           `protobuf:"bytes,34,rep,name=blocked_clients,json=blockedClients,proto3" json:"blocked_clients,omitempty"`
	TrustedClients          []*SimpleClientSrcRule           `protobuf:"bytes,35,rep,name=trusted_clients,json=trustedClients,proto3" json:"trusted_clients,omitempty"`
	DdosMitigationRules     []*DDoSMitigationRule            `protobuf:"bytes,37,rep,name=ddos_mitigation_rules,json=ddosMitigationRules,proto3" json:"ddos_mitigation_rules,omitempty"`
	// Types that are valid to be assigned to ServicePolicyChoice:
	//	*GetSpecType_ServicePoliciesFromNamespace
	//	*GetSpecType_NoServicePolicies
	//	*GetSpecType_ActiveServicePolicies
	ServicePolicyChoice isGetSpecType_ServicePolicyChoice `protobuf_oneof:"service_policy_choice"`
	// Types that are valid to be assigned to HashPolicyChoice:
	//	*GetSpecType_RoundRobin
	//	*GetSpecType_LeastActive
	//	*GetSpecType_Random
	//	*GetSpecType_SourceIpStickiness
	//	*GetSpecType_CookieStickiness
	//	*GetSpecType_RingHash
	HashPolicyChoice isGetSpecType_HashPolicyChoice `protobuf_oneof:"hash_policy_choice"`
	// Types that are valid to be assigned to MlConfigChoice:
	//	*GetSpecType_SingleLbApp
	//	*GetSpecType_MultiLbApp
	MlConfigChoice isGetSpecType_MlConfigChoice `protobuf_oneof:"ml_config_choice"`
	// Types that are valid to be assigned to BotDefenseChoice:
	//	*GetSpecType_DisableBotDefense
	//	*GetSpecType_BotDefense
	BotDefenseChoice isGetSpecType_BotDefenseChoice `protobuf_oneof:"bot_defense_choice"`
	// Types that are valid to be assigned to ApiDefinitionChoice:
	//	*GetSpecType_DisableApiDefinition
	//	*GetSpecType_ApiDefinition
	//	*GetSpecType_ApiDefinitions
	ApiDefinitionChoice isGetSpecType_ApiDefinitionChoice `protobuf_oneof:"api_definition_choice"`
	// Types that are valid to be assigned to IpReputationChoice:
	//	*GetSpecType_DisableIpReputation
	//	*GetSpecType_EnableIpReputation
	IpReputationChoice isGetSpecType_IpReputationChoice `protobuf_oneof:"ip_reputation_choice"`
	HostName           string                           `protobuf:"bytes,1001,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	DnsInfo            []*virtual_host_dns_info.DnsInfo `protobuf:"bytes,1002,rep,name=dns_info,json=dnsInfo,proto3" json:"dns_info,omitempty"`
	State              virtual_host.VirtualHostState    `protobuf:"varint,1003,opt,name=state,proto3,enum=ves.io.schema.virtual_host.VirtualHostState" json:"state,omitempty"`
	AutoCertState      virtual_host.CertificationState  `protobuf:"varint,1004,opt,name=auto_cert_state,json=autoCertState,proto3,enum=ves.io.schema.virtual_host.CertificationState" json:"auto_cert_state,omitempty"`
	AutoCertInfo       *virtual_host.AutoCertInfoType   `protobuf:"bytes,1010,opt,name=auto_cert_info,json=autoCertInfo,proto3" json:"auto_cert_info,omitempty"`
}

func (m *GetSpecType) Reset()      { *m = GetSpecType{} }
func (*GetSpecType) ProtoMessage() {}
func (*GetSpecType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6478b2bb990a4a3e, []int{45}
}
func (m *GetSpecType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSpecType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetSpecType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpecType.Merge(m, src)
}
func (m *GetSpecType) XXX_Size() int {
	return m.Size()
}
func (m *GetSpecType) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpecType.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpecType proto.InternalMessageInfo

type isGetSpecType_LoadbalancerType interface {
	isGetSpecType_LoadbalancerType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_AdvertiseChoice interface {
	isGetSpecType_AdvertiseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_WafChoice interface {
	isGetSpecType_WafChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ChallengeType interface {
	isGetSpecType_ChallengeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_UserIdChoice interface {
	isGetSpecType_UserIdChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_RateLimitChoice interface {
	isGetSpecType_RateLimitChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ServicePolicyChoice interface {
	isGetSpecType_ServicePolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_HashPolicyChoice interface {
	isGetSpecType_HashPolicyChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_MlConfigChoice interface {
	isGetSpecType_MlConfigChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_BotDefenseChoice interface {
	isGetSpecType_BotDefenseChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_ApiDefinitionChoice interface {
	isGetSpecType_ApiDefinitionChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isGetSpecType_IpReputationChoice interface {
	isGetSpecType_IpReputationChoice()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GetSpecType_Http struct {
	Http *ProxyTypeHttp `protobuf:"bytes,2,opt,name=http,proto3,oneof" json:"http,omitempty"`
}
type GetSpecType_HttpsAutoCert struct {
	HttpsAutoCert *ProxyTypeHttpsAutoCerts `protobuf:"bytes,27,opt,name=https_auto_cert,json=httpsAutoCert,proto3,oneof" json:"https_auto_cert,omitempty"`
}
type GetSpecType_Https struct {
	Https *ProxyTypeHttps `protobuf:"bytes,3,opt,name=https,proto3,oneof" json:"https,omitempty"`
}
type GetSpecType_DoNotAdvertise struct {
	DoNotAdvertise *schema.Empty `protobuf:"bytes,12,opt,name=do_not_advertise,json=doNotAdvertise,proto3,oneof" json:"do_not_advertise,omitempty"`
}
type GetSpecType_AdvertiseOnPublicDefaultVip struct {
	AdvertiseOnPublicDefaultVip *schema.Empty `protobuf:"bytes,13,opt,name=advertise_on_public_default_vip,json=advertiseOnPublicDefaultVip,proto3,oneof" json:"advertise_on_public_default_vip,omitempty"`
}
type GetSpecType_AdvertiseOnPublic struct {
	AdvertiseOnPublic *views.AdvertisePublic `protobuf:"bytes,4,opt,name=advertise_on_public,json=advertiseOnPublic,proto3,oneof" json:"advertise_on_public,omitempty"`
}
type GetSpecType_AdvertiseCustom struct {
	AdvertiseCustom *views.AdvertiseCustom `protobuf:"bytes,5,opt,name=advertise_custom,json=advertiseCustom,proto3,oneof" json:"advertise_custom,omitempty"`
}
type GetSpecType_DisableWaf struct {
	DisableWaf *schema.Empty `protobuf:"bytes,11,opt,name=disable_waf,json=disableWaf,proto3,oneof" json:"disable_waf,omitempty"`
}
type GetSpecType_Waf struct {
	Waf *views.ObjectRefType `protobuf:"bytes,9,opt,name=waf,proto3,oneof" json:"waf,omitempty"`
}
type GetSpecType_WafRule struct {
	WafRule *views.ObjectRefType `protobuf:"bytes,10,opt,name=waf_rule,json=wafRule,proto3,oneof" json:"waf_rule,omitempty"`
}
type GetSpecType_AppFirewall struct {
	AppFirewall *views.ObjectRefType `protobuf:"bytes,52,opt,name=app_firewall,json=appFirewall,proto3,oneof" json:"app_firewall,omitempty"`
}
type GetSpecType_NoChallenge struct {
	NoChallenge *schema.Empty `protobuf:"bytes,26,opt,name=no_challenge,json=noChallenge,proto3,oneof" json:"no_challenge,omitempty"`
}
type GetSpecType_JsChallenge struct {
	JsChallenge *virtual_host.JavascriptChallengeType `protobuf:"bytes,18,opt,name=js_challenge,json=jsChallenge,proto3,oneof" json:"js_challenge,omitempty"`
}
type GetSpecType_CaptchaChallenge struct {
	CaptchaChallenge *virtual_host.CaptchaChallengeType `protobuf:"bytes,24,opt,name=captcha_challenge,json=captchaChallenge,proto3,oneof" json:"captcha_challenge,omitempty"`
}
type GetSpecType_PolicyBasedChallenge struct {
	PolicyBasedChallenge *PolicyBasedChallenge `protobuf:"bytes,51,opt,name=policy_based_challenge,json=policyBasedChallenge,proto3,oneof" json:"policy_based_challenge,omitempty"`
}
type GetSpecType_UserIdClientIp struct {
	UserIdClientIp *schema.Empty `protobuf:"bytes,60,opt,name=user_id_client_ip,json=userIdClientIp,proto3,oneof" json:"user_id_client_ip,omitempty"`
}
type GetSpecType_UserIdentification struct {
	UserIdentification *views.ObjectRefType `protobuf:"bytes,20,opt,name=user_identification,json=userIdentification,proto3,oneof" json:"user_identification,omitempty"`
}
type GetSpecType_DisableRateLimit struct {
	DisableRateLimit *schema.Empty `protobuf:"bytes,22,opt,name=disable_rate_limit,json=disableRateLimit,proto3,oneof" json:"disable_rate_limit,omitempty"`
}
type GetSpecType_ApiRateLimit struct {
	ApiRateLimit *APIRateLimit `protobuf:"bytes,68,opt,name=api_rate_limit,json=apiRateLimit,proto3,oneof" json:"api_rate_limit,omitempty"`
}
type GetSpecType_RateLimit struct {
	RateLimit *RateLimitConfigType `protobuf:"bytes,23,opt,name=rate_limit,json=rateLimit,proto3,oneof" json:"rate_limit,omitempty"`
}
type GetSpecType_ServicePoliciesFromNamespace struct {
	ServicePoliciesFromNamespace *schema.Empty `protobuf:"bytes,41,opt,name=service_policies_from_namespace,json=servicePoliciesFromNamespace,proto3,oneof" json:"service_policies_from_namespace,omitempty"`
}
type GetSpecType_NoServicePolicies struct {
	NoServicePolicies *schema.Empty `protobuf:"bytes,42,opt,name=no_service_policies,json=noServicePolicies,proto3,oneof" json:"no_service_policies,omitempty"`
}
type GetSpecType_ActiveServicePolicies struct {
	ActiveServicePolicies *ServicePolicyList `protobuf:"bytes,43,opt,name=active_service_policies,json=activeServicePolicies,proto3,oneof" json:"active_service_policies,omitempty"`
}
type GetSpecType_RoundRobin struct {
	RoundRobin *schema.Empty `protobuf:"bytes,45,opt,name=round_robin,json=roundRobin,proto3,oneof" json:"round_robin,omitempty"`
}
type GetSpecType_LeastActive struct {
	LeastActive *schema.Empty `protobuf:"bytes,46,opt,name=least_active,json=leastActive,proto3,oneof" json:"least_active,omitempty"`
}
type GetSpecType_Random struct {
	Random *schema.Empty `protobuf:"bytes,47,opt,name=random,proto3,oneof" json:"random,omitempty"`
}
type GetSpecType_SourceIpStickiness struct {
	SourceIpStickiness *schema.Empty `protobuf:"bytes,48,opt,name=source_ip_stickiness,json=sourceIpStickiness,proto3,oneof" json:"source_ip_stickiness,omitempty"`
}
type GetSpecType_CookieStickiness struct {
	CookieStickiness *route.CookieForHashing `protobuf:"bytes,49,opt,name=cookie_stickiness,json=cookieStickiness,proto3,oneof" json:"cookie_stickiness,omitempty"`
}
type GetSpecType_RingHash struct {
	RingHash *HashPolicyListType `protobuf:"bytes,50,opt,name=ring_hash,json=ringHash,proto3,oneof" json:"ring_hash,omitempty"`
}
type GetSpecType_SingleLbApp struct {
	SingleLbApp *SingleLoadBalancerAppSetting `protobuf:"bytes,54,opt,name=single_lb_app,json=singleLbApp,proto3,oneof" json:"single_lb_app,omitempty"`
}
type GetSpecType_MultiLbApp struct {
	MultiLbApp *schema.Empty `protobuf:"bytes,55,opt,name=multi_lb_app,json=multiLbApp,proto3,oneof" json:"multi_lb_app,omitempty"`
}
type GetSpecType_DisableBotDefense struct {
	DisableBotDefense *schema.Empty `protobuf:"bytes,57,opt,name=disable_bot_defense,json=disableBotDefense,proto3,oneof" json:"disable_bot_defense,omitempty"`
}
type GetSpecType_BotDefense struct {
	BotDefense *ShapeBotDefenseType `protobuf:"bytes,58,opt,name=bot_defense,json=botDefense,proto3,oneof" json:"bot_defense,omitempty"`
}
type GetSpecType_DisableApiDefinition struct {
	DisableApiDefinition *schema.Empty `protobuf:"bytes,70,opt,name=disable_api_definition,json=disableApiDefinition,proto3,oneof" json:"disable_api_definition,omitempty"`
}
type GetSpecType_ApiDefinition struct {
	ApiDefinition *views.ObjectRefType `protobuf:"bytes,71,opt,name=api_definition,json=apiDefinition,proto3,oneof" json:"api_definition,omitempty"`
}
type GetSpecType_ApiDefinitions struct {
	ApiDefinitions *ApiDefinitionList `protobuf:"bytes,61,opt,name=api_definitions,json=apiDefinitions,proto3,oneof" json:"api_definitions,omitempty"`
}
type GetSpecType_DisableIpReputation struct {
	DisableIpReputation *schema.Empty `protobuf:"bytes,65,opt,name=disable_ip_reputation,json=disableIpReputation,proto3,oneof" json:"disable_ip_reputation,omitempty"`
}
type GetSpecType_EnableIpReputation struct {
	EnableIpReputation *IPThreatCategoryListType `protobuf:"bytes,66,opt,name=enable_ip_reputation,json=enableIpReputation,proto3,oneof" json:"enable_ip_reputation,omitempty"`
}

func (*GetSpecType_Http) isGetSpecType_LoadbalancerType()                            {}
func (*GetSpecType_HttpsAutoCert) isGetSpecType_LoadbalancerType()                   {}
func (*GetSpecType_Https) isGetSpecType_LoadbalancerType()                           {}
func (*GetSpecType_DoNotAdvertise) isGetSpecType_AdvertiseChoice()                   {}
func (*GetSpecType_AdvertiseOnPublicDefaultVip) isGetSpecType_AdvertiseChoice()      {}
func (*GetSpecType_AdvertiseOnPublic) isGetSpecType_AdvertiseChoice()                {}
func (*GetSpecType_AdvertiseCustom) isGetSpecType_AdvertiseChoice()                  {}
func (*GetSpecType_DisableWaf) isGetSpecType_WafChoice()                             {}
func (*GetSpecType_Waf) isGetSpecType_WafChoice()                                    {}
func (*GetSpecType_WafRule) isGetSpecType_WafChoice()                                {}
func (*GetSpecType_AppFirewall) isGetSpecType_WafChoice()                            {}
func (*GetSpecType_NoChallenge) isGetSpecType_ChallengeType()                        {}
func (*GetSpecType_JsChallenge) isGetSpecType_ChallengeType()                        {}
func (*GetSpecType_CaptchaChallenge) isGetSpecType_ChallengeType()                   {}
func (*GetSpecType_PolicyBasedChallenge) isGetSpecType_ChallengeType()               {}
func (*GetSpecType_UserIdClientIp) isGetSpecType_UserIdChoice()                      {}
func (*GetSpecType_UserIdentification) isGetSpecType_UserIdChoice()                  {}
func (*GetSpecType_DisableRateLimit) isGetSpecType_RateLimitChoice()                 {}
func (*GetSpecType_ApiRateLimit) isGetSpecType_RateLimitChoice()                     {}
func (*GetSpecType_RateLimit) isGetSpecType_RateLimitChoice()                        {}
func (*GetSpecType_ServicePoliciesFromNamespace) isGetSpecType_ServicePolicyChoice() {}
func (*GetSpecType_NoServicePolicies) isGetSpecType_ServicePolicyChoice()            {}
func (*GetSpecType_ActiveServicePolicies) isGetSpecType_ServicePolicyChoice()        {}
func (*GetSpecType_RoundRobin) isGetSpecType_HashPolicyChoice()                      {}
func (*GetSpecType_LeastActive) isGetSpecType_HashPolicyChoice()                     {}
func (*GetSpecType_Random) isGetSpecType_HashPolicyChoice()                          {}
func (*GetSpecType_SourceIpStickiness) isGetSpecType_HashPolicyChoice()              {}
func (*GetSpecType_CookieStickiness) isGetSpecType_HashPolicyChoice()                {}
func (*GetSpecType_RingHash) isGetSpecType_HashPolicyChoice()                        {}
func (*GetSpecType_SingleLbApp) isGetSpecType_MlConfigChoice()                       {}
func (*GetSpecType_MultiLbApp) isGetSpecType_MlConfigChoice()                        {}
func (*GetSpecType_DisableBotDefense) isGetSpecType_BotDefenseChoice()               {}
func (*GetSpecType_BotDefense) isGetSpecType_BotDefenseChoice()                      {}
func (*GetSpecType_DisableApiDefinition) isGetSpecType_ApiDefinitionChoice()         {}
func (*GetSpecType_ApiDefinition) isGetSpecType_ApiDefinitionChoice()                {}
func (*GetSpecType_ApiDefinitions) isGetSpecType_ApiDefinitionChoice()               {}
func (*GetSpecType_DisableIpReputation) isGetSpecType_IpReputationChoice()           {}
func (*GetSpecType_EnableIpReputation) isGetSpecType_IpReputationChoice()            {}

func (m *GetSpecType) GetLoadbalancerType() isGetSpecType_LoadbalancerType {
	if m != nil {
		return m.LoadbalancerType
	}
	return nil
}
func (m *GetSpecType) GetAdvertiseChoice() isGetSpecType_AdvertiseChoice {
	if m != nil {
		return m.AdvertiseChoice
	}
	return nil
}
func (m *GetSpecType) GetWafChoice() isGetSpecType_WafChoice {
	if m != nil {
		return m.WafChoice
	}
	return nil
}
func (m *GetSpecType) GetChallengeType() isGetSpecType_ChallengeType {
	if m != nil {
		return m.ChallengeType
	}
	return nil
}
func (m *GetSpecType) GetUserIdChoice() isGetSpecType_UserIdChoice {
	if m != nil {
		return m.UserIdChoice
	}
	return nil
}
func (m *GetSpecType) GetRateLimitChoice() isGetSpecType_RateLimitChoice {
	if m != nil {
		return m.RateLimitChoice
	}
	return nil
}
func (m *GetSpecType) GetServicePolicyChoice() isGetSpecType_ServicePolicyChoice {
	if m != nil {
		return m.ServicePolicyChoice
	}
	return nil
}
func (m *GetSpecType) GetHashPolicyChoice() isGetSpecType_HashPolicyChoice {
	if m != nil {
		return m.HashPolicyChoice
	}
	return nil
}
func (m *GetSpecType) GetMlConfigChoice() isGetSpecType_MlConfigChoice {
	if m != nil {
		return m.MlConfigChoice
	}
	return nil
}
func (m *GetSpecType) GetBotDefenseChoice() isGetSpecType_BotDefenseChoice {
	if m != nil {
		return m.BotDefenseChoice
	}
	return nil
}
func (m *GetSpecType) GetApiDefinitionChoice() isGetSpecType_ApiDefinitionChoice {
	if m != nil {
		return m.ApiDefinitionChoice
	}
	return nil
}
func (m *GetSpecType) GetIpReputationChoice() isGetSpecType_IpReputationChoice {
	if m != nil {
		return m.IpReputationChoice
	}
	return nil
}

func (m *GetSpecType) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *GetSpecType) GetHttp() *ProxyTypeHttp {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_Http); ok {
		return x.Http
	}
	return nil
}

func (m *GetSpecType) GetHttpsAutoCert() *ProxyTypeHttpsAutoCerts {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_HttpsAutoCert); ok {
		return x.HttpsAutoCert
	}
	return nil
}

func (m *GetSpecType) GetHttps() *ProxyTypeHttps {
	if x, ok := m.GetLoadbalancerType().(*GetSpecType_Https); ok {
		return x.Https
	}
	return nil
}

func (m *GetSpecType) GetDownstreamTlsCertificateExpirationTimestamps() []*types.Timestamp {
	if m != nil {
		return m.DownstreamTlsCertificateExpirationTimestamps
	}
	return nil
}

func (m *GetSpecType) GetDoNotAdvertise() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_DoNotAdvertise); ok {
		return x.DoNotAdvertise
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseOnPublicDefaultVip() *schema.Empty {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublicDefaultVip); ok {
		return x.AdvertiseOnPublicDefaultVip
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseOnPublic() *views.AdvertisePublic {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseOnPublic); ok {
		return x.AdvertiseOnPublic
	}
	return nil
}

func (m *GetSpecType) GetAdvertiseCustom() *views.AdvertiseCustom {
	if x, ok := m.GetAdvertiseChoice().(*GetSpecType_AdvertiseCustom); ok {
		return x.AdvertiseCustom
	}
	return nil
}

func (m *GetSpecType) GetDefaultRoutePools() []*views.OriginPoolWithWeight {
	if m != nil {
		return m.DefaultRoutePools
	}
	return nil
}

func (m *GetSpecType) GetRoutes() []*RouteType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *GetSpecType) GetCorsPolicy() *schema.CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *GetSpecType) GetDisableWaf() *schema.Empty {
	if x, ok := m.GetWafChoice().(*GetSpecType_DisableWaf); ok {
		return x.DisableWaf
	}
	return nil
}

func (m *GetSpecType) GetWaf() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GetSpecType_Waf); ok {
		return x.Waf
	}
	return nil
}

func (m *GetSpecType) GetWafRule() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GetSpecType_WafRule); ok {
		return x.WafRule
	}
	return nil
}

func (m *GetSpecType) GetAppFirewall() *views.ObjectRefType {
	if x, ok := m.GetWafChoice().(*GetSpecType_AppFirewall); ok {
		return x.AppFirewall
	}
	return nil
}

func (m *GetSpecType) GetAddLocation() bool {
	if m != nil {
		return m.AddLocation
	}
	return false
}

func (m *GetSpecType) GetNoChallenge() *schema.Empty {
	if x, ok := m.GetChallengeType().(*GetSpecType_NoChallenge); ok {
		return x.NoChallenge
	}
	return nil
}

func (m *GetSpecType) GetJsChallenge() *virtual_host.JavascriptChallengeType {
	if x, ok := m.GetChallengeType().(*GetSpecType_JsChallenge); ok {
		return x.JsChallenge
	}
	return nil
}

func (m *GetSpecType) GetCaptchaChallenge() *virtual_host.CaptchaChallengeType {
	if x, ok := m.GetChallengeType().(*GetSpecType_CaptchaChallenge); ok {
		return x.CaptchaChallenge
	}
	return nil
}

func (m *GetSpecType) GetPolicyBasedChallenge() *PolicyBasedChallenge {
	if x, ok := m.GetChallengeType().(*GetSpecType_PolicyBasedChallenge); ok {
		return x.PolicyBasedChallenge
	}
	return nil
}

func (m *GetSpecType) GetMoreOption() *AdvancedOptionsType {
	if m != nil {
		return m.MoreOption
	}
	return nil
}

func (m *GetSpecType) GetUserIdClientIp() *schema.Empty {
	if x, ok := m.GetUserIdChoice().(*GetSpecType_UserIdClientIp); ok {
		return x.UserIdClientIp
	}
	return nil
}

func (m *GetSpecType) GetUserIdentification() *views.ObjectRefType {
	if x, ok := m.GetUserIdChoice().(*GetSpecType_UserIdentification); ok {
		return x.UserIdentification
	}
	return nil
}

func (m *GetSpecType) GetDisableRateLimit() *schema.Empty {
	if x, ok := m.GetRateLimitChoice().(*GetSpecType_DisableRateLimit); ok {
		return x.DisableRateLimit
	}
	return nil
}

func (m *GetSpecType) GetApiRateLimit() *APIRateLimit {
	if x, ok := m.GetRateLimitChoice().(*GetSpecType_ApiRateLimit); ok {
		return x.ApiRateLimit
	}
	return nil
}

func (m *GetSpecType) GetRateLimit() *RateLimitConfigType {
	if x, ok := m.GetRateLimitChoice().(*GetSpecType_RateLimit); ok {
		return x.RateLimit
	}
	return nil
}

func (m *GetSpecType) GetMaliciousUserMitigation() *views.ObjectRefType {
	if m != nil {
		return m.MaliciousUserMitigation
	}
	return nil
}

func (m *GetSpecType) GetWafExclusionRules() []*policy.SimpleWafExclusionRule {
	if m != nil {
		return m.WafExclusionRules
	}
	return nil
}

func (m *GetSpecType) GetDataGuardRules() []*policy.SimpleDataGuardRule {
	if m != nil {
		return m.DataGuardRules
	}
	return nil
}

func (m *GetSpecType) GetBlockedClients() []*SimpleClientSrcRule {
	if m != nil {
		return m.BlockedClients
	}
	return nil
}

func (m *GetSpecType) GetTrustedClients() []*SimpleClientSrcRule {
	if m != nil {
		return m.TrustedClients
	}
	return nil
}

func (m *GetSpecType) GetDdosMitigationRules() []*DDoSMitigationRule {
	if m != nil {
		return m.DdosMitigationRules
	}
	return nil
}

func (m *GetSpecType) GetServicePoliciesFromNamespace() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GetSpecType_ServicePoliciesFromNamespace); ok {
		return x.ServicePoliciesFromNamespace
	}
	return nil
}

func (m *GetSpecType) GetNoServicePolicies() *schema.Empty {
	if x, ok := m.GetServicePolicyChoice().(*GetSpecType_NoServicePolicies); ok {
		return x.NoServicePolicies
	}
	return nil
}

func (m *GetSpecType) GetActiveServicePolicies() *ServicePolicyList {
	if x, ok := m.GetServicePolicyChoice().(*GetSpecType_ActiveServicePolicies); ok {
		return x.ActiveServicePolicies
	}
	return nil
}

func (m *GetSpecType) GetRoundRobin() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_RoundRobin); ok {
		return x.RoundRobin
	}
	return nil
}

func (m *GetSpecType) GetLeastActive() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_LeastActive); ok {
		return x.LeastActive
	}
	return nil
}

func (m *GetSpecType) GetRandom() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_Random); ok {
		return x.Random
	}
	return nil
}

func (m *GetSpecType) GetSourceIpStickiness() *schema.Empty {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_SourceIpStickiness); ok {
		return x.SourceIpStickiness
	}
	return nil
}

func (m *GetSpecType) GetCookieStickiness() *route.CookieForHashing {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_CookieStickiness); ok {
		return x.CookieStickiness
	}
	return nil
}

func (m *GetSpecType) GetRingHash() *HashPolicyListType {
	if x, ok := m.GetHashPolicyChoice().(*GetSpecType_RingHash); ok {
		return x.RingHash
	}
	return nil
}

func (m *GetSpecType) GetSingleLbApp() *SingleLoadBalancerAppSetting {
	if x, ok := m.GetMlConfigChoice().(*GetSpecType_SingleLbApp); ok {
		return x.SingleLbApp
	}
	return nil
}

func (m *GetSpecType) GetMultiLbApp() *schema.Empty {
	if x, ok := m.GetMlConfigChoice().(*GetSpecType_MultiLbApp); ok {
		return x.MultiLbApp
	}
	return nil
}

func (m *GetSpecType) GetDisableBotDefense() *schema.Empty {
	if x, ok := m.GetBotDefenseChoice().(*GetSpecType_DisableBotDefense); ok {
		return x.DisableBotDefense
	}
	return nil
}

func (m *GetSpecType) GetBotDefense() *ShapeBotDefenseType {
	if x, ok := m.GetBotDefenseChoice().(*GetSpecType_BotDefense); ok {
		return x.BotDefense
	}
	return nil
}

func (m *GetSpecType) GetDisableApiDefinition() *schema.Empty {
	if x, ok := m.GetApiDefinitionChoice().(*GetSpecType_DisableApiDefinition); ok {
		return x.DisableApiDefinition
	}
	return nil
}

func (m *GetSpecType) GetApiDefinition() *views.ObjectRefType {
	if x, ok := m.GetApiDefinitionChoice().(*GetSpecType_ApiDefinition); ok {
		return x.ApiDefinition
	}
	return nil
}

func (m *GetSpecType) GetApiDefinitions() *ApiDefinitionList {
	if x, ok := m.GetApiDefinitionChoice().(*GetSpecType_ApiDefinitions); ok {
		return x.ApiDefinitions
	}
	return nil
}

func (m *GetSpecType) GetDisableIpReputation() *schema.Empty {
	if x, ok := m.GetIpReputationChoice().(*GetSpecType_DisableIpReputation); ok {
		return x.DisableIpReputation
	}
	return nil
}

func (m *GetSpecType) GetEnableIpReputation() *IPThreatCategoryListType {
	if x, ok := m.GetIpReputationChoice().(*GetSpecType_EnableIpReputation); ok {
		return x.EnableIpReputation
	}
	return nil
}

func (m *GetSpecType) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GetSpecType) GetDnsInfo() []*virtual_host_dns_info.DnsInfo {
	if m != nil {
		return m.DnsInfo
	}
	return nil
}

func (m *GetSpecType) GetState() virtual_host.VirtualHostState {
	if m != nil {
		return m.State
	}
	return virtual_host.VIRTUAL_HOST_READY
}

func (m *GetSpecType) GetAutoCertState() virtual_host.CertificationState {
	if m != nil {
		return m.AutoCertState
	}
	return virtual_host.AutoCertDisabled
}

func (m *GetSpecType) GetAutoCertInfo() *virtual_host.AutoCertInfoType {
	if m != nil {
		return m.AutoCertInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetSpecType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetSpecType_Http)(nil),
		(*GetSpecType_HttpsAutoCert)(nil),
		(*GetSpecType_Https)(nil),
		(*GetSpecType_DoNotAdvertise)(nil),
		(*GetSpecType_AdvertiseOnPublicDefaultVip)(nil),
		(*GetSpecType_AdvertiseOnPublic)(nil),
		(*GetSpecType_AdvertiseCustom)(nil),
		(*GetSpecType_DisableWaf)(nil),
		(*GetSpecType_Waf)(nil),
		(*GetSpecType_WafRule)(nil),
		(*GetSpecType_AppFirewall)(nil),
		(*GetSpecType_NoChallenge)(nil),
		(*GetSpecType_JsChallenge)(nil),
		(*GetSpecType_CaptchaChallenge)(nil),
		(*GetSpecType_PolicyBasedChallenge)(nil),
		(*GetSpecType_UserIdClientIp)(nil),
		(*GetSpecType_UserIdentification)(nil),
		(*GetSpecType_DisableRateLimit)(nil),
		(*GetSpecType_ApiRateLimit)(nil),
		(*GetSpecType_RateLimit)(nil),
		(*GetSpecType_ServicePoliciesFromNamespace)(nil),
		(*GetSpecType_NoServicePolicies)(nil),
		(*GetSpecType_ActiveServicePolicies)(nil),
		(*GetSpecType_RoundRobin)(nil),
		(*GetSpecType_LeastActive)(nil),
		(*GetSpecType_Random)(nil),
		(*GetSpecType_SourceIpStickiness)(nil),
		(*GetSpecType_CookieStickiness)(nil),
		(*GetSpecType_RingHash)(nil),
		(*GetSpecType_SingleLbApp)(nil),
		(*GetSpecType_MultiLbApp)(nil),
		(*GetSpecType_DisableBotDefense)(nil),
		(*GetSpecType_BotDefense)(nil),
		(*GetSpecType_DisableApiDefinition)(nil),
		(*GetSpecType_ApiDefinition)(nil),
		(*GetSpecType_ApiDefinitions)(nil),
		(*GetSpecType_DisableIpReputation)(nil),
		(*GetSpecType_EnableIpReputation)(nil),
	}
}

func init() {
	proto.RegisterEnum("ves.io.schema.views.http_loadbalancer.URLScheme", URLScheme_name, URLScheme_value)
	golang_proto.RegisterEnum("ves.io.schema.views.http_loadbalancer.URLScheme", URLScheme_name, URLScheme_value)
	proto.RegisterEnum("ves.io.schema.views.http_loadbalancer.ShapeBotDefenseRegion", ShapeBotDefenseRegion_name, ShapeBotDefenseRegion_value)
	golang_proto.RegisterEnum("ves.io.schema.views.http_loadbalancer.ShapeBotDefenseRegion", ShapeBotDefenseRegion_name, ShapeBotDefenseRegion_value)
	proto.RegisterEnum("ves.io.schema.views.http_loadbalancer.JavaScriptLocation", JavaScriptLocation_name, JavaScriptLocation_value)
	golang_proto.RegisterEnum("ves.io.schema.views.http_loadbalancer.JavaScriptLocation", JavaScriptLocation_name, JavaScriptLocation_value)
	proto.RegisterType((*InlineRateLimiter)(nil), "ves.io.schema.views.http_loadbalancer.InlineRateLimiter")
	golang_proto.RegisterType((*InlineRateLimiter)(nil), "ves.io.schema.views.http_loadbalancer.InlineRateLimiter")
	proto.RegisterType((*ServerUrlRule)(nil), "ves.io.schema.views.http_loadbalancer.ServerUrlRule")
	golang_proto.RegisterType((*ServerUrlRule)(nil), "ves.io.schema.views.http_loadbalancer.ServerUrlRule")
	proto.RegisterType((*ApiEndpointRule)(nil), "ves.io.schema.views.http_loadbalancer.ApiEndpointRule")
	golang_proto.RegisterType((*ApiEndpointRule)(nil), "ves.io.schema.views.http_loadbalancer.ApiEndpointRule")
	proto.RegisterType((*APIRateLimit)(nil), "ves.io.schema.views.http_loadbalancer.APIRateLimit")
	golang_proto.RegisterType((*APIRateLimit)(nil), "ves.io.schema.views.http_loadbalancer.APIRateLimit")
	proto.RegisterType((*DownstreamTlsValidationContext)(nil), "ves.io.schema.views.http_loadbalancer.DownstreamTlsValidationContext")
	golang_proto.RegisterType((*DownstreamTlsValidationContext)(nil), "ves.io.schema.views.http_loadbalancer.DownstreamTlsValidationContext")
	proto.RegisterType((*DownstreamTlsParamsType)(nil), "ves.io.schema.views.http_loadbalancer.DownstreamTlsParamsType")
	golang_proto.RegisterType((*DownstreamTlsParamsType)(nil), "ves.io.schema.views.http_loadbalancer.DownstreamTlsParamsType")
	proto.RegisterType((*ProxyTypeHttps)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttps")
	golang_proto.RegisterType((*ProxyTypeHttps)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttps")
	proto.RegisterType((*ProxyTypeHttp)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttp")
	golang_proto.RegisterType((*ProxyTypeHttp)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttp")
	proto.RegisterType((*ProxyTypeHttpsAutoCerts)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttpsAutoCerts")
	golang_proto.RegisterType((*ProxyTypeHttpsAutoCerts)(nil), "ves.io.schema.views.http_loadbalancer.ProxyTypeHttpsAutoCerts")
	proto.RegisterType((*HashPolicyListType)(nil), "ves.io.schema.views.http_loadbalancer.HashPolicyListType")
	golang_proto.RegisterType((*HashPolicyListType)(nil), "ves.io.schema.views.http_loadbalancer.HashPolicyListType")
	proto.RegisterType((*MirrorPolicyType)(nil), "ves.io.schema.views.http_loadbalancer.MirrorPolicyType")
	golang_proto.RegisterType((*MirrorPolicyType)(nil), "ves.io.schema.views.http_loadbalancer.MirrorPolicyType")
	proto.RegisterType((*RouteSimpleAdvancedOptions)(nil), "ves.io.schema.views.http_loadbalancer.RouteSimpleAdvancedOptions")
	golang_proto.RegisterType((*RouteSimpleAdvancedOptions)(nil), "ves.io.schema.views.http_loadbalancer.RouteSimpleAdvancedOptions")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.http_loadbalancer.RouteSimpleAdvancedOptions.EndpointSubsetsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.http_loadbalancer.RouteSimpleAdvancedOptions.EndpointSubsetsEntry")
	proto.RegisterType((*RouteTypeSimpleWithDefaultOriginPool)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool")
	golang_proto.RegisterType((*RouteTypeSimpleWithDefaultOriginPool)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool")
	proto.RegisterType((*RouteTypeSimple)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeSimple")
	golang_proto.RegisterType((*RouteTypeSimple)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeSimple")
	proto.RegisterType((*RouteTypeRedirect)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeRedirect")
	golang_proto.RegisterType((*RouteTypeRedirect)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeRedirect")
	proto.RegisterType((*RouteTypeDirectResponse)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeDirectResponse")
	golang_proto.RegisterType((*RouteTypeDirectResponse)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeDirectResponse")
	proto.RegisterType((*RouteTypeCustomRoute)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeCustomRoute")
	golang_proto.RegisterType((*RouteTypeCustomRoute)(nil), "ves.io.schema.views.http_loadbalancer.RouteTypeCustomRoute")
	proto.RegisterType((*RouteType)(nil), "ves.io.schema.views.http_loadbalancer.RouteType")
	golang_proto.RegisterType((*RouteType)(nil), "ves.io.schema.views.http_loadbalancer.RouteType")
	proto.RegisterType((*AdvancedOptionsType)(nil), "ves.io.schema.views.http_loadbalancer.AdvancedOptionsType")
	golang_proto.RegisterType((*AdvancedOptionsType)(nil), "ves.io.schema.views.http_loadbalancer.AdvancedOptionsType")
	proto.RegisterMapType((map[uint32]string)(nil), "ves.io.schema.views.http_loadbalancer.AdvancedOptionsType.CustomErrorsEntry")
	golang_proto.RegisterMapType((map[uint32]string)(nil), "ves.io.schema.views.http_loadbalancer.AdvancedOptionsType.CustomErrorsEntry")
	proto.RegisterType((*PolicyBasedChallenge)(nil), "ves.io.schema.views.http_loadbalancer.PolicyBasedChallenge")
	golang_proto.RegisterType((*PolicyBasedChallenge)(nil), "ves.io.schema.views.http_loadbalancer.PolicyBasedChallenge")
	proto.RegisterType((*ChallengeRule)(nil), "ves.io.schema.views.http_loadbalancer.ChallengeRule")
	golang_proto.RegisterType((*ChallengeRule)(nil), "ves.io.schema.views.http_loadbalancer.ChallengeRule")
	proto.RegisterType((*ChallengeRuleList)(nil), "ves.io.schema.views.http_loadbalancer.ChallengeRuleList")
	golang_proto.RegisterType((*ChallengeRuleList)(nil), "ves.io.schema.views.http_loadbalancer.ChallengeRuleList")
	proto.RegisterType((*HttpHeaderMatcherList)(nil), "ves.io.schema.views.http_loadbalancer.HttpHeaderMatcherList")
	golang_proto.RegisterType((*HttpHeaderMatcherList)(nil), "ves.io.schema.views.http_loadbalancer.HttpHeaderMatcherList")
	proto.RegisterType((*SimpleClientSrcRule)(nil), "ves.io.schema.views.http_loadbalancer.SimpleClientSrcRule")
	golang_proto.RegisterType((*SimpleClientSrcRule)(nil), "ves.io.schema.views.http_loadbalancer.SimpleClientSrcRule")
	proto.RegisterType((*DDoSClientSource)(nil), "ves.io.schema.views.http_loadbalancer.DDoSClientSource")
	golang_proto.RegisterType((*DDoSClientSource)(nil), "ves.io.schema.views.http_loadbalancer.DDoSClientSource")
	proto.RegisterType((*DDoSMitigationRule)(nil), "ves.io.schema.views.http_loadbalancer.DDoSMitigationRule")
	golang_proto.RegisterType((*DDoSMitigationRule)(nil), "ves.io.schema.views.http_loadbalancer.DDoSMitigationRule")
	proto.RegisterType((*CustomIpAllowedList)(nil), "ves.io.schema.views.http_loadbalancer.CustomIpAllowedList")
	golang_proto.RegisterType((*CustomIpAllowedList)(nil), "ves.io.schema.views.http_loadbalancer.CustomIpAllowedList")
	proto.RegisterType((*RateLimitConfigType)(nil), "ves.io.schema.views.http_loadbalancer.RateLimitConfigType")
	golang_proto.RegisterType((*RateLimitConfigType)(nil), "ves.io.schema.views.http_loadbalancer.RateLimitConfigType")
	proto.RegisterType((*ServicePolicyList)(nil), "ves.io.schema.views.http_loadbalancer.ServicePolicyList")
	golang_proto.RegisterType((*ServicePolicyList)(nil), "ves.io.schema.views.http_loadbalancer.ServicePolicyList")
	proto.RegisterType((*ApiDefinitionList)(nil), "ves.io.schema.views.http_loadbalancer.ApiDefinitionList")
	golang_proto.RegisterType((*ApiDefinitionList)(nil), "ves.io.schema.views.http_loadbalancer.ApiDefinitionList")
	proto.RegisterType((*ApiDiscoverySetting)(nil), "ves.io.schema.views.http_loadbalancer.ApiDiscoverySetting")
	golang_proto.RegisterType((*ApiDiscoverySetting)(nil), "ves.io.schema.views.http_loadbalancer.ApiDiscoverySetting")
	proto.RegisterType((*SingleLoadBalancerAppSetting)(nil), "ves.io.schema.views.http_loadbalancer.SingleLoadBalancerAppSetting")
	golang_proto.RegisterType((*SingleLoadBalancerAppSetting)(nil), "ves.io.schema.views.http_loadbalancer.SingleLoadBalancerAppSetting")
	proto.RegisterType((*ShapeBotDefenseType)(nil), "ves.io.schema.views.http_loadbalancer.ShapeBotDefenseType")
	golang_proto.RegisterType((*ShapeBotDefenseType)(nil), "ves.io.schema.views.http_loadbalancer.ShapeBotDefenseType")
	proto.RegisterType((*ShapeBotDefensePolicyType)(nil), "ves.io.schema.views.http_loadbalancer.ShapeBotDefensePolicyType")
	golang_proto.RegisterType((*ShapeBotDefensePolicyType)(nil), "ves.io.schema.views.http_loadbalancer.ShapeBotDefensePolicyType")
	proto.RegisterType((*AppEndpointType)(nil), "ves.io.schema.views.http_loadbalancer.AppEndpointType")
	golang_proto.RegisterType((*AppEndpointType)(nil), "ves.io.schema.views.http_loadbalancer.AppEndpointType")
	proto.RegisterType((*WebMobileTrafficType)(nil), "ves.io.schema.views.http_loadbalancer.WebMobileTrafficType")
	golang_proto.RegisterType((*WebMobileTrafficType)(nil), "ves.io.schema.views.http_loadbalancer.WebMobileTrafficType")
	proto.RegisterType((*ShapeJavaScriptInsertType)(nil), "ves.io.schema.views.http_loadbalancer.ShapeJavaScriptInsertType")
	golang_proto.RegisterType((*ShapeJavaScriptInsertType)(nil), "ves.io.schema.views.http_loadbalancer.ShapeJavaScriptInsertType")
	proto.RegisterType((*ShapeJavaScriptInsertAllWithExceptionsType)(nil), "ves.io.schema.views.http_loadbalancer.ShapeJavaScriptInsertAllWithExceptionsType")
	golang_proto.RegisterType((*ShapeJavaScriptInsertAllWithExceptionsType)(nil), "ves.io.schema.views.http_loadbalancer.ShapeJavaScriptInsertAllWithExceptionsType")
	proto.RegisterType((*ShapeJavaScriptInsertAllType)(nil), "ves.io.schema.views.http_loadbalancer.ShapeJavaScriptInsertAllType")
	golang_proto.RegisterType((*ShapeJavaScriptInsertAllType)(nil), "ves.io.schema.views.http_loadbalancer.ShapeJavaScriptInsertAllType")
	proto.RegisterType((*ShapeJavaScriptInsertionRule)(nil), "ves.io.schema.views.http_loadbalancer.ShapeJavaScriptInsertionRule")
	golang_proto.RegisterType((*ShapeJavaScriptInsertionRule)(nil), "ves.io.schema.views.http_loadbalancer.ShapeJavaScriptInsertionRule")
	proto.RegisterType((*ShapeJavaScriptExclusionRule)(nil), "ves.io.schema.views.http_loadbalancer.ShapeJavaScriptExclusionRule")
	golang_proto.RegisterType((*ShapeJavaScriptExclusionRule)(nil), "ves.io.schema.views.http_loadbalancer.ShapeJavaScriptExclusionRule")
	proto.RegisterType((*IPThreatCategoryListType)(nil), "ves.io.schema.views.http_loadbalancer.IPThreatCategoryListType")
	golang_proto.RegisterType((*IPThreatCategoryListType)(nil), "ves.io.schema.views.http_loadbalancer.IPThreatCategoryListType")
	proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.http_loadbalancer.GlobalSpecType")
	golang_proto.RegisterType((*GlobalSpecType)(nil), "ves.io.schema.views.http_loadbalancer.GlobalSpecType")
	proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.http_loadbalancer.CreateSpecType")
	golang_proto.RegisterType((*CreateSpecType)(nil), "ves.io.schema.views.http_loadbalancer.CreateSpecType")
	proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.http_loadbalancer.ReplaceSpecType")
	golang_proto.RegisterType((*ReplaceSpecType)(nil), "ves.io.schema.views.http_loadbalancer.ReplaceSpecType")
	proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.http_loadbalancer.GetSpecType")
	golang_proto.RegisterType((*GetSpecType)(nil), "ves.io.schema.views.http_loadbalancer.GetSpecType")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/http_loadbalancer/types.proto", fileDescriptor_6478b2bb990a4a3e)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/http_loadbalancer/types.proto", fileDescriptor_6478b2bb990a4a3e)
}

var fileDescriptor_6478b2bb990a4a3e = []byte{
	// 11077 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x7d, 0x6c, 0x1b, 0x69,
	0x7a, 0x9f, 0x5e, 0x7e, 0x89, 0x7c, 0x28, 0x51, 0xc3, 0x57, 0x5f, 0x34, 0x6d, 0x4b, 0x34, 0x6d,
	0xef, 0x7a, 0xb5, 0x63, 0x5a, 0xa4, 0x3e, 0x6c, 0xe9, 0x76, 0xbd, 0x2b, 0xca, 0xf6, 0xd2, 0x8a,
	0xed, 0xd5, 0x8e, 0xe4, 0xdd, 0x4b, 0xf7, 0xee, 0x98, 0x11, 0x39, 0x92, 0xc6, 0x4b, 0x71, 0x78,
	0x33, 0x43, 0xdb, 0xba, 0xc6, 0x8d, 0xe1, 0xa6, 0xe9, 0x75, 0x8b, 0xa4, 0xc9, 0x16, 0x68, 0x92,
	0x6b, 0x1a, 0x14, 0x29, 0xda, 0xa4, 0xee, 0x17, 0x90, 0x02, 0x6d, 0x71, 0x74, 0x50, 0x63, 0x8b,
	0x00, 0xc1, 0x16, 0x68, 0x85, 0xa2, 0x45, 0xb7, 0x8b, 0xa2, 0xc8, 0xf9, 0x8a, 0xe6, 0x92, 0xa6,
	0xc0, 0x61, 0xf3, 0x47, 0x0f, 0x8b, 0xa0, 0x29, 0xde, 0x8f, 0x19, 0xce, 0x90, 0x43, 0x8a, 0xf2,
	0xc7, 0x1e, 0x12, 0xe8, 0x2f, 0x89, 0x33, 0xcf, 0xf3, 0xbc, 0xdf, 0xcf, 0xfb, 0xbc, 0xbf, 0xe7,
	0x79, 0x9f, 0x81, 0xec, 0x6d, 0xc5, 0xc8, 0xa8, 0xda, 0x39, 0xa3, 0xb4, 0xad, 0xec, 0xc8, 0xe7,
	0x6e, 0xab, 0xca, 0x1d, 0xe3, 0xdc, 0xb6, 0x69, 0xd6, 0x8a, 0x15, 0x4d, 0x2e, 0x6f, 0xc8, 0x15,
	0xb9, 0x5a, 0x52, 0xf4, 0x73, 0xe6, 0x6e, 0x4d, 0x31, 0x32, 0x35, 0x5d, 0x33, 0x35, 0x7c, 0x9a,
	0xb1, 0x64, 0x18, 0x4b, 0x86, 0xb2, 0x64, 0xda, 0x58, 0x92, 0x67, 0xb7, 0x54, 0x73, 0xbb, 0xbe,
	0x91, 0x29, 0x69, 0x3b, 0xe7, 0xb6, 0xb4, 0x2d, 0xed, 0x1c, 0xe5, 0xde, 0xa8, 0x6f, 0xd2, 0x5f,
	0xf4, 0x07, 0xfd, 0x8f, 0x49, 0x4d, 0x4e, 0x6e, 0x69, 0xda, 0x56, 0x45, 0x69, 0x52, 0x99, 0xea,
	0x8e, 0x62, 0x98, 0xf2, 0x4e, 0x8d, 0x13, 0x1c, 0x75, 0xd7, 0x54, 0xab, 0x99, 0xaa, 0x56, 0xe5,
	0x75, 0x4a, 0xa6, 0xdc, 0x2f, 0x6b, 0x5a, 0x45, 0x2d, 0xed, 0x3a, 0x6b, 0x9d, 0x7c, 0xc9, 0x4d,
	0xa1, 0xcb, 0xa6, 0x52, 0xac, 0xa8, 0x3b, 0xaa, 0xe9, 0x6e, 0x5d, 0x72, 0xb2, 0x85, 0x4e, 0xab,
	0x9b, 0x8a, 0x8b, 0xe0, 0x8c, 0x9b, 0xc0, 0x50, 0xf4, 0xdb, 0x6a, 0x49, 0x29, 0x7a, 0x14, 0x79,
	0xb6, 0x1b, 0x65, 0x51, 0xaf, 0x57, 0xdc, 0x82, 0x8f, 0xb8, 0xc9, 0x9d, 0xaf, 0x8e, 0xb5, 0x8c,
	0x92, 0x5c, 0x51, 0xcb, 0xb2, 0xa9, 0x78, 0x37, 0x9e, 0x0c, 0x48, 0xd1, 0xdd, 0x3d, 0x33, 0x5e,
	0xa3, 0xec, 0xec, 0x02, 0xaf, 0xea, 0x4f, 0x7a, 0x31, 0x75, 0xe9, 0xd2, 0xdb, 0xaa, 0x6e, 0xd6,
	0xe5, 0x4a, 0x71, 0x5b, 0x33, 0x4c, 0x17, 0xdd, 0x74, 0x67, 0xba, 0x62, 0xb9, 0x6a, 0x14, 0xd5,
	0xea, 0xa6, 0x76, 0x4e, 0xdb, 0xb8, 0xa5, 0x94, 0x4c, 0xc6, 0x91, 0xfe, 0x9e, 0x0f, 0xe2, 0x57,
	0xab, 0x15, 0xb5, 0xaa, 0x48, 0xb2, 0xa9, 0x5c, 0x63, 0x75, 0xc4, 0x67, 0x21, 0x62, 0x6e, 0xeb,
	0x8a, 0xb1, 0xad, 0x55, 0xca, 0x09, 0x94, 0x42, 0x67, 0x06, 0xf3, 0x43, 0x9f, 0x35, 0x10, 0xca,
	0x7e, 0xf7, 0x0f, 0x1f, 0xfb, 0x83, 0x53, 0xfe, 0xc4, 0xfd, 0x37, 0xa5, 0x26, 0x05, 0x7e, 0x1b,
	0x02, 0xf5, 0xaa, 0x6a, 0x26, 0x7c, 0x29, 0x74, 0x26, 0x96, 0x3b, 0x97, 0x71, 0x4f, 0x5b, 0x67,
	0xeb, 0x33, 0x76, 0x29, 0xab, 0x8a, 0xae, 0x6a, 0xe5, 0x9b, 0x55, 0xd5, 0xcc, 0xc3, 0x67, 0x0d,
	0x14, 0x5a, 0xbb, 0xbc, 0xfc, 0xf6, 0x8d, 0x4b, 0x12, 0x15, 0x84, 0x2f, 0xc1, 0x70, 0xdd, 0x50,
	0x8a, 0x6c, 0xaa, 0x6f, 0x14, 0xeb, 0x86, 0xa2, 0x17, 0xd5, 0x72, 0x22, 0x90, 0x42, 0x67, 0xa2,
	0xb9, 0x91, 0x16, 0xf9, 0x97, 0x77, 0x6a, 0xe6, 0x6e, 0xa1, 0x4f, 0x1a, 0xaa, 0x1b, 0x4a, 0xc1,
	0x34, 0x6b, 0xd7, 0x36, 0x6e, 0x1a, 0x8a, 0x7e, 0xb5, 0x8c, 0xbf, 0x06, 0x51, 0x5d, 0xd9, 0xb4,
	0xb9, 0x83, 0x94, 0x3b, 0x9d, 0xf1, 0x5a, 0x54, 0x6f, 0xd3, 0x3e, 0x91, 0x94, 0xcd, 0xf5, 0xdd,
	0x9a, 0x92, 0x1f, 0x7b, 0x78, 0x6f, 0x98, 0x73, 0x29, 0x55, 0x53, 0xdd, 0x54, 0x4b, 0x32, 0x19,
	0xe3, 0x42, 0x9f, 0x14, 0xd1, 0x95, 0x4d, 0x26, 0x3d, 0x9f, 0x86, 0xa1, 0x92, 0x56, 0xaf, 0x9a,
	0xc5, 0x8d, 0xdd, 0x62, 0x69, 0x5b, 0x53, 0x4b, 0x0a, 0x1e, 0x7a, 0xdc, 0x40, 0x81, 0xbd, 0x06,
	0xf2, 0x3f, 0x69, 0x20, 0xff, 0xac, 0x38, 0xb7, 0x12, 0x08, 0xfb, 0x85, 0x40, 0xfa, 0xb7, 0xfb,
	0x61, 0x70, 0x4d, 0xd1, 0x6f, 0x2b, 0xfa, 0x4d, 0xbd, 0x22, 0xd5, 0x2b, 0x0a, 0x9e, 0x03, 0x90,
	0xab, 0xbb, 0xc5, 0xb2, 0xb6, 0x23, 0xab, 0x55, 0xda, 0x6d, 0x9d, 0x9b, 0x15, 0x91, 0xab, 0xbb,
	0x97, 0x28, 0x21, 0xbe, 0x07, 0x43, 0x46, 0x4d, 0x29, 0x91, 0x0a, 0x59, 0xbc, 0xfe, 0x14, 0x3a,
	0x13, 0xc9, 0x4b, 0xdf, 0x7d, 0x84, 0x16, 0xc3, 0xbe, 0xf4, 0x2c, 0x79, 0x9d, 0x91, 0x6b, 0x6a,
	0xb1, 0xd9, 0xe9, 0x19, 0x83, 0x16, 0x5d, 0xac, 0xeb, 0x15, 0xba, 0x12, 0x8c, 0x4c, 0x8b, 0x8c,
	0x69, 0x44, 0x47, 0x55, 0xf7, 0x27, 0xee, 0x5b, 0xff, 0x7d, 0xdb, 0x87, 0x0a, 0x7d, 0x52, 0xcc,
	0x22, 0xe4, 0xc5, 0x57, 0x21, 0xb2, 0x21, 0x1b, 0x4a, 0xb1, 0x26, 0x9b, 0xdb, 0x74, 0x2c, 0x22,
	0xf9, 0x77, 0xc8, 0xac, 0x38, 0xf7, 0xdd, 0x47, 0x68, 0x36, 0x8c, 0xd2, 0x99, 0x9e, 0x4a, 0xb7,
	0x45, 0xd8, 0xe5, 0xfe, 0xc0, 0xe7, 0xa8, 0x81, 0x14, 0x26, 0x04, 0xab, 0xb2, 0xb9, 0x8d, 0x6f,
	0xc1, 0xb0, 0x4a, 0xa7, 0x66, 0xd1, 0x39, 0x85, 0x12, 0x21, 0xda, 0x5d, 0x17, 0x32, 0x3d, 0x29,
	0xc7, 0x4c, 0xdb, 0xe4, 0x2e, 0x20, 0x29, 0xae, 0xb6, 0xcd, 0xf8, 0x22, 0x08, 0x64, 0xae, 0xb8,
	0x0a, 0xea, 0xef, 0x79, 0xc2, 0x0c, 0x3d, 0xbc, 0x37, 0xe0, 0x64, 0x2d, 0x20, 0x29, 0xa6, 0x2b,
	0x9b, 0x8e, 0x02, 0x16, 0xff, 0xab, 0xef, 0x93, 0x06, 0xfa, 0x4f, 0x3e, 0xc8, 0x41, 0x88, 0x75,
	0xe7, 0xd4, 0x19, 0x78, 0x09, 0xe2, 0xce, 0x89, 0x90, 0xf3, 0x2f, 0x55, 0x77, 0x21, 0xde, 0x36,
	0xc8, 0x90, 0x80, 0x48, 0x5e, 0x36, 0x94, 0x14, 0xe9, 0x95, 0x64, 0xd4, 0x31, 0x0a, 0x70, 0x09,
	0x22, 0xeb, 0xd6, 0x32, 0x9c, 0x3a, 0x0f, 0x73, 0x30, 0x09, 0xc7, 0x3d, 0xfa, 0x2c, 0x63, 0xaf,
	0x55, 0xc0, 0xed, 0x0d, 0x85, 0x8b, 0x10, 0xbe, 0x54, 0xd7, 0xe9, 0x1c, 0x9f, 0xca, 0xc1, 0x34,
	0x24, 0x21, 0xe1, 0x25, 0x84, 0x2c, 0x4d, 0x4f, 0xfe, 0x9f, 0x86, 0xf0, 0x32, 0x59, 0x0a, 0xa9,
	0xfc, 0xee, 0x54, 0x0d, 0xaa, 0x30, 0x07, 0x2f, 0x7b, 0xf2, 0xb7, 0x2f, 0xe9, 0x1c, 0x5c, 0xcb,
	0xa7, 0xc8, 0x82, 0x4a, 0x5d, 0x2d, 0xc3, 0x09, 0x98, 0xf4, 0x62, 0x73, 0xac, 0x61, 0xaf, 0xd2,
	0xf3, 0x29, 0x18, 0x64, 0xfd, 0xe4, 0x5c, 0x86, 0xbe, 0xbd, 0x06, 0x42, 0x64, 0x19, 0xe6, 0xc4,
	0x99, 0xfc, 0x4b, 0x30, 0xec, 0x52, 0xc1, 0x0e, 0xba, 0xd0, 0x5e, 0x03, 0x05, 0x09, 0xdd, 0xbc,
	0x78, 0x7e, 0x25, 0x10, 0x46, 0x82, 0x6f, 0x25, 0x10, 0x0e, 0x0a, 0xa1, 0xf4, 0xff, 0x89, 0xc0,
	0xd0, 0x52, 0x4d, 0xbd, 0x5c, 0x2d, 0xd7, 0x34, 0xb5, 0x6a, 0x3e, 0xcb, 0xb2, 0xfd, 0x99, 0x4e,
	0xcb, 0x76, 0xfd, 0xbb, 0x8f, 0xd0, 0x6b, 0x61, 0x5f, 0x7a, 0xde, 0x6b, 0xe1, 0x90, 0x9f, 0x0a,
	0x2f, 0xfd, 0x19, 0x17, 0x6e, 0xad, 0x7d, 0xe1, 0xae, 0x59, 0x0b, 0x77, 0x3e, 0x8c, 0xd2, 0xd3,
	0x3d, 0x96, 0xdf, 0xfb, 0xd2, 0x7d, 0x80, 0x20, 0xee, 0x12, 0x40, 0x8b, 0x0e, 0xd2, 0xa2, 0xdf,
	0xfd, 0xee, 0x23, 0x74, 0x31, 0x8c, 0xd2, 0x17, 0x7a, 0x2c, 0xb5, 0x4d, 0x8e, 0xa3, 0xdd, 0x61,
	0xfe, 0xdf, 0x2f, 0xfa, 0x91, 0x34, 0x24, 0x37, 0x87, 0x8b, 0x56, 0xe2, 0x7d, 0x18, 0x76, 0xf1,
	0xee, 0x28, 0xe6, 0xb6, 0x56, 0xe6, 0xfa, 0xe3, 0xd5, 0x96, 0x71, 0x63, 0xdb, 0x72, 0x86, 0x6c,
	0x20, 0xd7, 0x29, 0xdd, 0x75, 0xd9, 0x2c, 0x6d, 0x2b, 0x3a, 0x59, 0xdf, 0x52, 0xdc, 0x21, 0x9a,
	0xbd, 0xed, 0xa4, 0x9c, 0xc2, 0x5f, 0x96, 0x72, 0x8a, 0x3c, 0x4f, 0xe5, 0xf4, 0xd0, 0xff, 0x49,
	0x03, 0xfd, 0x43, 0xff, 0x73, 0x56, 0x4e, 0x27, 0x61, 0x60, 0x69, 0xf5, 0x6a, 0xca, 0xea, 0xb8,
	0xe4, 0xb0, 0xc7, 0x9c, 0x00, 0x11, 0xfa, 0x59, 0x8f, 0x1a, 0xf9, 0x13, 0x70, 0xd4, 0x63, 0xbc,
	0x32, 0xec, 0x8f, 0x21, 0xf8, 0xa7, 0xd1, 0xa1, 0xbe, 0x7b, 0x56, 0x7d, 0x17, 0xde, 0x6b, 0xa0,
	0x7e, 0x42, 0x77, 0x41, 0x5c, 0xb0, 0xf5, 0x5d, 0xbf, 0x10, 0x4e, 0x7f, 0x1c, 0xa0, 0xa3, 0x65,
	0xcf, 0x0a, 0xbc, 0x0c, 0xb8, 0xaa, 0x15, 0xd5, 0x5a, 0x51, 0xae, 0x54, 0xb4, 0x3b, 0x4a, 0xb9,
	0x58, 0x51, 0x0d, 0x73, 0x1f, 0xa5, 0x37, 0x54, 0xd5, 0xae, 0xd6, 0x96, 0x18, 0xfd, 0x35, 0xd5,
	0x30, 0xf1, 0x1a, 0x0c, 0xb5, 0x4a, 0xf0, 0x53, 0x09, 0xaf, 0x78, 0x4e, 0xdc, 0x55, 0x5d, 0xd9,
	0x54, 0xef, 0xae, 0x99, 0xba, 0x5a, 0xdd, 0x22, 0xfc, 0x64, 0xfe, 0x16, 0xfa, 0xa4, 0x41, 0xd5,
	0x25, 0xf4, 0x9b, 0x30, 0x56, 0xaa, 0x1b, 0xa6, 0xb6, 0xd3, 0x56, 0x3b, 0x66, 0x20, 0x2e, 0xf6,
	0xb8, 0xfa, 0x96, 0xa9, 0x10, 0x57, 0x85, 0x0b, 0x7d, 0xd2, 0x70, 0xa9, 0xfd, 0x31, 0xae, 0x83,
	0xd0, 0x6a, 0xc8, 0x24, 0x82, 0x29, 0xff, 0x99, 0x68, 0x6e, 0xb6, 0xc7, 0xc2, 0x5c, 0x06, 0x60,
	0x7e, 0x94, 0xea, 0xad, 0x8f, 0x90, 0x4f, 0x18, 0x79, 0xf2, 0xfb, 0xbf, 0xeb, 0x0f, 0x7d, 0xf4,
	0x08, 0xf9, 0x04, 0x24, 0xc5, 0x0c, 0x27, 0x95, 0x81, 0xff, 0x32, 0xe0, 0x76, 0x85, 0x98, 0x08,
	0xd1, 0x82, 0xe7, 0x7b, 0x2c, 0xb8, 0x65, 0x13, 0xeb, 0x54, 0xb4, 0x20, 0xbb, 0xe9, 0x8c, 0xfc,
	0xab, 0x30, 0xd6, 0xd2, 0xbf, 0xd6, 0x44, 0x8a, 0x3b, 0x26, 0x5c, 0x30, 0x27, 0xce, 0x88, 0xb3,
	0x6c, 0x2a, 0xa5, 0x7f, 0xc5, 0x07, 0x13, 0x97, 0xb4, 0x3b, 0x55, 0xc3, 0xd4, 0x15, 0x79, 0x67,
	0xbd, 0x62, 0xbc, 0xcb, 0xce, 0x4f, 0xaa, 0x56, 0x5d, 0xd6, 0xaa, 0xa6, 0x72, 0xd7, 0xc4, 0xab,
	0x10, 0x33, 0xf5, 0xba, 0x61, 0x2a, 0xe5, 0x62, 0x49, 0x26, 0xbd, 0x49, 0xa7, 0x54, 0x24, 0x3f,
	0xf5, 0xa3, 0x06, 0x0a, 0xfc, 0xc6, 0x23, 0x14, 0xad, 0x29, 0x3b, 0x62, 0x8a, 0x28, 0x91, 0xf9,
	0x59, 0x52, 0xd3, 0xb0, 0x4e, 0xf4, 0xf5, 0x7d, 0x5b, 0xd3, 0x7f, 0xdb, 0x8f, 0xa4, 0x01, 0x2e,
	0x61, 0x59, 0xbe, 0xa9, 0x57, 0xf0, 0x0c, 0x84, 0xaa, 0x5a, 0xb1, 0xa4, 0x57, 0xba, 0x9d, 0x0f,
	0xf2, 0x81, 0xc7, 0x0d, 0x44, 0xf6, 0xc6, 0x60, 0x55, 0x5b, 0xd6, 0x2b, 0xf8, 0x0a, 0xf8, 0x09,
	0x47, 0xef, 0x67, 0x82, 0xd8, 0xc3, 0x7b, 0x84, 0x83, 0x48, 0xf9, 0x51, 0x03, 0xf5, 0x15, 0xfa,
	0x24, 0xf2, 0x33, 0x7f, 0x02, 0xa0, 0xa4, 0x57, 0xac, 0x8e, 0x19, 0x26, 0x07, 0x80, 0xdf, 0x6b,
	0x20, 0xd4, 0x7e, 0x08, 0xf8, 0xa7, 0x7e, 0x18, 0x77, 0x75, 0xcd, 0xaa, 0xac, 0xcb, 0x3b, 0x06,
	0x91, 0x8d, 0x97, 0x01, 0xcc, 0x8a, 0x51, 0x2c, 0x69, 0xd5, 0x4d, 0x75, 0x8b, 0x9e, 0xb7, 0xa2,
	0xb9, 0x09, 0xcf, 0x3a, 0xad, 0x57, 0x8c, 0x65, 0x4a, 0x95, 0x0f, 0xfc, 0xb0, 0x81, 0x90, 0x14,
	0x31, 0xad, 0x07, 0x78, 0x03, 0x04, 0x2a, 0x44, 0xd1, 0xf9, 0x89, 0x45, 0x31, 0x12, 0x3e, 0x3a,
	0x53, 0x4e, 0xb4, 0x88, 0x22, 0x42, 0x9a, 0x54, 0xb4, 0x75, 0x23, 0xf6, 0xa4, 0x10, 0xac, 0xff,
	0xc2, 0x48, 0x1a, 0x32, 0x5d, 0x94, 0x06, 0x9e, 0x83, 0xfe, 0xaa, 0x56, 0xdc, 0x31, 0x2b, 0x06,
	0x5f, 0xc6, 0xdd, 0xfb, 0x3a, 0x54, 0xd5, 0xae, 0x9b, 0x15, 0x03, 0x6f, 0x43, 0x98, 0xe8, 0x42,
	0xca, 0xc7, 0xc6, 0xe8, 0x72, 0x8f, 0x93, 0xb7, 0xfb, 0x64, 0xb2, 0x0b, 0xea, 0xaf, 0x1b, 0x0a,
	0x29, 0x69, 0xf1, 0xf8, 0xc7, 0x0d, 0x74, 0x04, 0xc6, 0x21, 0xb6, 0x7e, 0x6d, 0x2d, 0x45, 0x7b,
	0x58, 0x31, 0x15, 0xdd, 0xc0, 0xc1, 0xac, 0x98, 0x13, 0xe7, 0xf2, 0x69, 0x88, 0xee, 0xd0, 0x4e,
	0x6a, 0x0e, 0x97, 0x9f, 0x0f, 0x17, 0x35, 0x02, 0xd9, 0x4c, 0x26, 0xe6, 0xdf, 0xdf, 0x0b, 0x41,
	0x6c, 0x55, 0xd7, 0xee, 0xee, 0x52, 0x15, 0x64, 0x9a, 0x35, 0x03, 0xbf, 0x02, 0x83, 0xb4, 0x82,
	0xba, 0x52, 0x56, 0x75, 0xa5, 0x64, 0xd2, 0x81, 0x0a, 0xe7, 0x03, 0x64, 0x3a, 0x48, 0x03, 0xe4,
	0x95, 0xc4, 0xdf, 0xe0, 0x49, 0x08, 0xcb, 0xe5, 0x72, 0x71, 0xdb, 0x30, 0x0d, 0x3a, 0xbd, 0x2d,
	0xaa, 0x7e, 0xb9, 0x5c, 0x2e, 0x18, 0xa6, 0x81, 0x3f, 0x80, 0x18, 0xa9, 0x47, 0xcd, 0xae, 0x21,
	0xef, 0xcf, 0x8b, 0x4f, 0xd3, 0x2f, 0xcd, 0x99, 0x94, 0x27, 0xa7, 0x4f, 0x24, 0x0d, 0x9a, 0xfc,
	0x21, 0x6b, 0xfc, 0x32, 0xc4, 0xca, 0xca, 0xa6, 0x5c, 0xaf, 0x98, 0xc5, 0x6d, 0x45, 0x2e, 0x2b,
	0x3a, 0x9f, 0xf6, 0xdd, 0x07, 0x6f, 0x90, 0xf3, 0x14, 0x28, 0x0b, 0xce, 0x42, 0x94, 0x6b, 0xc0,
	0xaa, 0xbc, 0xa3, 0x50, 0x23, 0x2a, 0x92, 0x8f, 0x11, 0x5a, 0xcb, 0x18, 0xfb, 0xfb, 0x6f, 0x14,
	0xfa, 0x24, 0x60, 0x44, 0x37, 0xe4, 0x1d, 0x05, 0x5f, 0x24, 0xda, 0xab, 0xa6, 0x54, 0xcb, 0x45,
	0x27, 0x67, 0x7f, 0x07, 0x4e, 0x81, 0xd1, 0xae, 0x35, 0xf9, 0xdf, 0x80, 0x81, 0x9a, 0x6c, 0x18,
	0x45, 0x73, 0x5b, 0xd7, 0xea, 0x5b, 0xdb, 0xdc, 0xb6, 0xea, 0x5e, 0xeb, 0x28, 0xe1, 0x58, 0x67,
	0x0c, 0x78, 0x15, 0x46, 0x95, 0xaa, 0xbc, 0x51, 0x61, 0xf6, 0x48, 0xb1, 0xaa, 0xe9, 0x3b, 0x72,
	0x45, 0xfd, 0x96, 0x92, 0x80, 0x7d, 0x25, 0x21, 0x69, 0x98, 0xb1, 0x12, 0xb3, 0xe6, 0x86, 0xc5,
	0x88, 0x25, 0x18, 0x2b, 0xab, 0x86, 0x97, 0xc8, 0x68, 0x0f, 0x22, 0x47, 0x38, 0xaf, 0x5b, 0xe6,
	0x4b, 0x10, 0xa8, 0x69, 0xba, 0x99, 0x18, 0xa2, 0x38, 0x0b, 0xfe, 0x8c, 0xa8, 0x8d, 0xd9, 0x19,
	0xd2, 0x37, 0xa1, 0xa9, 0x40, 0xe2, 0xcf, 0xfe, 0xcc, 0x2f, 0xd1, 0xf7, 0x8b, 0x03, 0x9f, 0x5f,
	0x8c, 0x90, 0x69, 0x3c, 0x23, 0xce, 0x8a, 0x0b, 0xf9, 0x73, 0x30, 0xc2, 0x7b, 0x95, 0x8d, 0xa9,
	0x35, 0xa7, 0xc7, 0x1f, 0x37, 0x50, 0x90, 0xcf, 0xe9, 0xc0, 0x93, 0x06, 0xea, 0x9f, 0x13, 0xe7,
	0xc5, 0xf3, 0xe2, 0x85, 0x7c, 0x06, 0x46, 0xdd, 0x55, 0xb6, 0x38, 0x46, 0x1f, 0x37, 0x10, 0x70,
	0x8e, 0x08, 0xd1, 0xe8, 0xd9, 0x69, 0x31, 0x9b, 0x5d, 0x09, 0x84, 0x03, 0x42, 0x70, 0x25, 0x10,
	0x8e, 0x08, 0xb0, 0x12, 0x08, 0x0f, 0x08, 0x83, 0x2b, 0x81, 0xf0, 0xa0, 0x10, 0x5b, 0x09, 0x84,
	0x63, 0xc2, 0x50, 0xda, 0x84, 0x41, 0xd7, 0xf2, 0xc0, 0xf3, 0x30, 0x52, 0xae, 0x1a, 0xc5, 0xdb,
	0x5a, 0xc5, 0x54, 0x74, 0x5d, 0x2e, 0xee, 0xc8, 0x55, 0x79, 0x4b, 0x29, 0xbb, 0x16, 0x09, 0x2e,
	0x57, 0x8d, 0x77, 0x39, 0xc1, 0x75, 0xf6, 0x1e, 0x9f, 0xe6, 0xad, 0xf7, 0xd1, 0xd6, 0xc7, 0x3f,
	0x6b, 0x20, 0xdf, 0x85, 0xe9, 0xf6, 0xc6, 0x07, 0x3e, 0xbf, 0x88, 0xb2, 0xe9, 0xff, 0xd0, 0x0f,
	0xe3, 0xee, 0x55, 0xb9, 0x54, 0x37, 0x35, 0xa2, 0xa2, 0x9e, 0xef, 0xf2, 0x74, 0x2b, 0x64, 0xff,
	0xd3, 0x29, 0x64, 0x87, 0xb2, 0x0c, 0x3e, 0xa5, 0xb2, 0x0c, 0xbd, 0x48, 0x65, 0xe9, 0xa1, 0x17,
	0xc2, 0x3d, 0x4c, 0xe2, 0xee, 0x7a, 0x21, 0xe2, 0xb9, 0xba, 0x51, 0x0f, 0x7a, 0x01, 0x3a, 0x70,
	0xee, 0xaf, 0x17, 0x7a, 0x59, 0x7a, 0xbd, 0xe9, 0x85, 0xc1, 0x7d, 0x25, 0xf9, 0x0e, 0xaa, 0x17,
	0x62, 0x3d, 0x88, 0xec, 0xae, 0x17, 0xf0, 0x3e, 0x7a, 0x61, 0xe8, 0xf3, 0x8b, 0x03, 0x44, 0x2f,
	0xcc, 0x8a, 0x33, 0xe2, 0x79, 0x31, 0x9b, 0xf3, 0xda, 0xe5, 0x9c, 0x1a, 0xc1, 0x3f, 0x27, 0xce,
	0xe7, 0xb3, 0x1d, 0xd4, 0xc7, 0x11, 0x72, 0x46, 0xe0, 0xc4, 0xe4, 0x9c, 0x10, 0xb9, 0x20, 0x2e,
	0x88, 0x54, 0x21, 0x74, 0x57, 0x20, 0x83, 0x9c, 0x67, 0x80, 0x2a, 0x90, 0x19, 0x31, 0x3b, 0x6b,
	0x2b, 0x90, 0x7e, 0x21, 0x6c, 0x2b, 0x90, 0x21, 0x41, 0x58, 0x09, 0x84, 0x05, 0x21, 0xbe, 0x12,
	0x08, 0xc7, 0x05, 0x9c, 0xfe, 0x19, 0xc0, 0x05, 0xd9, 0xd8, 0x5e, 0xa5, 0x87, 0x6f, 0xcb, 0xe2,
	0xc7, 0x2a, 0x44, 0xb7, 0x65, 0x63, 0x9b, 0x43, 0xe5, 0x09, 0x81, 0x5a, 0x31, 0x27, 0x5b, 0x61,
	0x65, 0xad, 0x6e, 0x2a, 0x99, 0x26, 0x37, 0xdd, 0xff, 0x4e, 0xee, 0x59, 0xd3, 0x87, 0xd8, 0x32,
	0x61, 0xeb, 0xbf, 0x04, 0x72, 0x9a, 0xba, 0xb0, 0x6d, 0x33, 0xa5, 0xff, 0x01, 0x02, 0xe1, 0xba,
	0xaa, 0xeb, 0x9a, 0xde, 0x94, 0x82, 0xd7, 0x20, 0xaa, 0xe9, 0xea, 0x96, 0x5a, 0x2d, 0xd6, 0x34,
	0xad, 0xc2, 0x0d, 0xb2, 0x1e, 0x8d, 0x44, 0x27, 0xa7, 0x04, 0xec, 0xc7, 0xaa, 0xa6, 0x55, 0xf0,
	0x22, 0xf4, 0xd7, 0x14, 0xbd, 0xa4, 0x54, 0xad, 0x43, 0x54, 0xaa, 0x45, 0xe0, 0x15, 0x5d, 0x2e,
	0x91, 0xf5, 0x2a, 0x57, 0x56, 0x19, 0x9d, 0x64, 0x31, 0xa4, 0xff, 0x78, 0x1c, 0x92, 0x12, 0x69,
	0xef, 0x9a, 0xba, 0x53, 0xab, 0x28, 0x4b, 0xe5, 0xdb, 0x64, 0xc5, 0x97, 0xdf, 0x66, 0xae, 0x07,
	0x7c, 0x09, 0x70, 0x49, 0xdb, 0xd9, 0xd1, 0xaa, 0x45, 0x67, 0xb7, 0x75, 0x3f, 0xaa, 0x09, 0x8c,
	0xa3, 0xd9, 0x7f, 0x78, 0x07, 0x46, 0xec, 0xb3, 0xbd, 0x53, 0x0e, 0x53, 0x7f, 0x0b, 0x3d, 0x2a,
	0xa1, 0xf6, 0xe1, 0x2c, 0xf4, 0x49, 0xd8, 0x12, 0xec, 0x28, 0xee, 0x4d, 0x08, 0xd7, 0x74, 0x55,
	0xd3, 0x55, 0x73, 0x97, 0x1a, 0x85, 0xb1, 0x36, 0x0d, 0x4b, 0x5a, 0xac, 0x56, 0xb7, 0x56, 0x39,
	0x15, 0x5b, 0x2e, 0x92, 0xcd, 0x85, 0x7f, 0x0b, 0x81, 0x60, 0x1f, 0x8d, 0x8c, 0xfa, 0x86, 0xa1,
	0x98, 0xd6, 0xa9, 0xec, 0xdd, 0x1e, 0x6b, 0xdb, 0xb9, 0x53, 0x33, 0xd6, 0x61, 0x68, 0x8d, 0x09,
	0xbe, 0x5c, 0x35, 0xf5, 0xdd, 0xfc, 0xe9, 0xc7, 0x6c, 0x9a, 0xa3, 0xef, 0x3c, 0x42, 0x01, 0xf0,
	0xf5, 0xb1, 0xb9, 0xf6, 0x1d, 0x62, 0x37, 0xd3, 0x19, 0xf6, 0xe1, 0x23, 0xe4, 0x0b, 0xf7, 0x49,
	0x43, 0x8a, 0x9b, 0x19, 0x5f, 0x73, 0xe8, 0x07, 0x7a, 0xc6, 0x2d, 0xea, 0xca, 0x1d, 0x5d, 0x35,
	0x15, 0x0e, 0x32, 0x7b, 0x8f, 0x92, 0xc3, 0x62, 0xa0, 0x4c, 0x12, 0xe3, 0xc1, 0xe7, 0x21, 0xd6,
	0x22, 0x25, 0xcc, 0x94, 0x27, 0xd9, 0xc5, 0x6c, 0x6c, 0xcc, 0x47, 0x94, 0x75, 0xcd, 0xc5, 0x78,
	0x1b, 0xc6, 0x74, 0xe5, 0x9b, 0x75, 0xc5, 0xb0, 0x34, 0xbe, 0x51, 0x34, 0xb5, 0xa2, 0x5c, 0x2e,
	0x27, 0x22, 0xb4, 0xdb, 0x5a, 0x41, 0x31, 0xa6, 0xe3, 0xaf, 0xcb, 0x55, 0xb5, 0x56, 0xaf, 0xd0,
	0xcd, 0x84, 0xf5, 0x4e, 0xcb, 0x99, 0x21, 0xd5, 0x5c, 0x67, 0xd2, 0x30, 0x2f, 0x80, 0xb1, 0x1a,
	0xeb, 0xda, 0x52, 0xb9, 0x8c, 0x7f, 0x0a, 0x8e, 0x78, 0x94, 0xab, 0x2b, 0x3b, 0xda, 0x6d, 0xa2,
	0xf8, 0xfd, 0x67, 0x22, 0xf9, 0xd3, 0x44, 0xc6, 0xc0, 0x47, 0x28, 0x92, 0xee, 0xd7, 0xc9, 0x76,
	0x79, 0xdf, 0xe7, 0x29, 0x7e, 0xac, 0x55, 0xbc, 0x44, 0x85, 0xe0, 0xbb, 0x30, 0xae, 0x2b, 0x46,
	0x4d, 0xab, 0x1a, 0x4a, 0x6b, 0xd3, 0xa2, 0xcf, 0xab, 0x69, 0x23, 0x56, 0x09, 0xae, 0xb6, 0x6d,
	0x40, 0xd2, 0xab, 0x64, 0xde, 0xb8, 0x81, 0x83, 0x34, 0x6e, 0xbc, 0xad, 0x00, 0xde, 0x3a, 0x62,
	0x5c, 0xf1, 0xe9, 0x53, 0xd1, 0x98, 0x33, 0x8a, 0x36, 0x6d, 0xd0, 0x65, 0x5c, 0x31, 0x8a, 0x6b,
	0x9c, 0x80, 0xd4, 0xed, 0x3c, 0x44, 0x2d, 0xbe, 0x3b, 0xf2, 0x26, 0xb5, 0x30, 0x3b, 0xcd, 0x35,
	0x9f, 0x04, 0x9c, 0xf4, 0x3d, 0x79, 0x13, 0x5f, 0x05, 0x3f, 0x61, 0x10, 0x7a, 0xd6, 0x7c, 0xf1,
	0x87, 0xf7, 0x08, 0xc7, 0xa7, 0xf7, 0x10, 0x59, 0x21, 0x3f, 0x60, 0xfb, 0x1a, 0x79, 0x82, 0xbf,
	0x0a, 0xe1, 0x3b, 0xf2, 0x26, 0x85, 0x2e, 0x12, 0xf1, 0x9e, 0xe5, 0x8d, 0x3f, 0xbc, 0x17, 0xb1,
	0xd8, 0x0c, 0xb7, 0xd4, 0xfe, 0x3b, 0xf2, 0x26, 0x85, 0xe3, 0xbf, 0x0a, 0x03, 0x72, 0xad, 0x56,
	0xdc, 0x54, 0x75, 0xe5, 0x8e, 0x5c, 0xa9, 0x24, 0x66, 0x0f, 0x04, 0x89, 0x3a, 0x59, 0x0b, 0x3e,
	0x29, 0x2a, 0xd7, 0x6a, 0x57, 0xf8, 0x4f, 0x7c, 0x09, 0xa2, 0x25, 0x4d, 0x37, 0x2c, 0x0d, 0x88,
	0xa9, 0xe0, 0x23, 0x2d, 0x82, 0x97, 0x35, 0xdd, 0x60, 0xba, 0x2c, 0x1f, 0xb6, 0xd4, 0x82, 0x04,
	0x25, 0xfb, 0x29, 0x5e, 0x80, 0x01, 0xab, 0xf7, 0x8d, 0x5a, 0x79, 0x37, 0x31, 0xd2, 0xa5, 0xfb,
	0xfd, 0x92, 0x35, 0x52, 0x6b, 0xb5, 0xf2, 0x2e, 0x19, 0x38, 0x6e, 0xa1, 0x50, 0xce, 0xd1, 0xae,
	0x9c, 0xc0, 0x48, 0x29, 0xe3, 0x3b, 0x70, 0xc4, 0x1e, 0x71, 0x65, 0xa3, 0x68, 0x68, 0xa5, 0x0f,
	0x14, 0xd3, 0x32, 0x64, 0xc7, 0xbb, 0x88, 0x09, 0x48, 0x96, 0x86, 0x7a, 0x4f, 0xd9, 0x58, 0xa3,
	0x6c, 0xdc, 0x8e, 0x7d, 0x17, 0xe2, 0xed, 0xa2, 0x12, 0x54, 0xd4, 0x19, 0xcf, 0x3d, 0xf9, 0x3d,
	0x65, 0xc3, 0x70, 0x08, 0xa0, 0x7b, 0x40, 0x40, 0x1a, 0xba, 0xd3, 0x22, 0xb7, 0x00, 0x23, 0x96,
	0xf9, 0xa9, 0x2b, 0xa6, 0xbe, 0x6b, 0xf5, 0x76, 0xb2, 0x4b, 0x2d, 0x83, 0x12, 0xe6, 0x3c, 0x12,
	0x61, 0xe1, 0x1d, 0x7d, 0x15, 0x06, 0x5c, 0x12, 0x8e, 0x7a, 0x1a, 0xec, 0x0e, 0x8e, 0xe6, 0x59,
	0xb9, 0x10, 0x94, 0xa2, 0xba, 0x43, 0xd4, 0x3c, 0xf4, 0x9b, 0xea, 0x8e, 0xa2, 0xd5, 0xcd, 0xc4,
	0x31, 0x6a, 0x77, 0x1d, 0xfb, 0xac, 0x81, 0x82, 0x33, 0xd3, 0xd3, 0xd3, 0xd3, 0x64, 0x95, 0x7d,
	0xfb, 0x11, 0x53, 0xb0, 0xc4, 0x02, 0x7b, 0xfc, 0x1f, 0x4f, 0x49, 0x16, 0x31, 0x5e, 0x02, 0xbe,
	0xa1, 0x16, 0x37, 0xea, 0x9b, 0x9b, 0x8a, 0xae, 0x56, 0xb7, 0x12, 0x13, 0x5d, 0x1a, 0x12, 0x92,
	0x86, 0x18, 0x7d, 0xde, 0x22, 0xc7, 0xd7, 0x60, 0x90, 0xf1, 0x5a, 0xcd, 0x98, 0xa4, 0xfc, 0x93,
	0x2d, 0xfc, 0x8c, 0xa1, 0xd9, 0xb5, 0xdc, 0x8a, 0x0c, 0x49, 0x03, 0x8c, 0x9b, 0x37, 0x64, 0x19,
	0xe2, 0xd6, 0x44, 0xd8, 0xa1, 0xf6, 0x0d, 0xa9, 0xd1, 0x89, 0x2e, 0x35, 0xea, 0x97, 0x04, 0xce,
	0x70, 0xdd, 0xa2, 0xc7, 0xdf, 0x80, 0x41, 0xc6, 0x6c, 0x55, 0x29, 0x4d, 0x05, 0x9c, 0xef, 0x71,
	0x77, 0x6d, 0x35, 0xac, 0x0a, 0xfd, 0xd2, 0xc0, 0x8e, 0xe3, 0x19, 0x7e, 0x03, 0x86, 0x48, 0xe7,
	0xcb, 0x25, 0xb3, 0x58, 0xaa, 0xd4, 0x0d, 0x53, 0xd1, 0x13, 0xa7, 0xba, 0x54, 0x31, 0x2c, 0xc5,
	0x38, 0xf9, 0x32, 0xa3, 0xc6, 0x3f, 0x01, 0x63, 0x65, 0xad, 0x58, 0xd5, 0xd8, 0x14, 0x72, 0xca,
	0x39, 0xdd, 0x55, 0xce, 0x70, 0x59, 0xbb, 0xa1, 0xd1, 0x39, 0xd4, 0x14, 0x96, 0xcc, 0xc3, 0x88,
	0xd7, 0xa6, 0x8f, 0x05, 0xf0, 0x7f, 0xa0, 0xec, 0x52, 0x33, 0x30, 0x22, 0x91, 0x7f, 0xf1, 0x08,
	0x04, 0x6f, 0xcb, 0x95, 0xba, 0xc2, 0xb0, 0x4b, 0x89, 0xfd, 0x58, 0xf4, 0x5d, 0x40, 0x8b, 0xff,
	0x0c, 0x7d, 0xdc, 0x40, 0xbf, 0x85, 0x60, 0x12, 0xc6, 0xae, 0x69, 0x72, 0x39, 0x95, 0xa7, 0x7d,
	0xa1, 0x56, 0xb7, 0x52, 0xe4, 0x18, 0xa6, 0x6b, 0x15, 0x1c, 0xcc, 0x8a, 0xb3, 0xe2, 0x1c, 0x4c,
	0xc3, 0x71, 0x89, 0x6d, 0x65, 0xe7, 0x24, 0xae, 0xf5, 0x53, 0xce, 0xdd, 0x08, 0x0f, 0xcd, 0x5b,
	0x96, 0xb7, 0x98, 0xcd, 0x89, 0xd9, 0x19, 0x88, 0x43, 0x78, 0x4d, 0x29, 0xd5, 0xa9, 0xe9, 0x13,
	0xcc, 0xce, 0x8a, 0xd9, 0x0b, 0x90, 0x84, 0xf8, 0xaa, 0xae, 0x99, 0x5a, 0x49, 0xab, 0xa4, 0x6e,
	0xd6, 0xb6, 0x74, 0xb9, 0xac, 0x18, 0x38, 0x98, 0x5d, 0x10, 0x73, 0x39, 0x38, 0x05, 0xa3, 0xd7,
	0x55, 0xa3, 0xa4, 0x54, 0x2a, 0x72, 0x55, 0xd1, 0xea, 0x46, 0xca, 0xb2, 0x16, 0xa3, 0xb9, 0x39,
	0x31, 0x77, 0x41, 0xcc, 0x2d, 0x88, 0x33, 0xb9, 0xfc, 0x69, 0xc0, 0x0e, 0x5b, 0xaf, 0xa3, 0x47,
	0xe1, 0x04, 0xc4, 0xb8, 0xa9, 0xe1, 0x24, 0xe9, 0xdf, 0x6b, 0xa0, 0x10, 0x21, 0x39, 0x2f, 0x5e,
	0xc8, 0x9f, 0x04, 0x20, 0x0a, 0xdb, 0x71, 0x26, 0x18, 0xda, 0x6b, 0xa0, 0x18, 0x3d, 0x0f, 0xcc,
	0x89, 0x73, 0x39, 0x72, 0x3c, 0xce, 0xa7, 0x20, 0x4a, 0x14, 0x9a, 0x13, 0x48, 0x1e, 0xd9, 0x6b,
	0xa0, 0x61, 0x0a, 0x24, 0x4f, 0x8b, 0xb9, 0x6c, 0xfe, 0x34, 0x08, 0x77, 0x2c, 0xfd, 0xe1, 0x24,
	0x1b, 0xdf, 0x6b, 0xa0, 0x31, 0x4a, 0x36, 0x23, 0xe6, 0x66, 0xf3, 0x67, 0x60, 0xd8, 0xb9, 0xe4,
	0x9d, 0x94, 0xc9, 0xbd, 0x06, 0x3a, 0x42, 0x29, 0xe7, 0xc5, 0xdc, 0xf9, 0x7c, 0xda, 0x5e, 0x56,
	0x0e, 0x9a, 0x89, 0xbd, 0x06, 0x3a, 0xfe, 0x84, 0xae, 0x6c, 0x71, 0x86, 0x16, 0x6a, 0x2f, 0x12,
	0x27, 0xd9, 0x89, 0xbd, 0x06, 0x4a, 0x51, 0xb2, 0x19, 0x71, 0x66, 0x36, 0x3f, 0x0d, 0x63, 0x7c,
	0x7a, 0x35, 0xa7, 0x1b, 0x23, 0x1e, 0x7b, 0xdc, 0x40, 0xa7, 0xf8, 0x11, 0xe8, 0xe4, 0x93, 0x06,
	0x0a, 0xcd, 0xcc, 0x8b, 0xa9, 0x99, 0xa6, 0x47, 0x39, 0x24, 0xf4, 0x33, 0xe0, 0x64, 0x25, 0x10,
	0x1e, 0x16, 0x46, 0x56, 0x02, 0xe1, 0x31, 0x61, 0x7c, 0x25, 0x10, 0x3e, 0x22, 0x24, 0x57, 0x02,
	0xe1, 0xe3, 0xc2, 0xc4, 0x4a, 0x20, 0x9c, 0x12, 0x4e, 0xac, 0x04, 0xc2, 0x27, 0x85, 0x53, 0xe9,
	0x5f, 0xf1, 0xc3, 0x29, 0x6a, 0x99, 0x92, 0x45, 0xc3, 0xac, 0xd3, 0xf7, 0x54, 0x73, 0xfb, 0x12,
	0xd3, 0x7c, 0x6f, 0x3b, 0xcf, 0x14, 0x51, 0xba, 0xea, 0xb8, 0x67, 0x13, 0x51, 0x33, 0xba, 0x75,
	0x9f, 0x6a, 0xba, 0x34, 0x25, 0xd8, 0xb6, 0xff, 0xc7, 0x17, 0x20, 0x40, 0x9d, 0xb2, 0x3e, 0x4f,
	0x65, 0x49, 0x8e, 0xa2, 0x0e, 0x0f, 0x28, 0x47, 0x37, 0x28, 0x07, 0xce, 0x43, 0x5c, 0xae, 0x9b,
	0x1a, 0x0b, 0x2b, 0xb2, 0x2c, 0xd0, 0x7d, 0x62, 0x73, 0x08, 0x43, 0x41, 0x33, 0x4c, 0xcb, 0x12,
	0xcd, 0xc1, 0x80, 0x8b, 0x9d, 0xb9, 0x86, 0x07, 0x2d, 0x03, 0x36, 0xa0, 0xfb, 0xb6, 0x29, 0x9c,
	0xb7, 0xed, 0xe0, 0x29, 0x34, 0xad, 0x20, 0x17, 0x6f, 0xa8, 0x6b, 0xd1, 0x96, 0x5d, 0xe4, 0x28,
	0x7d, 0x31, 0xfc, 0xf9, 0x45, 0x8a, 0x08, 0xcf, 0x90, 0x79, 0xe4, 0x94, 0xc5, 0x10, 0x59, 0x83,
	0x0e, 0xbe, 0x15, 0xc9, 0x13, 0x9c, 0x15, 0xe7, 0xc4, 0x79, 0x0e, 0xe3, 0xff, 0xeb, 0x20, 0x0c,
	0xb5, 0x0c, 0x8d, 0xdd, 0x93, 0xe8, 0xc0, 0x3d, 0xd9, 0x32, 0x7e, 0xbe, 0x83, 0x8c, 0xdf, 0x06,
	0x0c, 0x38, 0x8e, 0x9a, 0x46, 0xc2, 0x4f, 0xcd, 0x5c, 0x6f, 0xbf, 0x5a, 0x73, 0xca, 0x90, 0x79,
	0xf4, 0x9e, 0xa2, 0x6e, 0x6d, 0x9b, 0x5e, 0x98, 0x7f, 0x02, 0x49, 0xd1, 0xe6, 0x91, 0xd5, 0xf0,
	0x1e, 0xe9, 0xe0, 0xb3, 0x8d, 0x74, 0xe8, 0x19, 0x46, 0xba, 0xff, 0xa0, 0x23, 0x8d, 0xd7, 0xa1,
	0x9f, 0x1b, 0xe5, 0xfc, 0x88, 0x93, 0xea, 0x70, 0x0e, 0x68, 0x0e, 0x50, 0xe2, 0xb1, 0x13, 0x43,
	0x70, 0xf6, 0x8d, 0x25, 0x0a, 0xeb, 0x20, 0xc8, 0xfc, 0xb8, 0x68, 0xc5, 0xff, 0x71, 0xec, 0x6c,
	0xe9, 0x99, 0x0f, 0x9e, 0x1c, 0xc3, 0x1f, 0x92, 0xdd, 0x8f, 0x17, 0x63, 0x9f, 0x5f, 0x8c, 0xe6,
	0xc4, 0xac, 0xb8, 0x40, 0x01, 0xe0, 0x0b, 0xdd, 0x66, 0x6e, 0x90, 0x23, 0x3d, 0x41, 0x8a, 0xfd,
	0x32, 0x20, 0x26, 0xfd, 0xaf, 0x7c, 0x10, 0xb7, 0x67, 0xae, 0x0d, 0x85, 0xfe, 0x78, 0xe6, 0xee,
	0x55, 0x88, 0x51, 0x53, 0xb1, 0x09, 0xd6, 0xfa, 0x3d, 0x6d, 0x77, 0x66, 0x4f, 0xd2, 0x5a, 0x5b,
	0x35, 0x96, 0x06, 0x75, 0xe7, 0x4f, 0xe7, 0x00, 0x07, 0x9e, 0xdb, 0x00, 0x2f, 0xc2, 0xe7, 0x17,
	0xfb, 0x49, 0x67, 0xcf, 0x8a, 0x33, 0xe9, 0xff, 0xe2, 0x83, 0x71, 0xbb, 0xe3, 0x2e, 0xb1, 0x4a,
	0xf0, 0x1d, 0xfb, 0xc7, 0xb6, 0xf4, 0x47, 0x59, 0xf7, 0xb1, 0x3e, 0x28, 0x5a, 0xc7, 0x46, 0xde,
	0x8b, 0x67, 0x3a, 0xf7, 0xa2, 0xbb, 0xfa, 0x7c, 0xaa, 0x0d, 0xeb, 0xed, 0xaf, 0xbe, 0x84, 0x7e,
	0x55, 0x60, 0xc4, 0xee, 0x56, 0xe6, 0x8a, 0xa7, 0x3f, 0xf1, 0x75, 0x88, 0x58, 0x93, 0x63, 0xf3,
	0x00, 0xd8, 0xdb, 0xc0, 0xc3, 0x7b, 0x41, 0xca, 0x77, 0xff, 0x11, 0x42, 0x52, 0x98, 0xcf, 0x92,
	0xcd, 0xf4, 0xcf, 0xc7, 0x20, 0x62, 0x97, 0x83, 0xdf, 0x87, 0x01, 0x83, 0xae, 0xba, 0x22, 0x25,
	0xe0, 0xf2, 0xe7, 0x0f, 0xb2, 0x6a, 0x9b, 0x9a, 0x9f, 0xa8, 0x2d, 0x26, 0x8d, 0xd5, 0x5c, 0x26,
	0x56, 0x92, 0x35, 0x26, 0x54, 0xbc, 0xef, 0x40, 0xe1, 0x40, 0x6d, 0xcb, 0xb3, 0xd0, 0x27, 0x0d,
	0x5a, 0x12, 0x59, 0x11, 0x26, 0x8c, 0xb6, 0x0c, 0x3a, 0x2f, 0xe9, 0x60, 0xfe, 0xc3, 0x0e, 0xf3,
	0xb9, 0xd0, 0x27, 0x0d, 0x97, 0x5d, 0x4f, 0x58, 0xa9, 0x06, 0xf0, 0xa8, 0x08, 0x56, 0x58, 0x91,
	0x85, 0x10, 0xf3, 0x3d, 0xff, 0x2b, 0x07, 0x2d, 0xd3, 0x31, 0xd8, 0xb6, 0x53, 0x22, 0x5e, 0x6a,
	0x3e, 0x64, 0xe3, 0xba, 0xf8, 0x2f, 0xe0, 0xe3, 0x06, 0x1a, 0x84, 0x28, 0x84, 0xe8, 0x53, 0x03,
	0xa3, 0xb9, 0x4f, 0x1a, 0xe8, 0x57, 0x01, 0x7e, 0x09, 0x41, 0x80, 0xc8, 0x99, 0xfa, 0x36, 0x82,
	0x7b, 0x30, 0xe6, 0x1e, 0xd1, 0x5c, 0x88, 0x8d, 0x0d, 0x24, 0x5b, 0x07, 0x23, 0x17, 0xb6, 0xba,
	0x15, 0xce, 0x74, 0xe8, 0xc5, 0xdc, 0x10, 0xeb, 0x8f, 0x94, 0xd5, 0x7c, 0x38, 0xee, 0xd9, 0xf2,
	0x5c, 0x88, 0xb5, 0x01, 0xf7, 0xdf, 0xac, 0x7e, 0x50, 0xd5, 0xee, 0x54, 0xe1, 0x41, 0x04, 0xa0,
	0xe9, 0x72, 0x95, 0xfe, 0x24, 0x0c, 0xaf, 0xe2, 0x84, 0xb3, 0x5e, 0x19, 0xc7, 0x6a, 0x4f, 0x46,
	0x0b, 0xeb, 0xeb, 0xab, 0x29, 0xb6, 0x9a, 0x73, 0xbe, 0x14, 0x82, 0x97, 0x5b, 0x88, 0x89, 0x8a,
	0xc8, 0x30, 0xec, 0x2e, 0x19, 0x25, 0x6a, 0x24, 0xc5, 0x10, 0x40, 0x98, 0xc0, 0x63, 0x1e, 0x84,
	0xb2, 0xb9, 0x9d, 0x0c, 0x10, 0x32, 0x38, 0x8d, 0xc7, 0xdb, 0xdf, 0xeb, 0xca, 0x96, 0x72, 0x37,
	0x09, 0x54, 0x8e, 0x44, 0xfe, 0x87, 0xb7, 0xe1, 0x38, 0x1c, 0x71, 0x11, 0x3a, 0x6d, 0x09, 0x01,
	0xe1, 0x13, 0x1d, 0x5f, 0xbe, 0x3f, 0xfd, 0xf5, 0x0c, 0xf9, 0x27, 0x19, 0x65, 0x56, 0x45, 0x8a,
	0x98, 0x0a, 0x70, 0x63, 0x3f, 0x81, 0xa7, 0xba, 0x0a, 0xe4, 0x66, 0x75, 0xb2, 0x9f, 0x9f, 0xc5,
	0xe0, 0x5a, 0x57, 0x79, 0x09, 0x84, 0x3b, 0xbf, 0x4c, 0x0e, 0x38, 0x2a, 0x66, 0xa4, 0x7d, 0x09,
	0x04, 0x67, 0x71, 0xd2, 0x3d, 0x17, 0xba, 0x8f, 0xc6, 0x2b, 0x6d, 0xe4, 0x1d, 0xc7, 0x23, 0x85,
	0x13, 0x9e, 0xa4, 0xcd, 0x11, 0x79, 0x19, 0x1f, 0xf1, 0xa2, 0x68, 0x1f, 0x93, 0xd7, 0xf0, 0xab,
	0x2d, 0x84, 0xee, 0x3d, 0x32, 0xc3, 0xb7, 0x7b, 0xf6, 0x2b, 0x39, 0x68, 0xcd, 0xe6, 0x14, 0xb1,
	0x77, 0xf6, 0xe7, 0xa6, 0xbe, 0x1b, 0x0f, 0x6e, 0x5a, 0xc9, 0xcb, 0x58, 0xdc, 0x87, 0xdb, 0x85,
	0x37, 0x27, 0x47, 0x5d, 0xec, 0x29, 0xfe, 0x18, 0x96, 0xf6, 0x17, 0xa3, 0x51, 0x6c, 0x94, 0xd7,
	0x22, 0xde, 0x14, 0xc3, 0x8f, 0xb1, 0x30, 0x8b, 0x4f, 0x78, 0x2e, 0xcd, 0xee, 0x23, 0x36, 0xdd,
	0x89, 0xab, 0xe3, 0xc0, 0xbd, 0x8c, 0x27, 0xbb, 0x71, 0x34, 0xc7, 0x2f, 0x83, 0x53, 0x5d, 0x08,
	0xdb, 0x87, 0x71, 0x05, 0x2f, 0x78, 0xd3, 0x7b, 0x6e, 0xd9, 0x19, 0x9b, 0xa8, 0xa4, 0x95, 0x15,
	0x32, 0x2c, 0x1c, 0x0b, 0x58, 0xd6, 0xca, 0x0a, 0x9c, 0xc5, 0xc7, 0x3d, 0xb4, 0x8f, 0xdd, 0xa9,
	0x9b, 0xc9, 0x01, 0xaa, 0x1a, 0x53, 0x4c, 0x63, 0xe6, 0x8f, 0x43, 0xc8, 0xe1, 0xf3, 0xb3, 0xa2,
	0x5a, 0xfa, 0x79, 0xd0, 0x00, 0x8f, 0x6c, 0xf9, 0x93, 0x38, 0x0c, 0xb7, 0x98, 0x9c, 0x74, 0x67,
	0xec, 0xec, 0x1b, 0x40, 0x3f, 0x3e, 0xdf, 0x80, 0xef, 0x05, 0xfb, 0x06, 0xfc, 0x3f, 0x4e, 0xdf,
	0x40, 0xe0, 0xb9, 0xf8, 0x06, 0x6e, 0xc0, 0xf8, 0x8e, 0x4c, 0x56, 0xa6, 0xb3, 0x0f, 0x8b, 0x86,
	0xfa, 0x2d, 0x76, 0x52, 0x1b, 0xcc, 0x8f, 0x7f, 0xd6, 0x40, 0xbe, 0x79, 0x0b, 0xbe, 0x8c, 0xd2,
	0x43, 0xd7, 0x94, 0x2f, 0xf1, 0x53, 0xd2, 0xc8, 0x8e, 0x7c, 0x57, 0x72, 0x76, 0xd9, 0x9a, 0xfa,
	0x2d, 0x05, 0xaf, 0xb4, 0xc2, 0x90, 0xa1, 0x1e, 0x61, 0x48, 0x6a, 0x4b, 0xba, 0x41, 0xc8, 0x9f,
	0xa2, 0x8e, 0xc9, 0x9a, 0xae, 0x18, 0x86, 0xaa, 0x55, 0xf9, 0x11, 0x85, 0x9f, 0xe2, 0x5e, 0x6d,
	0x33, 0x1b, 0x9a, 0x97, 0x95, 0x32, 0xcb, 0x4d, 0x2e, 0x87, 0xf0, 0xb8, 0x43, 0x18, 0x0b, 0x7a,
	0xc2, 0x7b, 0x01, 0x18, 0xe4, 0x4b, 0x44, 0xd1, 0x75, 0x4d, 0x27, 0xe7, 0x30, 0x32, 0xa4, 0xd7,
	0x7a, 0x8d, 0x8e, 0x6c, 0x5f, 0x09, 0x3c, 0x2e, 0xf4, 0x32, 0x15, 0xc7, 0xdc, 0x7e, 0xff, 0xdd,
	0x6f, 0xf9, 0x95, 0xc7, 0xbe, 0x83, 0x86, 0xd3, 0xf1, 0xa9, 0xa1, 0xfc, 0x20, 0x39, 0x85, 0xcd,
	0x89, 0x33, 0xd3, 0xd3, 0x67, 0xe7, 0x16, 0x16, 0x9a, 0x6e, 0x40, 0xf2, 0x5f, 0xec, 0x3b, 0x28,
	0x3a, 0x15, 0xd1, 0xfb, 0x13, 0xf7, 0xef, 0x07, 0x7e, 0x11, 0x51, 0xdf, 0xf3, 0xef, 0xa2, 0x0f,
	0x1f, 0xa1, 0xc7, 0x08, 0xff, 0x0e, 0xfa, 0xa3, 0x06, 0xfa, 0x37, 0x88, 0xea, 0x2f, 0x5a, 0x42,
	0x8a, 0xac, 0xfb, 0x14, 0x05, 0x10, 0x53, 0x54, 0x64, 0x4a, 0xd3, 0x53, 0x1b, 0x8a, 0x79, 0x47,
	0x51, 0xaa, 0xa9, 0x99, 0xe9, 0xe9, 0x94, 0x5c, 0x2d, 0xa7, 0xe6, 0x16, 0x16, 0x32, 0xa9, 0xcb,
	0x5b, 0x99, 0xd4, 0xbb, 0x94, 0x6e, 0x36, 0xf5, 0x7a, 0x6a, 0xf6, 0xee, 0x5d, 0x42, 0x29, 0x57,
	0x2a, 0xa9, 0xd9, 0xe9, 0xe9, 0xb3, 0xb3, 0x0b, 0x0b, 0x29, 0xc5, 0x96, 0x67, 0x88, 0xa9, 0xb9,
	0xd4, 0xeb, 0xa9, 0xb9, 0x26, 0xcd, 0x1c, 0xab, 0xa7, 0x93, 0x26, 0x93, 0xfa, 0x49, 0xad, 0x9e,
	0x2a, 0xc9, 0xd5, 0x94, 0x5c, 0x31, 0xb4, 0x14, 0x73, 0xd1, 0xee, 0xa6, 0xe4, 0x6a, 0x4a, 0xb9,
	0x2b, 0x97, 0x4c, 0x07, 0x69, 0xaa, 0xa2, 0x7e, 0xa0, 0xa4, 0x66, 0xa7, 0x67, 0x33, 0xa4, 0x29,
	0x23, 0x1f, 0x3e, 0x42, 0x02, 0x8e, 0x3d, 0x69, 0x20, 0x60, 0x2d, 0x20, 0xaa, 0x8a, 0xbc, 0x80,
	0x0f, 0x1f, 0xa1, 0x10, 0x0e, 0xfc, 0x5e, 0x03, 0xf5, 0x35, 0x9d, 0xa1, 0xb4, 0xf5, 0x4b, 0x1f,
	0x3e, 0x42, 0xaf, 0x27, 0xbf, 0xf2, 0x47, 0x0d, 0x74, 0x9e, 0x05, 0xf7, 0xa6, 0x74, 0x85, 0x0c,
	0xa4, 0x52, 0x35, 0xc9, 0x0f, 0x56, 0x92, 0x35, 0xc1, 0xc5, 0x54, 0xdd, 0xa8, 0xcb, 0x95, 0xca,
	0x6e, 0x4a, 0x4e, 0x6d, 0x9b, 0x3b, 0x15, 0x5a, 0x05, 0x22, 0xe5, 0xf8, 0x87, 0x8f, 0xd0, 0x91,
	0xe4, 0xf8, 0x93, 0x06, 0x1a, 0x66, 0x05, 0xdb, 0xca, 0x32, 0xaf, 0x95, 0x77, 0x09, 0xc5, 0xf8,
	0x87, 0x8f, 0xd0, 0x70, 0x32, 0xfe, 0x1b, 0x8f, 0xd0, 0xa0, 0x6c, 0x94, 0x54, 0xd5, 0x0a, 0x24,
	0xb5, 0x6b, 0x97, 0x24, 0xb5, 0x0b, 0x38, 0x7e, 0x52, 0x97, 0xf2, 0x40, 0xc9, 0x31, 0xe2, 0x78,
	0x13, 0x86, 0x6e, 0xc9, 0xb7, 0x65, 0xa3, 0xa4, 0xab, 0x35, 0x93, 0x5e, 0x99, 0xe3, 0xc1, 0xf6,
	0xd3, 0xdd, 0x66, 0xec, 0x8a, 0x7c, 0x5b, 0x5e, 0xa3, 0x2c, 0x8e, 0x35, 0x11, 0xfd, 0xf4, 0x1e,
	0x75, 0x0b, 0xfd, 0x80, 0x94, 0x12, 0x6b, 0x4a, 0xbd, 0x5a, 0xdd, 0xd4, 0xf0, 0x7b, 0xe0, 0xbf,
	0x75, 0xc7, 0xa4, 0xee, 0xcf, 0xde, 0x4e, 0x38, 0x27, 0x1e, 0xde, 0x23, 0x1c, 0x9f, 0xde, 0xa3,
	0xf2, 0x6c, 0x2d, 0x81, 0x1c, 0x5a, 0x82, 0xbc, 0xc7, 0x6f, 0xc0, 0x80, 0x5a, 0xae, 0x28, 0x45,
	0xcb, 0x91, 0x11, 0xdd, 0xc7, 0x91, 0xf1, 0xfb, 0xbf, 0x89, 0xa5, 0x28, 0xe1, 0x58, 0xe7, 0xce,
	0x8c, 0xd7, 0xe1, 0xa8, 0x05, 0xbf, 0x58, 0x1e, 0x1a, 0x85, 0x79, 0x01, 0xe4, 0x2d, 0xc5, 0x60,
	0x5e, 0x47, 0x29, 0xc1, 0x49, 0x38, 0x2a, 0x49, 0x3b, 0x6f, 0x95, 0xbc, 0xc7, 0x37, 0x3a, 0x85,
	0xd7, 0x74, 0xf1, 0x3f, 0xe6, 0x7d, 0x09, 0x72, 0x0c, 0xf0, 0x0c, 0xae, 0x59, 0xed, 0x18, 0x5c,
	0x23, 0xec, 0x2b, 0xd0, 0x3b, 0xb4, 0x66, 0x07, 0x4e, 0x5a, 0xee, 0x35, 0x53, 0x57, 0x4b, 0x66,
	0xd1, 0xa8, 0xaa, 0x0c, 0x69, 0xb2, 0xa3, 0x61, 0x94, 0xd2, 0x07, 0xdc, 0xef, 0xe7, 0x2d, 0x3e,
	0x6c, 0x7b, 0x24, 0x91, 0x34, 0xc1, 0x1d, 0x70, 0x54, 0xd6, 0x5a, 0x55, 0x25, 0x06, 0x19, 0xd3,
	0xa8, 0xcb, 0x44, 0x0e, 0xfe, 0x2a, 0x60, 0xb9, 0x5c, 0x56, 0x59, 0x70, 0x07, 0xbf, 0x37, 0x61,
	0x24, 0x86, 0xa9, 0xf4, 0xe3, 0x2d, 0xd2, 0xd9, 0xfd, 0x8b, 0x1b, 0xf2, 0x8e, 0x72, 0x4d, 0x35,
	0x4c, 0x57, 0x31, 0xf1, 0xa6, 0x10, 0x46, 0x65, 0x24, 0xdf, 0x80, 0x78, 0x9b, 0xb6, 0x72, 0xfa,
	0x2b, 0x06, 0xf7, 0xf3, 0x57, 0x54, 0x3e, 0x6e, 0xa0, 0x6d, 0x38, 0x0a, 0x31, 0x56, 0x5f, 0xdb,
	0x49, 0x60, 0x47, 0x1a, 0xce, 0xc1, 0x19, 0x48, 0xb1, 0x29, 0x5d, 0xd7, 0x95, 0x54, 0xcb, 0xc2,
	0xb3, 0xc8, 0x03, 0x17, 0xc4, 0xec, 0x0c, 0x4c, 0x76, 0x72, 0x39, 0x84, 0xe6, 0xc5, 0xf3, 0x62,
	0x36, 0x9b, 0x9f, 0xea, 0x14, 0x42, 0x14, 0x77, 0xb8, 0x0a, 0xb2, 0xf3, 0xd4, 0x55, 0xf0, 0x26,
	0x9c, 0xec, 0x36, 0x38, 0xce, 0x80, 0x25, 0xcc, 0x91, 0xf7, 0x38, 0x95, 0x70, 0x41, 0xcc, 0x2e,
	0x10, 0x09, 0x36, 0xe0, 0x1e, 0x17, 0x70, 0xfa, 0x4f, 0xa3, 0x30, 0xc2, 0x9d, 0xb5, 0xb2, 0xa1,
	0x94, 0x97, 0xb7, 0xe5, 0x4a, 0x45, 0xa9, 0x6e, 0x29, 0xf8, 0xeb, 0x30, 0x69, 0xcd, 0xf1, 0x5b,
	0x46, 0xb1, 0x64, 0x3d, 0x77, 0x86, 0xe6, 0x76, 0x0f, 0xa4, 0x39, 0xc6, 0xd9, 0x57, 0x0c, 0x5b,
	0xa8, 0x23, 0xf6, 0xd6, 0x80, 0xf1, 0x4e, 0x62, 0xd9, 0x89, 0x7d, 0x66, 0x3f, 0xa5, 0xc2, 0x34,
	0x86, 0x2d, 0xdb, 0xe1, 0xba, 0xec, 0x93, 0x46, 0x6f, 0x79, 0x16, 0xba, 0x05, 0xa7, 0xac, 0x36,
	0x95, 0xe4, 0x9a, 0x59, 0xda, 0x96, 0xbd, 0x6b, 0x10, 0xec, 0x1a, 0x7b, 0x72, 0x82, 0xcb, 0x58,
	0x66, 0x22, 0xbc, 0x0a, 0xfa, 0x16, 0x1c, 0xeb, 0x5a, 0x40, 0x68, 0x7f, 0xbd, 0xd9, 0x2a, 0xdd,
	0xd1, 0x3e, 0x24, 0x25, 0x4b, 0x9d, 0xcb, 0x56, 0xe1, 0xb4, 0xd5, 0x48, 0x53, 0xd9, 0xa9, 0x69,
	0xba, 0xac, 0xef, 0x16, 0x37, 0x2a, 0x5a, 0xe9, 0x03, 0xb5, 0xba, 0xe5, 0xac, 0x44, 0xb8, 0x6b,
	0xd4, 0x43, 0x9a, 0x0b, 0x59, 0xb7, 0x64, 0xe4, 0xb9, 0x08, 0x47, 0x51, 0x75, 0x18, 0x6f, 0x16,
	0x41, 0xaf, 0xe6, 0x58, 0xe5, 0xf0, 0x9d, 0x61, 0xae, 0x5b, 0x0b, 0x6d, 0xc9, 0x37, 0x0d, 0x45,
	0xb7, 0xa4, 0x3b, 0x9a, 0xe9, 0x93, 0x46, 0x4d, 0x2f, 0x12, 0xfc, 0x2e, 0x1c, 0xb5, 0x5a, 0xb8,
	0xa3, 0x9a, 0xea, 0x16, 0x8b, 0xfb, 0x30, 0x14, 0x93, 0x6c, 0x9a, 0x46, 0xb7, 0xb0, 0xc7, 0x82,
	0x5f, 0x3a, 0xc2, 0x59, 0xaf, 0xdb, 0x9c, 0x6b, 0x9c, 0x11, 0xff, 0x15, 0x38, 0x42, 0x56, 0x5f,
	0x49, 0xd5, 0xea, 0x06, 0x6b, 0x4e, 0x53, 0x7c, 0x62, 0xa0, 0x67, 0xc0, 0xed, 0xd8, 0xc3, 0x7b,
	0x9d, 0xe5, 0x14, 0xfc, 0xd2, 0xb8, 0xfd, 0x92, 0xb4, 0xaa, 0x59, 0x0f, 0xbc, 0x00, 0x03, 0x55,
	0xad, 0x39, 0x61, 0xba, 0x85, 0x48, 0x16, 0x02, 0x52, 0xb4, 0xaa, 0x35, 0x57, 0xeb, 0x1a, 0x24,
	0xe5, 0xca, 0x1d, 0x79, 0xd7, 0x28, 0x72, 0xfd, 0xed, 0x5c, 0x5c, 0x5d, 0xe3, 0x5b, 0x02, 0xd2,
	0x38, 0xe3, 0xbc, 0x4c, 0x19, 0x1d, 0xab, 0x95, 0xa8, 0x00, 0xb7, 0xd0, 0xb6, 0x39, 0xdd, 0x6d,
	0xa3, 0x29, 0x04, 0xa4, 0x63, 0x4e, 0xc9, 0xad, 0x13, 0x1a, 0xdf, 0x84, 0x88, 0x5e, 0xaf, 0x28,
	0xec, 0x86, 0x12, 0x3e, 0x10, 0x20, 0x68, 0x0b, 0x91, 0xea, 0x15, 0xba, 0x1f, 0x48, 0x61, 0x9d,
	0xff, 0x97, 0xcf, 0xc2, 0x44, 0x07, 0xcd, 0xd2, 0xd1, 0x8b, 0x3b, 0x0f, 0x27, 0xbb, 0x2d, 0x57,
	0x27, 0x5f, 0xd0, 0x19, 0x2c, 0xfa, 0x15, 0x38, 0xd5, 0x75, 0x89, 0x39, 0x23, 0x4d, 0x9d, 0x17,
	0xcc, 0xa8, 0x1e, 0x9f, 0x83, 0x54, 0xc7, 0x59, 0xe2, 0xf4, 0xb5, 0x46, 0xf7, 0x1a, 0x08, 0xa8,
	0x02, 0xcf, 0x8a, 0xd9, 0x5c, 0xfe, 0x0c, 0x08, 0xcd, 0x3a, 0x72, 0xb2, 0x91, 0xc7, 0x0d, 0x14,
	0xdb, 0x6b, 0xa0, 0xc1, 0x27, 0x0d, 0x14, 0xce, 0xce, 0x8a, 0x74, 0xb3, 0xb0, 0x7d, 0xac, 0xce,
	0x68, 0x53, 0x10, 0xa2, 0x76, 0xb8, 0x3a, 0x51, 0xff, 0xdf, 0x8d, 0xc0, 0xa0, 0xab, 0x33, 0xf1,
	0x22, 0x84, 0x77, 0x14, 0x53, 0x2e, 0xcb, 0xa6, 0xdc, 0x01, 0xbd, 0xbf, 0xae, 0x18, 0x86, 0xbc,
	0xa5, 0x5c, 0x57, 0x4c, 0x99, 0x62, 0xb2, 0x36, 0x3d, 0xbe, 0x01, 0x01, 0x62, 0x2d, 0xf3, 0x8d,
	0xa1, 0xf5, 0x06, 0x98, 0x47, 0xf6, 0x09, 0xf7, 0x40, 0xae, 0xd5, 0x94, 0x12, 0x3f, 0xd1, 0x50,
	0x39, 0x8b, 0xbf, 0x16, 0xfe, 0xa4, 0x81, 0x7e, 0x39, 0x0c, 0xe3, 0x10, 0x20, 0x1b, 0x7f, 0x72,
	0x08, 0x06, 0xad, 0xb2, 0x32, 0x55, 0x79, 0x47, 0x81, 0x7f, 0x89, 0x40, 0xb0, 0x45, 0xa4, 0x96,
	0x68, 0x98, 0xe8, 0xd4, 0xaf, 0x23, 0xf8, 0xbb, 0x08, 0x5e, 0x85, 0x31, 0x7a, 0x8f, 0xd6, 0xb2,
	0x90, 0xec, 0x4e, 0xcb, 0xc5, 0x2f, 0xb1, 0x47, 0x29, 0x9b, 0x13, 0x2e, 0x00, 0x35, 0xf3, 0x33,
	0xd6, 0xe2, 0x69, 0x9a, 0xb9, 0x4d, 0xb6, 0x91, 0xe6, 0xa6, 0xe3, 0xe0, 0xcc, 0xc1, 0x71, 0x27,
	0x67, 0xdb, 0x34, 0xca, 0xc5, 0xf9, 0xbc, 0x77, 0xf0, 0xdc, 0x03, 0xdf, 0xd5, 0xd5, 0xa9, 0x3b,
	0x50, 0x07, 0x0c, 0x51, 0x76, 0xd9, 0xb7, 0xba, 0x5b, 0x54, 0x6b, 0xec, 0x2a, 0xe9, 0x39, 0x98,
	0xa4, 0xcf, 0xd4, 0x9a, 0x15, 0x12, 0x49, 0x16, 0x48, 0xf3, 0xa7, 0x62, 0xa4, 0x07, 0x04, 0xff,
	0x54, 0x78, 0x95, 0xff, 0x82, 0x0c, 0x1c, 0xb5, 0x18, 0x76, 0x98, 0xd7, 0xc1, 0x42, 0xa5, 0x0c,
	0xc5, 0x34, 0xd2, 0x43, 0x82, 0x7f, 0x2a, 0xca, 0x88, 0x53, 0x6b, 0x8a, 0x69, 0x40, 0x1d, 0xfc,
	0x4b, 0x6b, 0x37, 0xa6, 0xaa, 0x50, 0x81, 0x61, 0x18, 0xb0, 0xcb, 0x97, 0x0d, 0x7e, 0x97, 0x75,
	0x0a, 0x12, 0xec, 0xa1, 0x51, 0x65, 0x45, 0xcb, 0x46, 0xb1, 0x5a, 0xdf, 0xd9, 0x50, 0x74, 0x23,
	0x1d, 0x13, 0xfc, 0x53, 0xb0, 0xb4, 0x96, 0xba, 0xc1, 0x7e, 0xc3, 0x2b, 0x70, 0xc4, 0xa6, 0xb5,
	0x0a, 0x27, 0xff, 0xd3, 0x92, 0x69, 0x35, 0x97, 0xd6, 0x6e, 0xb0, 0x62, 0x5f, 0x83, 0xd0, 0x72,
	0x45, 0x55, 0xaa, 0x26, 0xbd, 0x5a, 0x3a, 0xc6, 0x2e, 0xcc, 0xd2, 0x92, 0x4b, 0xf4, 0x31, 0x2b,
	0x7c, 0x8c, 0x05, 0xdb, 0x66, 0xd8, 0xb3, 0xa2, 0xa1, 0x54, 0x94, 0x92, 0xa9, 0xe9, 0x70, 0x03,
	0x84, 0xf5, 0x6b, 0x6b, 0xa9, 0x2b, 0x6a, 0x75, 0x4b, 0xd1, 0x6b, 0xba, 0x5a, 0x35, 0x8d, 0xf4,
	0x22, 0x1c, 0xa3, 0xb4, 0x66, 0xc5, 0x28, 0x6e, 0x36, 0x5f, 0x58, 0x15, 0xc1, 0x60, 0x9b, 0x67,
	0xe5, 0x64, 0xec, 0x86, 0x66, 0x36, 0xcd, 0xb5, 0x32, 0x4c, 0x5b, 0x37, 0x7a, 0x05, 0x94, 0x3f,
	0xc5, 0x47, 0x9f, 0xdf, 0x1e, 0xb5, 0xda, 0x41, 0x4f, 0x7b, 0x45, 0x6a, 0x12, 0x1a, 0x82, 0x1f,
	0xe6, 0x61, 0x80, 0x71, 0x30, 0x3c, 0xab, 0x33, 0x1f, 0x85, 0xbe, 0x9a, 0x7c, 0xa7, 0x80, 0xe2,
	0x65, 0x02, 0xca, 0x27, 0xf9, 0x94, 0xa4, 0x00, 0x59, 0x8b, 0x74, 0x11, 0x9c, 0x28, 0x9c, 0x80,
	0xf2, 0x47, 0x61, 0xbc, 0x49, 0xcc, 0xc7, 0xd3, 0xa6, 0x9e, 0x02, 0x07, 0xb2, 0xd6, 0x2a, 0xb9,
	0xa5, 0xfc, 0x93, 0xd0, 0xcf, 0xa1, 0x11, 0x01, 0xe5, 0xc7, 0xf8, 0x80, 0x73, 0xd0, 0x45, 0xf0,
	0xa7, 0x03, 0x74, 0x21, 0xbd, 0x6a, 0xdf, 0x36, 0x16, 0x50, 0x7e, 0x82, 0x4f, 0x00, 0x07, 0xb2,
	0xe8, 0xba, 0x6c, 0x2c, 0xc2, 0xc0, 0x3b, 0x75, 0x45, 0xdf, 0x65, 0x17, 0xc9, 0x0c, 0x5a, 0x7e,
	0x9c, 0x72, 0x7c, 0x93, 0x3c, 0xe6, 0x70, 0x86, 0xe0, 0x4f, 0x13, 0x1b, 0x9b, 0x88, 0x5e, 0xd6,
	0xb4, 0x0f, 0x54, 0x85, 0x89, 0xe6, 0xc3, 0x4b, 0x9f, 0x58, 0x5d, 0xe6, 0xac, 0x07, 0x5c, 0xbe,
	0x5b, 0x53, 0xd9, 0x1d, 0x64, 0x01, 0x25, 0x8f, 0xf2, 0xf9, 0xa5, 0xd8, 0x0f, 0x8b, 0x76, 0x56,
	0x9e, 0xf4, 0x87, 0x08, 0xe2, 0x6d, 0x3b, 0x01, 0xd6, 0x20, 0xc8, 0xae, 0x83, 0xfa, 0x0e, 0x74,
	0x0f, 0xd5, 0x25, 0xa8, 0x25, 0x5e, 0xfe, 0x4d, 0xeb, 0xbf, 0x69, 0x57, 0xbc, 0x3c, 0x2b, 0x87,
	0x5f, 0xf1, 0x2c, 0xc2, 0x68, 0xc1, 0x34, 0x6b, 0x2e, 0xef, 0x1f, 0xad, 0xcf, 0x95, 0xa6, 0xc3,
	0x10, 0xf5, 0xe8, 0x30, 0x84, 0xa6, 0xb3, 0xd0, 0x76, 0x11, 0xa6, 0xff, 0x2c, 0x04, 0xc3, 0xcc,
	0x85, 0xc3, 0x96, 0xd1, 0x9a, 0x5e, 0xa2, 0x0a, 0xfb, 0x15, 0x88, 0xd8, 0xba, 0x81, 0x27, 0x31,
	0x00, 0x1e, 0xeb, 0xfc, 0x23, 0x6a, 0x0c, 0x87, 0xd5, 0x1a, 0x9b, 0x55, 0x58, 0x84, 0x88, 0xbd,
	0x96, 0x39, 0x08, 0x36, 0x48, 0xef, 0x92, 0x4e, 0x85, 0x12, 0xbf, 0xf6, 0x6f, 0x13, 0x67, 0x28,
	0xb5, 0x6c, 0xb0, 0xc5, 0x8d, 0x8b, 0xdc, 0x13, 0xcb, 0xef, 0xc0, 0x30, 0x23, 0xe2, 0xb5, 0x5e,
	0xc3, 0xdd, 0xbd, 0xfa, 0xa2, 0xd0, 0xc7, 0xdc, 0xb5, 0xfc, 0x8a, 0xcc, 0x37, 0x60, 0xc4, 0x6b,
	0x5c, 0xb9, 0xed, 0x98, 0xcc, 0xb0, 0x7c, 0x4c, 0x19, 0x2b, 0x1f, 0x53, 0x66, 0xdd, 0xa2, 0xc8,
	0x0f, 0x91, 0x5a, 0xc3, 0x6f, 0xa3, 0xfe, 0x95, 0x60, 0xf8, 0xfe, 0x1f, 0xfc, 0xec, 0x90, 0x34,
	0xdc, 0x14, 0x64, 0x53, 0xb9, 0xb6, 0x32, 0x38, 0xe0, 0x56, 0xf6, 0x06, 0x0c, 0x19, 0x1f, 0xd0,
	0x7e, 0xd5, 0x4a, 0x8a, 0x61, 0x10, 0x93, 0x76, 0xa0, 0xeb, 0xa9, 0x20, 0x46, 0xc8, 0x57, 0x6d,
	0x6a, 0x7c, 0x05, 0x86, 0xef, 0xc8, 0x9b, 0xc5, 0x56, 0x21, 0x83, 0x5d, 0x85, 0xc4, 0xef, 0xc8,
	0x9b, 0x6b, 0x6d, 0x72, 0x36, 0x34, 0xb3, 0x4d, 0x4e, 0xac, 0xbb, 0x9c, 0x0d, 0xcd, 0x74, 0xcb,
	0x59, 0xfc, 0xc7, 0xe8, 0xf3, 0x8b, 0x91, 0xec, 0xb4, 0x38, 0x23, 0x66, 0xb3, 0xe2, 0xc2, 0x27,
	0x0d, 0xf4, 0x2b, 0xa8, 0xf3, 0xbe, 0x2a, 0x41, 0x9c, 0x4d, 0xb2, 0xd4, 0x55, 0x9e, 0xe9, 0x47,
	0xd1, 0xa7, 0x5e, 0x87, 0xaf, 0x40, 0xd4, 0x31, 0xd9, 0xc8, 0x0f, 0x7b, 0x3a, 0xc1, 0x24, 0x0c,
	0x3b, 0x66, 0x8b, 0xa5, 0x60, 0xd2, 0x61, 0x21, 0xc0, 0x97, 0xf6, 0x2b, 0x30, 0xd4, 0x5c, 0xda,
	0x29, 0x32, 0x4a, 0xc9, 0x31, 0xef, 0x09, 0x90, 0x9f, 0x82, 0x11, 0x4b, 0xff, 0x6b, 0x75, 0xbd,
	0x64, 0xdb, 0x39, 0xd8, 0x11, 0x7d, 0x14, 0x9a, 0x15, 0xe7, 0xc4, 0xec, 0x5c, 0xfe, 0x1d, 0x18,
	0x64, 0xd7, 0x43, 0x2c, 0xa2, 0x37, 0x1f, 0x37, 0xd0, 0xc0, 0x5e, 0x03, 0x45, 0xa9, 0x31, 0x94,
	0x13, 0xe9, 0xa5, 0x9b, 0x0f, 0x1f, 0xa1, 0x33, 0xc9, 0x97, 0xda, 0xa7, 0x29, 0x55, 0x2e, 0xd4,
	0x72, 0x53, 0xca, 0x7c, 0x1f, 0x32, 0x6c, 0xc3, 0xc9, 0x27, 0xf8, 0x59, 0x74, 0xd3, 0x4a, 0x20,
	0x1c, 0x15, 0x06, 0xd2, 0xff, 0xd3, 0x07, 0xc2, 0xa5, 0x4b, 0xda, 0x1a, 0x5f, 0x7f, 0xb4, 0x6a,
	0x78, 0x19, 0xc2, 0xd6, 0x46, 0xd9, 0xc1, 0x29, 0xcf, 0x33, 0x68, 0x2c, 0x19, 0x55, 0xba, 0x14,
	0xa8, 0x91, 0xca, 0xac, 0x9c, 0x7e, 0xd9, 0xa8, 0x52, 0x1d, 0x51, 0x81, 0x01, 0x9a, 0x33, 0x49,
	0xdf, 0xb5, 0x72, 0x01, 0xf8, 0xcf, 0xc4, 0xda, 0xee, 0x27, 0x73, 0x41, 0xcb, 0x8c, 0x72, 0x59,
	0x2b, 0x2b, 0xf9, 0x97, 0xc8, 0x42, 0x18, 0xfc, 0x08, 0x41, 0x3a, 0xfc, 0x00, 0x05, 0x05, 0x94,
	0xe6, 0xf7, 0x1c, 0x5c, 0x5a, 0x2b, 0x81, 0xa4, 0x28, 0x17, 0x4f, 0x4b, 0xfb, 0x39, 0x04, 0xe3,
	0x1d, 0xf6, 0x4c, 0x7e, 0xf4, 0x3d, 0xe7, 0x5d, 0xf2, 0x7a, 0xc5, 0x70, 0x6c, 0xc0, 0x4e, 0x8d,
	0x75, 0xdc, 0x0a, 0xf4, 0x26, 0xfa, 0x51, 0xf8, 0xce, 0x23, 0x34, 0x60, 0x6c, 0xcb, 0xba, 0x52,
	0x16, 0x53, 0xc4, 0xb2, 0x95, 0x46, 0x4d, 0x2f, 0x4e, 0x1e, 0x6e, 0x36, 0x43, 0xef, 0x82, 0xb3,
	0xce, 0x0e, 0x08, 0xc1, 0xf4, 0xaf, 0x86, 0x00, 0x93, 0x6e, 0x6e, 0x9e, 0x8c, 0x9e, 0xd9, 0x30,
	0x15, 0x21, 0x48, 0x07, 0xb9, 0xdb, 0xed, 0xec, 0x42, 0x9f, 0xc4, 0x88, 0xb0, 0x01, 0xb8, 0x5c,
	0xd6, 0x8c, 0xa2, 0x6b, 0x0e, 0xf2, 0xe3, 0x72, 0xaf, 0x21, 0xbe, 0xad, 0xf3, 0x84, 0xeb, 0xe4,
	0x0f, 0x91, 0x2f, 0x45, 0x0e, 0xf0, 0x02, 0x29, 0xc0, 0x35, 0x8f, 0xae, 0x43, 0xcc, 0x6d, 0xf1,
	0x71, 0x35, 0x78, 0xda, 0x7b, 0x28, 0x98, 0x46, 0xb7, 0x27, 0x54, 0x01, 0x49, 0x03, 0x96, 0x9a,
	0xa7, 0x63, 0xdc, 0x49, 0xb7, 0xc2, 0xf3, 0xd1, 0xad, 0x8b, 0xbf, 0xee, 0xfb, 0xfc, 0x62, 0x38,
	0x2b, 0xe6, 0xc4, 0xf3, 0x62, 0x76, 0xfa, 0x93, 0x06, 0xfa, 0x05, 0x5f, 0x67, 0x6d, 0x72, 0x16,
	0xa2, 0x57, 0x57, 0x53, 0x96, 0xbd, 0x9a, 0x9f, 0x80, 0x64, 0x67, 0xdb, 0x56, 0xf0, 0x41, 0x0e,
	0x02, 0x4b, 0x6b, 0x37, 0x8c, 0xfc, 0x14, 0xbc, 0xd4, 0x3e, 0x0c, 0x5e, 0x56, 0xa9, 0xe0, 0x87,
	0x1c, 0x44, 0xd8, 0xb2, 0x50, 0x15, 0x23, 0x7f, 0x1a, 0x26, 0x3d, 0x18, 0x9d, 0x0b, 0x4c, 0x08,
	0x4e, 0x23, 0xf8, 0x9a, 0x87, 0x49, 0x59, 0x80, 0x29, 0x0f, 0xd6, 0xa7, 0x30, 0x30, 0xf3, 0x69,
	0x88, 0x3b, 0xce, 0x73, 0x4c, 0x45, 0xe1, 0xc1, 0xc7, 0x0d, 0xe4, 0xdf, 0x6b, 0x20, 0xdf, 0x93,
	0x06, 0x42, 0x33, 0xf9, 0x53, 0x2e, 0x1a, 0xc7, 0x29, 0x33, 0xe2, 0xce, 0x46, 0xc2, 0xd6, 0x46,
	0xbf, 0x10, 0x4e, 0xff, 0x13, 0x04, 0xc3, 0x1e, 0xe9, 0x39, 0xf0, 0xdf, 0x46, 0x70, 0xdc, 0x95,
	0xda, 0xc4, 0x4a, 0x4f, 0x61, 0xf5, 0x6b, 0x62, 0xac, 0x67, 0x38, 0x5d, 0x7c, 0x78, 0x6f, 0xb0,
	0x39, 0x40, 0x86, 0x62, 0xfe, 0xa8, 0x81, 0xfa, 0xee, 0x3f, 0x72, 0xd8, 0x43, 0x01, 0x47, 0x2e,
	0x84, 0xa4, 0xde, 0xcc, 0x97, 0xc3, 0x6b, 0x64, 0x8d, 0x74, 0xfa, 0x67, 0x83, 0x30, 0x6c, 0x27,
	0x4e, 0x69, 0xc2, 0xff, 0xf8, 0x3a, 0xb8, 0x12, 0xef, 0xf0, 0xe5, 0x3c, 0xd5, 0x53, 0x7e, 0x3c,
	0xea, 0xe9, 0x91, 0xa2, 0x8e, 0x52, 0x3b, 0x64, 0x64, 0xf1, 0x3f, 0x73, 0x46, 0x96, 0xc0, 0x0b,
	0xcc, 0xc8, 0x12, 0x7c, 0x51, 0x19, 0x59, 0xce, 0x43, 0xb4, 0xaa, 0xb1, 0x33, 0xb6, 0xaa, 0x18,
	0xfb, 0x18, 0x2d, 0x50, 0xd5, 0x56, 0x39, 0x25, 0x7e, 0x07, 0xc2, 0x36, 0xd7, 0x60, 0x07, 0x08,
	0x96, 0xd4, 0xce, 0x23, 0x69, 0x63, 0xa6, 0x79, 0xb1, 0xb1, 0x80, 0x24, 0x5b, 0xcc, 0xe2, 0x99,
	0x8f, 0x1b, 0xe8, 0x14, 0xa4, 0x21, 0x41, 0x46, 0x2f, 0x45, 0x87, 0xcb, 0x5e, 0x22, 0x0c, 0xf2,
	0x0a, 0x11, 0x15, 0x92, 0xcd, 0xee, 0x93, 0x53, 0xc5, 0x5a, 0x32, 0x41, 0x0a, 0xbc, 0xe7, 0xd3,
	0x30, 0xd8, 0x1e, 0xdd, 0x6e, 0x6d, 0xf9, 0x41, 0xba, 0xe5, 0xdb, 0x8b, 0x86, 0xec, 0xdb, 0x3f,
	0x8b, 0x20, 0xbe, 0xc6, 0xc0, 0x87, 0x66, 0x45, 0xb1, 0xe6, 0x68, 0x2f, 0xea, 0x79, 0x71, 0x9c,
	0x7b, 0x78, 0x2f, 0xe6, 0x06, 0x32, 0xbc, 0x32, 0x84, 0x38, 0x76, 0x5e, 0xbb, 0x90, 0xf4, 0x5f,
	0x47, 0x10, 0x5f, 0xaa, 0xa9, 0x97, 0x94, 0x4d, 0xb5, 0x4a, 0xdd, 0x15, 0xb4, 0x1a, 0x3a, 0x0c,
	0xc9, 0x35, 0xb5, 0x58, 0xb6, 0x9f, 0x1e, 0xa4, 0x36, 0xa7, 0x1f, 0xde, 0x8b, 0xb9, 0xb9, 0x3d,
	0xbd, 0x5f, 0x84, 0xa6, 0x59, 0xac, 0x91, 0xfe, 0x05, 0x1f, 0x0c, 0x93, 0x9a, 0xa8, 0x46, 0x49,
	0xbb, 0xad, 0xe8, 0xbb, 0x1c, 0x01, 0xc5, 0x65, 0x38, 0x69, 0x5f, 0xa7, 0x53, 0x64, 0xbd, 0x5a,
	0xdc, 0xd4, 0xb5, 0x1d, 0x3b, 0x2a, 0xa5, 0x68, 0xea, 0xf2, 0xe6, 0xa6, 0x5a, 0xda, 0x07, 0xf7,
	0x9f, 0xb4, 0xee, 0xdb, 0x11, 0x09, 0x57, 0x74, 0x6d, 0xc7, 0x8a, 0x65, 0x59, 0x67, 0xec, 0x78,
	0x03, 0xd2, 0x1c, 0x2d, 0xe9, 0x56, 0x48, 0xf7, 0xe5, 0xcb, 0x3d, 0x4b, 0x9d, 0xca, 0xc8, 0xbf,
	0x0c, 0x47, 0xbb, 0x08, 0xc7, 0x61, 0x0b, 0x01, 0xe4, 0x87, 0xb7, 0x87, 0x41, 0x38, 0xb6, 0xa6,
	0x56, 0xb7, 0x2a, 0xca, 0x35, 0x4d, 0x2e, 0xe7, 0xf9, 0xb2, 0x5b, 0xaa, 0xd5, 0xac, 0x9e, 0xd9,
	0x02, 0x81, 0xd7, 0xb9, 0x6c, 0x75, 0x1a, 0xef, 0x86, 0xc5, 0xde, 0xd3, 0x0d, 0xb5, 0xf6, 0x77,
	0x81, 0x5e, 0x88, 0xa5, 0xbe, 0x42, 0xeb, 0x8d, 0xf3, 0x7a, 0x52, 0xb3, 0xa4, 0xee, 0x7d, 0x61,
	0x5d, 0x4f, 0x6a, 0x0a, 0x59, 0xb1, 0x1d, 0x8d, 0x74, 0x33, 0x2b, 0x2b, 0xa6, 0x42, 0xf7, 0x9f,
	0x7d, 0x1c, 0x1b, 0xdc, 0xc9, 0x78, 0xa9, 0xac, 0x19, 0x97, 0x2c, 0x16, 0xe7, 0x0d, 0xdd, 0x16,
	0x61, 0xa1, 0x9e, 0x6e, 0xe8, 0xba, 0xa5, 0x7d, 0x1d, 0x26, 0x79, 0xcd, 0x5a, 0xb0, 0xcf, 0xa6,
	0xd8, 0xee, 0x6e, 0x89, 0x63, 0x8c, 0xfd, 0xba, 0x13, 0x42, 0x6f, 0x8a, 0x2f, 0x42, 0xca, 0xbe,
	0xdc, 0xd5, 0x49, 0x7e, 0xa4, 0xab, 0xfc, 0xe3, 0xd6, 0x5d, 0x2f, 0xcf, 0x02, 0xf2, 0x29, 0x18,
	0xa1, 0xeb, 0xcd, 0xea, 0x6a, 0x4b, 0x03, 0xd9, 0x13, 0x2a, 0x7f, 0x02, 0x46, 0xdd, 0xfd, 0xe4,
	0x24, 0xa1, 0xe8, 0x71, 0xfe, 0x55, 0x98, 0xec, 0x54, 0x3b, 0x27, 0x31, 0x45, 0x8c, 0xdb, 0x51,
	0xdc, 0xf4, 0x6f, 0xfa, 0x60, 0x78, 0x6d, 0x5b, 0xae, 0x29, 0x79, 0xcd, 0xbc, 0xa4, 0x6c, 0x2a,
	0x55, 0x83, 0x85, 0xf0, 0xd6, 0x21, 0xae, 0x2b, 0x5b, 0xcc, 0x97, 0x6a, 0xdd, 0xb3, 0xe6, 0x57,
	0x5f, 0x7a, 0x3d, 0xb5, 0xb7, 0x88, 0x95, 0xa8, 0x38, 0x6e, 0xba, 0x3e, 0x60, 0xe9, 0xb0, 0xac,
	0x22, 0xac, 0x1b, 0x61, 0xf8, 0x1b, 0x10, 0x72, 0x5d, 0xac, 0x7f, 0xf3, 0xe9, 0xca, 0x6a, 0xbd,
	0x80, 0x28, 0x71, 0xa9, 0x78, 0xa1, 0x79, 0xf3, 0xd0, 0x4f, 0x21, 0x8b, 0x49, 0x72, 0xd6, 0xf8,
	0xac, 0x81, 0x02, 0x59, 0x2f, 0x9f, 0xfd, 0x7f, 0xf6, 0xdb, 0x97, 0x0f, 0xd3, 0xbf, 0x13, 0x82,
	0x23, 0x1d, 0x8b, 0xc1, 0xbf, 0x8e, 0x60, 0x9c, 0xd8, 0xbf, 0x4a, 0xc9, 0x54, 0xca, 0x45, 0xb9,
	0x56, 0xb3, 0x7b, 0xcd, 0x52, 0xc1, 0xbd, 0xa7, 0x12, 0xab, 0x59, 0xdd, 0x41, 0x1b, 0x90, 0xb1,
	0xd0, 0xa3, 0xd0, 0x47, 0xc8, 0x2f, 0xdc, 0x47, 0x5e, 0x1b, 0x83, 0x13, 0x48, 0x1a, 0xb5, 0xab,
	0xe1, 0x90, 0x64, 0xe0, 0x42, 0x53, 0x17, 0xdc, 0x32, 0x8a, 0x6a, 0xd5, 0x50, 0x74, 0xb3, 0xa7,
	0x5c, 0x5e, 0x43, 0x9c, 0x6d, 0xc5, 0xb8, 0x4a, 0x99, 0xb0, 0x09, 0xc3, 0xb6, 0x04, 0xb2, 0xcb,
	0xf2, 0x80, 0x05, 0xa6, 0x0e, 0x96, 0x0f, 0x32, 0x60, 0xcd, 0x70, 0x0e, 0x26, 0x7a, 0xa9, 0x52,
	0xe1, 0xa6, 0x8f, 0x70, 0xcb, 0xb0, 0x1f, 0xb1, 0x78, 0x87, 0xbf, 0x85, 0x20, 0xe9, 0x51, 0x6c,
	0x51, 0xb9, 0x5b, 0x52, 0x6a, 0x26, 0xd7, 0x1f, 0xef, 0x3c, 0x63, 0xe9, 0xef, 0xa9, 0xe6, 0xf6,
	0x65, 0x2a, 0xd0, 0x8a, 0x53, 0x2a, 0xf4, 0x49, 0x63, 0xad, 0x75, 0x61, 0x14, 0xf8, 0x36, 0x60,
	0xbb, 0x42, 0x64, 0xb5, 0x31, 0xa0, 0xb0, 0xff, 0xe0, 0xf3, 0xb6, 0xb5, 0x22, 0x8e, 0x0b, 0xa7,
	0x8e, 0x9e, 0xe0, 0x47, 0x57, 0x03, 0xe7, 0x41, 0xb8, 0x65, 0x14, 0xcb, 0xda, 0x9d, 0x2a, 0x11,
	0x55, 0xb4, 0xef, 0x97, 0x45, 0xf2, 0x89, 0xcf, 0x1a, 0x08, 0xce, 0xb1, 0x2b, 0xaf, 0x99, 0x5b,
	0x46, 0x33, 0x7d, 0xa8, 0x14, 0xbb, 0x65, 0x5c, 0xe2, 0x0c, 0xab, 0xb2, 0xb9, 0xbd, 0xf8, 0xe6,
	0xc7, 0x0d, 0xf4, 0x1a, 0x1c, 0xa3, 0x89, 0x7e, 0xd8, 0x64, 0x49, 0x2d, 0xd5, 0x6a, 0xa9, 0xe6,
	0x74, 0x41, 0x59, 0x38, 0x06, 0x23, 0xcd, 0x9a, 0xa5, 0xec, 0x4a, 0xe0, 0x40, 0x4e, 0x4c, 0xcd,
	0xe4, 0x5f, 0x01, 0x7c, 0x4b, 0xbe, 0x2d, 0x17, 0x6d, 0xd7, 0x46, 0x33, 0x0d, 0x0a, 0x07, 0x55,
	0x78, 0x52, 0xa4, 0x59, 0x7e, 0xa9, 0xeb, 0xdf, 0xd3, 0x5c, 0xaf, 0xae, 0xb9, 0xfd, 0x4c, 0xc7,
	0xf0, 0x6f, 0xc2, 0x80, 0x03, 0x53, 0x66, 0x08, 0x6d, 0xb7, 0xcb, 0x1d, 0x79, 0x9a, 0xd5, 0x45,
	0xf8, 0x08, 0x0d, 0xa6, 0xa3, 0x0f, 0x50, 0x58, 0x40, 0xc9, 0x40, 0x1f, 0xf2, 0x07, 0xbc, 0xce,
	0x21, 0x4e, 0xac, 0xa3, 0x79, 0x23, 0xc4, 0xc0, 0xd7, 0x20, 0x5c, 0xe3, 0x21, 0xb4, 0x54, 0x7d,
	0xc4, 0x3c, 0xbc, 0xee, 0xde, 0xe3, 0x7c, 0x53, 0xba, 0xb6, 0x46, 0x28, 0x14, 0xc9, 0x96, 0x80,
	0x73, 0xfc, 0x5a, 0x4b, 0xa0, 0x97, 0x6b, 0x2d, 0xfc, 0x42, 0x8b, 0x3b, 0x39, 0x6e, 0xa8, 0xd7,
	0xe4, 0xb8, 0x0b, 0x10, 0xe2, 0x2c, 0xfd, 0x9e, 0xb7, 0xec, 0x19, 0x59, 0xf3, 0xfa, 0x4c, 0xa1,
	0x4f, 0xe2, 0x0c, 0xf8, 0x0c, 0xf8, 0xef, 0x28, 0x1b, 0x5d, 0x37, 0x3a, 0x24, 0x11, 0x12, 0x3c,
	0x0b, 0xa1, 0x1d, 0x6d, 0x43, 0xad, 0xec, 0x93, 0xf9, 0x8b, 0xc7, 0xd9, 0x70, 0x5a, 0xbc, 0x01,
	0x70, 0x47, 0xd9, 0x28, 0x72, 0xce, 0xe8, 0x81, 0x2e, 0x3b, 0xbc, 0xa7, 0x6c, 0x5c, 0xa7, 0x7c,
	0xdc, 0x52, 0x63, 0x0d, 0xe0, 0x05, 0x44, 0xee, 0x58, 0x6f, 0xf1, 0x0d, 0x80, 0x36, 0xe7, 0x7b,
	0xc6, 0x1b, 0x0a, 0xb1, 0x34, 0x7c, 0x13, 0x2f, 0x62, 0x8e, 0x40, 0xc9, 0x21, 0x61, 0xf1, 0xef,
	0xf8, 0x3f, 0xbf, 0x18, 0x63, 0xb1, 0x3b, 0x73, 0xe2, 0xac, 0x78, 0x41, 0xcc, 0xe6, 0x3e, 0x69,
	0xa0, 0xfb, 0xfe, 0xce, 0xa8, 0xc5, 0xf1, 0x66, 0x02, 0x56, 0xec, 0x9e, 0xb7, 0x42, 0x60, 0x1a,
	0x41, 0x02, 0xc2, 0x56, 0x6c, 0x76, 0x72, 0xa0, 0x39, 0xc9, 0x52, 0x08, 0xea, 0x76, 0xb2, 0xd8,
	0x0f, 0x40, 0xf5, 0x4a, 0x16, 0x3b, 0x02, 0x98, 0xfd, 0x74, 0x3a, 0x81, 0x60, 0x12, 0x86, 0xf9,
	0x53, 0xa3, 0xbe, 0x69, 0x7b, 0x7b, 0x70, 0x38, 0x19, 0x5a, 0xa3, 0xbf, 0xe1, 0xb8, 0xcd, 0xe6,
	0xf0, 0xf0, 0xe0, 0xfe, 0x64, 0x90, 0xc5, 0x57, 0xbf, 0xc5, 0xfc, 0x4c, 0x53, 0x6f, 0xc0, 0xeb,
	0x30, 0x0e, 0x51, 0x87, 0xdf, 0x88, 0xc8, 0x58, 0xb5, 0x21, 0x5b, 0x3b, 0x8e, 0x1b, 0x46, 0x01,
	0x9a, 0x0e, 0xa3, 0xa6, 0xa0, 0x0a, 0xc4, 0x9b, 0x5d, 0x69, 0x39, 0x55, 0xdf, 0x83, 0x9b, 0x30,
	0x0e, 0x43, 0xcd, 0x1e, 0xcd, 0x6c, 0x56, 0xe4, 0xad, 0x5c, 0xe0, 0x4a, 0x45, 0xde, 0x82, 0x23,
	0x20, 0x38, 0x5e, 0x50, 0x10, 0x2d, 0x17, 0xa4, 0xe1, 0x1a, 0xa4, 0x55, 0x8e, 0x57, 0x96, 0x21,
	0xde, 0xbc, 0x72, 0x92, 0x3f, 0x03, 0xa3, 0x6e, 0xff, 0x59, 0xa7, 0x2c, 0xd4, 0xf9, 0x1c, 0x8c,
	0x93, 0x4d, 0x9a, 0xdb, 0xf0, 0x45, 0x73, 0xb7, 0xa6, 0x38, 0x93, 0xbb, 0x45, 0x78, 0xb0, 0x53,
	0x98, 0xe8, 0x31, 0x7e, 0x43, 0x9c, 0x85, 0x76, 0xaf, 0x04, 0xc2, 0x61, 0x21, 0x92, 0xfe, 0x1a,
	0x8c, 0x78, 0xcd, 0x3e, 0x7c, 0x09, 0x42, 0xdc, 0xc5, 0xc1, 0xf4, 0x99, 0xd8, 0x21, 0x03, 0x72,
	0x9b, 0x9b, 0x46, 0x36, 0xd4, 0x92, 0xc4, 0x79, 0xd3, 0xff, 0xc8, 0xc7, 0x6d, 0x0d, 0xaf, 0xad,
	0x01, 0xff, 0x0d, 0xe4, 0xf6, 0x4a, 0x3d, 0xd3, 0x9e, 0xcb, 0xb7, 0x95, 0x03, 0x9b, 0x19, 0xac,
	0x06, 0xf8, 0x1e, 0x0c, 0x28, 0x77, 0x4b, 0x95, 0x7a, 0x59, 0x69, 0x82, 0xcd, 0x4f, 0x5d, 0xa3,
	0xcb, 0x44, 0x92, 0x61, 0xd5, 0x68, 0xd4, 0xa3, 0x36, 0x44, 0x23, 0xf3, 0xf2, 0xc8, 0x81, 0x37,
	0xfd, 0xcb, 0x3e, 0x98, 0xea, 0x7d, 0x33, 0xc7, 0xb7, 0x60, 0xd8, 0xe1, 0x8e, 0xb7, 0xb2, 0xbc,
	0x70, 0xbb, 0xb6, 0xd7, 0xe4, 0x4b, 0xcd, 0xa2, 0xac, 0x2c, 0x30, 0x12, 0x6e, 0x4a, 0xb5, 0x9e,
	0xb5, 0xf5, 0x8c, 0xef, 0xcb, 0xed, 0x99, 0x0f, 0x11, 0x1c, 0xeb, 0x66, 0x64, 0x7d, 0x99, 0x7d,
	0x91, 0xfe, 0x8d, 0x60, 0x87, 0xca, 0x3c, 0x0f, 0x3c, 0xde, 0xbd, 0x27, 0xfa, 0x0f, 0xbe, 0x27,
	0x06, 0x0e, 0xba, 0x27, 0x5a, 0x3b, 0x77, 0xf0, 0x00, 0x3b, 0x77, 0x87, 0xee, 0x0e, 0xbd, 0x80,
	0xee, 0x5e, 0xfc, 0xab, 0xbe, 0x4f, 0x1a, 0xe8, 0xff, 0x75, 0x71, 0xc9, 0xfd, 0x79, 0xdf, 0x55,
	0x4e, 0x42, 0xd8, 0x6a, 0x6c, 0x72, 0xdc, 0xb3, 0x63, 0x53, 0xa8, 0xfb, 0x66, 0x60, 0xa1, 0x80,
	0x3c, 0x1b, 0xad, 0x4f, 0xf0, 0xa7, 0x7f, 0x29, 0xd0, 0x36, 0x49, 0x5d, 0xcb, 0xee, 0x2f, 0xfe,
	0x24, 0x5d, 0xfc, 0x1f, 0xe8, 0x93, 0x06, 0xfa, 0x6f, 0x7f, 0x71, 0x27, 0xce, 0x81, 0xe7, 0xc4,
	0x87, 0x08, 0x12, 0x57, 0x57, 0xd7, 0xb7, 0x75, 0x45, 0x36, 0x97, 0x65, 0x53, 0xd9, 0xd2, 0xf4,
	0x66, 0x06, 0xc5, 0x2a, 0x8c, 0xa8, 0xb5, 0xa2, 0x49, 0x5f, 0x16, 0x4b, 0xec, 0xad, 0x05, 0x00,
	0xc7, 0x72, 0x2f, 0x79, 0xef, 0xfc, 0xad, 0xd2, 0x3a, 0x5c, 0x75, 0xc2, 0x6a, 0xcd, 0x45, 0xa7,
	0x2a, 0x46, 0xfa, 0x9f, 0xe7, 0x20, 0xf6, 0x56, 0x45, 0xdb, 0x90, 0x2b, 0x6b, 0x35, 0x85, 0x99,
	0x1b, 0x65, 0xe8, 0xb7, 0x22, 0xdd, 0x11, 0xbd, 0xe8, 0xb4, 0x42, 0x1d, 0x6e, 0x1f, 0xa1, 0xfe,
	0x34, 0x4b, 0x4f, 0x47, 0x7e, 0x46, 0x3e, 0x42, 0xa1, 0x74, 0x40, 0xe7, 0x30, 0xae, 0xf5, 0xf2,
	0xdb, 0x3e, 0xd4, 0x5e, 0xb2, 0xeb, 0xec, 0x63, 0x89, 0xc6, 0x2b, 0x10, 0x20, 0xba, 0xa8, 0x43,
	0x28, 0x5e, 0x27, 0x65, 0xe5, 0xca, 0x21, 0x5b, 0xe8, 0x93, 0xa8, 0x0c, 0xbc, 0x0d, 0x43, 0xe4,
	0xaf, 0x51, 0xa4, 0x39, 0x2f, 0x4a, 0x8a, 0x6e, 0xf2, 0x4c, 0x52, 0x17, 0x9f, 0x46, 0x6c, 0x33,
	0x35, 0x6d, 0xa1, 0x4f, 0xa2, 0xa9, 0x69, 0xed, 0x27, 0xf8, 0x3a, 0x04, 0xe9, 0x03, 0xbe, 0xda,
	0xe6, 0x9e, 0x4a, 0x7e, 0xa1, 0x4f, 0x62, 0x52, 0xf0, 0xdf, 0x44, 0x30, 0x5d, 0xb6, 0x93, 0xbf,
	0x16, 0x5b, 0xd2, 0x80, 0x17, 0xbd, 0x1c, 0xa4, 0x46, 0xe2, 0x22, 0xdd, 0xf4, 0xbb, 0x79, 0x48,
	0xfb, 0xf9, 0x4d, 0x13, 0x49, 0x2c, 0x3b, 0x33, 0xcb, 0x3a, 0x32, 0x82, 0x5f, 0x6e, 0xf7, 0x98,
	0x1a, 0xf8, 0x0a, 0x08, 0x3c, 0x27, 0x93, 0x5c, 0xbe, 0x4d, 0x68, 0x0d, 0xa5, 0x9b, 0x7b, 0xc6,
	0x4e, 0xd1, 0x1a, 0xa3, 0x39, 0x99, 0x96, 0x2c, 0x1e, 0xfc, 0x35, 0x98, 0xb4, 0x05, 0x14, 0xb5,
	0x6a, 0xb1, 0x56, 0xdf, 0xa8, 0xa8, 0x25, 0xfb, 0x46, 0xca, 0x6d, 0xb5, 0xb6, 0x4f, 0x94, 0xc9,
	0x51, 0x9b, 0xfd, 0xed, 0xea, 0x2a, 0x65, 0xe6, 0x77, 0x55, 0xde, 0x55, 0x6b, 0xf8, 0x6b, 0x30,
	0xec, 0x21, 0x9d, 0xeb, 0xb2, 0x53, 0x9e, 0x03, 0x62, 0x57, 0x8d, 0x09, 0xb3, 0x2b, 0x1e, 0x6f,
	0x2b, 0x07, 0xbf, 0x4f, 0x13, 0x84, 0x70, 0xe9, 0xcc, 0x7d, 0xc5, 0xb5, 0xdd, 0x3e, 0xa2, 0x99,
	0x07, 0xac, 0x99, 0x50, 0xae, 0xc0, 0x32, 0x81, 0x38, 0x5f, 0x62, 0x0d, 0x86, 0xed, 0xc4, 0x69,
	0xf4, 0x26, 0x28, 0xbb, 0x13, 0x1d, 0x7a, 0xfa, 0x04, 0x30, 0x8e, 0x44, 0xa9, 0x52, 0xdc, 0x4a,
	0xb0, 0x46, 0x44, 0x77, 0x49, 0x03, 0x73, 0xac, 0x2b, 0xbe, 0xbc, 0x6f, 0x1a, 0x98, 0xe3, 0x5e,
	0x69, 0x60, 0x7c, 0xbd, 0xa5, 0x81, 0x99, 0xe8, 0x5a, 0xb4, 0x57, 0x1a, 0x98, 0x7b, 0x10, 0xa2,
	0x5d, 0x65, 0x24, 0xfa, 0x69, 0x2f, 0x4d, 0x1f, 0x34, 0x67, 0x41, 0x7e, 0xc6, 0x1a, 0x91, 0xa6,
	0x81, 0xeb, 0xf3, 0x3c, 0x7e, 0xd8, 0xff, 0x86, 0x91, 0xc4, 0x0b, 0x6d, 0xcd, 0x27, 0x18, 0x7e,
	0xba, 0x7c, 0x82, 0x2d, 0xd9, 0x1c, 0xbb, 0xc7, 0xff, 0x7b, 0x64, 0x73, 0x8c, 0x3c, 0x4b, 0x36,
	0x47, 0x7f, 0x7b, 0x36, 0x47, 0x78, 0xf6, 0x6c, 0x8e, 0xfe, 0x17, 0x92, 0xcd, 0xd1, 0xef, 0xce,
	0xe6, 0xf8, 0x2a, 0x0c, 0xc8, 0xe5, 0x72, 0xd3, 0xb0, 0x8d, 0xd3, 0xac, 0x99, 0x61, 0xeb, 0x53,
	0x0e, 0x52, 0x54, 0x2e, 0x97, 0xed, 0xb3, 0xd1, 0x1b, 0x2d, 0x97, 0x13, 0x92, 0xfb, 0x6a, 0xae,
	0x96, 0x2b, 0x0a, 0x1b, 0x30, 0xe0, 0xba, 0x94, 0x80, 0x9f, 0xfe, 0x9a, 0x4f, 0x53, 0x0b, 0x04,
	0xa4, 0xa8, 0xe3, 0xaa, 0x0f, 0x56, 0x21, 0xde, 0x7e, 0x47, 0x21, 0xf1, 0x94, 0x97, 0x6d, 0x9c,
	0xa5, 0x08, 0xad, 0x17, 0x6e, 0xf0, 0x3d, 0x18, 0xe3, 0x4e, 0xe8, 0x0d, 0xd9, 0x50, 0xca, 0x8e,
	0xf2, 0x66, 0x0e, 0x04, 0x88, 0x79, 0x5d, 0xbe, 0x72, 0x15, 0x3d, 0x52, 0xf3, 0xba, 0x9e, 0xa5,
	0x40, 0x74, 0x47, 0xd3, 0x15, 0x9e, 0x65, 0x89, 0xdf, 0x99, 0x5b, 0x7c, 0xfa, 0xcb, 0xbd, 0xce,
	0xa5, 0x45, 0x04, 0xb3, 0x57, 0xf8, 0x2d, 0x88, 0xf3, 0x4f, 0xee, 0x58, 0x21, 0x31, 0x6a, 0x2d,
	0xf1, 0xda, 0xbe, 0x43, 0x1f, 0x94, 0x62, 0x75, 0xfa, 0x35, 0x40, 0x16, 0xe2, 0x74, 0xb5, 0x86,
	0xbf, 0x09, 0x5e, 0x5f, 0x0e, 0xe4, 0xa9, 0x3f, 0x7b, 0x99, 0xcc, 0x49, 0xef, 0x6f, 0x0f, 0xf2,
	0xe2, 0x30, 0x2b, 0xce, 0xf9, 0x06, 0x5f, 0x02, 0x4b, 0xe3, 0x39, 0xbe, 0x13, 0x94, 0x18, 0xeb,
	0x9a, 0x7c, 0xd2, 0xf2, 0xa5, 0x36, 0x3f, 0xf7, 0xf3, 0x3e, 0xc4, 0xdc, 0x9f, 0xe2, 0x4a, 0x5c,
	0xea, 0x12, 0x1c, 0xe1, 0xd1, 0xd7, 0x8e, 0x6f, 0x07, 0x15, 0x42, 0xd2, 0x80, 0x5c, 0x53, 0x9b,
	0xc2, 0x65, 0x00, 0x87, 0xe0, 0xf1, 0x03, 0x0d, 0xa2, 0x47, 0x60, 0x0d, 0xbf, 0x38, 0x15, 0x92,
	0x22, 0x76, 0x78, 0x0c, 0xfe, 0x6b, 0xa8, 0xdb, 0xad, 0xa6, 0x54, 0xcf, 0xfd, 0x7f, 0xba, 0xdb,
	0xad, 0x26, 0x6e, 0x10, 0x25, 0x50, 0xe7, 0xcb, 0x4d, 0x3f, 0x87, 0x58, 0x40, 0xac, 0x62, 0x9d,
	0xcf, 0xb8, 0xf3, 0xe5, 0x04, 0xdd, 0x77, 0x3a, 0x60, 0x6e, 0x3c, 0xc7, 0x9f, 0xbc, 0xe9, 0x06,
	0x53, 0xce, 0x74, 0xd9, 0x73, 0xdc, 0x21, 0xda, 0xf1, 0x3b, 0x2d, 0xbc, 0x06, 0xfe, 0x69, 0x10,
	0xc8, 0xe1, 0xa8, 0xb8, 0x55, 0x97, 0xf5, 0x32, 0xaf, 0xc4, 0x1b, 0x9e, 0x26, 0x82, 0xab, 0x12,
	0x97, 0x64, 0x53, 0x7e, 0x8b, 0xb0, 0xd0, 0x1a, 0xbc, 0xec, 0xac, 0x41, 0xb7, 0x18, 0xf1, 0x58,
	0xd9, 0xc9, 0x67, 0xe0, 0x9f, 0x47, 0x30, 0xd4, 0x12, 0x6f, 0x9a, 0x48, 0xd3, 0xd2, 0x7b, 0x1d,
	0x77, 0x8f, 0x18, 0xf0, 0x03, 0x74, 0x48, 0x8c, 0x17, 0xce, 0xf8, 0x59, 0x7d, 0xec, 0xef, 0x0e,
	0xf1, 0xfa, 0x9c, 0xfc, 0x32, 0xeb, 0x63, 0x7d, 0xb2, 0x88, 0xd7, 0xe7, 0x97, 0x11, 0xf7, 0x9f,
	0x3b, 0x02, 0xe3, 0xd8, 0x18, 0x9d, 0xa6, 0xb5, 0x5a, 0x38, 0x40, 0xfc, 0xa5, 0x3b, 0x80, 0xf4,
	0x00, 0x95, 0x1a, 0x26, 0x35, 0x70, 0x73, 0x1b, 0xf8, 0xeb, 0x30, 0xe9, 0x0a, 0xfc, 0x51, 0x15,
	0x83, 0x45, 0x97, 0x90, 0x53, 0xb6, 0x51, 0x93, 0x4b, 0x4a, 0xe2, 0x95, 0xae, 0x69, 0x64, 0x8f,
	0x19, 0x8e, 0x18, 0x24, 0x55, 0x31, 0xae, 0xe8, 0xda, 0xce, 0x0d, 0x8b, 0x17, 0x5f, 0x81, 0xe1,
	0xaa, 0x56, 0x6c, 0x2d, 0x21, 0x31, 0xd5, 0x55, 0x64, 0xbc, 0xaa, 0xad, 0xb9, 0x85, 0xe2, 0xbb,
	0x30, 0x2e, 0x97, 0x4c, 0xf5, 0xb6, 0xd2, 0x2e, 0xeb, 0xd5, 0x03, 0xdd, 0xb1, 0x6b, 0x8b, 0x98,
	0xe2, 0xda, 0xa5, 0x5f, 0x1a, 0x65, 0x05, 0xb4, 0x96, 0x7c, 0x1e, 0xa2, 0xba, 0x56, 0xaf, 0x96,
	0x8b, 0xba, 0xb6, 0xa1, 0x56, 0x13, 0x67, 0xbb, 0x26, 0x9a, 0x05, 0x4a, 0x2a, 0x11, 0x4a, 0xbc,
	0x00, 0x03, 0x15, 0x45, 0x36, 0xcc, 0x22, 0x93, 0x9b, 0xc8, 0x74, 0xe5, 0x8c, 0x52, 0xda, 0x25,
	0x4a, 0x8a, 0x33, 0x10, 0xd2, 0xe5, 0x6a, 0x59, 0xdb, 0x49, 0x9c, 0xeb, 0xca, 0xc4, 0xa9, 0x88,
	0xe5, 0xcc, 0x43, 0xca, 0xd5, 0x5a, 0xd1, 0x30, 0xd5, 0xd2, 0x07, 0x6a, 0x55, 0x31, 0x8c, 0xc4,
	0x74, 0x57, 0x6e, 0xcc, 0x78, 0xae, 0xd6, 0xd6, 0x6c, 0x0e, 0xbc, 0x0e, 0x71, 0x7e, 0x89, 0xc5,
	0x21, 0x26, 0xeb, 0x19, 0xb2, 0xcb, 0xd2, 0xdc, 0xb0, 0x4b, 0x30, 0x57, 0x34, 0xbd, 0x20, 0x1b,
	0xdb, 0x6a, 0x75, 0xab, 0x10, 0x96, 0x04, 0x26, 0xc1, 0x21, 0xf5, 0xab, 0x10, 0xa1, 0xb9, 0x56,
	0xb7, 0x65, 0x63, 0x3b, 0x91, 0x7b, 0xd6, 0x0f, 0x0c, 0x84, 0xa5, 0x30, 0x91, 0x46, 0xde, 0x60,
	0x0d, 0x06, 0x0d, 0x1a, 0xe1, 0x54, 0xac, 0x6c, 0x14, 0xe5, 0x5a, 0x2d, 0x31, 0x7f, 0x30, 0xe7,
	0x7f, 0x97, 0xe8, 0x28, 0xbe, 0xe9, 0x47, 0xa4, 0x28, 0x2b, 0xe1, 0xda, 0xc6, 0x52, 0xad, 0x86,
	0x2f, 0xc2, 0xc0, 0x4e, 0xbd, 0x62, 0xaa, 0x56, 0x79, 0xe7, 0xf7, 0xb5, 0x1a, 0x22, 0x12, 0x50,
	0x0e, 0xc6, 0xff, 0x36, 0x0c, 0x5b, 0xdb, 0xf7, 0x86, 0x66, 0x92, 0xe3, 0xad, 0x52, 0x35, 0x94,
	0xc4, 0x42, 0x17, 0x31, 0xfc, 0x60, 0xde, 0x57, 0x00, 0xc9, 0x8a, 0x9c, 0x68, 0x46, 0x7e, 0xe0,
	0x4d, 0x88, 0x3a, 0x05, 0x2d, 0x1e, 0x68, 0xb7, 0xf5, 0x08, 0xb8, 0x71, 0x16, 0x07, 0x1b, 0xcd,
	0x72, 0x1c, 0x11, 0x53, 0xee, 0xd8, 0xbc, 0xc4, 0x95, 0x2e, 0xb3, 0x2c, 0x6a, 0x47, 0x4c, 0xb9,
	0x62, 0x04, 0xf1, 0x37, 0xa0, 0x25, 0xc2, 0x2f, 0xf1, 0xd6, 0x41, 0x8e, 0x2b, 0x2d, 0xcc, 0x85,
	0xa8, 0x34, 0xe8, 0x0a, 0x06, 0xc4, 0x95, 0xf6, 0xf8, 0xc3, 0xd7, 0x0f, 0xa4, 0x27, 0xda, 0x42,
	0x1a, 0x6d, 0x7c, 0xa4, 0x10, 0x6d, 0x8d, 0x3c, 0xc4, 0x2b, 0x30, 0x6a, 0xf5, 0x8d, 0x5a, 0x2b,
	0xea, 0x4a, 0xad, 0x6e, 0x32, 0x43, 0x64, 0xa9, 0x4b, 0xd7, 0x0c, 0x48, 0xd6, 0x4c, 0xb8, 0x5a,
	0x93, 0x6c, 0x16, 0x6c, 0xc0, 0x08, 0x8f, 0x25, 0x73, 0x8b, 0xca, 0x53, 0x51, 0x6f, 0xf4, 0xfa,
	0xa9, 0xd1, 0x0e, 0x50, 0x61, 0x61, 0x40, 0xc2, 0x4c, 0xbc, 0xab, 0xd0, 0x6f, 0xc0, 0x20, 0xfd,
	0xba, 0xb9, 0x5a, 0x35, 0x15, 0xbd, 0x2a, 0x57, 0x12, 0x3f, 0xe8, 0xfd, 0x6b, 0xc8, 0x23, 0x0f,
	0xef, 0xb9, 0x99, 0x29, 0x88, 0x34, 0x40, 0x1e, 0x5d, 0xe5, 0x4f, 0xf0, 0x31, 0x88, 0xd0, 0x23,
	0x3d, 0xfd, 0xf4, 0xcf, 0x1f, 0xd2, 0x6f, 0x82, 0x49, 0x61, 0xf2, 0x84, 0x7e, 0xe1, 0xa7, 0x00,
	0x61, 0xeb, 0x73, 0xe5, 0x89, 0x3f, 0xea, 0xf7, 0xb4, 0x9c, 0x3c, 0xbf, 0x6d, 0x9e, 0xb9, 0x54,
	0x35, 0xae, 0x56, 0x37, 0x35, 0xa9, 0xbf, 0xcc, 0xfe, 0xc1, 0xcb, 0x10, 0x34, 0x4c, 0xd9, 0x54,
	0x12, 0xff, 0xbb, 0x9f, 0xba, 0x33, 0xba, 0x89, 0xc9, 0xbc, 0xcb, 0x7e, 0x14, 0x34, 0xc3, 0x5c,
	0x23, 0x4c, 0x12, 0xe3, 0xc5, 0xef, 0xc3, 0x90, 0x0d, 0x09, 0x16, 0x99, 0xb8, 0x3f, 0x66, 0xe2,
	0x32, 0x5d, 0x4f, 0x5b, 0x36, 0x50, 0xa6, 0x6a, 0x55, 0x2a, 0x30, 0xef, 0x4b, 0x20, 0x69, 0x50,
	0xe6, 0x30, 0x20, 0x7d, 0x84, 0xd7, 0x20, 0xd6, 0x14, 0x4e, 0x5b, 0xfc, 0x79, 0xbf, 0xa7, 0x7f,
	0xd6, 0x25, 0xdb, 0x82, 0x12, 0x49, 0x23, 0x29, 0x4a, 0x3e, 0x20, 0x3b, 0x9e, 0x2c, 0xfe, 0x29,
	0xfa, 0xb8, 0x81, 0xfe, 0x2f, 0x82, 0xa3, 0x30, 0x4c, 0xdd, 0xb7, 0x2d, 0xe1, 0xc8, 0x81, 0xac,
	0x98, 0x9d, 0x85, 0x09, 0x18, 0xe3, 0x80, 0x58, 0x8a, 0x67, 0xcc, 0x63, 0x1f, 0x59, 0x32, 0x70,
	0x60, 0x5e, 0x9c, 0xc9, 0xc2, 0x11, 0x9e, 0xa0, 0xd3, 0x68, 0xe1, 0x46, 0xe7, 0x61, 0x1c, 0xe2,
	0xef, 0x5e, 0x5d, 0x6d, 0x79, 0xee, 0xcb, 0xce, 0xc1, 0x65, 0x18, 0xb3, 0x92, 0x94, 0xb7, 0xbc,
	0x7d, 0x75, 0x76, 0x5a, 0x9c, 0x9b, 0x17, 0xb3, 0xf3, 0xe2, 0xcc, 0x8c, 0x38, 0x3f, 0x2b, 0xce,
	0xcf, 0x88, 0x17, 0xc4, 0xdc, 0x9c, 0x38, 0xb7, 0x20, 0xce, 0x2f, 0x88, 0xb9, 0xac, 0x38, 0x33,
	0x2b, 0xce, 0xcc, 0x89, 0x33, 0xe7, 0xc5, 0xb9, 0x19, 0x38, 0xd6, 0x31, 0x7d, 0xba, 0x6f, 0x76,
	0x16, 0x26, 0x61, 0xcc, 0x3a, 0xda, 0xb5, 0x14, 0x12, 0xcc, 0x9e, 0x17, 0xb3, 0x0b, 0xf9, 0x97,
	0x21, 0xee, 0x9c, 0xfc, 0xd4, 0x87, 0x4e, 0x6f, 0x55, 0xf9, 0x78, 0x9e, 0x91, 0x50, 0x4e, 0xcc,
	0x9d, 0x17, 0x67, 0xf2, 0xaf, 0xb8, 0x70, 0x3a, 0xc7, 0xe7, 0x8c, 0xf6, 0x1a, 0x68, 0xe8, 0x49,
	0x03, 0x45, 0xb2, 0x2c, 0xcd, 0x53, 0x36, 0x97, 0x3f, 0xe7, 0x9d, 0x6f, 0x37, 0xf1, 0xb8, 0x81,
	0x8e, 0x71, 0x97, 0xfc, 0xe4, 0x93, 0x06, 0x0a, 0xf3, 0xd4, 0xea, 0xd3, 0xf9, 0x49, 0x57, 0x42,
	0x74, 0xeb, 0x8a, 0xbb, 0xc0, 0xaf, 0xb8, 0xcf, 0xe5, 0xf2, 0x67, 0x21, 0xd6, 0xbc, 0xe2, 0x4e,
	0xab, 0x78, 0xf4, 0x71, 0x03, 0x25, 0xb9, 0xb0, 0x23, 0x4f, 0x1a, 0x28, 0x9a, 0x9b, 0x17, 0xb3,
	0x17, 0xc4, 0xdc, 0xac, 0x38, 0x97, 0xcd, 0xbf, 0x0c, 0x31, 0xfb, 0x8c, 0xda, 0xac, 0xe9, 0x6b,
	0x9c, 0xfc, 0x2b, 0x44, 0xee, 0xfc, 0xb4, 0x98, 0x9b, 0xce, 0xbf, 0x02, 0xf1, 0xe6, 0x69, 0xcb,
	0x79, 0x77, 0x7e, 0x6c, 0xaf, 0x81, 0x46, 0x69, 0x1d, 0x73, 0xe2, 0xfc, 0x05, 0x31, 0x37, 0x93,
	0x3f, 0x0b, 0xa3, 0x2d, 0xd7, 0xd5, 0x1d, 0xe4, 0xaf, 0xec, 0x35, 0xd0, 0x19, 0x42, 0x3e, 0x9b,
	0x15, 0x67, 0x73, 0xe2, 0xec, 0x4c, 0x7e, 0xc6, 0x33, 0x5b, 0xfc, 0xf1, 0xc7, 0x0d, 0x74, 0x76,
	0xaf, 0x81, 0xc4, 0x27, 0x0d, 0x14, 0x9f, 0x9d, 0x13, 0x67, 0xe7, 0xc5, 0xd9, 0xf3, 0xe2, 0xec,
	0x05, 0x71, 0x76, 0x41, 0x9c, 0x23, 0xd5, 0x11, 0x76, 0x2a, 0xfc, 0xbb, 0x11, 0xce, 0x9a, 0x9f,
	0xe7, 0x35, 0x9f, 0xa3, 0x99, 0x8a, 0x67, 0xc5, 0xb9, 0xb9, 0xfc, 0x05, 0xc0, 0x8e, 0xad, 0xcb,
	0x22, 0x4e, 0x3f, 0x6e, 0xa0, 0x85, 0xbd, 0x06, 0xba, 0x40, 0x09, 0xcf, 0x8b, 0x73, 0x17, 0x7e,
	0xd8, 0x40, 0x7d, 0x1f, 0x3d, 0x42, 0x11, 0x83, 0xec, 0x56, 0x67, 0x37, 0x34, 0x33, 0x9f, 0x85,
	0x51, 0xb7, 0x7a, 0xb7, 0x98, 0xc9, 0xf8, 0x5c, 0xe1, 0x25, 0x5d, 0x26, 0x8d, 0x39, 0x3f, 0x2d,
	0x9e, 0xcf, 0x8a, 0xf3, 0xd9, 0xfc, 0x59, 0xea, 0x23, 0x69, 0x2a, 0x54, 0x67, 0xdd, 0x96, 0x38,
	0xc7, 0x9b, 0xb4, 0x57, 0xe7, 0xc4, 0xf9, 0x79, 0x3b, 0x9b, 0x0c, 0xfb, 0x84, 0xd5, 0xa4, 0x90,
	0xb2, 0x3f, 0x64, 0xc5, 0x92, 0xb8, 0x7f, 0x45, 0x78, 0x6d, 0x25, 0x10, 0x1e, 0x15, 0xc6, 0x56,
	0x02, 0xe1, 0x33, 0xc2, 0x2b, 0x2b, 0x81, 0xb0, 0x28, 0x9c, 0x5d, 0x09, 0x84, 0xe7, 0x04, 0xc2,
	0x7b, 0x41, 0x58, 0x58, 0x09, 0x84, 0x2f, 0x0b, 0x57, 0x56, 0x02, 0xe1, 0x37, 0x85, 0xa5, 0xf4,
	0xff, 0x3a, 0x05, 0xb1, 0x65, 0xa2, 0x8f, 0x15, 0xdb, 0x61, 0x92, 0x68, 0x71, 0x98, 0x1c, 0x3a,
	0x39, 0x5c, 0x4e, 0x8e, 0x37, 0x0f, 0xe6, 0x56, 0xf8, 0xd2, 0x1d, 0x0a, 0xef, 0x3e, 0xb3, 0x43,
	0xc1, 0xdb, 0x95, 0xf0, 0xce, 0xb3, 0xb9, 0x12, 0xbc, 0x1c, 0x08, 0x3f, 0xf9, 0x7c, 0x1c, 0x08,
	0x5e, 0xae, 0x82, 0xc2, 0xb3, 0x02, 0xed, 0x36, 0x66, 0xbe, 0x78, 0x30, 0xcc, 0xfc, 0x69, 0x91,
	0x72, 0xf7, 0x77, 0x8f, 0xe6, 0x0f, 0x88, 0x94, 0x5b, 0x1f, 0x39, 0x7a, 0xe3, 0x69, 0x60, 0x71,
	0xe7, 0xb7, 0x8c, 0xde, 0x7a, 0x5a, 0xf4, 0xbb, 0xf5, 0xd3, 0x45, 0x27, 0xbc, 0xc0, 0x6e, 0x37,
	0xc4, 0xbd, 0xd0, 0x3b, 0xc4, 0x5d, 0xf0, 0xbb, 0xc1, 0xed, 0xaf, 0x3e, 0x37, 0x70, 0x9b, 0x48,
	0x76, 0x42, 0xda, 0xc5, 0xe7, 0x08, 0x69, 0x17, 0xfc, 0x1e, 0x40, 0xb6, 0xf1, 0x02, 0x81, 0xec,
	0x82, 0xbf, 0x03, 0x7c, 0xfd, 0xfe, 0x73, 0x86, 0xaf, 0x5d, 0xa0, 0xf5, 0xd2, 0x01, 0x41, 0xeb,
	0x42, 0xa0, 0x0d, 0xae, 0xbe, 0xf9, 0x8c, 0x70, 0x75, 0x21, 0xf0, 0x9c, 0x20, 0xe9, 0xe0, 0x8b,
	0x86, 0xa4, 0x83, 0x2d, 0x90, 0xf4, 0xfb, 0xcf, 0x17, 0x92, 0x2e, 0x04, 0x9d, 0x60, 0xf4, 0x4f,
	0x3f, 0x1f, 0x2c, 0xba, 0x6b, 0x86, 0xad, 0xce, 0x10, 0xf4, 0xd7, 0x9e, 0x1b, 0x02, 0xed, 0x85,
	0x2b, 0xaf, 0x3d, 0x07, 0x5c, 0xb9, 0x0d, 0x2e, 0x2e, 0xbd, 0x00, 0xb4, 0xb8, 0x0d, 0x03, 0x2e,
	0xbd, 0x00, 0x08, 0xb8, 0x0d, 0xd8, 0xdd, 0x79, 0x51, 0xb8, 0xee, 0x0b, 0x41, 0x6b, 0x43, 0xcf,
	0x1f, 0xad, 0x0d, 0x79, 0xa1, 0xb5, 0xfa, 0x0b, 0x43, 0x6b, 0x0b, 0xa1, 0xe7, 0x80, 0xd3, 0xf6,
	0x3f, 0x35, 0x4e, 0xdb, 0xff, 0x34, 0x38, 0x6d, 0xff, 0x33, 0xe1, 0xb4, 0xfd, 0x2f, 0x08, 0xa7,
	0xed, 0x7f, 0xe1, 0x38, 0x6d, 0xbf, 0x03, 0xa7, 0x55, 0x5f, 0x1c, 0x4e, 0x5b, 0x08, 0xbb, 0x11,
	0xda, 0x0b, 0xbd, 0x23, 0xb4, 0x85, 0xb0, 0x0b, 0x9b, 0xbd, 0x72, 0x60, 0x6c, 0xb6, 0x10, 0xf1,
	0x82, 0x64, 0xbf, 0xfe, 0x9c, 0x21, 0xd9, 0x42, 0xe4, 0x39, 0x20, 0xb1, 0xd0, 0x01, 0x89, 0xfd,
	0x89, 0xa7, 0x47, 0x62, 0x0b, 0xd0, 0x0a, 0xbb, 0x96, 0x9e, 0x3b, 0xec, 0x5a, 0x80, 0xe7, 0x83,
	0xb6, 0x46, 0x7f, 0x2c, 0x68, 0x6b, 0xd4, 0x0b, 0x6d, 0x5d, 0x8c, 0x7f, 0x72, 0xb1, 0x25, 0x7c,
	0x32, 0x3f, 0xe5, 0x05, 0x61, 0x8d, 0x3e, 0xf8, 0x02, 0xb5, 0x3f, 0xce, 0x9f, 0xf1, 0x40, 0xb1,
	0x46, 0x1e, 0x7c, 0x81, 0xda, 0x9e, 0xe6, 0x8f, 0xb9, 0x30, 0xa9, 0xd8, 0x83, 0x2f, 0x90, 0xe3,
	0x77, 0xfe, 0x54, 0x1b, 0x20, 0x85, 0x1f, 0x7c, 0x81, 0x5a, 0x9e, 0x11, 0xaa, 0x16, 0x1c, 0x8a,
	0x52, 0xb9, 0x9f, 0x91, 0xfa, 0xb7, 0x83, 0x50, 0xb4, 0xfe, 0x6d, 0x8f, 0xf3, 0xb9, 0x4e, 0x28,
	0xd4, 0x91, 0x07, 0x5f, 0x20, 0xef, 0x57, 0x79, 0xd1, 0x13, 0x8a, 0x1a, 0x7b, 0xf0, 0x05, 0xf2,
	0x78, 0x4e, 0x7a, 0xa8, 0x0d, 0x83, 0xa2, 0x3d, 0xd4, 0xfa, 0x94, 0xc8, 0xf5, 0x80, 0xa0, 0xa8,
	0xdc, 0xf6, 0xe7, 0xa4, 0xe6, 0xde, 0xb0, 0x13, 0xad, 0xb9, 0xe7, 0xab, 0xfc, 0x74, 0x07, 0xdc,
	0x29, 0xf1, 0xe0, 0x0b, 0xe4, 0xf9, 0xa6, 0x05, 0x7a, 0x72, 0x82, 0x4e, 0x0c, 0x6e, 0xea, 0x06,
	0x34, 0xfd, 0xc1, 0x29, 0x18, 0x92, 0x94, 0x5a, 0x45, 0x2e, 0x1d, 0x22, 0x4d, 0x87, 0x48, 0xd3,
	0x21, 0xd2, 0x74, 0x88, 0x34, 0x1d, 0x22, 0x4d, 0x87, 0x48, 0xd3, 0x21, 0xd2, 0x74, 0x88, 0x34,
	0x1d, 0x22, 0x4d, 0x87, 0x48, 0xd3, 0x21, 0xd2, 0x74, 0x88, 0x34, 0x1d, 0x22, 0x4d, 0x87, 0x48,
	0xd3, 0x21, 0xd2, 0x74, 0x88, 0x34, 0x1d, 0x22, 0x4d, 0x87, 0x48, 0xd3, 0xb3, 0x20, 0x4d, 0xff,
	0xee, 0x0c, 0x44, 0xdf, 0x52, 0xcc, 0x43, 0x94, 0xa9, 0x37, 0x94, 0xe9, 0xc1, 0x0b, 0xb9, 0xb4,
	0x7d, 0xc0, 0xbb, 0xda, 0x87, 0x50, 0xd7, 0x21, 0xd4, 0x75, 0x08, 0x75, 0x1d, 0x42, 0x5d, 0x87,
	0x50, 0xd7, 0x21, 0xd4, 0x75, 0x08, 0x75, 0x1d, 0x42, 0x5d, 0x87, 0x50, 0xd7, 0x21, 0xd4, 0x75,
	0x08, 0x75, 0x1d, 0x42, 0x5d, 0x87, 0x50, 0xd7, 0x21, 0xd4, 0xf5, 0xe7, 0x1c, 0xea, 0xfa, 0xf3,
	0x75, 0xc5, 0xf4, 0xbd, 0xe7, 0x75, 0xc5, 0xf4, 0x4b, 0xb9, 0x5e, 0x7a, 0x88, 0x22, 0x1e, 0xa2,
	0x88, 0x2f, 0x06, 0x45, 0x9c, 0x9a, 0x86, 0x88, 0x9d, 0x91, 0x1e, 0x87, 0x21, 0x90, 0x7f, 0x7b,
	0xbd, 0x20, 0xf4, 0x91, 0xff, 0x0a, 0xeb, 0xeb, 0xab, 0x02, 0xc2, 0x11, 0x08, 0x92, 0xff, 0xd6,
	0x04, 0x5f, 0x32, 0xf0, 0xb8, 0x81, 0xfa, 0xa6, 0xae, 0xc0, 0xa8, 0xe7, 0xf7, 0x3c, 0xf0, 0x20,
	0x04, 0x96, 0x6e, 0xae, 0xbf, 0x2d, 0xf4, 0x25, 0xfd, 0xf7, 0xef, 0x21, 0x1c, 0x02, 0xdf, 0xcd,
	0x35, 0x81, 0xfe, 0xbd, 0x7c, 0x53, 0xf0, 0x11, 0x91, 0x4b, 0x6b, 0x57, 0x97, 0x04, 0x3f, 0x95,
	0x83, 0xa6, 0x24, 0xc0, 0xed, 0x49, 0x6c, 0x71, 0x0c, 0x60, 0xe9, 0xca, 0xfa, 0x65, 0xa9, 0x58,
	0xb8, 0xbc, 0x74, 0x49, 0xe8, 0xc3, 0xc3, 0x30, 0xc4, 0x7e, 0xaf, 0x5f, 0x5d, 0xbf, 0x76, 0xb9,
	0x78, 0xf9, 0xc6, 0x25, 0x01, 0xe1, 0x38, 0x0c, 0xe6, 0x2f, 0x5f, 0x79, 0x5b, 0xba, 0x5c, 0x5c,
	0x5b, 0x96, 0xae, 0xae, 0xae, 0x5b, 0x75, 0xcb, 0xff, 0x2a, 0xda, 0xfb, 0xde, 0x44, 0xdf, 0xa7,
	0xdf, 0x9b, 0xe8, 0xfb, 0xe1, 0xf7, 0x26, 0xd0, 0xfd, 0x27, 0x13, 0xe8, 0xb7, 0x9e, 0x4c, 0xa0,
	0xdf, 0x7b, 0x32, 0x81, 0xf6, 0x9e, 0x4c, 0xa0, 0x4f, 0x9f, 0x4c, 0xa0, 0xdf, 0x7f, 0x32, 0x81,
	0x7e, 0xf0, 0x64, 0xa2, 0xef, 0x87, 0x4f, 0x26, 0xd0, 0x2f, 0x7e, 0x7f, 0xa2, 0xef, 0xf1, 0xf7,
	0x27, 0xd0, 0xde, 0xf7, 0x27, 0xfa, 0x3e, 0xfd, 0xfe, 0x44, 0xdf, 0x5f, 0x7a, 0x7f, 0x4b, 0xab,
	0x7d, 0xb0, 0x95, 0xb9, 0xad, 0x55, 0x4c, 0x45, 0xd7, 0xe5, 0x4c, 0xdd, 0x38, 0x47, 0xff, 0xd9,
	0xd4, 0xf4, 0x9d, 0xb3, 0x35, 0x5d, 0xbb, 0xad, 0x96, 0x15, 0xfd, 0xac, 0xf5, 0xfa, 0x5c, 0x6d,
	0x63, 0x4b, 0x3b, 0xa7, 0xdc, 0x35, 0xd9, 0x8a, 0x3e, 0xc7, 0xff, 0x50, 0x75, 0x7a, 0xae, 0x4d,
	0x9d, 0x6e, 0x84, 0x28, 0x7a, 0x38, 0xf3, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xe9, 0x8e,
	0x7b, 0x99, 0xbe, 0x00, 0x00,
}

func (x URLScheme) String() string {
	s, ok := URLScheme_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ShapeBotDefenseRegion) String() string {
	s, ok := ShapeBotDefenseRegion_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x JavaScriptLocation) String() string {
	s, ok := JavaScriptLocation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *InlineRateLimiter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InlineRateLimiter)
	if !ok {
		that2, ok := that.(InlineRateLimiter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Threshold != that1.Threshold {
		return false
	}
	if this.Unit != that1.Unit {
		return false
	}
	if that1.CountByChoice == nil {
		if this.CountByChoice != nil {
			return false
		}
	} else if this.CountByChoice == nil {
		return false
	} else if !this.CountByChoice.Equal(that1.CountByChoice) {
		return false
	}
	return true
}
func (this *InlineRateLimiter_UseHttpLbUserId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InlineRateLimiter_UseHttpLbUserId)
	if !ok {
		that2, ok := that.(InlineRateLimiter_UseHttpLbUserId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseHttpLbUserId.Equal(that1.UseHttpLbUserId) {
		return false
	}
	return true
}
func (this *InlineRateLimiter_RefUserId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InlineRateLimiter_RefUserId)
	if !ok {
		that2, ok := that.(InlineRateLimiter_RefUserId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RefUserId.Equal(that1.RefUserId) {
		return false
	}
	return true
}
func (this *ServerUrlRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerUrlRule)
	if !ok {
		that2, ok := that.(ServerUrlRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DomainChoice == nil {
		if this.DomainChoice != nil {
			return false
		}
	} else if this.DomainChoice == nil {
		return false
	} else if !this.DomainChoice.Equal(that1.DomainChoice) {
		return false
	}
	if this.BasePath != that1.BasePath {
		return false
	}
	if that1.RateLimiterChoice == nil {
		if this.RateLimiterChoice != nil {
			return false
		}
	} else if this.RateLimiterChoice == nil {
		return false
	} else if !this.RateLimiterChoice.Equal(that1.RateLimiterChoice) {
		return false
	}
	return true
}
func (this *ServerUrlRule_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerUrlRule_AnyDomain)
	if !ok {
		that2, ok := that.(ServerUrlRule_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *ServerUrlRule_SpecificDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerUrlRule_SpecificDomain)
	if !ok {
		that2, ok := that.(ServerUrlRule_SpecificDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SpecificDomain != that1.SpecificDomain {
		return false
	}
	return true
}
func (this *ServerUrlRule_InlineRateLimiter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerUrlRule_InlineRateLimiter)
	if !ok {
		that2, ok := that.(ServerUrlRule_InlineRateLimiter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InlineRateLimiter.Equal(that1.InlineRateLimiter) {
		return false
	}
	return true
}
func (this *ServerUrlRule_RefRateLimiter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerUrlRule_RefRateLimiter)
	if !ok {
		that2, ok := that.(ServerUrlRule_RefRateLimiter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RefRateLimiter.Equal(that1.RefRateLimiter) {
		return false
	}
	return true
}
func (this *ApiEndpointRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiEndpointRule)
	if !ok {
		that2, ok := that.(ApiEndpointRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DomainChoice == nil {
		if this.DomainChoice != nil {
			return false
		}
	} else if this.DomainChoice == nil {
		return false
	} else if !this.DomainChoice.Equal(that1.DomainChoice) {
		return false
	}
	if this.BasePath != that1.BasePath {
		return false
	}
	if this.ApiEndpointPath != that1.ApiEndpointPath {
		return false
	}
	if !this.ApiEndpointMethod.Equal(that1.ApiEndpointMethod) {
		return false
	}
	if that1.RateLimiterChoice == nil {
		if this.RateLimiterChoice != nil {
			return false
		}
	} else if this.RateLimiterChoice == nil {
		return false
	} else if !this.RateLimiterChoice.Equal(that1.RateLimiterChoice) {
		return false
	}
	return true
}
func (this *ApiEndpointRule_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiEndpointRule_AnyDomain)
	if !ok {
		that2, ok := that.(ApiEndpointRule_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *ApiEndpointRule_SpecificDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiEndpointRule_SpecificDomain)
	if !ok {
		that2, ok := that.(ApiEndpointRule_SpecificDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SpecificDomain != that1.SpecificDomain {
		return false
	}
	return true
}
func (this *ApiEndpointRule_InlineRateLimiter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiEndpointRule_InlineRateLimiter)
	if !ok {
		that2, ok := that.(ApiEndpointRule_InlineRateLimiter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InlineRateLimiter.Equal(that1.InlineRateLimiter) {
		return false
	}
	return true
}
func (this *ApiEndpointRule_RefRateLimiter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiEndpointRule_RefRateLimiter)
	if !ok {
		that2, ok := that.(ApiEndpointRule_RefRateLimiter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RefRateLimiter.Equal(that1.RefRateLimiter) {
		return false
	}
	return true
}
func (this *APIRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIRateLimit)
	if !ok {
		that2, ok := that.(APIRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.IpAllowedListChoice == nil {
		if this.IpAllowedListChoice != nil {
			return false
		}
	} else if this.IpAllowedListChoice == nil {
		return false
	} else if !this.IpAllowedListChoice.Equal(that1.IpAllowedListChoice) {
		return false
	}
	if len(this.ServerUrlRules) != len(that1.ServerUrlRules) {
		return false
	}
	for i := range this.ServerUrlRules {
		if !this.ServerUrlRules[i].Equal(that1.ServerUrlRules[i]) {
			return false
		}
	}
	if len(this.ApiEndpointRules) != len(that1.ApiEndpointRules) {
		return false
	}
	for i := range this.ApiEndpointRules {
		if !this.ApiEndpointRules[i].Equal(that1.ApiEndpointRules[i]) {
			return false
		}
	}
	return true
}
func (this *APIRateLimit_NoIpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIRateLimit_NoIpAllowedList)
	if !ok {
		that2, ok := that.(APIRateLimit_NoIpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoIpAllowedList.Equal(that1.NoIpAllowedList) {
		return false
	}
	return true
}
func (this *APIRateLimit_IpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIRateLimit_IpAllowedList)
	if !ok {
		that2, ok := that.(APIRateLimit_IpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpAllowedList.Equal(that1.IpAllowedList) {
		return false
	}
	return true
}
func (this *APIRateLimit_CustomIpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIRateLimit_CustomIpAllowedList)
	if !ok {
		that2, ok := that.(APIRateLimit_CustomIpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomIpAllowedList.Equal(that1.CustomIpAllowedList) {
		return false
	}
	return true
}
func (this *DownstreamTlsValidationContext) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsValidationContext)
	if !ok {
		that2, ok := that.(DownstreamTlsValidationContext)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TrustedCaUrl != that1.TrustedCaUrl {
		return false
	}
	if that1.CrlChoice == nil {
		if this.CrlChoice != nil {
			return false
		}
	} else if this.CrlChoice == nil {
		return false
	} else if !this.CrlChoice.Equal(that1.CrlChoice) {
		return false
	}
	return true
}
func (this *DownstreamTlsValidationContext_NoCrl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsValidationContext_NoCrl)
	if !ok {
		that2, ok := that.(DownstreamTlsValidationContext_NoCrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoCrl.Equal(that1.NoCrl) {
		return false
	}
	return true
}
func (this *DownstreamTlsValidationContext_Crl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsValidationContext_Crl)
	if !ok {
		that2, ok := that.(DownstreamTlsValidationContext_Crl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Crl.Equal(that1.Crl) {
		return false
	}
	return true
}
func (this *DownstreamTlsParamsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsParamsType)
	if !ok {
		that2, ok := that.(DownstreamTlsParamsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsConfig.Equal(that1.TlsConfig) {
		return false
	}
	if len(this.TlsCertificates) != len(that1.TlsCertificates) {
		return false
	}
	for i := range this.TlsCertificates {
		if !this.TlsCertificates[i].Equal(that1.TlsCertificates[i]) {
			return false
		}
	}
	if that1.MtlsChoice == nil {
		if this.MtlsChoice != nil {
			return false
		}
	} else if this.MtlsChoice == nil {
		return false
	} else if !this.MtlsChoice.Equal(that1.MtlsChoice) {
		return false
	}
	return true
}
func (this *DownstreamTlsParamsType_NoMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsParamsType_NoMtls)
	if !ok {
		that2, ok := that.(DownstreamTlsParamsType_NoMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoMtls.Equal(that1.NoMtls) {
		return false
	}
	return true
}
func (this *DownstreamTlsParamsType_UseMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamTlsParamsType_UseMtls)
	if !ok {
		that2, ok := that.(DownstreamTlsParamsType_UseMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseMtls.Equal(that1.UseMtls) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps)
	if !ok {
		that2, ok := that.(ProxyTypeHttps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpRedirect != that1.HttpRedirect {
		return false
	}
	if this.AddHsts != that1.AddHsts {
		return false
	}
	if !this.TlsParameters.Equal(that1.TlsParameters) {
		return false
	}
	if that1.ServerHeaderChoice == nil {
		if this.ServerHeaderChoice != nil {
			return false
		}
	} else if this.ServerHeaderChoice == nil {
		return false
	} else if !this.ServerHeaderChoice.Equal(that1.ServerHeaderChoice) {
		return false
	}
	if that1.PathNormalizeChoice == nil {
		if this.PathNormalizeChoice != nil {
			return false
		}
	} else if this.PathNormalizeChoice == nil {
		return false
	} else if !this.PathNormalizeChoice.Equal(that1.PathNormalizeChoice) {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_DefaultHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_DefaultHeader)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_DefaultHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultHeader.Equal(that1.DefaultHeader) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_ServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_ServerName)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_ServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_AppendServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_AppendServerName)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_AppendServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppendServerName != that1.AppendServerName {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_PassThrough) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_PassThrough)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_PassThrough)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PassThrough.Equal(that1.PassThrough) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_EnablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_EnablePathNormalize)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_EnablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnablePathNormalize.Equal(that1.EnablePathNormalize) {
		return false
	}
	return true
}
func (this *ProxyTypeHttps_DisablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttps_DisablePathNormalize)
	if !ok {
		that2, ok := that.(ProxyTypeHttps_DisablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisablePathNormalize.Equal(that1.DisablePathNormalize) {
		return false
	}
	return true
}
func (this *ProxyTypeHttp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttp)
	if !ok {
		that2, ok := that.(ProxyTypeHttp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DnsVolterraManaged != that1.DnsVolterraManaged {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpRedirect != that1.HttpRedirect {
		return false
	}
	if this.AddHsts != that1.AddHsts {
		return false
	}
	if !this.TlsConfig.Equal(that1.TlsConfig) {
		return false
	}
	if that1.MtlsChoice == nil {
		if this.MtlsChoice != nil {
			return false
		}
	} else if this.MtlsChoice == nil {
		return false
	} else if !this.MtlsChoice.Equal(that1.MtlsChoice) {
		return false
	}
	if that1.ServerHeaderChoice == nil {
		if this.ServerHeaderChoice != nil {
			return false
		}
	} else if this.ServerHeaderChoice == nil {
		return false
	} else if !this.ServerHeaderChoice.Equal(that1.ServerHeaderChoice) {
		return false
	}
	if that1.PathNormalizeChoice == nil {
		if this.PathNormalizeChoice != nil {
			return false
		}
	} else if this.PathNormalizeChoice == nil {
		return false
	} else if !this.PathNormalizeChoice.Equal(that1.PathNormalizeChoice) {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_NoMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_NoMtls)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_NoMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoMtls.Equal(that1.NoMtls) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_UseMtls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_UseMtls)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_UseMtls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UseMtls.Equal(that1.UseMtls) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_DefaultHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_DefaultHeader)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_DefaultHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultHeader.Equal(that1.DefaultHeader) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_ServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_ServerName)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_ServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_AppendServerName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_AppendServerName)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_AppendServerName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppendServerName != that1.AppendServerName {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_PassThrough) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_PassThrough)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_PassThrough)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PassThrough.Equal(that1.PassThrough) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_EnablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_EnablePathNormalize)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_EnablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnablePathNormalize.Equal(that1.EnablePathNormalize) {
		return false
	}
	return true
}
func (this *ProxyTypeHttpsAutoCerts_DisablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProxyTypeHttpsAutoCerts_DisablePathNormalize)
	if !ok {
		that2, ok := that.(ProxyTypeHttpsAutoCerts_DisablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisablePathNormalize.Equal(that1.DisablePathNormalize) {
		return false
	}
	return true
}
func (this *HashPolicyListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HashPolicyListType)
	if !ok {
		that2, ok := that.(HashPolicyListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HashPolicy) != len(that1.HashPolicy) {
		return false
	}
	for i := range this.HashPolicy {
		if !this.HashPolicy[i].Equal(that1.HashPolicy[i]) {
			return false
		}
	}
	return true
}
func (this *MirrorPolicyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MirrorPolicyType)
	if !ok {
		that2, ok := that.(MirrorPolicyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OriginPool.Equal(that1.OriginPool) {
		return false
	}
	if !this.Percent.Equal(that1.Percent) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	if len(this.EndpointSubsets) != len(that1.EndpointSubsets) {
		return false
	}
	for i := range this.EndpointSubsets {
		if this.EndpointSubsets[i] != that1.EndpointSubsets[i] {
			return false
		}
	}
	if that1.RewriteChoice == nil {
		if this.RewriteChoice != nil {
			return false
		}
	} else if this.RewriteChoice == nil {
		return false
	} else if !this.RewriteChoice.Equal(that1.RewriteChoice) {
		return false
	}
	if len(this.RequestHeadersToAdd) != len(that1.RequestHeadersToAdd) {
		return false
	}
	for i := range this.RequestHeadersToAdd {
		if !this.RequestHeadersToAdd[i].Equal(that1.RequestHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if len(this.ResponseHeadersToAdd) != len(that1.ResponseHeadersToAdd) {
		return false
	}
	for i := range this.ResponseHeadersToAdd {
		if !this.ResponseHeadersToAdd[i].Equal(that1.ResponseHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.ResponseHeadersToRemove) != len(that1.ResponseHeadersToRemove) {
		return false
	}
	for i := range this.ResponseHeadersToRemove {
		if this.ResponseHeadersToRemove[i] != that1.ResponseHeadersToRemove[i] {
			return false
		}
	}
	if this.DisableLocationAdd != that1.DisableLocationAdd {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if that1.SpdyChoice == nil {
		if this.SpdyChoice != nil {
			return false
		}
	} else if this.SpdyChoice == nil {
		return false
	} else if !this.SpdyChoice.Equal(that1.SpdyChoice) {
		return false
	}
	if that1.WebsocketChoice == nil {
		if this.WebsocketChoice != nil {
			return false
		}
	} else if this.WebsocketChoice == nil {
		return false
	} else if !this.WebsocketChoice.Equal(that1.WebsocketChoice) {
		return false
	}
	if that1.RetryPolicyChoice == nil {
		if this.RetryPolicyChoice != nil {
			return false
		}
	} else if this.RetryPolicyChoice == nil {
		return false
	} else if !this.RetryPolicyChoice.Equal(that1.RetryPolicyChoice) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if that1.BufferChoice == nil {
		if this.BufferChoice != nil {
			return false
		}
	} else if this.BufferChoice == nil {
		return false
	} else if !this.BufferChoice.Equal(that1.BufferChoice) {
		return false
	}
	if that1.MirroringChoice == nil {
		if this.MirroringChoice != nil {
			return false
		}
	} else if this.MirroringChoice == nil {
		return false
	} else if !this.MirroringChoice.Equal(that1.MirroringChoice) {
		return false
	}
	if that1.ClusterRetractChoice == nil {
		if this.ClusterRetractChoice != nil {
			return false
		}
	} else if this.ClusterRetractChoice == nil {
		return false
	} else if !this.ClusterRetractChoice.Equal(that1.ClusterRetractChoice) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_CommonHashPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_CommonHashPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_CommonHashPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CommonHashPolicy.Equal(that1.CommonHashPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_SpecificHashPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_SpecificHashPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_SpecificHashPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SpecificHashPolicy.Equal(that1.SpecificHashPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DisablePrefixRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DisablePrefixRewrite)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DisablePrefixRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisablePrefixRewrite.Equal(that1.DisablePrefixRewrite) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_PrefixRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_PrefixRewrite)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_PrefixRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PrefixRewrite != that1.PrefixRewrite {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DisableWaf)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_Waf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_Waf)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_Waf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_WafRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_WafRule)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_WafRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafRule.Equal(that1.WafRule) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_AppFirewall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_AppFirewall)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_AppFirewall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewall.Equal(that1.AppFirewall) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DisableSpdy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DisableSpdy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DisableSpdy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableSpdy.Equal(that1.DisableSpdy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_EnableSpdy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_EnableSpdy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_EnableSpdy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableSpdy.Equal(that1.EnableSpdy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DisableWebSocketConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DisableWebSocketConfig)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DisableWebSocketConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWebSocketConfig.Equal(that1.DisableWebSocketConfig) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_WebSocketConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_WebSocketConfig)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_WebSocketConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WebSocketConfig.Equal(that1.WebSocketConfig) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DefaultRetryPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DefaultRetryPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DefaultRetryPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultRetryPolicy.Equal(that1.DefaultRetryPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_RetryPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_RetryPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_RetryPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RetryPolicy.Equal(that1.RetryPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_CommonBuffering) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_CommonBuffering)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_CommonBuffering)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CommonBuffering.Equal(that1.CommonBuffering) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_BufferPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_BufferPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_BufferPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BufferPolicy.Equal(that1.BufferPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DisableMirroring) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DisableMirroring)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DisableMirroring)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableMirroring.Equal(that1.DisableMirroring) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_MirrorPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_MirrorPolicy)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_MirrorPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MirrorPolicy.Equal(that1.MirrorPolicy) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_RetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_RetractCluster)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_RetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RetractCluster.Equal(that1.RetractCluster) {
		return false
	}
	return true
}
func (this *RouteSimpleAdvancedOptions_DoNotRetractCluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteSimpleAdvancedOptions_DoNotRetractCluster)
	if !ok {
		that2, ok := that.(RouteSimpleAdvancedOptions_DoNotRetractCluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotRetractCluster.Equal(that1.DoNotRetractCluster) {
		return false
	}
	return true
}
func (this *RouteTypeSimpleWithDefaultOriginPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimpleWithDefaultOriginPool)
	if !ok {
		that2, ok := that.(RouteTypeSimpleWithDefaultOriginPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HttpMethod != that1.HttpMethod {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if that1.HostRewriteParams == nil {
		if this.HostRewriteParams != nil {
			return false
		}
	} else if this.HostRewriteParams == nil {
		return false
	} else if !this.HostRewriteParams.Equal(that1.HostRewriteParams) {
		return false
	}
	return true
}
func (this *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutoHostRewrite.Equal(that1.AutoHostRewrite) {
		return false
	}
	return true
}
func (this *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimpleWithDefaultOriginPool_HostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimpleWithDefaultOriginPool_HostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostRewrite != that1.HostRewrite {
		return false
	}
	return true
}
func (this *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHostRewrite.Equal(that1.DisableHostRewrite) {
		return false
	}
	return true
}
func (this *RouteTypeSimple) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimple)
	if !ok {
		that2, ok := that.(RouteTypeSimple)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if this.HttpMethod != that1.HttpMethod {
		return false
	}
	if len(this.OriginPools) != len(that1.OriginPools) {
		return false
	}
	for i := range this.OriginPools {
		if !this.OriginPools[i].Equal(that1.OriginPools[i]) {
			return false
		}
	}
	if that1.HostRewriteParams == nil {
		if this.HostRewriteParams != nil {
			return false
		}
	} else if this.HostRewriteParams == nil {
		return false
	} else if !this.HostRewriteParams.Equal(that1.HostRewriteParams) {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	if !this.AdvancedOptions.Equal(that1.AdvancedOptions) {
		return false
	}
	return true
}
func (this *RouteTypeSimple_AutoHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimple_AutoHostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimple_AutoHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutoHostRewrite.Equal(that1.AutoHostRewrite) {
		return false
	}
	return true
}
func (this *RouteTypeSimple_HostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimple_HostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimple_HostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostRewrite != that1.HostRewrite {
		return false
	}
	return true
}
func (this *RouteTypeSimple_DisableHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeSimple_DisableHostRewrite)
	if !ok {
		that2, ok := that.(RouteTypeSimple_DisableHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHostRewrite.Equal(that1.DisableHostRewrite) {
		return false
	}
	return true
}
func (this *RouteTypeRedirect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeRedirect)
	if !ok {
		that2, ok := that.(RouteTypeRedirect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if this.HttpMethod != that1.HttpMethod {
		return false
	}
	if !this.RouteRedirect.Equal(that1.RouteRedirect) {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	return true
}
func (this *RouteTypeDirectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeDirectResponse)
	if !ok {
		that2, ok := that.(RouteTypeDirectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if this.HttpMethod != that1.HttpMethod {
		return false
	}
	if !this.RouteDirectResponse.Equal(that1.RouteDirectResponse) {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	return true
}
func (this *RouteTypeCustomRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteTypeCustomRoute)
	if !ok {
		that2, ok := that.(RouteTypeCustomRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RouteRef.Equal(that1.RouteRef) {
		return false
	}
	return true
}
func (this *RouteType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType)
	if !ok {
		that2, ok := that.(RouteType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Choice == nil {
		if this.Choice != nil {
			return false
		}
	} else if this.Choice == nil {
		return false
	} else if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *RouteType_SimpleRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType_SimpleRoute)
	if !ok {
		that2, ok := that.(RouteType_SimpleRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SimpleRoute.Equal(that1.SimpleRoute) {
		return false
	}
	return true
}
func (this *RouteType_RedirectRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType_RedirectRoute)
	if !ok {
		that2, ok := that.(RouteType_RedirectRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RedirectRoute.Equal(that1.RedirectRoute) {
		return false
	}
	return true
}
func (this *RouteType_DirectResponseRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType_DirectResponseRoute)
	if !ok {
		that2, ok := that.(RouteType_DirectResponseRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectResponseRoute.Equal(that1.DirectResponseRoute) {
		return false
	}
	return true
}
func (this *RouteType_CustomRouteObject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteType_CustomRouteObject)
	if !ok {
		that2, ok := that.(RouteType_CustomRouteObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomRouteObject.Equal(that1.CustomRouteObject) {
		return false
	}
	return true
}
func (this *AdvancedOptionsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvancedOptionsType)
	if !ok {
		that2, ok := that.(AdvancedOptionsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RequestHeadersToAdd) != len(that1.RequestHeadersToAdd) {
		return false
	}
	for i := range this.RequestHeadersToAdd {
		if !this.RequestHeadersToAdd[i].Equal(that1.RequestHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.RequestHeadersToRemove) != len(that1.RequestHeadersToRemove) {
		return false
	}
	for i := range this.RequestHeadersToRemove {
		if this.RequestHeadersToRemove[i] != that1.RequestHeadersToRemove[i] {
			return false
		}
	}
	if len(this.ResponseHeadersToAdd) != len(that1.ResponseHeadersToAdd) {
		return false
	}
	for i := range this.ResponseHeadersToAdd {
		if !this.ResponseHeadersToAdd[i].Equal(that1.ResponseHeadersToAdd[i]) {
			return false
		}
	}
	if len(this.ResponseHeadersToRemove) != len(that1.ResponseHeadersToRemove) {
		return false
	}
	for i := range this.ResponseHeadersToRemove {
		if this.ResponseHeadersToRemove[i] != that1.ResponseHeadersToRemove[i] {
			return false
		}
	}
	if this.MaxRequestHeaderSize != that1.MaxRequestHeaderSize {
		return false
	}
	if !this.BufferPolicy.Equal(that1.BufferPolicy) {
		return false
	}
	if !this.CompressionParams.Equal(that1.CompressionParams) {
		return false
	}
	if len(this.CustomErrors) != len(that1.CustomErrors) {
		return false
	}
	for i := range this.CustomErrors {
		if this.CustomErrors[i] != that1.CustomErrors[i] {
			return false
		}
	}
	if !this.JavascriptInfo.Equal(that1.JavascriptInfo) {
		return false
	}
	if len(this.Jwt) != len(that1.Jwt) {
		return false
	}
	for i := range this.Jwt {
		if !this.Jwt[i].Equal(that1.Jwt[i]) {
			return false
		}
	}
	if this.IdleTimeout != that1.IdleTimeout {
		return false
	}
	if this.DisableDefaultErrorPages != that1.DisableDefaultErrorPages {
		return false
	}
	if that1.PathNormalizeChoice == nil {
		if this.PathNormalizeChoice != nil {
			return false
		}
	} else if this.PathNormalizeChoice == nil {
		return false
	} else if !this.PathNormalizeChoice.Equal(that1.PathNormalizeChoice) {
		return false
	}
	if that1.StrictSniHostHeaderCheckChoice == nil {
		if this.StrictSniHostHeaderCheckChoice != nil {
			return false
		}
	} else if this.StrictSniHostHeaderCheckChoice == nil {
		return false
	} else if !this.StrictSniHostHeaderCheckChoice.Equal(that1.StrictSniHostHeaderCheckChoice) {
		return false
	}
	return true
}
func (this *AdvancedOptionsType_EnablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvancedOptionsType_EnablePathNormalize)
	if !ok {
		that2, ok := that.(AdvancedOptionsType_EnablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnablePathNormalize.Equal(that1.EnablePathNormalize) {
		return false
	}
	return true
}
func (this *AdvancedOptionsType_DisablePathNormalize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvancedOptionsType_DisablePathNormalize)
	if !ok {
		that2, ok := that.(AdvancedOptionsType_DisablePathNormalize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisablePathNormalize.Equal(that1.DisablePathNormalize) {
		return false
	}
	return true
}
func (this *AdvancedOptionsType_EnableStrictSniHostHeaderCheck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvancedOptionsType_EnableStrictSniHostHeaderCheck)
	if !ok {
		that2, ok := that.(AdvancedOptionsType_EnableStrictSniHostHeaderCheck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableStrictSniHostHeaderCheck.Equal(that1.EnableStrictSniHostHeaderCheck) {
		return false
	}
	return true
}
func (this *AdvancedOptionsType_AdditionalDomains) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvancedOptionsType_AdditionalDomains)
	if !ok {
		that2, ok := that.(AdvancedOptionsType_AdditionalDomains)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdditionalDomains.Equal(that1.AdditionalDomains) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.JsChallengeParametersChoice == nil {
		if this.JsChallengeParametersChoice != nil {
			return false
		}
	} else if this.JsChallengeParametersChoice == nil {
		return false
	} else if !this.JsChallengeParametersChoice.Equal(that1.JsChallengeParametersChoice) {
		return false
	}
	if that1.CaptchaChallengeParametersChoice == nil {
		if this.CaptchaChallengeParametersChoice != nil {
			return false
		}
	} else if this.CaptchaChallengeParametersChoice == nil {
		return false
	} else if !this.CaptchaChallengeParametersChoice.Equal(that1.CaptchaChallengeParametersChoice) {
		return false
	}
	if that1.TemporaryBlockingParametersChoice == nil {
		if this.TemporaryBlockingParametersChoice != nil {
			return false
		}
	} else if this.TemporaryBlockingParametersChoice == nil {
		return false
	} else if !this.TemporaryBlockingParametersChoice.Equal(that1.TemporaryBlockingParametersChoice) {
		return false
	}
	if that1.MaliciousUserMitigationChoice == nil {
		if this.MaliciousUserMitigationChoice != nil {
			return false
		}
	} else if this.MaliciousUserMitigationChoice == nil {
		return false
	} else if !this.MaliciousUserMitigationChoice.Equal(that1.MaliciousUserMitigationChoice) {
		return false
	}
	if that1.ChallengeChoice == nil {
		if this.ChallengeChoice != nil {
			return false
		}
	} else if this.ChallengeChoice == nil {
		return false
	} else if !this.ChallengeChoice.Equal(that1.ChallengeChoice) {
		return false
	}
	if !this.RuleList.Equal(that1.RuleList) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_DefaultJsChallengeParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_DefaultJsChallengeParameters)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_DefaultJsChallengeParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultJsChallengeParameters.Equal(that1.DefaultJsChallengeParameters) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_JsChallengeParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_JsChallengeParameters)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_JsChallengeParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallengeParameters.Equal(that1.JsChallengeParameters) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_DefaultCaptchaChallengeParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_DefaultCaptchaChallengeParameters)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_DefaultCaptchaChallengeParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultCaptchaChallengeParameters.Equal(that1.DefaultCaptchaChallengeParameters) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_CaptchaChallengeParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_CaptchaChallengeParameters)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_CaptchaChallengeParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallengeParameters.Equal(that1.CaptchaChallengeParameters) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_DefaultTemporaryBlockingParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_DefaultTemporaryBlockingParameters)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_DefaultTemporaryBlockingParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultTemporaryBlockingParameters.Equal(that1.DefaultTemporaryBlockingParameters) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_TemporaryUserBlocking) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_TemporaryUserBlocking)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_TemporaryUserBlocking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TemporaryUserBlocking.Equal(that1.TemporaryUserBlocking) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_DefaultMitigationSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_DefaultMitigationSettings)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_DefaultMitigationSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DefaultMitigationSettings.Equal(that1.DefaultMitigationSettings) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_MaliciousUserMitigation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_MaliciousUserMitigation)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_MaliciousUserMitigation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_NoChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_AlwaysEnableJsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_AlwaysEnableJsChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_AlwaysEnableJsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AlwaysEnableJsChallenge.Equal(that1.AlwaysEnableJsChallenge) {
		return false
	}
	return true
}
func (this *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PolicyBasedChallenge_AlwaysEnableCaptchaChallenge)
	if !ok {
		that2, ok := that.(PolicyBasedChallenge_AlwaysEnableCaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AlwaysEnableCaptchaChallenge.Equal(that1.AlwaysEnableCaptchaChallenge) {
		return false
	}
	return true
}
func (this *ChallengeRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChallengeRule)
	if !ok {
		that2, ok := that.(ChallengeRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *ChallengeRuleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChallengeRuleList)
	if !ok {
		that2, ok := that.(ChallengeRuleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	return true
}
func (this *HttpHeaderMatcherList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HttpHeaderMatcherList)
	if !ok {
		that2, ok := that.(HttpHeaderMatcherList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	return true
}
func (this *SimpleClientSrcRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleClientSrcRule)
	if !ok {
		that2, ok := that.(SimpleClientSrcRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ClientSourceChoice == nil {
		if this.ClientSourceChoice != nil {
			return false
		}
	} else if this.ClientSourceChoice == nil {
		return false
	} else if !this.ClientSourceChoice.Equal(that1.ClientSourceChoice) {
		return false
	}
	if !this.ExpirationTimestamp.Equal(that1.ExpirationTimestamp) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.ActionChoice == nil {
		if this.ActionChoice != nil {
			return false
		}
	} else if this.ActionChoice == nil {
		return false
	} else if !this.ActionChoice.Equal(that1.ActionChoice) {
		return false
	}
	return true
}
func (this *SimpleClientSrcRule_IpPrefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleClientSrcRule_IpPrefix)
	if !ok {
		that2, ok := that.(SimpleClientSrcRule_IpPrefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IpPrefix != that1.IpPrefix {
		return false
	}
	return true
}
func (this *SimpleClientSrcRule_AsNumber) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleClientSrcRule_AsNumber)
	if !ok {
		that2, ok := that.(SimpleClientSrcRule_AsNumber)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AsNumber != that1.AsNumber {
		return false
	}
	return true
}
func (this *SimpleClientSrcRule_HttpHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleClientSrcRule_HttpHeader)
	if !ok {
		that2, ok := that.(SimpleClientSrcRule_HttpHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpHeader.Equal(that1.HttpHeader) {
		return false
	}
	return true
}
func (this *SimpleClientSrcRule_SkipProcessing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleClientSrcRule_SkipProcessing)
	if !ok {
		that2, ok := that.(SimpleClientSrcRule_SkipProcessing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SkipProcessing.Equal(that1.SkipProcessing) {
		return false
	}
	return true
}
func (this *SimpleClientSrcRule_WafSkipProcessing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleClientSrcRule_WafSkipProcessing)
	if !ok {
		that2, ok := that.(SimpleClientSrcRule_WafSkipProcessing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafSkipProcessing.Equal(that1.WafSkipProcessing) {
		return false
	}
	return true
}
func (this *SimpleClientSrcRule_BotSkipProcessing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleClientSrcRule_BotSkipProcessing)
	if !ok {
		that2, ok := that.(SimpleClientSrcRule_BotSkipProcessing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotSkipProcessing.Equal(that1.BotSkipProcessing) {
		return false
	}
	return true
}
func (this *DDoSClientSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DDoSClientSource)
	if !ok {
		that2, ok := that.(DDoSClientSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AsnList.Equal(that1.AsnList) {
		return false
	}
	if len(this.CountryList) != len(that1.CountryList) {
		return false
	}
	for i := range this.CountryList {
		if this.CountryList[i] != that1.CountryList[i] {
			return false
		}
	}
	if !this.TlsFingerprintMatcher.Equal(that1.TlsFingerprintMatcher) {
		return false
	}
	return true
}
func (this *DDoSMitigationRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DDoSMitigationRule)
	if !ok {
		that2, ok := that.(DDoSMitigationRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.MitigationAction == nil {
		if this.MitigationAction != nil {
			return false
		}
	} else if this.MitigationAction == nil {
		return false
	} else if !this.MitigationAction.Equal(that1.MitigationAction) {
		return false
	}
	if that1.MitigationChoice == nil {
		if this.MitigationChoice != nil {
			return false
		}
	} else if this.MitigationChoice == nil {
		return false
	} else if !this.MitigationChoice.Equal(that1.MitigationChoice) {
		return false
	}
	if !this.ExpirationTimestamp.Equal(that1.ExpirationTimestamp) {
		return false
	}
	return true
}
func (this *DDoSMitigationRule_Block) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DDoSMitigationRule_Block)
	if !ok {
		that2, ok := that.(DDoSMitigationRule_Block)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Block.Equal(that1.Block) {
		return false
	}
	return true
}
func (this *DDoSMitigationRule_DdosClientSource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DDoSMitigationRule_DdosClientSource)
	if !ok {
		that2, ok := that.(DDoSMitigationRule_DdosClientSource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DdosClientSource.Equal(that1.DdosClientSource) {
		return false
	}
	return true
}
func (this *DDoSMitigationRule_IpPrefixList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DDoSMitigationRule_IpPrefixList)
	if !ok {
		that2, ok := that.(DDoSMitigationRule_IpPrefixList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpPrefixList.Equal(that1.IpPrefixList) {
		return false
	}
	return true
}
func (this *CustomIpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomIpAllowedList)
	if !ok {
		that2, ok := that.(CustomIpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RateLimiterAllowedPrefixes) != len(that1.RateLimiterAllowedPrefixes) {
		return false
	}
	for i := range this.RateLimiterAllowedPrefixes {
		if !this.RateLimiterAllowedPrefixes[i].Equal(that1.RateLimiterAllowedPrefixes[i]) {
			return false
		}
	}
	return true
}
func (this *RateLimitConfigType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType)
	if !ok {
		that2, ok := that.(RateLimitConfigType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimiter.Equal(that1.RateLimiter) {
		return false
	}
	if that1.IpAllowedListChoice == nil {
		if this.IpAllowedListChoice != nil {
			return false
		}
	} else if this.IpAllowedListChoice == nil {
		return false
	} else if !this.IpAllowedListChoice.Equal(that1.IpAllowedListChoice) {
		return false
	}
	if that1.PolicyChoice == nil {
		if this.PolicyChoice != nil {
			return false
		}
	} else if this.PolicyChoice == nil {
		return false
	} else if !this.PolicyChoice.Equal(that1.PolicyChoice) {
		return false
	}
	return true
}
func (this *RateLimitConfigType_NoIpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType_NoIpAllowedList)
	if !ok {
		that2, ok := that.(RateLimitConfigType_NoIpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoIpAllowedList.Equal(that1.NoIpAllowedList) {
		return false
	}
	return true
}
func (this *RateLimitConfigType_IpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType_IpAllowedList)
	if !ok {
		that2, ok := that.(RateLimitConfigType_IpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IpAllowedList.Equal(that1.IpAllowedList) {
		return false
	}
	return true
}
func (this *RateLimitConfigType_CustomIpAllowedList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType_CustomIpAllowedList)
	if !ok {
		that2, ok := that.(RateLimitConfigType_CustomIpAllowedList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomIpAllowedList.Equal(that1.CustomIpAllowedList) {
		return false
	}
	return true
}
func (this *RateLimitConfigType_NoPolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType_NoPolicies)
	if !ok {
		that2, ok := that.(RateLimitConfigType_NoPolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoPolicies.Equal(that1.NoPolicies) {
		return false
	}
	return true
}
func (this *RateLimitConfigType_Policies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RateLimitConfigType_Policies)
	if !ok {
		that2, ok := that.(RateLimitConfigType_Policies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Policies.Equal(that1.Policies) {
		return false
	}
	return true
}
func (this *ServicePolicyList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicePolicyList)
	if !ok {
		that2, ok := that.(ServicePolicyList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Policies) != len(that1.Policies) {
		return false
	}
	for i := range this.Policies {
		if !this.Policies[i].Equal(that1.Policies[i]) {
			return false
		}
	}
	return true
}
func (this *ApiDefinitionList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiDefinitionList)
	if !ok {
		that2, ok := that.(ApiDefinitionList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ApiDefinitions) != len(that1.ApiDefinitions) {
		return false
	}
	for i := range this.ApiDefinitions {
		if !this.ApiDefinitions[i].Equal(that1.ApiDefinitions[i]) {
			return false
		}
	}
	return true
}
func (this *ApiDiscoverySetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiDiscoverySetting)
	if !ok {
		that2, ok := that.(ApiDiscoverySetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.LearnFromRedirectTraffic == nil {
		if this.LearnFromRedirectTraffic != nil {
			return false
		}
	} else if this.LearnFromRedirectTraffic == nil {
		return false
	} else if !this.LearnFromRedirectTraffic.Equal(that1.LearnFromRedirectTraffic) {
		return false
	}
	return true
}
func (this *ApiDiscoverySetting_DisableLearnFromRedirectTraffic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiDiscoverySetting_DisableLearnFromRedirectTraffic)
	if !ok {
		that2, ok := that.(ApiDiscoverySetting_DisableLearnFromRedirectTraffic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableLearnFromRedirectTraffic.Equal(that1.DisableLearnFromRedirectTraffic) {
		return false
	}
	return true
}
func (this *ApiDiscoverySetting_EnableLearnFromRedirectTraffic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApiDiscoverySetting_EnableLearnFromRedirectTraffic)
	if !ok {
		that2, ok := that.(ApiDiscoverySetting_EnableLearnFromRedirectTraffic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableLearnFromRedirectTraffic.Equal(that1.EnableLearnFromRedirectTraffic) {
		return false
	}
	return true
}
func (this *SingleLoadBalancerAppSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleLoadBalancerAppSetting)
	if !ok {
		that2, ok := that.(SingleLoadBalancerAppSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ApiDiscoveryChoice == nil {
		if this.ApiDiscoveryChoice != nil {
			return false
		}
	} else if this.ApiDiscoveryChoice == nil {
		return false
	} else if !this.ApiDiscoveryChoice.Equal(that1.ApiDiscoveryChoice) {
		return false
	}
	if that1.DdosDetectionChoice == nil {
		if this.DdosDetectionChoice != nil {
			return false
		}
	} else if this.DdosDetectionChoice == nil {
		return false
	} else if !this.DdosDetectionChoice.Equal(that1.DdosDetectionChoice) {
		return false
	}
	if that1.MaliciousUserDetectionChoice == nil {
		if this.MaliciousUserDetectionChoice != nil {
			return false
		}
	} else if this.MaliciousUserDetectionChoice == nil {
		return false
	} else if !this.MaliciousUserDetectionChoice.Equal(that1.MaliciousUserDetectionChoice) {
		return false
	}
	return true
}
func (this *SingleLoadBalancerAppSetting_EnableDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleLoadBalancerAppSetting_EnableDiscovery)
	if !ok {
		that2, ok := that.(SingleLoadBalancerAppSetting_EnableDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableDiscovery.Equal(that1.EnableDiscovery) {
		return false
	}
	return true
}
func (this *SingleLoadBalancerAppSetting_DisableDiscovery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleLoadBalancerAppSetting_DisableDiscovery)
	if !ok {
		that2, ok := that.(SingleLoadBalancerAppSetting_DisableDiscovery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableDiscovery.Equal(that1.DisableDiscovery) {
		return false
	}
	return true
}
func (this *SingleLoadBalancerAppSetting_EnableDdosDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleLoadBalancerAppSetting_EnableDdosDetection)
	if !ok {
		that2, ok := that.(SingleLoadBalancerAppSetting_EnableDdosDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableDdosDetection.Equal(that1.EnableDdosDetection) {
		return false
	}
	return true
}
func (this *SingleLoadBalancerAppSetting_DisableDdosDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleLoadBalancerAppSetting_DisableDdosDetection)
	if !ok {
		that2, ok := that.(SingleLoadBalancerAppSetting_DisableDdosDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableDdosDetection.Equal(that1.DisableDdosDetection) {
		return false
	}
	return true
}
func (this *SingleLoadBalancerAppSetting_EnableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleLoadBalancerAppSetting_EnableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(SingleLoadBalancerAppSetting_EnableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableMaliciousUserDetection.Equal(that1.EnableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *SingleLoadBalancerAppSetting_DisableMaliciousUserDetection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SingleLoadBalancerAppSetting_DisableMaliciousUserDetection)
	if !ok {
		that2, ok := that.(SingleLoadBalancerAppSetting_DisableMaliciousUserDetection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableMaliciousUserDetection.Equal(that1.DisableMaliciousUserDetection) {
		return false
	}
	return true
}
func (this *ShapeBotDefenseType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotDefenseType)
	if !ok {
		that2, ok := that.(ShapeBotDefenseType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegionalEndpoint != that1.RegionalEndpoint {
		return false
	}
	if !this.Policy.Equal(that1.Policy) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	return true
}
func (this *ShapeBotDefensePolicyType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotDefensePolicyType)
	if !ok {
		that2, ok := that.(ShapeBotDefensePolicyType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ProtectedAppEndpoints) != len(that1.ProtectedAppEndpoints) {
		return false
	}
	for i := range this.ProtectedAppEndpoints {
		if !this.ProtectedAppEndpoints[i].Equal(that1.ProtectedAppEndpoints[i]) {
			return false
		}
	}
	if that1.JavaScriptChoice == nil {
		if this.JavaScriptChoice != nil {
			return false
		}
	} else if this.JavaScriptChoice == nil {
		return false
	} else if !this.JavaScriptChoice.Equal(that1.JavaScriptChoice) {
		return false
	}
	if this.JsDownloadPath != that1.JsDownloadPath {
		return false
	}
	return true
}
func (this *ShapeBotDefensePolicyType_DisableJsInsert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotDefensePolicyType_DisableJsInsert)
	if !ok {
		that2, ok := that.(ShapeBotDefensePolicyType_DisableJsInsert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableJsInsert.Equal(that1.DisableJsInsert) {
		return false
	}
	return true
}
func (this *ShapeBotDefensePolicyType_JsInsertAllPages) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotDefensePolicyType_JsInsertAllPages)
	if !ok {
		that2, ok := that.(ShapeBotDefensePolicyType_JsInsertAllPages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsInsertAllPages.Equal(that1.JsInsertAllPages) {
		return false
	}
	return true
}
func (this *ShapeBotDefensePolicyType_JsInsertAllPagesExcept) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotDefensePolicyType_JsInsertAllPagesExcept)
	if !ok {
		that2, ok := that.(ShapeBotDefensePolicyType_JsInsertAllPagesExcept)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsInsertAllPagesExcept.Equal(that1.JsInsertAllPagesExcept) {
		return false
	}
	return true
}
func (this *ShapeBotDefensePolicyType_JsInsertionRules) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeBotDefensePolicyType_JsInsertionRules)
	if !ok {
		that2, ok := that.(ShapeBotDefensePolicyType_JsInsertionRules)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsInsertionRules.Equal(that1.JsInsertionRules) {
		return false
	}
	return true
}
func (this *AppEndpointType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppEndpointType)
	if !ok {
		that2, ok := that.(AppEndpointType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if len(this.HttpMethods) != len(that1.HttpMethods) {
		return false
	}
	for i := range this.HttpMethods {
		if this.HttpMethods[i] != that1.HttpMethods[i] {
			return false
		}
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if that1.DomainMatcherChoice == nil {
		if this.DomainMatcherChoice != nil {
			return false
		}
	} else if this.DomainMatcherChoice == nil {
		return false
	} else if !this.DomainMatcherChoice.Equal(that1.DomainMatcherChoice) {
		return false
	}
	if that1.AppTrafficTypeChoice == nil {
		if this.AppTrafficTypeChoice != nil {
			return false
		}
	} else if this.AppTrafficTypeChoice == nil {
		return false
	} else if !this.AppTrafficTypeChoice.Equal(that1.AppTrafficTypeChoice) {
		return false
	}
	if !this.Mitigation.Equal(that1.Mitigation) {
		return false
	}
	return true
}
func (this *AppEndpointType_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppEndpointType_AnyDomain)
	if !ok {
		that2, ok := that.(AppEndpointType_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *AppEndpointType_Domain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppEndpointType_Domain)
	if !ok {
		that2, ok := that.(AppEndpointType_Domain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	return true
}
func (this *AppEndpointType_Web) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppEndpointType_Web)
	if !ok {
		that2, ok := that.(AppEndpointType_Web)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Web.Equal(that1.Web) {
		return false
	}
	return true
}
func (this *AppEndpointType_Mobile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppEndpointType_Mobile)
	if !ok {
		that2, ok := that.(AppEndpointType_Mobile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Mobile.Equal(that1.Mobile) {
		return false
	}
	return true
}
func (this *AppEndpointType_WebMobile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppEndpointType_WebMobile)
	if !ok {
		that2, ok := that.(AppEndpointType_WebMobile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WebMobile.Equal(that1.WebMobile) {
		return false
	}
	return true
}
func (this *WebMobileTrafficType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebMobileTrafficType)
	if !ok {
		that2, ok := that.(WebMobileTrafficType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	return true
}
func (this *ShapeJavaScriptInsertType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeJavaScriptInsertType)
	if !ok {
		that2, ok := that.(ShapeJavaScriptInsertType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rules) != len(that1.Rules) {
		return false
	}
	for i := range this.Rules {
		if !this.Rules[i].Equal(that1.Rules[i]) {
			return false
		}
	}
	if len(this.ExcludeList) != len(that1.ExcludeList) {
		return false
	}
	for i := range this.ExcludeList {
		if !this.ExcludeList[i].Equal(that1.ExcludeList[i]) {
			return false
		}
	}
	return true
}
func (this *ShapeJavaScriptInsertAllWithExceptionsType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeJavaScriptInsertAllWithExceptionsType)
	if !ok {
		that2, ok := that.(ShapeJavaScriptInsertAllWithExceptionsType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.JavascriptLocation != that1.JavascriptLocation {
		return false
	}
	if len(this.ExcludeList) != len(that1.ExcludeList) {
		return false
	}
	for i := range this.ExcludeList {
		if !this.ExcludeList[i].Equal(that1.ExcludeList[i]) {
			return false
		}
	}
	return true
}
func (this *ShapeJavaScriptInsertAllType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeJavaScriptInsertAllType)
	if !ok {
		that2, ok := that.(ShapeJavaScriptInsertAllType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.JavascriptLocation != that1.JavascriptLocation {
		return false
	}
	return true
}
func (this *ShapeJavaScriptInsertionRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeJavaScriptInsertionRule)
	if !ok {
		that2, ok := that.(ShapeJavaScriptInsertionRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.DomainMatcherChoice == nil {
		if this.DomainMatcherChoice != nil {
			return false
		}
	} else if this.DomainMatcherChoice == nil {
		return false
	} else if !this.DomainMatcherChoice.Equal(that1.DomainMatcherChoice) {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	if this.JavascriptLocation != that1.JavascriptLocation {
		return false
	}
	return true
}
func (this *ShapeJavaScriptInsertionRule_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeJavaScriptInsertionRule_AnyDomain)
	if !ok {
		that2, ok := that.(ShapeJavaScriptInsertionRule_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *ShapeJavaScriptInsertionRule_Domain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeJavaScriptInsertionRule_Domain)
	if !ok {
		that2, ok := that.(ShapeJavaScriptInsertionRule_Domain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	return true
}
func (this *ShapeJavaScriptExclusionRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeJavaScriptExclusionRule)
	if !ok {
		that2, ok := that.(ShapeJavaScriptExclusionRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.DomainMatcherChoice == nil {
		if this.DomainMatcherChoice != nil {
			return false
		}
	} else if this.DomainMatcherChoice == nil {
		return false
	} else if !this.DomainMatcherChoice.Equal(that1.DomainMatcherChoice) {
		return false
	}
	if !this.Path.Equal(that1.Path) {
		return false
	}
	return true
}
func (this *ShapeJavaScriptExclusionRule_AnyDomain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeJavaScriptExclusionRule_AnyDomain)
	if !ok {
		that2, ok := that.(ShapeJavaScriptExclusionRule_AnyDomain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AnyDomain.Equal(that1.AnyDomain) {
		return false
	}
	return true
}
func (this *ShapeJavaScriptExclusionRule_Domain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShapeJavaScriptExclusionRule_Domain)
	if !ok {
		that2, ok := that.(ShapeJavaScriptExclusionRule_Domain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	return true
}
func (this *IPThreatCategoryListType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IPThreatCategoryListType)
	if !ok {
		that2, ok := that.(IPThreatCategoryListType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.IpThreatCategories) != len(that1.IpThreatCategories) {
		return false
	}
	for i := range this.IpThreatCategories {
		if this.IpThreatCategories[i] != that1.IpThreatCategories[i] {
			return false
		}
	}
	return true
}
func (this *GlobalSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType)
	if !ok {
		that2, ok := that.(GlobalSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if len(this.DownstreamTlsCertificateExpirationTimestamps) != len(that1.DownstreamTlsCertificateExpirationTimestamps) {
		return false
	}
	for i := range this.DownstreamTlsCertificateExpirationTimestamps {
		if !this.DownstreamTlsCertificateExpirationTimestamps[i].Equal(that1.DownstreamTlsCertificateExpirationTimestamps[i]) {
			return false
		}
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if len(this.DefaultRoutePools) != len(that1.DefaultRoutePools) {
		return false
	}
	for i := range this.DefaultRoutePools {
		if !this.DefaultRoutePools[i].Equal(that1.DefaultRoutePools[i]) {
			return false
		}
	}
	if that1.HostRewriteParams == nil {
		if this.HostRewriteParams != nil {
			return false
		}
	} else if this.HostRewriteParams == nil {
		return false
	} else if !this.HostRewriteParams.Equal(that1.HostRewriteParams) {
		return false
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if that1.UserIdChoice == nil {
		if this.UserIdChoice != nil {
			return false
		}
	} else if this.UserIdChoice == nil {
		return false
	} else if !this.UserIdChoice.Equal(that1.UserIdChoice) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if len(this.DataGuardRules) != len(that1.DataGuardRules) {
		return false
	}
	for i := range this.DataGuardRules {
		if !this.DataGuardRules[i].Equal(that1.DataGuardRules[i]) {
			return false
		}
	}
	if len(this.BlockedClients) != len(that1.BlockedClients) {
		return false
	}
	for i := range this.BlockedClients {
		if !this.BlockedClients[i].Equal(that1.BlockedClients[i]) {
			return false
		}
	}
	if len(this.TrustedClients) != len(that1.TrustedClients) {
		return false
	}
	for i := range this.TrustedClients {
		if !this.TrustedClients[i].Equal(that1.TrustedClients[i]) {
			return false
		}
	}
	if len(this.DdosMitigationRules) != len(that1.DdosMitigationRules) {
		return false
	}
	for i := range this.DdosMitigationRules {
		if !this.DdosMitigationRules[i].Equal(that1.DdosMitigationRules[i]) {
			return false
		}
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if that1.MlConfigChoice == nil {
		if this.MlConfigChoice != nil {
			return false
		}
	} else if this.MlConfigChoice == nil {
		return false
	} else if !this.MlConfigChoice.Equal(that1.MlConfigChoice) {
		return false
	}
	if that1.BotDefenseChoice == nil {
		if this.BotDefenseChoice != nil {
			return false
		}
	} else if this.BotDefenseChoice == nil {
		return false
	} else if !this.BotDefenseChoice.Equal(that1.BotDefenseChoice) {
		return false
	}
	if that1.ApiDefinitionChoice == nil {
		if this.ApiDefinitionChoice != nil {
			return false
		}
	} else if this.ApiDefinitionChoice == nil {
		return false
	} else if !this.ApiDefinitionChoice.Equal(that1.ApiDefinitionChoice) {
		return false
	}
	if that1.IpReputationChoice == nil {
		if this.IpReputationChoice != nil {
			return false
		}
	} else if this.IpReputationChoice == nil {
		return false
	} else if !this.IpReputationChoice.Equal(that1.IpReputationChoice) {
		return false
	}
	if !this.ViewInternal.Equal(that1.ViewInternal) {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	if this.State != that1.State {
		return false
	}
	if this.AutoCertState != that1.AutoCertState {
		return false
	}
	if !this.AutoCertInfo.Equal(that1.AutoCertInfo) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Http)
	if !ok {
		that2, ok := that.(GlobalSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(GlobalSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Https)
	if !ok {
		that2, ok := that.(GlobalSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(GlobalSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(GlobalSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AutoHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AutoHostRewrite)
	if !ok {
		that2, ok := that.(GlobalSpecType_AutoHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AutoHostRewrite.Equal(that1.AutoHostRewrite) {
		return false
	}
	return true
}
func (this *GlobalSpecType_HostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_HostRewrite)
	if !ok {
		that2, ok := that.(GlobalSpecType_HostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostRewrite != that1.HostRewrite {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableHostRewrite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableHostRewrite)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableHostRewrite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableHostRewrite.Equal(that1.DisableHostRewrite) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Waf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Waf)
	if !ok {
		that2, ok := that.(GlobalSpecType_Waf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	return true
}
func (this *GlobalSpecType_WafRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_WafRule)
	if !ok {
		that2, ok := that.(GlobalSpecType_WafRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafRule.Equal(that1.WafRule) {
		return false
	}
	return true
}
func (this *GlobalSpecType_AppFirewall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_AppFirewall)
	if !ok {
		that2, ok := that.(GlobalSpecType_AppFirewall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewall.Equal(that1.AppFirewall) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(GlobalSpecType_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *GlobalSpecType_UserIdClientIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_UserIdClientIp)
	if !ok {
		that2, ok := that.(GlobalSpecType_UserIdClientIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdClientIp.Equal(that1.UserIdClientIp) {
		return false
	}
	return true
}
func (this *GlobalSpecType_UserIdentification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_UserIdentification)
	if !ok {
		that2, ok := that.(GlobalSpecType_UserIdentification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ApiRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ApiRateLimit)
	if !ok {
		that2, ok := that.(GlobalSpecType_ApiRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiRateLimit.Equal(that1.ApiRateLimit) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RateLimit)
	if !ok {
		that2, ok := that.(GlobalSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(GlobalSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *GlobalSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(GlobalSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(GlobalSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RoundRobin)
	if !ok {
		that2, ok := that.(GlobalSpecType_RoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoundRobin.Equal(that1.RoundRobin) {
		return false
	}
	return true
}
func (this *GlobalSpecType_LeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_LeastActive)
	if !ok {
		that2, ok := that.(GlobalSpecType_LeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LeastActive.Equal(that1.LeastActive) {
		return false
	}
	return true
}
func (this *GlobalSpecType_Random) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_Random)
	if !ok {
		that2, ok := that.(GlobalSpecType_Random)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Random.Equal(that1.Random) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SourceIpStickiness)
	if !ok {
		that2, ok := that.(GlobalSpecType_SourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourceIpStickiness.Equal(that1.SourceIpStickiness) {
		return false
	}
	return true
}
func (this *GlobalSpecType_CookieStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_CookieStickiness)
	if !ok {
		that2, ok := that.(GlobalSpecType_CookieStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CookieStickiness.Equal(that1.CookieStickiness) {
		return false
	}
	return true
}
func (this *GlobalSpecType_RingHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_RingHash)
	if !ok {
		that2, ok := that.(GlobalSpecType_RingHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RingHash.Equal(that1.RingHash) {
		return false
	}
	return true
}
func (this *GlobalSpecType_SingleLbApp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_SingleLbApp)
	if !ok {
		that2, ok := that.(GlobalSpecType_SingleLbApp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SingleLbApp.Equal(that1.SingleLbApp) {
		return false
	}
	return true
}
func (this *GlobalSpecType_MultiLbApp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_MultiLbApp)
	if !ok {
		that2, ok := that.(GlobalSpecType_MultiLbApp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MultiLbApp.Equal(that1.MultiLbApp) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableBotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableBotDefense)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableBotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableBotDefense.Equal(that1.DisableBotDefense) {
		return false
	}
	return true
}
func (this *GlobalSpecType_BotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_BotDefense)
	if !ok {
		that2, ok := that.(GlobalSpecType_BotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefense.Equal(that1.BotDefense) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableApiDefinition)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDefinition.Equal(that1.DisableApiDefinition) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ApiDefinition)
	if !ok {
		that2, ok := that.(GlobalSpecType_ApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinition.Equal(that1.ApiDefinition) {
		return false
	}
	return true
}
func (this *GlobalSpecType_ApiDefinitions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_ApiDefinitions)
	if !ok {
		that2, ok := that.(GlobalSpecType_ApiDefinitions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinitions.Equal(that1.ApiDefinitions) {
		return false
	}
	return true
}
func (this *GlobalSpecType_DisableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_DisableIpReputation)
	if !ok {
		that2, ok := that.(GlobalSpecType_DisableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableIpReputation.Equal(that1.DisableIpReputation) {
		return false
	}
	return true
}
func (this *GlobalSpecType_EnableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalSpecType_EnableIpReputation)
	if !ok {
		that2, ok := that.(GlobalSpecType_EnableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableIpReputation.Equal(that1.EnableIpReputation) {
		return false
	}
	return true
}
func (this *CreateSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType)
	if !ok {
		that2, ok := that.(CreateSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if len(this.DefaultRoutePools) != len(that1.DefaultRoutePools) {
		return false
	}
	for i := range this.DefaultRoutePools {
		if !this.DefaultRoutePools[i].Equal(that1.DefaultRoutePools[i]) {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if that1.UserIdChoice == nil {
		if this.UserIdChoice != nil {
			return false
		}
	} else if this.UserIdChoice == nil {
		return false
	} else if !this.UserIdChoice.Equal(that1.UserIdChoice) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if len(this.DataGuardRules) != len(that1.DataGuardRules) {
		return false
	}
	for i := range this.DataGuardRules {
		if !this.DataGuardRules[i].Equal(that1.DataGuardRules[i]) {
			return false
		}
	}
	if len(this.BlockedClients) != len(that1.BlockedClients) {
		return false
	}
	for i := range this.BlockedClients {
		if !this.BlockedClients[i].Equal(that1.BlockedClients[i]) {
			return false
		}
	}
	if len(this.TrustedClients) != len(that1.TrustedClients) {
		return false
	}
	for i := range this.TrustedClients {
		if !this.TrustedClients[i].Equal(that1.TrustedClients[i]) {
			return false
		}
	}
	if len(this.DdosMitigationRules) != len(that1.DdosMitigationRules) {
		return false
	}
	for i := range this.DdosMitigationRules {
		if !this.DdosMitigationRules[i].Equal(that1.DdosMitigationRules[i]) {
			return false
		}
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if that1.MlConfigChoice == nil {
		if this.MlConfigChoice != nil {
			return false
		}
	} else if this.MlConfigChoice == nil {
		return false
	} else if !this.MlConfigChoice.Equal(that1.MlConfigChoice) {
		return false
	}
	if that1.BotDefenseChoice == nil {
		if this.BotDefenseChoice != nil {
			return false
		}
	} else if this.BotDefenseChoice == nil {
		return false
	} else if !this.BotDefenseChoice.Equal(that1.BotDefenseChoice) {
		return false
	}
	if that1.ApiDefinitionChoice == nil {
		if this.ApiDefinitionChoice != nil {
			return false
		}
	} else if this.ApiDefinitionChoice == nil {
		return false
	} else if !this.ApiDefinitionChoice.Equal(that1.ApiDefinitionChoice) {
		return false
	}
	if that1.IpReputationChoice == nil {
		if this.IpReputationChoice != nil {
			return false
		}
	} else if this.IpReputationChoice == nil {
		return false
	} else if !this.IpReputationChoice.Equal(that1.IpReputationChoice) {
		return false
	}
	return true
}
func (this *CreateSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Http)
	if !ok {
		that2, ok := that.(CreateSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *CreateSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(CreateSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *CreateSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Https)
	if !ok {
		that2, ok := that.(CreateSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *CreateSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(CreateSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *CreateSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(CreateSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *CreateSpecType_Waf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Waf)
	if !ok {
		that2, ok := that.(CreateSpecType_Waf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	return true
}
func (this *CreateSpecType_WafRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_WafRule)
	if !ok {
		that2, ok := that.(CreateSpecType_WafRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafRule.Equal(that1.WafRule) {
		return false
	}
	return true
}
func (this *CreateSpecType_AppFirewall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_AppFirewall)
	if !ok {
		that2, ok := that.(CreateSpecType_AppFirewall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewall.Equal(that1.AppFirewall) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(CreateSpecType_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *CreateSpecType_UserIdClientIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_UserIdClientIp)
	if !ok {
		that2, ok := that.(CreateSpecType_UserIdClientIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdClientIp.Equal(that1.UserIdClientIp) {
		return false
	}
	return true
}
func (this *CreateSpecType_UserIdentification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_UserIdentification)
	if !ok {
		that2, ok := that.(CreateSpecType_UserIdentification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *CreateSpecType_ApiRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ApiRateLimit)
	if !ok {
		that2, ok := that.(CreateSpecType_ApiRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiRateLimit.Equal(that1.ApiRateLimit) {
		return false
	}
	return true
}
func (this *CreateSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_RateLimit)
	if !ok {
		that2, ok := that.(CreateSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *CreateSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(CreateSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *CreateSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(CreateSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *CreateSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(CreateSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *CreateSpecType_RoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_RoundRobin)
	if !ok {
		that2, ok := that.(CreateSpecType_RoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoundRobin.Equal(that1.RoundRobin) {
		return false
	}
	return true
}
func (this *CreateSpecType_LeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_LeastActive)
	if !ok {
		that2, ok := that.(CreateSpecType_LeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LeastActive.Equal(that1.LeastActive) {
		return false
	}
	return true
}
func (this *CreateSpecType_Random) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_Random)
	if !ok {
		that2, ok := that.(CreateSpecType_Random)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Random.Equal(that1.Random) {
		return false
	}
	return true
}
func (this *CreateSpecType_SourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SourceIpStickiness)
	if !ok {
		that2, ok := that.(CreateSpecType_SourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourceIpStickiness.Equal(that1.SourceIpStickiness) {
		return false
	}
	return true
}
func (this *CreateSpecType_CookieStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_CookieStickiness)
	if !ok {
		that2, ok := that.(CreateSpecType_CookieStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CookieStickiness.Equal(that1.CookieStickiness) {
		return false
	}
	return true
}
func (this *CreateSpecType_RingHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_RingHash)
	if !ok {
		that2, ok := that.(CreateSpecType_RingHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RingHash.Equal(that1.RingHash) {
		return false
	}
	return true
}
func (this *CreateSpecType_SingleLbApp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_SingleLbApp)
	if !ok {
		that2, ok := that.(CreateSpecType_SingleLbApp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SingleLbApp.Equal(that1.SingleLbApp) {
		return false
	}
	return true
}
func (this *CreateSpecType_MultiLbApp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_MultiLbApp)
	if !ok {
		that2, ok := that.(CreateSpecType_MultiLbApp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MultiLbApp.Equal(that1.MultiLbApp) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableBotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableBotDefense)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableBotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableBotDefense.Equal(that1.DisableBotDefense) {
		return false
	}
	return true
}
func (this *CreateSpecType_BotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_BotDefense)
	if !ok {
		that2, ok := that.(CreateSpecType_BotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefense.Equal(that1.BotDefense) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableApiDefinition)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDefinition.Equal(that1.DisableApiDefinition) {
		return false
	}
	return true
}
func (this *CreateSpecType_ApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ApiDefinition)
	if !ok {
		that2, ok := that.(CreateSpecType_ApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinition.Equal(that1.ApiDefinition) {
		return false
	}
	return true
}
func (this *CreateSpecType_ApiDefinitions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_ApiDefinitions)
	if !ok {
		that2, ok := that.(CreateSpecType_ApiDefinitions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinitions.Equal(that1.ApiDefinitions) {
		return false
	}
	return true
}
func (this *CreateSpecType_DisableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_DisableIpReputation)
	if !ok {
		that2, ok := that.(CreateSpecType_DisableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableIpReputation.Equal(that1.DisableIpReputation) {
		return false
	}
	return true
}
func (this *CreateSpecType_EnableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSpecType_EnableIpReputation)
	if !ok {
		that2, ok := that.(CreateSpecType_EnableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableIpReputation.Equal(that1.EnableIpReputation) {
		return false
	}
	return true
}
func (this *ReplaceSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType)
	if !ok {
		that2, ok := that.(ReplaceSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if len(this.DefaultRoutePools) != len(that1.DefaultRoutePools) {
		return false
	}
	for i := range this.DefaultRoutePools {
		if !this.DefaultRoutePools[i].Equal(that1.DefaultRoutePools[i]) {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if that1.UserIdChoice == nil {
		if this.UserIdChoice != nil {
			return false
		}
	} else if this.UserIdChoice == nil {
		return false
	} else if !this.UserIdChoice.Equal(that1.UserIdChoice) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if len(this.DataGuardRules) != len(that1.DataGuardRules) {
		return false
	}
	for i := range this.DataGuardRules {
		if !this.DataGuardRules[i].Equal(that1.DataGuardRules[i]) {
			return false
		}
	}
	if len(this.BlockedClients) != len(that1.BlockedClients) {
		return false
	}
	for i := range this.BlockedClients {
		if !this.BlockedClients[i].Equal(that1.BlockedClients[i]) {
			return false
		}
	}
	if len(this.TrustedClients) != len(that1.TrustedClients) {
		return false
	}
	for i := range this.TrustedClients {
		if !this.TrustedClients[i].Equal(that1.TrustedClients[i]) {
			return false
		}
	}
	if len(this.DdosMitigationRules) != len(that1.DdosMitigationRules) {
		return false
	}
	for i := range this.DdosMitigationRules {
		if !this.DdosMitigationRules[i].Equal(that1.DdosMitigationRules[i]) {
			return false
		}
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if that1.MlConfigChoice == nil {
		if this.MlConfigChoice != nil {
			return false
		}
	} else if this.MlConfigChoice == nil {
		return false
	} else if !this.MlConfigChoice.Equal(that1.MlConfigChoice) {
		return false
	}
	if that1.BotDefenseChoice == nil {
		if this.BotDefenseChoice != nil {
			return false
		}
	} else if this.BotDefenseChoice == nil {
		return false
	} else if !this.BotDefenseChoice.Equal(that1.BotDefenseChoice) {
		return false
	}
	if that1.ApiDefinitionChoice == nil {
		if this.ApiDefinitionChoice != nil {
			return false
		}
	} else if this.ApiDefinitionChoice == nil {
		return false
	} else if !this.ApiDefinitionChoice.Equal(that1.ApiDefinitionChoice) {
		return false
	}
	if that1.IpReputationChoice == nil {
		if this.IpReputationChoice != nil {
			return false
		}
	} else if this.IpReputationChoice == nil {
		return false
	} else if !this.IpReputationChoice.Equal(that1.IpReputationChoice) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Http)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(ReplaceSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Https)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Waf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Waf)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Waf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_WafRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_WafRule)
	if !ok {
		that2, ok := that.(ReplaceSpecType_WafRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafRule.Equal(that1.WafRule) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_AppFirewall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_AppFirewall)
	if !ok {
		that2, ok := that.(ReplaceSpecType_AppFirewall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewall.Equal(that1.AppFirewall) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(ReplaceSpecType_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_UserIdClientIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_UserIdClientIp)
	if !ok {
		that2, ok := that.(ReplaceSpecType_UserIdClientIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdClientIp.Equal(that1.UserIdClientIp) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_UserIdentification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_UserIdentification)
	if !ok {
		that2, ok := that.(ReplaceSpecType_UserIdentification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ApiRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ApiRateLimit)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ApiRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiRateLimit.Equal(that1.ApiRateLimit) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_RateLimit)
	if !ok {
		that2, ok := that.(ReplaceSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(ReplaceSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_RoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_RoundRobin)
	if !ok {
		that2, ok := that.(ReplaceSpecType_RoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoundRobin.Equal(that1.RoundRobin) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_LeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_LeastActive)
	if !ok {
		that2, ok := that.(ReplaceSpecType_LeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LeastActive.Equal(that1.LeastActive) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_Random) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_Random)
	if !ok {
		that2, ok := that.(ReplaceSpecType_Random)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Random.Equal(that1.Random) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SourceIpStickiness)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourceIpStickiness.Equal(that1.SourceIpStickiness) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_CookieStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_CookieStickiness)
	if !ok {
		that2, ok := that.(ReplaceSpecType_CookieStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CookieStickiness.Equal(that1.CookieStickiness) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_RingHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_RingHash)
	if !ok {
		that2, ok := that.(ReplaceSpecType_RingHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RingHash.Equal(that1.RingHash) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_SingleLbApp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_SingleLbApp)
	if !ok {
		that2, ok := that.(ReplaceSpecType_SingleLbApp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SingleLbApp.Equal(that1.SingleLbApp) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_MultiLbApp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_MultiLbApp)
	if !ok {
		that2, ok := that.(ReplaceSpecType_MultiLbApp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MultiLbApp.Equal(that1.MultiLbApp) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableBotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableBotDefense)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableBotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableBotDefense.Equal(that1.DisableBotDefense) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_BotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_BotDefense)
	if !ok {
		that2, ok := that.(ReplaceSpecType_BotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefense.Equal(that1.BotDefense) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableApiDefinition)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDefinition.Equal(that1.DisableApiDefinition) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ApiDefinition)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinition.Equal(that1.ApiDefinition) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_ApiDefinitions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_ApiDefinitions)
	if !ok {
		that2, ok := that.(ReplaceSpecType_ApiDefinitions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinitions.Equal(that1.ApiDefinitions) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_DisableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_DisableIpReputation)
	if !ok {
		that2, ok := that.(ReplaceSpecType_DisableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableIpReputation.Equal(that1.DisableIpReputation) {
		return false
	}
	return true
}
func (this *ReplaceSpecType_EnableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplaceSpecType_EnableIpReputation)
	if !ok {
		that2, ok := that.(ReplaceSpecType_EnableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableIpReputation.Equal(that1.EnableIpReputation) {
		return false
	}
	return true
}
func (this *GetSpecType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType)
	if !ok {
		that2, ok := that.(GetSpecType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if this.Domains[i] != that1.Domains[i] {
			return false
		}
	}
	if that1.LoadbalancerType == nil {
		if this.LoadbalancerType != nil {
			return false
		}
	} else if this.LoadbalancerType == nil {
		return false
	} else if !this.LoadbalancerType.Equal(that1.LoadbalancerType) {
		return false
	}
	if len(this.DownstreamTlsCertificateExpirationTimestamps) != len(that1.DownstreamTlsCertificateExpirationTimestamps) {
		return false
	}
	for i := range this.DownstreamTlsCertificateExpirationTimestamps {
		if !this.DownstreamTlsCertificateExpirationTimestamps[i].Equal(that1.DownstreamTlsCertificateExpirationTimestamps[i]) {
			return false
		}
	}
	if that1.AdvertiseChoice == nil {
		if this.AdvertiseChoice != nil {
			return false
		}
	} else if this.AdvertiseChoice == nil {
		return false
	} else if !this.AdvertiseChoice.Equal(that1.AdvertiseChoice) {
		return false
	}
	if len(this.DefaultRoutePools) != len(that1.DefaultRoutePools) {
		return false
	}
	for i := range this.DefaultRoutePools {
		if !this.DefaultRoutePools[i].Equal(that1.DefaultRoutePools[i]) {
			return false
		}
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if !this.CorsPolicy.Equal(that1.CorsPolicy) {
		return false
	}
	if that1.WafChoice == nil {
		if this.WafChoice != nil {
			return false
		}
	} else if this.WafChoice == nil {
		return false
	} else if !this.WafChoice.Equal(that1.WafChoice) {
		return false
	}
	if this.AddLocation != that1.AddLocation {
		return false
	}
	if that1.ChallengeType == nil {
		if this.ChallengeType != nil {
			return false
		}
	} else if this.ChallengeType == nil {
		return false
	} else if !this.ChallengeType.Equal(that1.ChallengeType) {
		return false
	}
	if !this.MoreOption.Equal(that1.MoreOption) {
		return false
	}
	if that1.UserIdChoice == nil {
		if this.UserIdChoice != nil {
			return false
		}
	} else if this.UserIdChoice == nil {
		return false
	} else if !this.UserIdChoice.Equal(that1.UserIdChoice) {
		return false
	}
	if that1.RateLimitChoice == nil {
		if this.RateLimitChoice != nil {
			return false
		}
	} else if this.RateLimitChoice == nil {
		return false
	} else if !this.RateLimitChoice.Equal(that1.RateLimitChoice) {
		return false
	}
	if !this.MaliciousUserMitigation.Equal(that1.MaliciousUserMitigation) {
		return false
	}
	if len(this.WafExclusionRules) != len(that1.WafExclusionRules) {
		return false
	}
	for i := range this.WafExclusionRules {
		if !this.WafExclusionRules[i].Equal(that1.WafExclusionRules[i]) {
			return false
		}
	}
	if len(this.DataGuardRules) != len(that1.DataGuardRules) {
		return false
	}
	for i := range this.DataGuardRules {
		if !this.DataGuardRules[i].Equal(that1.DataGuardRules[i]) {
			return false
		}
	}
	if len(this.BlockedClients) != len(that1.BlockedClients) {
		return false
	}
	for i := range this.BlockedClients {
		if !this.BlockedClients[i].Equal(that1.BlockedClients[i]) {
			return false
		}
	}
	if len(this.TrustedClients) != len(that1.TrustedClients) {
		return false
	}
	for i := range this.TrustedClients {
		if !this.TrustedClients[i].Equal(that1.TrustedClients[i]) {
			return false
		}
	}
	if len(this.DdosMitigationRules) != len(that1.DdosMitigationRules) {
		return false
	}
	for i := range this.DdosMitigationRules {
		if !this.DdosMitigationRules[i].Equal(that1.DdosMitigationRules[i]) {
			return false
		}
	}
	if that1.ServicePolicyChoice == nil {
		if this.ServicePolicyChoice != nil {
			return false
		}
	} else if this.ServicePolicyChoice == nil {
		return false
	} else if !this.ServicePolicyChoice.Equal(that1.ServicePolicyChoice) {
		return false
	}
	if that1.HashPolicyChoice == nil {
		if this.HashPolicyChoice != nil {
			return false
		}
	} else if this.HashPolicyChoice == nil {
		return false
	} else if !this.HashPolicyChoice.Equal(that1.HashPolicyChoice) {
		return false
	}
	if that1.MlConfigChoice == nil {
		if this.MlConfigChoice != nil {
			return false
		}
	} else if this.MlConfigChoice == nil {
		return false
	} else if !this.MlConfigChoice.Equal(that1.MlConfigChoice) {
		return false
	}
	if that1.BotDefenseChoice == nil {
		if this.BotDefenseChoice != nil {
			return false
		}
	} else if this.BotDefenseChoice == nil {
		return false
	} else if !this.BotDefenseChoice.Equal(that1.BotDefenseChoice) {
		return false
	}
	if that1.ApiDefinitionChoice == nil {
		if this.ApiDefinitionChoice != nil {
			return false
		}
	} else if this.ApiDefinitionChoice == nil {
		return false
	} else if !this.ApiDefinitionChoice.Equal(that1.ApiDefinitionChoice) {
		return false
	}
	if that1.IpReputationChoice == nil {
		if this.IpReputationChoice != nil {
			return false
		}
	} else if this.IpReputationChoice == nil {
		return false
	} else if !this.IpReputationChoice.Equal(that1.IpReputationChoice) {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if len(this.DnsInfo) != len(that1.DnsInfo) {
		return false
	}
	for i := range this.DnsInfo {
		if !this.DnsInfo[i].Equal(that1.DnsInfo[i]) {
			return false
		}
	}
	if this.State != that1.State {
		return false
	}
	if this.AutoCertState != that1.AutoCertState {
		return false
	}
	if !this.AutoCertInfo.Equal(that1.AutoCertInfo) {
		return false
	}
	return true
}
func (this *GetSpecType_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Http)
	if !ok {
		that2, ok := that.(GetSpecType_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *GetSpecType_HttpsAutoCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_HttpsAutoCert)
	if !ok {
		that2, ok := that.(GetSpecType_HttpsAutoCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpsAutoCert.Equal(that1.HttpsAutoCert) {
		return false
	}
	return true
}
func (this *GetSpecType_Https) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Https)
	if !ok {
		that2, ok := that.(GetSpecType_Https)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Https.Equal(that1.Https) {
		return false
	}
	return true
}
func (this *GetSpecType_DoNotAdvertise) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DoNotAdvertise)
	if !ok {
		that2, ok := that.(GetSpecType_DoNotAdvertise)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DoNotAdvertise.Equal(that1.DoNotAdvertise) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseOnPublicDefaultVip)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseOnPublicDefaultVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublicDefaultVip.Equal(that1.AdvertiseOnPublicDefaultVip) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseOnPublic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseOnPublic)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseOnPublic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseOnPublic.Equal(that1.AdvertiseOnPublic) {
		return false
	}
	return true
}
func (this *GetSpecType_AdvertiseCustom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AdvertiseCustom)
	if !ok {
		that2, ok := that.(GetSpecType_AdvertiseCustom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseCustom.Equal(that1.AdvertiseCustom) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableWaf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableWaf)
	if !ok {
		that2, ok := that.(GetSpecType_DisableWaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableWaf.Equal(that1.DisableWaf) {
		return false
	}
	return true
}
func (this *GetSpecType_Waf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Waf)
	if !ok {
		that2, ok := that.(GetSpecType_Waf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Waf.Equal(that1.Waf) {
		return false
	}
	return true
}
func (this *GetSpecType_WafRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_WafRule)
	if !ok {
		that2, ok := that.(GetSpecType_WafRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WafRule.Equal(that1.WafRule) {
		return false
	}
	return true
}
func (this *GetSpecType_AppFirewall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_AppFirewall)
	if !ok {
		that2, ok := that.(GetSpecType_AppFirewall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppFirewall.Equal(that1.AppFirewall) {
		return false
	}
	return true
}
func (this *GetSpecType_NoChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_NoChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoChallenge.Equal(that1.NoChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_JsChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_JsChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_JsChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsChallenge.Equal(that1.JsChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_CaptchaChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CaptchaChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_CaptchaChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CaptchaChallenge.Equal(that1.CaptchaChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_PolicyBasedChallenge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_PolicyBasedChallenge)
	if !ok {
		that2, ok := that.(GetSpecType_PolicyBasedChallenge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PolicyBasedChallenge.Equal(that1.PolicyBasedChallenge) {
		return false
	}
	return true
}
func (this *GetSpecType_UserIdClientIp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_UserIdClientIp)
	if !ok {
		that2, ok := that.(GetSpecType_UserIdClientIp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdClientIp.Equal(that1.UserIdClientIp) {
		return false
	}
	return true
}
func (this *GetSpecType_UserIdentification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_UserIdentification)
	if !ok {
		that2, ok := that.(GetSpecType_UserIdentification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserIdentification.Equal(that1.UserIdentification) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableRateLimit)
	if !ok {
		that2, ok := that.(GetSpecType_DisableRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableRateLimit.Equal(that1.DisableRateLimit) {
		return false
	}
	return true
}
func (this *GetSpecType_ApiRateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ApiRateLimit)
	if !ok {
		that2, ok := that.(GetSpecType_ApiRateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiRateLimit.Equal(that1.ApiRateLimit) {
		return false
	}
	return true
}
func (this *GetSpecType_RateLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RateLimit)
	if !ok {
		that2, ok := that.(GetSpecType_RateLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RateLimit.Equal(that1.RateLimit) {
		return false
	}
	return true
}
func (this *GetSpecType_ServicePoliciesFromNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ServicePoliciesFromNamespace)
	if !ok {
		that2, ok := that.(GetSpecType_ServicePoliciesFromNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServicePoliciesFromNamespace.Equal(that1.ServicePoliciesFromNamespace) {
		return false
	}
	return true
}
func (this *GetSpecType_NoServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_NoServicePolicies)
	if !ok {
		that2, ok := that.(GetSpecType_NoServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NoServicePolicies.Equal(that1.NoServicePolicies) {
		return false
	}
	return true
}
func (this *GetSpecType_ActiveServicePolicies) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ActiveServicePolicies)
	if !ok {
		that2, ok := that.(GetSpecType_ActiveServicePolicies)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveServicePolicies.Equal(that1.ActiveServicePolicies) {
		return false
	}
	return true
}
func (this *GetSpecType_RoundRobin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RoundRobin)
	if !ok {
		that2, ok := that.(GetSpecType_RoundRobin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoundRobin.Equal(that1.RoundRobin) {
		return false
	}
	return true
}
func (this *GetSpecType_LeastActive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_LeastActive)
	if !ok {
		that2, ok := that.(GetSpecType_LeastActive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LeastActive.Equal(that1.LeastActive) {
		return false
	}
	return true
}
func (this *GetSpecType_Random) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_Random)
	if !ok {
		that2, ok := that.(GetSpecType_Random)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Random.Equal(that1.Random) {
		return false
	}
	return true
}
func (this *GetSpecType_SourceIpStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SourceIpStickiness)
	if !ok {
		that2, ok := that.(GetSpecType_SourceIpStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourceIpStickiness.Equal(that1.SourceIpStickiness) {
		return false
	}
	return true
}
func (this *GetSpecType_CookieStickiness) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_CookieStickiness)
	if !ok {
		that2, ok := that.(GetSpecType_CookieStickiness)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CookieStickiness.Equal(that1.CookieStickiness) {
		return false
	}
	return true
}
func (this *GetSpecType_RingHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_RingHash)
	if !ok {
		that2, ok := that.(GetSpecType_RingHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RingHash.Equal(that1.RingHash) {
		return false
	}
	return true
}
func (this *GetSpecType_SingleLbApp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_SingleLbApp)
	if !ok {
		that2, ok := that.(GetSpecType_SingleLbApp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SingleLbApp.Equal(that1.SingleLbApp) {
		return false
	}
	return true
}
func (this *GetSpecType_MultiLbApp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_MultiLbApp)
	if !ok {
		that2, ok := that.(GetSpecType_MultiLbApp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MultiLbApp.Equal(that1.MultiLbApp) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableBotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableBotDefense)
	if !ok {
		that2, ok := that.(GetSpecType_DisableBotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableBotDefense.Equal(that1.DisableBotDefense) {
		return false
	}
	return true
}
func (this *GetSpecType_BotDefense) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_BotDefense)
	if !ok {
		that2, ok := that.(GetSpecType_BotDefense)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BotDefense.Equal(that1.BotDefense) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableApiDefinition)
	if !ok {
		that2, ok := that.(GetSpecType_DisableApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableApiDefinition.Equal(that1.DisableApiDefinition) {
		return false
	}
	return true
}
func (this *GetSpecType_ApiDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ApiDefinition)
	if !ok {
		that2, ok := that.(GetSpecType_ApiDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinition.Equal(that1.ApiDefinition) {
		return false
	}
	return true
}
func (this *GetSpecType_ApiDefinitions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_ApiDefinitions)
	if !ok {
		that2, ok := that.(GetSpecType_ApiDefinitions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiDefinitions.Equal(that1.ApiDefinitions) {
		return false
	}
	return true
}
func (this *GetSpecType_DisableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_DisableIpReputation)
	if !ok {
		that2, ok := that.(GetSpecType_DisableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DisableIpReputation.Equal(that1.DisableIpReputation) {
		return false
	}
	return true
}
func (this *GetSpecType_EnableIpReputation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpecType_EnableIpReputation)
	if !ok {
		that2, ok := that.(GetSpecType_EnableIpReputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableIpReputation.Equal(that1.EnableIpReputation) {
		return false
	}
	return true
}
func (this *InlineRateLimiter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&http_loadbalancer.InlineRateLimiter{")
	s = append(s, "Threshold: "+fmt.Sprintf("%#v", this.Threshold)+",\n")
	s = append(s, "Unit: "+fmt.Sprintf("%#v", this.Unit)+",\n")
	if this.CountByChoice != nil {
		s = append(s, "CountByChoice: "+fmt.Sprintf("%#v", this.CountByChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InlineRateLimiter_UseHttpLbUserId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.InlineRateLimiter_UseHttpLbUserId{` +
		`UseHttpLbUserId:` + fmt.Sprintf("%#v", this.UseHttpLbUserId) + `}`}, ", ")
	return s
}
func (this *InlineRateLimiter_RefUserId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.InlineRateLimiter_RefUserId{` +
		`RefUserId:` + fmt.Sprintf("%#v", this.RefUserId) + `}`}, ", ")
	return s
}
func (this *ServerUrlRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&http_loadbalancer.ServerUrlRule{")
	if this.DomainChoice != nil {
		s = append(s, "DomainChoice: "+fmt.Sprintf("%#v", this.DomainChoice)+",\n")
	}
	s = append(s, "BasePath: "+fmt.Sprintf("%#v", this.BasePath)+",\n")
	if this.RateLimiterChoice != nil {
		s = append(s, "RateLimiterChoice: "+fmt.Sprintf("%#v", this.RateLimiterChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerUrlRule_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ServerUrlRule_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *ServerUrlRule_SpecificDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ServerUrlRule_SpecificDomain{` +
		`SpecificDomain:` + fmt.Sprintf("%#v", this.SpecificDomain) + `}`}, ", ")
	return s
}
func (this *ServerUrlRule_InlineRateLimiter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ServerUrlRule_InlineRateLimiter{` +
		`InlineRateLimiter:` + fmt.Sprintf("%#v", this.InlineRateLimiter) + `}`}, ", ")
	return s
}
func (this *ServerUrlRule_RefRateLimiter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ServerUrlRule_RefRateLimiter{` +
		`RefRateLimiter:` + fmt.Sprintf("%#v", this.RefRateLimiter) + `}`}, ", ")
	return s
}
func (this *ApiEndpointRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&http_loadbalancer.ApiEndpointRule{")
	if this.DomainChoice != nil {
		s = append(s, "DomainChoice: "+fmt.Sprintf("%#v", this.DomainChoice)+",\n")
	}
	s = append(s, "BasePath: "+fmt.Sprintf("%#v", this.BasePath)+",\n")
	s = append(s, "ApiEndpointPath: "+fmt.Sprintf("%#v", this.ApiEndpointPath)+",\n")
	if this.ApiEndpointMethod != nil {
		s = append(s, "ApiEndpointMethod: "+fmt.Sprintf("%#v", this.ApiEndpointMethod)+",\n")
	}
	if this.RateLimiterChoice != nil {
		s = append(s, "RateLimiterChoice: "+fmt.Sprintf("%#v", this.RateLimiterChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiEndpointRule_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ApiEndpointRule_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *ApiEndpointRule_SpecificDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ApiEndpointRule_SpecificDomain{` +
		`SpecificDomain:` + fmt.Sprintf("%#v", this.SpecificDomain) + `}`}, ", ")
	return s
}
func (this *ApiEndpointRule_InlineRateLimiter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ApiEndpointRule_InlineRateLimiter{` +
		`InlineRateLimiter:` + fmt.Sprintf("%#v", this.InlineRateLimiter) + `}`}, ", ")
	return s
}
func (this *ApiEndpointRule_RefRateLimiter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ApiEndpointRule_RefRateLimiter{` +
		`RefRateLimiter:` + fmt.Sprintf("%#v", this.RefRateLimiter) + `}`}, ", ")
	return s
}
func (this *APIRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&http_loadbalancer.APIRateLimit{")
	if this.IpAllowedListChoice != nil {
		s = append(s, "IpAllowedListChoice: "+fmt.Sprintf("%#v", this.IpAllowedListChoice)+",\n")
	}
	if this.ServerUrlRules != nil {
		s = append(s, "ServerUrlRules: "+fmt.Sprintf("%#v", this.ServerUrlRules)+",\n")
	}
	if this.ApiEndpointRules != nil {
		s = append(s, "ApiEndpointRules: "+fmt.Sprintf("%#v", this.ApiEndpointRules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *APIRateLimit_NoIpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.APIRateLimit_NoIpAllowedList{` +
		`NoIpAllowedList:` + fmt.Sprintf("%#v", this.NoIpAllowedList) + `}`}, ", ")
	return s
}
func (this *APIRateLimit_IpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.APIRateLimit_IpAllowedList{` +
		`IpAllowedList:` + fmt.Sprintf("%#v", this.IpAllowedList) + `}`}, ", ")
	return s
}
func (this *APIRateLimit_CustomIpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.APIRateLimit_CustomIpAllowedList{` +
		`CustomIpAllowedList:` + fmt.Sprintf("%#v", this.CustomIpAllowedList) + `}`}, ", ")
	return s
}
func (this *DownstreamTlsValidationContext) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&http_loadbalancer.DownstreamTlsValidationContext{")
	s = append(s, "TrustedCaUrl: "+fmt.Sprintf("%#v", this.TrustedCaUrl)+",\n")
	if this.CrlChoice != nil {
		s = append(s, "CrlChoice: "+fmt.Sprintf("%#v", this.CrlChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DownstreamTlsValidationContext_NoCrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.DownstreamTlsValidationContext_NoCrl{` +
		`NoCrl:` + fmt.Sprintf("%#v", this.NoCrl) + `}`}, ", ")
	return s
}
func (this *DownstreamTlsValidationContext_Crl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.DownstreamTlsValidationContext_Crl{` +
		`Crl:` + fmt.Sprintf("%#v", this.Crl) + `}`}, ", ")
	return s
}
func (this *DownstreamTlsParamsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&http_loadbalancer.DownstreamTlsParamsType{")
	if this.TlsConfig != nil {
		s = append(s, "TlsConfig: "+fmt.Sprintf("%#v", this.TlsConfig)+",\n")
	}
	if this.TlsCertificates != nil {
		s = append(s, "TlsCertificates: "+fmt.Sprintf("%#v", this.TlsCertificates)+",\n")
	}
	if this.MtlsChoice != nil {
		s = append(s, "MtlsChoice: "+fmt.Sprintf("%#v", this.MtlsChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DownstreamTlsParamsType_NoMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.DownstreamTlsParamsType_NoMtls{` +
		`NoMtls:` + fmt.Sprintf("%#v", this.NoMtls) + `}`}, ", ")
	return s
}
func (this *DownstreamTlsParamsType_UseMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.DownstreamTlsParamsType_UseMtls{` +
		`UseMtls:` + fmt.Sprintf("%#v", this.UseMtls) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&http_loadbalancer.ProxyTypeHttps{")
	s = append(s, "HttpRedirect: "+fmt.Sprintf("%#v", this.HttpRedirect)+",\n")
	s = append(s, "AddHsts: "+fmt.Sprintf("%#v", this.AddHsts)+",\n")
	if this.TlsParameters != nil {
		s = append(s, "TlsParameters: "+fmt.Sprintf("%#v", this.TlsParameters)+",\n")
	}
	if this.ServerHeaderChoice != nil {
		s = append(s, "ServerHeaderChoice: "+fmt.Sprintf("%#v", this.ServerHeaderChoice)+",\n")
	}
	if this.PathNormalizeChoice != nil {
		s = append(s, "PathNormalizeChoice: "+fmt.Sprintf("%#v", this.PathNormalizeChoice)+",\n")
	}
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyTypeHttps_DefaultHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_DefaultHeader{` +
		`DefaultHeader:` + fmt.Sprintf("%#v", this.DefaultHeader) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_ServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_ServerName{` +
		`ServerName:` + fmt.Sprintf("%#v", this.ServerName) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_AppendServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_AppendServerName{` +
		`AppendServerName:` + fmt.Sprintf("%#v", this.AppendServerName) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_PassThrough) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_PassThrough{` +
		`PassThrough:` + fmt.Sprintf("%#v", this.PassThrough) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_EnablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_EnablePathNormalize{` +
		`EnablePathNormalize:` + fmt.Sprintf("%#v", this.EnablePathNormalize) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttps_DisablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttps_DisablePathNormalize{` +
		`DisablePathNormalize:` + fmt.Sprintf("%#v", this.DisablePathNormalize) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&http_loadbalancer.ProxyTypeHttp{")
	s = append(s, "DnsVolterraManaged: "+fmt.Sprintf("%#v", this.DnsVolterraManaged)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyTypeHttpsAutoCerts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&http_loadbalancer.ProxyTypeHttpsAutoCerts{")
	s = append(s, "HttpRedirect: "+fmt.Sprintf("%#v", this.HttpRedirect)+",\n")
	s = append(s, "AddHsts: "+fmt.Sprintf("%#v", this.AddHsts)+",\n")
	if this.TlsConfig != nil {
		s = append(s, "TlsConfig: "+fmt.Sprintf("%#v", this.TlsConfig)+",\n")
	}
	if this.MtlsChoice != nil {
		s = append(s, "MtlsChoice: "+fmt.Sprintf("%#v", this.MtlsChoice)+",\n")
	}
	if this.ServerHeaderChoice != nil {
		s = append(s, "ServerHeaderChoice: "+fmt.Sprintf("%#v", this.ServerHeaderChoice)+",\n")
	}
	if this.PathNormalizeChoice != nil {
		s = append(s, "PathNormalizeChoice: "+fmt.Sprintf("%#v", this.PathNormalizeChoice)+",\n")
	}
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyTypeHttpsAutoCerts_NoMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_NoMtls{` +
		`NoMtls:` + fmt.Sprintf("%#v", this.NoMtls) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_UseMtls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_UseMtls{` +
		`UseMtls:` + fmt.Sprintf("%#v", this.UseMtls) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_DefaultHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_DefaultHeader{` +
		`DefaultHeader:` + fmt.Sprintf("%#v", this.DefaultHeader) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_ServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_ServerName{` +
		`ServerName:` + fmt.Sprintf("%#v", this.ServerName) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_AppendServerName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_AppendServerName{` +
		`AppendServerName:` + fmt.Sprintf("%#v", this.AppendServerName) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_PassThrough) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_PassThrough{` +
		`PassThrough:` + fmt.Sprintf("%#v", this.PassThrough) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_EnablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_EnablePathNormalize{` +
		`EnablePathNormalize:` + fmt.Sprintf("%#v", this.EnablePathNormalize) + `}`}, ", ")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_DisablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ProxyTypeHttpsAutoCerts_DisablePathNormalize{` +
		`DisablePathNormalize:` + fmt.Sprintf("%#v", this.DisablePathNormalize) + `}`}, ", ")
	return s
}
func (this *HashPolicyListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.HashPolicyListType{")
	if this.HashPolicy != nil {
		s = append(s, "HashPolicy: "+fmt.Sprintf("%#v", this.HashPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MirrorPolicyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&http_loadbalancer.MirrorPolicyType{")
	if this.OriginPool != nil {
		s = append(s, "OriginPool: "+fmt.Sprintf("%#v", this.OriginPool)+",\n")
	}
	if this.Percent != nil {
		s = append(s, "Percent: "+fmt.Sprintf("%#v", this.Percent)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteSimpleAdvancedOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 33)
	s = append(s, "&http_loadbalancer.RouteSimpleAdvancedOptions{")
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	s = append(s, "Priority: "+fmt.Sprintf("%#v", this.Priority)+",\n")
	keysForEndpointSubsets := make([]string, 0, len(this.EndpointSubsets))
	for k, _ := range this.EndpointSubsets {
		keysForEndpointSubsets = append(keysForEndpointSubsets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEndpointSubsets)
	mapStringForEndpointSubsets := "map[string]string{"
	for _, k := range keysForEndpointSubsets {
		mapStringForEndpointSubsets += fmt.Sprintf("%#v: %#v,", k, this.EndpointSubsets[k])
	}
	mapStringForEndpointSubsets += "}"
	if this.EndpointSubsets != nil {
		s = append(s, "EndpointSubsets: "+mapStringForEndpointSubsets+",\n")
	}
	if this.RewriteChoice != nil {
		s = append(s, "RewriteChoice: "+fmt.Sprintf("%#v", this.RewriteChoice)+",\n")
	}
	if this.RequestHeadersToAdd != nil {
		s = append(s, "RequestHeadersToAdd: "+fmt.Sprintf("%#v", this.RequestHeadersToAdd)+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	if this.ResponseHeadersToAdd != nil {
		s = append(s, "ResponseHeadersToAdd: "+fmt.Sprintf("%#v", this.ResponseHeadersToAdd)+",\n")
	}
	s = append(s, "ResponseHeadersToRemove: "+fmt.Sprintf("%#v", this.ResponseHeadersToRemove)+",\n")
	s = append(s, "DisableLocationAdd: "+fmt.Sprintf("%#v", this.DisableLocationAdd)+",\n")
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.SpdyChoice != nil {
		s = append(s, "SpdyChoice: "+fmt.Sprintf("%#v", this.SpdyChoice)+",\n")
	}
	if this.WebsocketChoice != nil {
		s = append(s, "WebsocketChoice: "+fmt.Sprintf("%#v", this.WebsocketChoice)+",\n")
	}
	if this.RetryPolicyChoice != nil {
		s = append(s, "RetryPolicyChoice: "+fmt.Sprintf("%#v", this.RetryPolicyChoice)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	if this.BufferChoice != nil {
		s = append(s, "BufferChoice: "+fmt.Sprintf("%#v", this.BufferChoice)+",\n")
	}
	if this.MirroringChoice != nil {
		s = append(s, "MirroringChoice: "+fmt.Sprintf("%#v", this.MirroringChoice)+",\n")
	}
	if this.ClusterRetractChoice != nil {
		s = append(s, "ClusterRetractChoice: "+fmt.Sprintf("%#v", this.ClusterRetractChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteSimpleAdvancedOptions_CommonHashPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_CommonHashPolicy{` +
		`CommonHashPolicy:` + fmt.Sprintf("%#v", this.CommonHashPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_SpecificHashPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_SpecificHashPolicy{` +
		`SpecificHashPolicy:` + fmt.Sprintf("%#v", this.SpecificHashPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisablePrefixRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DisablePrefixRewrite{` +
		`DisablePrefixRewrite:` + fmt.Sprintf("%#v", this.DisablePrefixRewrite) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_PrefixRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_PrefixRewrite{` +
		`PrefixRewrite:` + fmt.Sprintf("%#v", this.PrefixRewrite) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_Waf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_Waf{` +
		`Waf:` + fmt.Sprintf("%#v", this.Waf) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_WafRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_WafRule{` +
		`WafRule:` + fmt.Sprintf("%#v", this.WafRule) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_AppFirewall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_AppFirewall{` +
		`AppFirewall:` + fmt.Sprintf("%#v", this.AppFirewall) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableSpdy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DisableSpdy{` +
		`DisableSpdy:` + fmt.Sprintf("%#v", this.DisableSpdy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_EnableSpdy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_EnableSpdy{` +
		`EnableSpdy:` + fmt.Sprintf("%#v", this.EnableSpdy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableWebSocketConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DisableWebSocketConfig{` +
		`DisableWebSocketConfig:` + fmt.Sprintf("%#v", this.DisableWebSocketConfig) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_WebSocketConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_WebSocketConfig{` +
		`WebSocketConfig:` + fmt.Sprintf("%#v", this.WebSocketConfig) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DefaultRetryPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DefaultRetryPolicy{` +
		`DefaultRetryPolicy:` + fmt.Sprintf("%#v", this.DefaultRetryPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_RetryPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_RetryPolicy{` +
		`RetryPolicy:` + fmt.Sprintf("%#v", this.RetryPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_CommonBuffering) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_CommonBuffering{` +
		`CommonBuffering:` + fmt.Sprintf("%#v", this.CommonBuffering) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_BufferPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_BufferPolicy{` +
		`BufferPolicy:` + fmt.Sprintf("%#v", this.BufferPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableMirroring) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DisableMirroring{` +
		`DisableMirroring:` + fmt.Sprintf("%#v", this.DisableMirroring) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_MirrorPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_MirrorPolicy{` +
		`MirrorPolicy:` + fmt.Sprintf("%#v", this.MirrorPolicy) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_RetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_RetractCluster{` +
		`RetractCluster:` + fmt.Sprintf("%#v", this.RetractCluster) + `}`}, ", ")
	return s
}
func (this *RouteSimpleAdvancedOptions_DoNotRetractCluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteSimpleAdvancedOptions_DoNotRetractCluster{` +
		`DoNotRetractCluster:` + fmt.Sprintf("%#v", this.DoNotRetractCluster) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool{")
	s = append(s, "HttpMethod: "+fmt.Sprintf("%#v", this.HttpMethod)+",\n")
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	if this.HostRewriteParams != nil {
		s = append(s, "HostRewriteParams: "+fmt.Sprintf("%#v", this.HostRewriteParams)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite{` +
		`AutoHostRewrite:` + fmt.Sprintf("%#v", this.AutoHostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool_HostRewrite{` +
		`HostRewrite:` + fmt.Sprintf("%#v", this.HostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite{` +
		`DisableHostRewrite:` + fmt.Sprintf("%#v", this.DisableHostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimple) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&http_loadbalancer.RouteTypeSimple{")
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "HttpMethod: "+fmt.Sprintf("%#v", this.HttpMethod)+",\n")
	if this.OriginPools != nil {
		s = append(s, "OriginPools: "+fmt.Sprintf("%#v", this.OriginPools)+",\n")
	}
	if this.HostRewriteParams != nil {
		s = append(s, "HostRewriteParams: "+fmt.Sprintf("%#v", this.HostRewriteParams)+",\n")
	}
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	if this.AdvancedOptions != nil {
		s = append(s, "AdvancedOptions: "+fmt.Sprintf("%#v", this.AdvancedOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteTypeSimple_AutoHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimple_AutoHostRewrite{` +
		`AutoHostRewrite:` + fmt.Sprintf("%#v", this.AutoHostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimple_HostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimple_HostRewrite{` +
		`HostRewrite:` + fmt.Sprintf("%#v", this.HostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeSimple_DisableHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteTypeSimple_DisableHostRewrite{` +
		`DisableHostRewrite:` + fmt.Sprintf("%#v", this.DisableHostRewrite) + `}`}, ", ")
	return s
}
func (this *RouteTypeRedirect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&http_loadbalancer.RouteTypeRedirect{")
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "HttpMethod: "+fmt.Sprintf("%#v", this.HttpMethod)+",\n")
	if this.RouteRedirect != nil {
		s = append(s, "RouteRedirect: "+fmt.Sprintf("%#v", this.RouteRedirect)+",\n")
	}
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteTypeDirectResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&http_loadbalancer.RouteTypeDirectResponse{")
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "HttpMethod: "+fmt.Sprintf("%#v", this.HttpMethod)+",\n")
	if this.RouteDirectResponse != nil {
		s = append(s, "RouteDirectResponse: "+fmt.Sprintf("%#v", this.RouteDirectResponse)+",\n")
	}
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteTypeCustomRoute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.RouteTypeCustomRoute{")
	if this.RouteRef != nil {
		s = append(s, "RouteRef: "+fmt.Sprintf("%#v", this.RouteRef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&http_loadbalancer.RouteType{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteType_SimpleRoute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteType_SimpleRoute{` +
		`SimpleRoute:` + fmt.Sprintf("%#v", this.SimpleRoute) + `}`}, ", ")
	return s
}
func (this *RouteType_RedirectRoute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteType_RedirectRoute{` +
		`RedirectRoute:` + fmt.Sprintf("%#v", this.RedirectRoute) + `}`}, ", ")
	return s
}
func (this *RouteType_DirectResponseRoute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteType_DirectResponseRoute{` +
		`DirectResponseRoute:` + fmt.Sprintf("%#v", this.DirectResponseRoute) + `}`}, ", ")
	return s
}
func (this *RouteType_CustomRouteObject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RouteType_CustomRouteObject{` +
		`CustomRouteObject:` + fmt.Sprintf("%#v", this.CustomRouteObject) + `}`}, ", ")
	return s
}
func (this *AdvancedOptionsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&http_loadbalancer.AdvancedOptionsType{")
	if this.RequestHeadersToAdd != nil {
		s = append(s, "RequestHeadersToAdd: "+fmt.Sprintf("%#v", this.RequestHeadersToAdd)+",\n")
	}
	s = append(s, "RequestHeadersToRemove: "+fmt.Sprintf("%#v", this.RequestHeadersToRemove)+",\n")
	if this.ResponseHeadersToAdd != nil {
		s = append(s, "ResponseHeadersToAdd: "+fmt.Sprintf("%#v", this.ResponseHeadersToAdd)+",\n")
	}
	s = append(s, "ResponseHeadersToRemove: "+fmt.Sprintf("%#v", this.ResponseHeadersToRemove)+",\n")
	s = append(s, "MaxRequestHeaderSize: "+fmt.Sprintf("%#v", this.MaxRequestHeaderSize)+",\n")
	if this.BufferPolicy != nil {
		s = append(s, "BufferPolicy: "+fmt.Sprintf("%#v", this.BufferPolicy)+",\n")
	}
	if this.CompressionParams != nil {
		s = append(s, "CompressionParams: "+fmt.Sprintf("%#v", this.CompressionParams)+",\n")
	}
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%#v: %#v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	if this.CustomErrors != nil {
		s = append(s, "CustomErrors: "+mapStringForCustomErrors+",\n")
	}
	if this.JavascriptInfo != nil {
		s = append(s, "JavascriptInfo: "+fmt.Sprintf("%#v", this.JavascriptInfo)+",\n")
	}
	if this.Jwt != nil {
		s = append(s, "Jwt: "+fmt.Sprintf("%#v", this.Jwt)+",\n")
	}
	s = append(s, "IdleTimeout: "+fmt.Sprintf("%#v", this.IdleTimeout)+",\n")
	s = append(s, "DisableDefaultErrorPages: "+fmt.Sprintf("%#v", this.DisableDefaultErrorPages)+",\n")
	if this.PathNormalizeChoice != nil {
		s = append(s, "PathNormalizeChoice: "+fmt.Sprintf("%#v", this.PathNormalizeChoice)+",\n")
	}
	if this.StrictSniHostHeaderCheckChoice != nil {
		s = append(s, "StrictSniHostHeaderCheckChoice: "+fmt.Sprintf("%#v", this.StrictSniHostHeaderCheckChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdvancedOptionsType_EnablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.AdvancedOptionsType_EnablePathNormalize{` +
		`EnablePathNormalize:` + fmt.Sprintf("%#v", this.EnablePathNormalize) + `}`}, ", ")
	return s
}
func (this *AdvancedOptionsType_DisablePathNormalize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.AdvancedOptionsType_DisablePathNormalize{` +
		`DisablePathNormalize:` + fmt.Sprintf("%#v", this.DisablePathNormalize) + `}`}, ", ")
	return s
}
func (this *AdvancedOptionsType_EnableStrictSniHostHeaderCheck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.AdvancedOptionsType_EnableStrictSniHostHeaderCheck{` +
		`EnableStrictSniHostHeaderCheck:` + fmt.Sprintf("%#v", this.EnableStrictSniHostHeaderCheck) + `}`}, ", ")
	return s
}
func (this *AdvancedOptionsType_AdditionalDomains) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.AdvancedOptionsType_AdditionalDomains{` +
		`AdditionalDomains:` + fmt.Sprintf("%#v", this.AdditionalDomains) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&http_loadbalancer.PolicyBasedChallenge{")
	if this.JsChallengeParametersChoice != nil {
		s = append(s, "JsChallengeParametersChoice: "+fmt.Sprintf("%#v", this.JsChallengeParametersChoice)+",\n")
	}
	if this.CaptchaChallengeParametersChoice != nil {
		s = append(s, "CaptchaChallengeParametersChoice: "+fmt.Sprintf("%#v", this.CaptchaChallengeParametersChoice)+",\n")
	}
	if this.TemporaryBlockingParametersChoice != nil {
		s = append(s, "TemporaryBlockingParametersChoice: "+fmt.Sprintf("%#v", this.TemporaryBlockingParametersChoice)+",\n")
	}
	if this.MaliciousUserMitigationChoice != nil {
		s = append(s, "MaliciousUserMitigationChoice: "+fmt.Sprintf("%#v", this.MaliciousUserMitigationChoice)+",\n")
	}
	if this.ChallengeChoice != nil {
		s = append(s, "ChallengeChoice: "+fmt.Sprintf("%#v", this.ChallengeChoice)+",\n")
	}
	if this.RuleList != nil {
		s = append(s, "RuleList: "+fmt.Sprintf("%#v", this.RuleList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PolicyBasedChallenge_DefaultJsChallengeParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_DefaultJsChallengeParameters{` +
		`DefaultJsChallengeParameters:` + fmt.Sprintf("%#v", this.DefaultJsChallengeParameters) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_JsChallengeParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_JsChallengeParameters{` +
		`JsChallengeParameters:` + fmt.Sprintf("%#v", this.JsChallengeParameters) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_DefaultCaptchaChallengeParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_DefaultCaptchaChallengeParameters{` +
		`DefaultCaptchaChallengeParameters:` + fmt.Sprintf("%#v", this.DefaultCaptchaChallengeParameters) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_CaptchaChallengeParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_CaptchaChallengeParameters{` +
		`CaptchaChallengeParameters:` + fmt.Sprintf("%#v", this.CaptchaChallengeParameters) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_DefaultTemporaryBlockingParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_DefaultTemporaryBlockingParameters{` +
		`DefaultTemporaryBlockingParameters:` + fmt.Sprintf("%#v", this.DefaultTemporaryBlockingParameters) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_TemporaryUserBlocking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_TemporaryUserBlocking{` +
		`TemporaryUserBlocking:` + fmt.Sprintf("%#v", this.TemporaryUserBlocking) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_DefaultMitigationSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_DefaultMitigationSettings{` +
		`DefaultMitigationSettings:` + fmt.Sprintf("%#v", this.DefaultMitigationSettings) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_MaliciousUserMitigation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_MaliciousUserMitigation{` +
		`MaliciousUserMitigation:` + fmt.Sprintf("%#v", this.MaliciousUserMitigation) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableJsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_AlwaysEnableJsChallenge{` +
		`AlwaysEnableJsChallenge:` + fmt.Sprintf("%#v", this.AlwaysEnableJsChallenge) + `}`}, ", ")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{` +
		`AlwaysEnableCaptchaChallenge:` + fmt.Sprintf("%#v", this.AlwaysEnableCaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *ChallengeRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&http_loadbalancer.ChallengeRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChallengeRuleList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.ChallengeRuleList{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HttpHeaderMatcherList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.HttpHeaderMatcherList{")
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleClientSrcRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&http_loadbalancer.SimpleClientSrcRule{")
	if this.ClientSourceChoice != nil {
		s = append(s, "ClientSourceChoice: "+fmt.Sprintf("%#v", this.ClientSourceChoice)+",\n")
	}
	if this.ExpirationTimestamp != nil {
		s = append(s, "ExpirationTimestamp: "+fmt.Sprintf("%#v", this.ExpirationTimestamp)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.ActionChoice != nil {
		s = append(s, "ActionChoice: "+fmt.Sprintf("%#v", this.ActionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleClientSrcRule_IpPrefix) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SimpleClientSrcRule_IpPrefix{` +
		`IpPrefix:` + fmt.Sprintf("%#v", this.IpPrefix) + `}`}, ", ")
	return s
}
func (this *SimpleClientSrcRule_AsNumber) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SimpleClientSrcRule_AsNumber{` +
		`AsNumber:` + fmt.Sprintf("%#v", this.AsNumber) + `}`}, ", ")
	return s
}
func (this *SimpleClientSrcRule_HttpHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SimpleClientSrcRule_HttpHeader{` +
		`HttpHeader:` + fmt.Sprintf("%#v", this.HttpHeader) + `}`}, ", ")
	return s
}
func (this *SimpleClientSrcRule_SkipProcessing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SimpleClientSrcRule_SkipProcessing{` +
		`SkipProcessing:` + fmt.Sprintf("%#v", this.SkipProcessing) + `}`}, ", ")
	return s
}
func (this *SimpleClientSrcRule_WafSkipProcessing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SimpleClientSrcRule_WafSkipProcessing{` +
		`WafSkipProcessing:` + fmt.Sprintf("%#v", this.WafSkipProcessing) + `}`}, ", ")
	return s
}
func (this *SimpleClientSrcRule_BotSkipProcessing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SimpleClientSrcRule_BotSkipProcessing{` +
		`BotSkipProcessing:` + fmt.Sprintf("%#v", this.BotSkipProcessing) + `}`}, ", ")
	return s
}
func (this *DDoSClientSource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&http_loadbalancer.DDoSClientSource{")
	if this.AsnList != nil {
		s = append(s, "AsnList: "+fmt.Sprintf("%#v", this.AsnList)+",\n")
	}
	s = append(s, "CountryList: "+fmt.Sprintf("%#v", this.CountryList)+",\n")
	if this.TlsFingerprintMatcher != nil {
		s = append(s, "TlsFingerprintMatcher: "+fmt.Sprintf("%#v", this.TlsFingerprintMatcher)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DDoSMitigationRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&http_loadbalancer.DDoSMitigationRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.MitigationAction != nil {
		s = append(s, "MitigationAction: "+fmt.Sprintf("%#v", this.MitigationAction)+",\n")
	}
	if this.MitigationChoice != nil {
		s = append(s, "MitigationChoice: "+fmt.Sprintf("%#v", this.MitigationChoice)+",\n")
	}
	if this.ExpirationTimestamp != nil {
		s = append(s, "ExpirationTimestamp: "+fmt.Sprintf("%#v", this.ExpirationTimestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DDoSMitigationRule_Block) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.DDoSMitigationRule_Block{` +
		`Block:` + fmt.Sprintf("%#v", this.Block) + `}`}, ", ")
	return s
}
func (this *DDoSMitigationRule_DdosClientSource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.DDoSMitigationRule_DdosClientSource{` +
		`DdosClientSource:` + fmt.Sprintf("%#v", this.DdosClientSource) + `}`}, ", ")
	return s
}
func (this *DDoSMitigationRule_IpPrefixList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.DDoSMitigationRule_IpPrefixList{` +
		`IpPrefixList:` + fmt.Sprintf("%#v", this.IpPrefixList) + `}`}, ", ")
	return s
}
func (this *CustomIpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.CustomIpAllowedList{")
	if this.RateLimiterAllowedPrefixes != nil {
		s = append(s, "RateLimiterAllowedPrefixes: "+fmt.Sprintf("%#v", this.RateLimiterAllowedPrefixes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RateLimitConfigType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&http_loadbalancer.RateLimitConfigType{")
	if this.RateLimiter != nil {
		s = append(s, "RateLimiter: "+fmt.Sprintf("%#v", this.RateLimiter)+",\n")
	}
	if this.IpAllowedListChoice != nil {
		s = append(s, "IpAllowedListChoice: "+fmt.Sprintf("%#v", this.IpAllowedListChoice)+",\n")
	}
	if this.PolicyChoice != nil {
		s = append(s, "PolicyChoice: "+fmt.Sprintf("%#v", this.PolicyChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RateLimitConfigType_NoIpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RateLimitConfigType_NoIpAllowedList{` +
		`NoIpAllowedList:` + fmt.Sprintf("%#v", this.NoIpAllowedList) + `}`}, ", ")
	return s
}
func (this *RateLimitConfigType_IpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RateLimitConfigType_IpAllowedList{` +
		`IpAllowedList:` + fmt.Sprintf("%#v", this.IpAllowedList) + `}`}, ", ")
	return s
}
func (this *RateLimitConfigType_CustomIpAllowedList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RateLimitConfigType_CustomIpAllowedList{` +
		`CustomIpAllowedList:` + fmt.Sprintf("%#v", this.CustomIpAllowedList) + `}`}, ", ")
	return s
}
func (this *RateLimitConfigType_NoPolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RateLimitConfigType_NoPolicies{` +
		`NoPolicies:` + fmt.Sprintf("%#v", this.NoPolicies) + `}`}, ", ")
	return s
}
func (this *RateLimitConfigType_Policies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.RateLimitConfigType_Policies{` +
		`Policies:` + fmt.Sprintf("%#v", this.Policies) + `}`}, ", ")
	return s
}
func (this *ServicePolicyList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.ServicePolicyList{")
	if this.Policies != nil {
		s = append(s, "Policies: "+fmt.Sprintf("%#v", this.Policies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiDefinitionList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.ApiDefinitionList{")
	if this.ApiDefinitions != nil {
		s = append(s, "ApiDefinitions: "+fmt.Sprintf("%#v", this.ApiDefinitions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiDiscoverySetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&http_loadbalancer.ApiDiscoverySetting{")
	if this.LearnFromRedirectTraffic != nil {
		s = append(s, "LearnFromRedirectTraffic: "+fmt.Sprintf("%#v", this.LearnFromRedirectTraffic)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApiDiscoverySetting_DisableLearnFromRedirectTraffic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ApiDiscoverySetting_DisableLearnFromRedirectTraffic{` +
		`DisableLearnFromRedirectTraffic:` + fmt.Sprintf("%#v", this.DisableLearnFromRedirectTraffic) + `}`}, ", ")
	return s
}
func (this *ApiDiscoverySetting_EnableLearnFromRedirectTraffic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ApiDiscoverySetting_EnableLearnFromRedirectTraffic{` +
		`EnableLearnFromRedirectTraffic:` + fmt.Sprintf("%#v", this.EnableLearnFromRedirectTraffic) + `}`}, ", ")
	return s
}
func (this *SingleLoadBalancerAppSetting) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&http_loadbalancer.SingleLoadBalancerAppSetting{")
	if this.ApiDiscoveryChoice != nil {
		s = append(s, "ApiDiscoveryChoice: "+fmt.Sprintf("%#v", this.ApiDiscoveryChoice)+",\n")
	}
	if this.DdosDetectionChoice != nil {
		s = append(s, "DdosDetectionChoice: "+fmt.Sprintf("%#v", this.DdosDetectionChoice)+",\n")
	}
	if this.MaliciousUserDetectionChoice != nil {
		s = append(s, "MaliciousUserDetectionChoice: "+fmt.Sprintf("%#v", this.MaliciousUserDetectionChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SingleLoadBalancerAppSetting_EnableDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SingleLoadBalancerAppSetting_EnableDiscovery{` +
		`EnableDiscovery:` + fmt.Sprintf("%#v", this.EnableDiscovery) + `}`}, ", ")
	return s
}
func (this *SingleLoadBalancerAppSetting_DisableDiscovery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SingleLoadBalancerAppSetting_DisableDiscovery{` +
		`DisableDiscovery:` + fmt.Sprintf("%#v", this.DisableDiscovery) + `}`}, ", ")
	return s
}
func (this *SingleLoadBalancerAppSetting_EnableDdosDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SingleLoadBalancerAppSetting_EnableDdosDetection{` +
		`EnableDdosDetection:` + fmt.Sprintf("%#v", this.EnableDdosDetection) + `}`}, ", ")
	return s
}
func (this *SingleLoadBalancerAppSetting_DisableDdosDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SingleLoadBalancerAppSetting_DisableDdosDetection{` +
		`DisableDdosDetection:` + fmt.Sprintf("%#v", this.DisableDdosDetection) + `}`}, ", ")
	return s
}
func (this *SingleLoadBalancerAppSetting_EnableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SingleLoadBalancerAppSetting_EnableMaliciousUserDetection{` +
		`EnableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.EnableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *SingleLoadBalancerAppSetting_DisableMaliciousUserDetection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.SingleLoadBalancerAppSetting_DisableMaliciousUserDetection{` +
		`DisableMaliciousUserDetection:` + fmt.Sprintf("%#v", this.DisableMaliciousUserDetection) + `}`}, ", ")
	return s
}
func (this *ShapeBotDefenseType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&http_loadbalancer.ShapeBotDefenseType{")
	s = append(s, "RegionalEndpoint: "+fmt.Sprintf("%#v", this.RegionalEndpoint)+",\n")
	if this.Policy != nil {
		s = append(s, "Policy: "+fmt.Sprintf("%#v", this.Policy)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeBotDefensePolicyType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&http_loadbalancer.ShapeBotDefensePolicyType{")
	if this.ProtectedAppEndpoints != nil {
		s = append(s, "ProtectedAppEndpoints: "+fmt.Sprintf("%#v", this.ProtectedAppEndpoints)+",\n")
	}
	if this.JavaScriptChoice != nil {
		s = append(s, "JavaScriptChoice: "+fmt.Sprintf("%#v", this.JavaScriptChoice)+",\n")
	}
	s = append(s, "JsDownloadPath: "+fmt.Sprintf("%#v", this.JsDownloadPath)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeBotDefensePolicyType_DisableJsInsert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ShapeBotDefensePolicyType_DisableJsInsert{` +
		`DisableJsInsert:` + fmt.Sprintf("%#v", this.DisableJsInsert) + `}`}, ", ")
	return s
}
func (this *ShapeBotDefensePolicyType_JsInsertAllPages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ShapeBotDefensePolicyType_JsInsertAllPages{` +
		`JsInsertAllPages:` + fmt.Sprintf("%#v", this.JsInsertAllPages) + `}`}, ", ")
	return s
}
func (this *ShapeBotDefensePolicyType_JsInsertAllPagesExcept) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ShapeBotDefensePolicyType_JsInsertAllPagesExcept{` +
		`JsInsertAllPagesExcept:` + fmt.Sprintf("%#v", this.JsInsertAllPagesExcept) + `}`}, ", ")
	return s
}
func (this *ShapeBotDefensePolicyType_JsInsertionRules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ShapeBotDefensePolicyType_JsInsertionRules{` +
		`JsInsertionRules:` + fmt.Sprintf("%#v", this.JsInsertionRules) + `}`}, ", ")
	return s
}
func (this *AppEndpointType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&http_loadbalancer.AppEndpointType{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "HttpMethods: "+fmt.Sprintf("%#v", this.HttpMethods)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	if this.DomainMatcherChoice != nil {
		s = append(s, "DomainMatcherChoice: "+fmt.Sprintf("%#v", this.DomainMatcherChoice)+",\n")
	}
	if this.AppTrafficTypeChoice != nil {
		s = append(s, "AppTrafficTypeChoice: "+fmt.Sprintf("%#v", this.AppTrafficTypeChoice)+",\n")
	}
	if this.Mitigation != nil {
		s = append(s, "Mitigation: "+fmt.Sprintf("%#v", this.Mitigation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AppEndpointType_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.AppEndpointType_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *AppEndpointType_Domain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.AppEndpointType_Domain{` +
		`Domain:` + fmt.Sprintf("%#v", this.Domain) + `}`}, ", ")
	return s
}
func (this *AppEndpointType_Web) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.AppEndpointType_Web{` +
		`Web:` + fmt.Sprintf("%#v", this.Web) + `}`}, ", ")
	return s
}
func (this *AppEndpointType_Mobile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.AppEndpointType_Mobile{` +
		`Mobile:` + fmt.Sprintf("%#v", this.Mobile) + `}`}, ", ")
	return s
}
func (this *AppEndpointType_WebMobile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.AppEndpointType_WebMobile{` +
		`WebMobile:` + fmt.Sprintf("%#v", this.WebMobile) + `}`}, ", ")
	return s
}
func (this *WebMobileTrafficType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.WebMobileTrafficType{")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeJavaScriptInsertType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&http_loadbalancer.ShapeJavaScriptInsertType{")
	if this.Rules != nil {
		s = append(s, "Rules: "+fmt.Sprintf("%#v", this.Rules)+",\n")
	}
	if this.ExcludeList != nil {
		s = append(s, "ExcludeList: "+fmt.Sprintf("%#v", this.ExcludeList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeJavaScriptInsertAllWithExceptionsType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&http_loadbalancer.ShapeJavaScriptInsertAllWithExceptionsType{")
	s = append(s, "JavascriptLocation: "+fmt.Sprintf("%#v", this.JavascriptLocation)+",\n")
	if this.ExcludeList != nil {
		s = append(s, "ExcludeList: "+fmt.Sprintf("%#v", this.ExcludeList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeJavaScriptInsertAllType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.ShapeJavaScriptInsertAllType{")
	s = append(s, "JavascriptLocation: "+fmt.Sprintf("%#v", this.JavascriptLocation)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeJavaScriptInsertionRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&http_loadbalancer.ShapeJavaScriptInsertionRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.DomainMatcherChoice != nil {
		s = append(s, "DomainMatcherChoice: "+fmt.Sprintf("%#v", this.DomainMatcherChoice)+",\n")
	}
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "JavascriptLocation: "+fmt.Sprintf("%#v", this.JavascriptLocation)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeJavaScriptInsertionRule_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ShapeJavaScriptInsertionRule_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *ShapeJavaScriptInsertionRule_Domain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ShapeJavaScriptInsertionRule_Domain{` +
		`Domain:` + fmt.Sprintf("%#v", this.Domain) + `}`}, ", ")
	return s
}
func (this *ShapeJavaScriptExclusionRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&http_loadbalancer.ShapeJavaScriptExclusionRule{")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.DomainMatcherChoice != nil {
		s = append(s, "DomainMatcherChoice: "+fmt.Sprintf("%#v", this.DomainMatcherChoice)+",\n")
	}
	if this.Path != nil {
		s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShapeJavaScriptExclusionRule_AnyDomain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ShapeJavaScriptExclusionRule_AnyDomain{` +
		`AnyDomain:` + fmt.Sprintf("%#v", this.AnyDomain) + `}`}, ", ")
	return s
}
func (this *ShapeJavaScriptExclusionRule_Domain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ShapeJavaScriptExclusionRule_Domain{` +
		`Domain:` + fmt.Sprintf("%#v", this.Domain) + `}`}, ", ")
	return s
}
func (this *IPThreatCategoryListType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&http_loadbalancer.IPThreatCategoryListType{")
	s = append(s, "IpThreatCategories: "+fmt.Sprintf("%#v", this.IpThreatCategories)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 64)
	s = append(s, "&http_loadbalancer.GlobalSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.DownstreamTlsCertificateExpirationTimestamps != nil {
		s = append(s, "DownstreamTlsCertificateExpirationTimestamps: "+fmt.Sprintf("%#v", this.DownstreamTlsCertificateExpirationTimestamps)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.DefaultRoutePools != nil {
		s = append(s, "DefaultRoutePools: "+fmt.Sprintf("%#v", this.DefaultRoutePools)+",\n")
	}
	if this.HostRewriteParams != nil {
		s = append(s, "HostRewriteParams: "+fmt.Sprintf("%#v", this.HostRewriteParams)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.UserIdChoice != nil {
		s = append(s, "UserIdChoice: "+fmt.Sprintf("%#v", this.UserIdChoice)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	if this.DataGuardRules != nil {
		s = append(s, "DataGuardRules: "+fmt.Sprintf("%#v", this.DataGuardRules)+",\n")
	}
	if this.BlockedClients != nil {
		s = append(s, "BlockedClients: "+fmt.Sprintf("%#v", this.BlockedClients)+",\n")
	}
	if this.TrustedClients != nil {
		s = append(s, "TrustedClients: "+fmt.Sprintf("%#v", this.TrustedClients)+",\n")
	}
	if this.DdosMitigationRules != nil {
		s = append(s, "DdosMitigationRules: "+fmt.Sprintf("%#v", this.DdosMitigationRules)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	if this.MlConfigChoice != nil {
		s = append(s, "MlConfigChoice: "+fmt.Sprintf("%#v", this.MlConfigChoice)+",\n")
	}
	if this.BotDefenseChoice != nil {
		s = append(s, "BotDefenseChoice: "+fmt.Sprintf("%#v", this.BotDefenseChoice)+",\n")
	}
	if this.ApiDefinitionChoice != nil {
		s = append(s, "ApiDefinitionChoice: "+fmt.Sprintf("%#v", this.ApiDefinitionChoice)+",\n")
	}
	if this.IpReputationChoice != nil {
		s = append(s, "IpReputationChoice: "+fmt.Sprintf("%#v", this.IpReputationChoice)+",\n")
	}
	if this.ViewInternal != nil {
		s = append(s, "ViewInternal: "+fmt.Sprintf("%#v", this.ViewInternal)+",\n")
	}
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "AutoCertState: "+fmt.Sprintf("%#v", this.AutoCertState)+",\n")
	if this.AutoCertInfo != nil {
		s = append(s, "AutoCertInfo: "+fmt.Sprintf("%#v", this.AutoCertInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AutoHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_AutoHostRewrite{` +
		`AutoHostRewrite:` + fmt.Sprintf("%#v", this.AutoHostRewrite) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_HostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_HostRewrite{` +
		`HostRewrite:` + fmt.Sprintf("%#v", this.HostRewrite) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableHostRewrite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableHostRewrite{` +
		`DisableHostRewrite:` + fmt.Sprintf("%#v", this.DisableHostRewrite) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Waf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_Waf{` +
		`Waf:` + fmt.Sprintf("%#v", this.Waf) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_WafRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_WafRule{` +
		`WafRule:` + fmt.Sprintf("%#v", this.WafRule) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_AppFirewall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_AppFirewall{` +
		`AppFirewall:` + fmt.Sprintf("%#v", this.AppFirewall) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_UserIdClientIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_UserIdClientIp{` +
		`UserIdClientIp:` + fmt.Sprintf("%#v", this.UserIdClientIp) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_UserIdentification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_UserIdentification{` +
		`UserIdentification:` + fmt.Sprintf("%#v", this.UserIdentification) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ApiRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_ApiRateLimit{` +
		`ApiRateLimit:` + fmt.Sprintf("%#v", this.ApiRateLimit) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_RoundRobin{` +
		`RoundRobin:` + fmt.Sprintf("%#v", this.RoundRobin) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_LeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_LeastActive{` +
		`LeastActive:` + fmt.Sprintf("%#v", this.LeastActive) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_Random) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_Random{` +
		`Random:` + fmt.Sprintf("%#v", this.Random) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_SourceIpStickiness{` +
		`SourceIpStickiness:` + fmt.Sprintf("%#v", this.SourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_CookieStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_CookieStickiness{` +
		`CookieStickiness:` + fmt.Sprintf("%#v", this.CookieStickiness) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_RingHash) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_RingHash{` +
		`RingHash:` + fmt.Sprintf("%#v", this.RingHash) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_SingleLbApp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_SingleLbApp{` +
		`SingleLbApp:` + fmt.Sprintf("%#v", this.SingleLbApp) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_MultiLbApp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_MultiLbApp{` +
		`MultiLbApp:` + fmt.Sprintf("%#v", this.MultiLbApp) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableBotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableBotDefense{` +
		`DisableBotDefense:` + fmt.Sprintf("%#v", this.DisableBotDefense) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_BotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_BotDefense{` +
		`BotDefense:` + fmt.Sprintf("%#v", this.BotDefense) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableApiDefinition{` +
		`DisableApiDefinition:` + fmt.Sprintf("%#v", this.DisableApiDefinition) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_ApiDefinition{` +
		`ApiDefinition:` + fmt.Sprintf("%#v", this.ApiDefinition) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_ApiDefinitions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_ApiDefinitions{` +
		`ApiDefinitions:` + fmt.Sprintf("%#v", this.ApiDefinitions) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_DisableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_DisableIpReputation{` +
		`DisableIpReputation:` + fmt.Sprintf("%#v", this.DisableIpReputation) + `}`}, ", ")
	return s
}
func (this *GlobalSpecType_EnableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GlobalSpecType_EnableIpReputation{` +
		`EnableIpReputation:` + fmt.Sprintf("%#v", this.EnableIpReputation) + `}`}, ", ")
	return s
}
func (this *CreateSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 54)
	s = append(s, "&http_loadbalancer.CreateSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.DefaultRoutePools != nil {
		s = append(s, "DefaultRoutePools: "+fmt.Sprintf("%#v", this.DefaultRoutePools)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.UserIdChoice != nil {
		s = append(s, "UserIdChoice: "+fmt.Sprintf("%#v", this.UserIdChoice)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	if this.DataGuardRules != nil {
		s = append(s, "DataGuardRules: "+fmt.Sprintf("%#v", this.DataGuardRules)+",\n")
	}
	if this.BlockedClients != nil {
		s = append(s, "BlockedClients: "+fmt.Sprintf("%#v", this.BlockedClients)+",\n")
	}
	if this.TrustedClients != nil {
		s = append(s, "TrustedClients: "+fmt.Sprintf("%#v", this.TrustedClients)+",\n")
	}
	if this.DdosMitigationRules != nil {
		s = append(s, "DdosMitigationRules: "+fmt.Sprintf("%#v", this.DdosMitigationRules)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	if this.MlConfigChoice != nil {
		s = append(s, "MlConfigChoice: "+fmt.Sprintf("%#v", this.MlConfigChoice)+",\n")
	}
	if this.BotDefenseChoice != nil {
		s = append(s, "BotDefenseChoice: "+fmt.Sprintf("%#v", this.BotDefenseChoice)+",\n")
	}
	if this.ApiDefinitionChoice != nil {
		s = append(s, "ApiDefinitionChoice: "+fmt.Sprintf("%#v", this.ApiDefinitionChoice)+",\n")
	}
	if this.IpReputationChoice != nil {
		s = append(s, "IpReputationChoice: "+fmt.Sprintf("%#v", this.IpReputationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Waf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_Waf{` +
		`Waf:` + fmt.Sprintf("%#v", this.Waf) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_WafRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_WafRule{` +
		`WafRule:` + fmt.Sprintf("%#v", this.WafRule) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_AppFirewall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_AppFirewall{` +
		`AppFirewall:` + fmt.Sprintf("%#v", this.AppFirewall) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_UserIdClientIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_UserIdClientIp{` +
		`UserIdClientIp:` + fmt.Sprintf("%#v", this.UserIdClientIp) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_UserIdentification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_UserIdentification{` +
		`UserIdentification:` + fmt.Sprintf("%#v", this.UserIdentification) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ApiRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_ApiRateLimit{` +
		`ApiRateLimit:` + fmt.Sprintf("%#v", this.ApiRateLimit) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_RoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_RoundRobin{` +
		`RoundRobin:` + fmt.Sprintf("%#v", this.RoundRobin) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_LeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_LeastActive{` +
		`LeastActive:` + fmt.Sprintf("%#v", this.LeastActive) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_Random) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_Random{` +
		`Random:` + fmt.Sprintf("%#v", this.Random) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_SourceIpStickiness{` +
		`SourceIpStickiness:` + fmt.Sprintf("%#v", this.SourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_CookieStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_CookieStickiness{` +
		`CookieStickiness:` + fmt.Sprintf("%#v", this.CookieStickiness) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_RingHash) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_RingHash{` +
		`RingHash:` + fmt.Sprintf("%#v", this.RingHash) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_SingleLbApp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_SingleLbApp{` +
		`SingleLbApp:` + fmt.Sprintf("%#v", this.SingleLbApp) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_MultiLbApp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_MultiLbApp{` +
		`MultiLbApp:` + fmt.Sprintf("%#v", this.MultiLbApp) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableBotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableBotDefense{` +
		`DisableBotDefense:` + fmt.Sprintf("%#v", this.DisableBotDefense) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_BotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_BotDefense{` +
		`BotDefense:` + fmt.Sprintf("%#v", this.BotDefense) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableApiDefinition{` +
		`DisableApiDefinition:` + fmt.Sprintf("%#v", this.DisableApiDefinition) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_ApiDefinition{` +
		`ApiDefinition:` + fmt.Sprintf("%#v", this.ApiDefinition) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_ApiDefinitions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_ApiDefinitions{` +
		`ApiDefinitions:` + fmt.Sprintf("%#v", this.ApiDefinitions) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_DisableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_DisableIpReputation{` +
		`DisableIpReputation:` + fmt.Sprintf("%#v", this.DisableIpReputation) + `}`}, ", ")
	return s
}
func (this *CreateSpecType_EnableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.CreateSpecType_EnableIpReputation{` +
		`EnableIpReputation:` + fmt.Sprintf("%#v", this.EnableIpReputation) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 54)
	s = append(s, "&http_loadbalancer.ReplaceSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.DefaultRoutePools != nil {
		s = append(s, "DefaultRoutePools: "+fmt.Sprintf("%#v", this.DefaultRoutePools)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.UserIdChoice != nil {
		s = append(s, "UserIdChoice: "+fmt.Sprintf("%#v", this.UserIdChoice)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	if this.DataGuardRules != nil {
		s = append(s, "DataGuardRules: "+fmt.Sprintf("%#v", this.DataGuardRules)+",\n")
	}
	if this.BlockedClients != nil {
		s = append(s, "BlockedClients: "+fmt.Sprintf("%#v", this.BlockedClients)+",\n")
	}
	if this.TrustedClients != nil {
		s = append(s, "TrustedClients: "+fmt.Sprintf("%#v", this.TrustedClients)+",\n")
	}
	if this.DdosMitigationRules != nil {
		s = append(s, "DdosMitigationRules: "+fmt.Sprintf("%#v", this.DdosMitigationRules)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	if this.MlConfigChoice != nil {
		s = append(s, "MlConfigChoice: "+fmt.Sprintf("%#v", this.MlConfigChoice)+",\n")
	}
	if this.BotDefenseChoice != nil {
		s = append(s, "BotDefenseChoice: "+fmt.Sprintf("%#v", this.BotDefenseChoice)+",\n")
	}
	if this.ApiDefinitionChoice != nil {
		s = append(s, "ApiDefinitionChoice: "+fmt.Sprintf("%#v", this.ApiDefinitionChoice)+",\n")
	}
	if this.IpReputationChoice != nil {
		s = append(s, "IpReputationChoice: "+fmt.Sprintf("%#v", this.IpReputationChoice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplaceSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Waf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_Waf{` +
		`Waf:` + fmt.Sprintf("%#v", this.Waf) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_WafRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_WafRule{` +
		`WafRule:` + fmt.Sprintf("%#v", this.WafRule) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_AppFirewall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_AppFirewall{` +
		`AppFirewall:` + fmt.Sprintf("%#v", this.AppFirewall) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_UserIdClientIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_UserIdClientIp{` +
		`UserIdClientIp:` + fmt.Sprintf("%#v", this.UserIdClientIp) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_UserIdentification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_UserIdentification{` +
		`UserIdentification:` + fmt.Sprintf("%#v", this.UserIdentification) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ApiRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_ApiRateLimit{` +
		`ApiRateLimit:` + fmt.Sprintf("%#v", this.ApiRateLimit) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_RoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_RoundRobin{` +
		`RoundRobin:` + fmt.Sprintf("%#v", this.RoundRobin) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_LeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_LeastActive{` +
		`LeastActive:` + fmt.Sprintf("%#v", this.LeastActive) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_Random) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_Random{` +
		`Random:` + fmt.Sprintf("%#v", this.Random) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_SourceIpStickiness{` +
		`SourceIpStickiness:` + fmt.Sprintf("%#v", this.SourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_CookieStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_CookieStickiness{` +
		`CookieStickiness:` + fmt.Sprintf("%#v", this.CookieStickiness) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_RingHash) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_RingHash{` +
		`RingHash:` + fmt.Sprintf("%#v", this.RingHash) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_SingleLbApp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_SingleLbApp{` +
		`SingleLbApp:` + fmt.Sprintf("%#v", this.SingleLbApp) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_MultiLbApp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_MultiLbApp{` +
		`MultiLbApp:` + fmt.Sprintf("%#v", this.MultiLbApp) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableBotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableBotDefense{` +
		`DisableBotDefense:` + fmt.Sprintf("%#v", this.DisableBotDefense) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_BotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_BotDefense{` +
		`BotDefense:` + fmt.Sprintf("%#v", this.BotDefense) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableApiDefinition{` +
		`DisableApiDefinition:` + fmt.Sprintf("%#v", this.DisableApiDefinition) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_ApiDefinition{` +
		`ApiDefinition:` + fmt.Sprintf("%#v", this.ApiDefinition) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_ApiDefinitions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_ApiDefinitions{` +
		`ApiDefinitions:` + fmt.Sprintf("%#v", this.ApiDefinitions) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_DisableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_DisableIpReputation{` +
		`DisableIpReputation:` + fmt.Sprintf("%#v", this.DisableIpReputation) + `}`}, ", ")
	return s
}
func (this *ReplaceSpecType_EnableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.ReplaceSpecType_EnableIpReputation{` +
		`EnableIpReputation:` + fmt.Sprintf("%#v", this.EnableIpReputation) + `}`}, ", ")
	return s
}
func (this *GetSpecType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 60)
	s = append(s, "&http_loadbalancer.GetSpecType{")
	s = append(s, "Domains: "+fmt.Sprintf("%#v", this.Domains)+",\n")
	if this.LoadbalancerType != nil {
		s = append(s, "LoadbalancerType: "+fmt.Sprintf("%#v", this.LoadbalancerType)+",\n")
	}
	if this.DownstreamTlsCertificateExpirationTimestamps != nil {
		s = append(s, "DownstreamTlsCertificateExpirationTimestamps: "+fmt.Sprintf("%#v", this.DownstreamTlsCertificateExpirationTimestamps)+",\n")
	}
	if this.AdvertiseChoice != nil {
		s = append(s, "AdvertiseChoice: "+fmt.Sprintf("%#v", this.AdvertiseChoice)+",\n")
	}
	if this.DefaultRoutePools != nil {
		s = append(s, "DefaultRoutePools: "+fmt.Sprintf("%#v", this.DefaultRoutePools)+",\n")
	}
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	if this.CorsPolicy != nil {
		s = append(s, "CorsPolicy: "+fmt.Sprintf("%#v", this.CorsPolicy)+",\n")
	}
	if this.WafChoice != nil {
		s = append(s, "WafChoice: "+fmt.Sprintf("%#v", this.WafChoice)+",\n")
	}
	s = append(s, "AddLocation: "+fmt.Sprintf("%#v", this.AddLocation)+",\n")
	if this.ChallengeType != nil {
		s = append(s, "ChallengeType: "+fmt.Sprintf("%#v", this.ChallengeType)+",\n")
	}
	if this.MoreOption != nil {
		s = append(s, "MoreOption: "+fmt.Sprintf("%#v", this.MoreOption)+",\n")
	}
	if this.UserIdChoice != nil {
		s = append(s, "UserIdChoice: "+fmt.Sprintf("%#v", this.UserIdChoice)+",\n")
	}
	if this.RateLimitChoice != nil {
		s = append(s, "RateLimitChoice: "+fmt.Sprintf("%#v", this.RateLimitChoice)+",\n")
	}
	if this.MaliciousUserMitigation != nil {
		s = append(s, "MaliciousUserMitigation: "+fmt.Sprintf("%#v", this.MaliciousUserMitigation)+",\n")
	}
	if this.WafExclusionRules != nil {
		s = append(s, "WafExclusionRules: "+fmt.Sprintf("%#v", this.WafExclusionRules)+",\n")
	}
	if this.DataGuardRules != nil {
		s = append(s, "DataGuardRules: "+fmt.Sprintf("%#v", this.DataGuardRules)+",\n")
	}
	if this.BlockedClients != nil {
		s = append(s, "BlockedClients: "+fmt.Sprintf("%#v", this.BlockedClients)+",\n")
	}
	if this.TrustedClients != nil {
		s = append(s, "TrustedClients: "+fmt.Sprintf("%#v", this.TrustedClients)+",\n")
	}
	if this.DdosMitigationRules != nil {
		s = append(s, "DdosMitigationRules: "+fmt.Sprintf("%#v", this.DdosMitigationRules)+",\n")
	}
	if this.ServicePolicyChoice != nil {
		s = append(s, "ServicePolicyChoice: "+fmt.Sprintf("%#v", this.ServicePolicyChoice)+",\n")
	}
	if this.HashPolicyChoice != nil {
		s = append(s, "HashPolicyChoice: "+fmt.Sprintf("%#v", this.HashPolicyChoice)+",\n")
	}
	if this.MlConfigChoice != nil {
		s = append(s, "MlConfigChoice: "+fmt.Sprintf("%#v", this.MlConfigChoice)+",\n")
	}
	if this.BotDefenseChoice != nil {
		s = append(s, "BotDefenseChoice: "+fmt.Sprintf("%#v", this.BotDefenseChoice)+",\n")
	}
	if this.ApiDefinitionChoice != nil {
		s = append(s, "ApiDefinitionChoice: "+fmt.Sprintf("%#v", this.ApiDefinitionChoice)+",\n")
	}
	if this.IpReputationChoice != nil {
		s = append(s, "IpReputationChoice: "+fmt.Sprintf("%#v", this.IpReputationChoice)+",\n")
	}
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.DnsInfo != nil {
		s = append(s, "DnsInfo: "+fmt.Sprintf("%#v", this.DnsInfo)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "AutoCertState: "+fmt.Sprintf("%#v", this.AutoCertState)+",\n")
	if this.AutoCertInfo != nil {
		s = append(s, "AutoCertInfo: "+fmt.Sprintf("%#v", this.AutoCertInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSpecType_Http) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_Http{` +
		`Http:` + fmt.Sprintf("%#v", this.Http) + `}`}, ", ")
	return s
}
func (this *GetSpecType_HttpsAutoCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_HttpsAutoCert{` +
		`HttpsAutoCert:` + fmt.Sprintf("%#v", this.HttpsAutoCert) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Https) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_Https{` +
		`Https:` + fmt.Sprintf("%#v", this.Https) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DoNotAdvertise) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DoNotAdvertise{` +
		`DoNotAdvertise:` + fmt.Sprintf("%#v", this.DoNotAdvertise) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_AdvertiseOnPublicDefaultVip{` +
		`AdvertiseOnPublicDefaultVip:` + fmt.Sprintf("%#v", this.AdvertiseOnPublicDefaultVip) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseOnPublic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_AdvertiseOnPublic{` +
		`AdvertiseOnPublic:` + fmt.Sprintf("%#v", this.AdvertiseOnPublic) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AdvertiseCustom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_AdvertiseCustom{` +
		`AdvertiseCustom:` + fmt.Sprintf("%#v", this.AdvertiseCustom) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableWaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableWaf{` +
		`DisableWaf:` + fmt.Sprintf("%#v", this.DisableWaf) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Waf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_Waf{` +
		`Waf:` + fmt.Sprintf("%#v", this.Waf) + `}`}, ", ")
	return s
}
func (this *GetSpecType_WafRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_WafRule{` +
		`WafRule:` + fmt.Sprintf("%#v", this.WafRule) + `}`}, ", ")
	return s
}
func (this *GetSpecType_AppFirewall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_AppFirewall{` +
		`AppFirewall:` + fmt.Sprintf("%#v", this.AppFirewall) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_NoChallenge{` +
		`NoChallenge:` + fmt.Sprintf("%#v", this.NoChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_JsChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_JsChallenge{` +
		`JsChallenge:` + fmt.Sprintf("%#v", this.JsChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CaptchaChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_CaptchaChallenge{` +
		`CaptchaChallenge:` + fmt.Sprintf("%#v", this.CaptchaChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_PolicyBasedChallenge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_PolicyBasedChallenge{` +
		`PolicyBasedChallenge:` + fmt.Sprintf("%#v", this.PolicyBasedChallenge) + `}`}, ", ")
	return s
}
func (this *GetSpecType_UserIdClientIp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_UserIdClientIp{` +
		`UserIdClientIp:` + fmt.Sprintf("%#v", this.UserIdClientIp) + `}`}, ", ")
	return s
}
func (this *GetSpecType_UserIdentification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_UserIdentification{` +
		`UserIdentification:` + fmt.Sprintf("%#v", this.UserIdentification) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableRateLimit{` +
		`DisableRateLimit:` + fmt.Sprintf("%#v", this.DisableRateLimit) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ApiRateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_ApiRateLimit{` +
		`ApiRateLimit:` + fmt.Sprintf("%#v", this.ApiRateLimit) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RateLimit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_RateLimit{` +
		`RateLimit:` + fmt.Sprintf("%#v", this.RateLimit) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ServicePoliciesFromNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_ServicePoliciesFromNamespace{` +
		`ServicePoliciesFromNamespace:` + fmt.Sprintf("%#v", this.ServicePoliciesFromNamespace) + `}`}, ", ")
	return s
}
func (this *GetSpecType_NoServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_NoServicePolicies{` +
		`NoServicePolicies:` + fmt.Sprintf("%#v", this.NoServicePolicies) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ActiveServicePolicies) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_ActiveServicePolicies{` +
		`ActiveServicePolicies:` + fmt.Sprintf("%#v", this.ActiveServicePolicies) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RoundRobin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_RoundRobin{` +
		`RoundRobin:` + fmt.Sprintf("%#v", this.RoundRobin) + `}`}, ", ")
	return s
}
func (this *GetSpecType_LeastActive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_LeastActive{` +
		`LeastActive:` + fmt.Sprintf("%#v", this.LeastActive) + `}`}, ", ")
	return s
}
func (this *GetSpecType_Random) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_Random{` +
		`Random:` + fmt.Sprintf("%#v", this.Random) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SourceIpStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_SourceIpStickiness{` +
		`SourceIpStickiness:` + fmt.Sprintf("%#v", this.SourceIpStickiness) + `}`}, ", ")
	return s
}
func (this *GetSpecType_CookieStickiness) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_CookieStickiness{` +
		`CookieStickiness:` + fmt.Sprintf("%#v", this.CookieStickiness) + `}`}, ", ")
	return s
}
func (this *GetSpecType_RingHash) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_RingHash{` +
		`RingHash:` + fmt.Sprintf("%#v", this.RingHash) + `}`}, ", ")
	return s
}
func (this *GetSpecType_SingleLbApp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_SingleLbApp{` +
		`SingleLbApp:` + fmt.Sprintf("%#v", this.SingleLbApp) + `}`}, ", ")
	return s
}
func (this *GetSpecType_MultiLbApp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_MultiLbApp{` +
		`MultiLbApp:` + fmt.Sprintf("%#v", this.MultiLbApp) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableBotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableBotDefense{` +
		`DisableBotDefense:` + fmt.Sprintf("%#v", this.DisableBotDefense) + `}`}, ", ")
	return s
}
func (this *GetSpecType_BotDefense) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_BotDefense{` +
		`BotDefense:` + fmt.Sprintf("%#v", this.BotDefense) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableApiDefinition{` +
		`DisableApiDefinition:` + fmt.Sprintf("%#v", this.DisableApiDefinition) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ApiDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_ApiDefinition{` +
		`ApiDefinition:` + fmt.Sprintf("%#v", this.ApiDefinition) + `}`}, ", ")
	return s
}
func (this *GetSpecType_ApiDefinitions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_ApiDefinitions{` +
		`ApiDefinitions:` + fmt.Sprintf("%#v", this.ApiDefinitions) + `}`}, ", ")
	return s
}
func (this *GetSpecType_DisableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_DisableIpReputation{` +
		`DisableIpReputation:` + fmt.Sprintf("%#v", this.DisableIpReputation) + `}`}, ", ")
	return s
}
func (this *GetSpecType_EnableIpReputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&http_loadbalancer.GetSpecType_EnableIpReputation{` +
		`EnableIpReputation:` + fmt.Sprintf("%#v", this.EnableIpReputation) + `}`}, ", ")
	return s
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *InlineRateLimiter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InlineRateLimiter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InlineRateLimiter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CountByChoice != nil {
		{
			size := m.CountByChoice.Size()
			i -= size
			if _, err := m.CountByChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Unit != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Unit))
		i--
		dAtA[i] = 0x10
	}
	if m.Threshold != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InlineRateLimiter_UseHttpLbUserId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InlineRateLimiter_UseHttpLbUserId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseHttpLbUserId != nil {
		{
			size, err := m.UseHttpLbUserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *InlineRateLimiter_RefUserId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InlineRateLimiter_RefUserId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RefUserId != nil {
		{
			size, err := m.RefUserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ServerUrlRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerUrlRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerUrlRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateLimiterChoice != nil {
		{
			size := m.RateLimiterChoice.Size()
			i -= size
			if _, err := m.RateLimiterChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.BasePath) > 0 {
		i -= len(m.BasePath)
		copy(dAtA[i:], m.BasePath)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BasePath)))
		i--
		dAtA[i] = 0x22
	}
	if m.DomainChoice != nil {
		{
			size := m.DomainChoice.Size()
			i -= size
			if _, err := m.DomainChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ServerUrlRule_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerUrlRule_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ServerUrlRule_SpecificDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerUrlRule_SpecificDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SpecificDomain)
	copy(dAtA[i:], m.SpecificDomain)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SpecificDomain)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *ServerUrlRule_InlineRateLimiter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerUrlRule_InlineRateLimiter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InlineRateLimiter != nil {
		{
			size, err := m.InlineRateLimiter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ServerUrlRule_RefRateLimiter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerUrlRule_RefRateLimiter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RefRateLimiter != nil {
		{
			size, err := m.RefRateLimiter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ApiEndpointRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiEndpointRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiEndpointRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateLimiterChoice != nil {
		{
			size := m.RateLimiterChoice.Size()
			i -= size
			if _, err := m.RateLimiterChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiEndpointMethod != nil {
		{
			size, err := m.ApiEndpointMethod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.ApiEndpointPath) > 0 {
		i -= len(m.ApiEndpointPath)
		copy(dAtA[i:], m.ApiEndpointPath)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ApiEndpointPath)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BasePath) > 0 {
		i -= len(m.BasePath)
		copy(dAtA[i:], m.BasePath)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BasePath)))
		i--
		dAtA[i] = 0x22
	}
	if m.DomainChoice != nil {
		{
			size := m.DomainChoice.Size()
			i -= size
			if _, err := m.DomainChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApiEndpointRule_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiEndpointRule_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ApiEndpointRule_SpecificDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiEndpointRule_SpecificDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SpecificDomain)
	copy(dAtA[i:], m.SpecificDomain)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.SpecificDomain)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *ApiEndpointRule_InlineRateLimiter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiEndpointRule_InlineRateLimiter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InlineRateLimiter != nil {
		{
			size, err := m.InlineRateLimiter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ApiEndpointRule_RefRateLimiter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiEndpointRule_RefRateLimiter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RefRateLimiter != nil {
		{
			size, err := m.RefRateLimiter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *APIRateLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiEndpointRules) > 0 {
		for iNdEx := len(m.ApiEndpointRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiEndpointRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ServerUrlRules) > 0 {
		for iNdEx := len(m.ServerUrlRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServerUrlRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.IpAllowedListChoice != nil {
		{
			size := m.IpAllowedListChoice.Size()
			i -= size
			if _, err := m.IpAllowedListChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *APIRateLimit_NoIpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIRateLimit_NoIpAllowedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoIpAllowedList != nil {
		{
			size, err := m.NoIpAllowedList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *APIRateLimit_IpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIRateLimit_IpAllowedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpAllowedList != nil {
		{
			size, err := m.IpAllowedList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *APIRateLimit_CustomIpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIRateLimit_CustomIpAllowedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomIpAllowedList != nil {
		{
			size, err := m.CustomIpAllowedList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamTlsValidationContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamTlsValidationContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsValidationContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CrlChoice != nil {
		{
			size := m.CrlChoice.Size()
			i -= size
			if _, err := m.CrlChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.TrustedCaUrl) > 0 {
		i -= len(m.TrustedCaUrl)
		copy(dAtA[i:], m.TrustedCaUrl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TrustedCaUrl)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamTlsValidationContext_NoCrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsValidationContext_NoCrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoCrl != nil {
		{
			size, err := m.NoCrl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamTlsValidationContext_Crl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsValidationContext_Crl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Crl != nil {
		{
			size, err := m.Crl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamTlsParamsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamTlsParamsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsParamsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MtlsChoice != nil {
		{
			size := m.MtlsChoice.Size()
			i -= size
			if _, err := m.MtlsChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.TlsCertificates) > 0 {
		for iNdEx := len(m.TlsCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TlsCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TlsConfig != nil {
		{
			size, err := m.TlsConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamTlsParamsType_NoMtls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsParamsType_NoMtls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoMtls != nil {
		{
			size, err := m.NoMtls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamTlsParamsType_UseMtls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamTlsParamsType_UseMtls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseMtls != nil {
		{
			size, err := m.UseMtls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyTypeHttps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x78
	}
	if m.PathNormalizeChoice != nil {
		{
			size := m.PathNormalizeChoice.Size()
			i -= size
			if _, err := m.PathNormalizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServerHeaderChoice != nil {
		{
			size := m.ServerHeaderChoice.Size()
			i -= size
			if _, err := m.ServerHeaderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TlsParameters != nil {
		{
			size, err := m.TlsParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AddHsts {
		i--
		if m.AddHsts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.HttpRedirect {
		i--
		if m.HttpRedirect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProxyTypeHttps_DefaultHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_DefaultHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultHeader != nil {
		{
			size, err := m.DefaultHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps_ServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_ServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ServerName)
	copy(dAtA[i:], m.ServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps_AppendServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_AppendServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AppendServerName)
	copy(dAtA[i:], m.AppendServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AppendServerName)))
	i--
	dAtA[i] = 0x3a
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps_PassThrough) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_PassThrough) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PassThrough != nil {
		{
			size, err := m.PassThrough.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps_EnablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_EnablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnablePathNormalize != nil {
		{
			size, err := m.EnablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttps_DisablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttps_DisablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisablePathNormalize != nil {
		{
			size, err := m.DisablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyTypeHttp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if m.DnsVolterraManaged {
		i--
		if m.DnsVolterraManaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProxyTypeHttpsAutoCerts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyTypeHttpsAutoCerts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.PathNormalizeChoice != nil {
		{
			size := m.PathNormalizeChoice.Size()
			i -= size
			if _, err := m.PathNormalizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServerHeaderChoice != nil {
		{
			size := m.ServerHeaderChoice.Size()
			i -= size
			if _, err := m.ServerHeaderChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MtlsChoice != nil {
		{
			size := m.MtlsChoice.Size()
			i -= size
			if _, err := m.MtlsChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TlsConfig != nil {
		{
			size, err := m.TlsConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AddHsts {
		i--
		if m.AddHsts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.HttpRedirect {
		i--
		if m.HttpRedirect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProxyTypeHttpsAutoCerts_NoMtls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_NoMtls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoMtls != nil {
		{
			size, err := m.NoMtls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_UseMtls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_UseMtls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UseMtls != nil {
		{
			size, err := m.UseMtls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_DefaultHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_DefaultHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultHeader != nil {
		{
			size, err := m.DefaultHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_ServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_ServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ServerName)
	copy(dAtA[i:], m.ServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.ServerName)))
	i--
	dAtA[i] = 0x4a
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_AppendServerName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_AppendServerName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.AppendServerName)
	copy(dAtA[i:], m.AppendServerName)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.AppendServerName)))
	i--
	dAtA[i] = 0x52
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_PassThrough) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_PassThrough) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PassThrough != nil {
		{
			size, err := m.PassThrough.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_EnablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_EnablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnablePathNormalize != nil {
		{
			size, err := m.EnablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ProxyTypeHttpsAutoCerts_DisablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyTypeHttpsAutoCerts_DisablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisablePathNormalize != nil {
		{
			size, err := m.DisablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *HashPolicyListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashPolicyListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HashPolicyListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HashPolicy) > 0 {
		for iNdEx := len(m.HashPolicy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HashPolicy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	return len(dAtA) - i, nil
}

func (m *MirrorPolicyType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorPolicyType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MirrorPolicyType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Percent != nil {
		{
			size, err := m.Percent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.OriginPool != nil {
		{
			size, err := m.OriginPool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RouteSimpleAdvancedOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteSimpleAdvancedOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WafChoice != nil {
		{
			size := m.WafChoice.Size()
			i -= size
			if _, err := m.WafChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ClusterRetractChoice != nil {
		{
			size := m.ClusterRetractChoice.Size()
			i -= size
			if _, err := m.ClusterRetractChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MirroringChoice != nil {
		{
			size := m.MirroringChoice.Size()
			i -= size
			if _, err := m.MirroringChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BufferChoice != nil {
		{
			size := m.BufferChoice.Size()
			i -= size
			if _, err := m.BufferChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Timeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.RetryPolicyChoice != nil {
		{
			size := m.RetryPolicyChoice.Size()
			i -= size
			if _, err := m.RetryPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WebsocketChoice != nil {
		{
			size := m.WebsocketChoice.Size()
			i -= size
			if _, err := m.WebsocketChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SpdyChoice != nil {
		{
			size := m.SpdyChoice.Size()
			i -= size
			if _, err := m.SpdyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.DisableLocationAdd {
		i--
		if m.DisableLocationAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for iNdEx := len(m.ResponseHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResponseHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.ResponseHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ResponseHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for iNdEx := len(m.ResponseHeadersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResponseHeadersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for iNdEx := len(m.RequestHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequestHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.RequestHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.RequestHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for iNdEx := len(m.RequestHeadersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestHeadersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.RewriteChoice != nil {
		{
			size := m.RewriteChoice.Size()
			i -= size
			if _, err := m.RewriteChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.EndpointSubsets) > 0 {
		keysForEndpointSubsets := make([]string, 0, len(m.EndpointSubsets))
		for k := range m.EndpointSubsets {
			keysForEndpointSubsets = append(keysForEndpointSubsets, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForEndpointSubsets)
		for iNdEx := len(keysForEndpointSubsets) - 1; iNdEx >= 0; iNdEx-- {
			v := m.EndpointSubsets[string(keysForEndpointSubsets[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForEndpointSubsets[iNdEx])
			copy(dAtA[i:], keysForEndpointSubsets[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(keysForEndpointSubsets[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Priority != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x20
	}
	if m.HashPolicyChoice != nil {
		{
			size := m.HashPolicyChoice.Size()
			i -= size
			if _, err := m.HashPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RouteSimpleAdvancedOptions_CommonHashPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_CommonHashPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CommonHashPolicy != nil {
		{
			size, err := m.CommonHashPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_SpecificHashPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_SpecificHashPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SpecificHashPolicy != nil {
		{
			size, err := m.SpecificHashPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_DisablePrefixRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_DisablePrefixRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisablePrefixRewrite != nil {
		{
			size, err := m.DisablePrefixRewrite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_PrefixRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_PrefixRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PrefixRewrite)
	copy(dAtA[i:], m.PrefixRewrite)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.PrefixRewrite)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_DisableWaf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableWaf != nil {
		{
			size, err := m.DisableWaf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_Waf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_Waf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Waf != nil {
		{
			size, err := m.Waf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_WafRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_WafRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WafRule != nil {
		{
			size, err := m.WafRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_DisableSpdy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_DisableSpdy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableSpdy != nil {
		{
			size, err := m.DisableSpdy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_EnableSpdy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_EnableSpdy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableSpdy != nil {
		{
			size, err := m.EnableSpdy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_DisableWebSocketConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_DisableWebSocketConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableWebSocketConfig != nil {
		{
			size, err := m.DisableWebSocketConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_WebSocketConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_WebSocketConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WebSocketConfig != nil {
		{
			size, err := m.WebSocketConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_DefaultRetryPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_DefaultRetryPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultRetryPolicy != nil {
		{
			size, err := m.DefaultRetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_RetryPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_RetryPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RetryPolicy != nil {
		{
			size, err := m.RetryPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_CommonBuffering) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_CommonBuffering) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CommonBuffering != nil {
		{
			size, err := m.CommonBuffering.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_BufferPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_BufferPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BufferPolicy != nil {
		{
			size, err := m.BufferPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_DisableMirroring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_DisableMirroring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableMirroring != nil {
		{
			size, err := m.DisableMirroring.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_MirrorPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_MirrorPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MirrorPolicy != nil {
		{
			size, err := m.MirrorPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_RetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_RetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RetractCluster != nil {
		{
			size, err := m.RetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_DoNotRetractCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_DoNotRetractCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotRetractCluster != nil {
		{
			size, err := m.DoNotRetractCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RouteSimpleAdvancedOptions_AppFirewall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteSimpleAdvancedOptions_AppFirewall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewall != nil {
		{
			size, err := m.AppFirewall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RouteTypeSimpleWithDefaultOriginPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeSimpleWithDefaultOriginPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HostRewriteParams != nil {
		{
			size := m.HostRewriteParams.Size()
			i -= size
			if _, err := m.HostRewriteParams.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.HttpMethod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpMethod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AutoHostRewrite != nil {
		{
			size, err := m.AutoHostRewrite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.HostRewrite)
	copy(dAtA[i:], m.HostRewrite)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.HostRewrite)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableHostRewrite != nil {
		{
			size, err := m.DisableHostRewrite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *RouteTypeSimple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeSimple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeSimple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for iNdEx := len(m.Headers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Headers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.AdvancedOptions != nil {
		{
			size, err := m.AdvancedOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.HostRewriteParams != nil {
		{
			size := m.HostRewriteParams.Size()
			i -= size
			if _, err := m.HostRewriteParams.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.OriginPools) > 0 {
		for iNdEx := len(m.OriginPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.HttpMethod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpMethod))
		i--
		dAtA[i] = 0x10
	}
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RouteTypeSimple_AutoHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeSimple_AutoHostRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AutoHostRewrite != nil {
		{
			size, err := m.AutoHostRewrite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *RouteTypeSimple_HostRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeSimple_HostRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.HostRewrite)
	copy(dAtA[i:], m.HostRewrite)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.HostRewrite)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *RouteTypeSimple_DisableHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeSimple_DisableHostRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableHostRewrite != nil {
		{
			size, err := m.DisableHostRewrite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *RouteTypeRedirect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeRedirect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeRedirect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for iNdEx := len(m.Headers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Headers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.RouteRedirect != nil {
		{
			size, err := m.RouteRedirect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.HttpMethod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpMethod))
		i--
		dAtA[i] = 0x10
	}
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RouteTypeDirectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeDirectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeDirectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for iNdEx := len(m.Headers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Headers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.RouteDirectResponse != nil {
		{
			size, err := m.RouteDirectResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.HttpMethod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HttpMethod))
		i--
		dAtA[i] = 0x10
	}
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RouteTypeCustomRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTypeCustomRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteTypeCustomRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RouteRef != nil {
		{
			size, err := m.RouteRef.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RouteType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size := m.Choice.Size()
			i -= size
			if _, err := m.Choice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RouteType_SimpleRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteType_SimpleRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SimpleRoute != nil {
		{
			size, err := m.SimpleRoute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *RouteType_RedirectRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteType_RedirectRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RedirectRoute != nil {
		{
			size, err := m.RedirectRoute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RouteType_DirectResponseRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteType_DirectResponseRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectResponseRoute != nil {
		{
			size, err := m.DirectResponseRoute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RouteType_CustomRouteObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteType_CustomRouteObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomRouteObject != nil {
		{
			size, err := m.CustomRouteObject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AdvancedOptionsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvancedOptionsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvancedOptionsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StrictSniHostHeaderCheckChoice != nil {
		{
			size := m.StrictSniHostHeaderCheckChoice.Size()
			i -= size
			if _, err := m.StrictSniHostHeaderCheckChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PathNormalizeChoice != nil {
		{
			size := m.PathNormalizeChoice.Size()
			i -= size
			if _, err := m.PathNormalizeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DisableDefaultErrorPages {
		i--
		if m.DisableDefaultErrorPages {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.IdleTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IdleTimeout))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Jwt) > 0 {
		for iNdEx := len(m.Jwt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Jwt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.JavascriptInfo != nil {
		{
			size, err := m.JavascriptInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CustomErrors) > 0 {
		keysForCustomErrors := make([]uint32, 0, len(m.CustomErrors))
		for k := range m.CustomErrors {
			keysForCustomErrors = append(keysForCustomErrors, uint32(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint32s(keysForCustomErrors)
		for iNdEx := len(keysForCustomErrors) - 1; iNdEx >= 0; iNdEx-- {
			v := m.CustomErrors[uint32(keysForCustomErrors[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintTypes(dAtA, i, uint64(keysForCustomErrors[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.CompressionParams != nil {
		{
			size, err := m.CompressionParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.BufferPolicy != nil {
		{
			size, err := m.BufferPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.MaxRequestHeaderSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxRequestHeaderSize))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for iNdEx := len(m.ResponseHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResponseHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.ResponseHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.ResponseHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for iNdEx := len(m.ResponseHeadersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResponseHeadersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for iNdEx := len(m.RequestHeadersToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequestHeadersToRemove[iNdEx])
			copy(dAtA[i:], m.RequestHeadersToRemove[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.RequestHeadersToRemove[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for iNdEx := len(m.RequestHeadersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestHeadersToAdd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdvancedOptionsType_EnablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvancedOptionsType_EnablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnablePathNormalize != nil {
		{
			size, err := m.EnablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *AdvancedOptionsType_DisablePathNormalize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvancedOptionsType_DisablePathNormalize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisablePathNormalize != nil {
		{
			size, err := m.DisablePathNormalize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *AdvancedOptionsType_EnableStrictSniHostHeaderCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvancedOptionsType_EnableStrictSniHostHeaderCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableStrictSniHostHeaderCheck != nil {
		{
			size, err := m.EnableStrictSniHostHeaderCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *AdvancedOptionsType_AdditionalDomains) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvancedOptionsType_AdditionalDomains) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdditionalDomains != nil {
		{
			size, err := m.AdditionalDomains.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RuleList != nil {
		{
			size, err := m.RuleList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.ChallengeChoice != nil {
		{
			size := m.ChallengeChoice.Size()
			i -= size
			if _, err := m.ChallengeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MaliciousUserMitigationChoice != nil {
		{
			size := m.MaliciousUserMitigationChoice.Size()
			i -= size
			if _, err := m.MaliciousUserMitigationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TemporaryBlockingParametersChoice != nil {
		{
			size := m.TemporaryBlockingParametersChoice.Size()
			i -= size
			if _, err := m.TemporaryBlockingParametersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CaptchaChallengeParametersChoice != nil {
		{
			size := m.CaptchaChallengeParametersChoice.Size()
			i -= size
			if _, err := m.CaptchaChallengeParametersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.JsChallengeParametersChoice != nil {
		{
			size := m.JsChallengeParametersChoice.Size()
			i -= size
			if _, err := m.JsChallengeParametersChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PolicyBasedChallenge_DefaultJsChallengeParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_DefaultJsChallengeParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultJsChallengeParameters != nil {
		{
			size, err := m.DefaultJsChallengeParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_JsChallengeParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_JsChallengeParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallengeParameters != nil {
		{
			size, err := m.JsChallengeParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_DefaultCaptchaChallengeParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_DefaultCaptchaChallengeParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultCaptchaChallengeParameters != nil {
		{
			size, err := m.DefaultCaptchaChallengeParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_CaptchaChallengeParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_CaptchaChallengeParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallengeParameters != nil {
		{
			size, err := m.CaptchaChallengeParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_DefaultTemporaryBlockingParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_DefaultTemporaryBlockingParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultTemporaryBlockingParameters != nil {
		{
			size, err := m.DefaultTemporaryBlockingParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_TemporaryUserBlocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_TemporaryUserBlocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TemporaryUserBlocking != nil {
		{
			size, err := m.TemporaryUserBlocking.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_DefaultMitigationSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_DefaultMitigationSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DefaultMitigationSettings != nil {
		{
			size, err := m.DefaultMitigationSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_MaliciousUserMitigation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_MaliciousUserMitigation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MaliciousUserMitigation != nil {
		{
			size, err := m.MaliciousUserMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_AlwaysEnableJsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_AlwaysEnableJsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AlwaysEnableJsChallenge != nil {
		{
			size, err := m.AlwaysEnableJsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AlwaysEnableCaptchaChallenge != nil {
		{
			size, err := m.AlwaysEnableCaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ChallengeRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeRuleList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeRuleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeRuleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *HttpHeaderMatcherList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpHeaderMatcherList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpHeaderMatcherList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for iNdEx := len(m.Headers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Headers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleClientSrcRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleClientSrcRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleClientSrcRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientSourceChoice != nil {
		{
			size := m.ClientSourceChoice.Size()
			i -= size
			if _, err := m.ClientSourceChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ActionChoice != nil {
		{
			size := m.ActionChoice.Size()
			i -= size
			if _, err := m.ActionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ExpirationTimestamp != nil {
		{
			size, err := m.ExpirationTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}

func (m *SimpleClientSrcRule_IpPrefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleClientSrcRule_IpPrefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.IpPrefix)
	copy(dAtA[i:], m.IpPrefix)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.IpPrefix)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *SimpleClientSrcRule_AsNumber) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleClientSrcRule_AsNumber) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintTypes(dAtA, i, uint64(m.AsNumber))
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *SimpleClientSrcRule_SkipProcessing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleClientSrcRule_SkipProcessing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SkipProcessing != nil {
		{
			size, err := m.SkipProcessing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *SimpleClientSrcRule_WafSkipProcessing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleClientSrcRule_WafSkipProcessing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WafSkipProcessing != nil {
		{
			size, err := m.WafSkipProcessing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *SimpleClientSrcRule_BotSkipProcessing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleClientSrcRule_BotSkipProcessing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotSkipProcessing != nil {
		{
			size, err := m.BotSkipProcessing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *SimpleClientSrcRule_HttpHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleClientSrcRule_HttpHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpHeader != nil {
		{
			size, err := m.HttpHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *DDoSClientSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DDoSClientSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DDoSClientSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TlsFingerprintMatcher != nil {
		{
			size, err := m.TlsFingerprintMatcher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CountryList) > 0 {
		dAtA97 := make([]byte, len(m.CountryList)*10)
		var j96 int
		for _, num := range m.CountryList {
			for num >= 1<<7 {
				dAtA97[j96] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j96++
			}
			dAtA97[j96] = uint8(num)
			j96++
		}
		i -= j96
		copy(dAtA[i:], dAtA97[:j96])
		i = encodeVarintTypes(dAtA, i, uint64(j96))
		i--
		dAtA[i] = 0x1a
	}
	if m.AsnList != nil {
		{
			size, err := m.AsnList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DDoSMitigationRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DDoSMitigationRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DDoSMitigationRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationTimestamp != nil {
		{
			size, err := m.ExpirationTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.MitigationChoice != nil {
		{
			size := m.MitigationChoice.Size()
			i -= size
			if _, err := m.MitigationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MitigationAction != nil {
		{
			size := m.MitigationAction.Size()
			i -= size
			if _, err := m.MitigationAction.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DDoSMitigationRule_Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DDoSMitigationRule_Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DDoSMitigationRule_DdosClientSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DDoSMitigationRule_DdosClientSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DdosClientSource != nil {
		{
			size, err := m.DdosClientSource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *DDoSMitigationRule_IpPrefixList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DDoSMitigationRule_IpPrefixList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpPrefixList != nil {
		{
			size, err := m.IpPrefixList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *CustomIpAllowedList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomIpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomIpAllowedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for iNdEx := len(m.RateLimiterAllowedPrefixes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RateLimiterAllowedPrefixes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	return len(dAtA) - i, nil
}

func (m *RateLimitConfigType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitConfigType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitConfigType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PolicyChoice != nil {
		{
			size := m.PolicyChoice.Size()
			i -= size
			if _, err := m.PolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IpAllowedListChoice != nil {
		{
			size := m.IpAllowedListChoice.Size()
			i -= size
			if _, err := m.IpAllowedListChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RateLimiter != nil {
		{
			size, err := m.RateLimiter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RateLimitConfigType_NoIpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitConfigType_NoIpAllowedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoIpAllowedList != nil {
		{
			size, err := m.NoIpAllowedList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RateLimitConfigType_IpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitConfigType_IpAllowedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IpAllowedList != nil {
		{
			size, err := m.IpAllowedList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RateLimitConfigType_CustomIpAllowedList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitConfigType_CustomIpAllowedList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomIpAllowedList != nil {
		{
			size, err := m.CustomIpAllowedList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *RateLimitConfigType_NoPolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitConfigType_NoPolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoPolicies != nil {
		{
			size, err := m.NoPolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *RateLimitConfigType_Policies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitConfigType_Policies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Policies != nil {
		{
			size, err := m.Policies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ServicePolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicePolicyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicePolicyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for iNdEx := len(m.Policies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Policies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApiDefinitionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiDefinitionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiDefinitionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiDefinitions) > 0 {
		for iNdEx := len(m.ApiDefinitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiDefinitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApiDiscoverySetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiDiscoverySetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiDiscoverySetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LearnFromRedirectTraffic != nil {
		{
			size := m.LearnFromRedirectTraffic.Size()
			i -= size
			if _, err := m.LearnFromRedirectTraffic.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApiDiscoverySetting_DisableLearnFromRedirectTraffic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiDiscoverySetting_DisableLearnFromRedirectTraffic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableLearnFromRedirectTraffic != nil {
		{
			size, err := m.DisableLearnFromRedirectTraffic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ApiDiscoverySetting_EnableLearnFromRedirectTraffic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiDiscoverySetting_EnableLearnFromRedirectTraffic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableLearnFromRedirectTraffic != nil {
		{
			size, err := m.EnableLearnFromRedirectTraffic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SingleLoadBalancerAppSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleLoadBalancerAppSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleLoadBalancerAppSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaliciousUserDetectionChoice != nil {
		{
			size := m.MaliciousUserDetectionChoice.Size()
			i -= size
			if _, err := m.MaliciousUserDetectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DdosDetectionChoice != nil {
		{
			size := m.DdosDetectionChoice.Size()
			i -= size
			if _, err := m.DdosDetectionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ApiDiscoveryChoice != nil {
		{
			size := m.ApiDiscoveryChoice.Size()
			i -= size
			if _, err := m.ApiDiscoveryChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SingleLoadBalancerAppSetting_EnableDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleLoadBalancerAppSetting_EnableDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableDiscovery != nil {
		{
			size, err := m.EnableDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SingleLoadBalancerAppSetting_DisableDiscovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleLoadBalancerAppSetting_DisableDiscovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableDiscovery != nil {
		{
			size, err := m.DisableDiscovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SingleLoadBalancerAppSetting_EnableDdosDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleLoadBalancerAppSetting_EnableDdosDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableDdosDetection != nil {
		{
			size, err := m.EnableDdosDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *SingleLoadBalancerAppSetting_DisableDdosDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleLoadBalancerAppSetting_DisableDdosDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableDdosDetection != nil {
		{
			size, err := m.DisableDdosDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *SingleLoadBalancerAppSetting_EnableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleLoadBalancerAppSetting_EnableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableMaliciousUserDetection != nil {
		{
			size, err := m.EnableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *SingleLoadBalancerAppSetting_DisableMaliciousUserDetection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleLoadBalancerAppSetting_DisableMaliciousUserDetection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableMaliciousUserDetection != nil {
		{
			size, err := m.DisableMaliciousUserDetection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ShapeBotDefenseType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeBotDefenseType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotDefenseType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x18
	}
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RegionalEndpoint != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RegionalEndpoint))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShapeBotDefensePolicyType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeBotDefensePolicyType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotDefensePolicyType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JavaScriptChoice != nil {
		{
			size := m.JavaScriptChoice.Size()
			i -= size
			if _, err := m.JavaScriptChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.JsDownloadPath) > 0 {
		i -= len(m.JsDownloadPath)
		copy(dAtA[i:], m.JsDownloadPath)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.JsDownloadPath)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProtectedAppEndpoints) > 0 {
		for iNdEx := len(m.ProtectedAppEndpoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProtectedAppEndpoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShapeBotDefensePolicyType_DisableJsInsert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotDefensePolicyType_DisableJsInsert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableJsInsert != nil {
		{
			size, err := m.DisableJsInsert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ShapeBotDefensePolicyType_JsInsertAllPages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotDefensePolicyType_JsInsertAllPages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsInsertAllPages != nil {
		{
			size, err := m.JsInsertAllPages.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ShapeBotDefensePolicyType_JsInsertAllPagesExcept) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotDefensePolicyType_JsInsertAllPagesExcept) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsInsertAllPagesExcept != nil {
		{
			size, err := m.JsInsertAllPagesExcept.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ShapeBotDefensePolicyType_JsInsertionRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeBotDefensePolicyType_JsInsertionRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsInsertionRules != nil {
		{
			size, err := m.JsInsertionRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *AppEndpointType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppEndpointType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppEndpointType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mitigation != nil {
		{
			size, err := m.Mitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.AppTrafficTypeChoice != nil {
		{
			size := m.AppTrafficTypeChoice.Size()
			i -= size
			if _, err := m.AppTrafficTypeChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.DomainMatcherChoice != nil {
		{
			size := m.DomainMatcherChoice.Size()
			i -= size
			if _, err := m.DomainMatcherChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Protocol != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x18
	}
	if len(m.HttpMethods) > 0 {
		dAtA126 := make([]byte, len(m.HttpMethods)*10)
		var j125 int
		for _, num := range m.HttpMethods {
			for num >= 1<<7 {
				dAtA126[j125] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j125++
			}
			dAtA126[j125] = uint8(num)
			j125++
		}
		i -= j125
		copy(dAtA[i:], dAtA126[:j125])
		i = encodeVarintTypes(dAtA, i, uint64(j125))
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppEndpointType_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppEndpointType_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *AppEndpointType_Domain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppEndpointType_Domain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Domain != nil {
		{
			size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *AppEndpointType_Web) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppEndpointType_Web) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Web != nil {
		{
			size, err := m.Web.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *AppEndpointType_Mobile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppEndpointType_Mobile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Mobile != nil {
		{
			size, err := m.Mobile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AppEndpointType_WebMobile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppEndpointType_WebMobile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WebMobile != nil {
		{
			size, err := m.WebMobile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *WebMobileTrafficType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebMobileTrafficType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebMobileTrafficType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShapeJavaScriptInsertType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeJavaScriptInsertType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeJavaScriptInsertType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExcludeList) > 0 {
		for iNdEx := len(m.ExcludeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExcludeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShapeJavaScriptInsertAllWithExceptionsType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeJavaScriptInsertAllWithExceptionsType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeJavaScriptInsertAllWithExceptionsType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExcludeList) > 0 {
		for iNdEx := len(m.ExcludeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExcludeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.JavascriptLocation != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.JavascriptLocation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShapeJavaScriptInsertAllType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeJavaScriptInsertAllType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeJavaScriptInsertAllType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JavascriptLocation != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.JavascriptLocation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShapeJavaScriptInsertionRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeJavaScriptInsertionRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeJavaScriptInsertionRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JavascriptLocation != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.JavascriptLocation))
		i--
		dAtA[i] = 0x30
	}
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DomainMatcherChoice != nil {
		{
			size := m.DomainMatcherChoice.Size()
			i -= size
			if _, err := m.DomainMatcherChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShapeJavaScriptInsertionRule_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeJavaScriptInsertionRule_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ShapeJavaScriptInsertionRule_Domain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeJavaScriptInsertionRule_Domain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Domain != nil {
		{
			size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ShapeJavaScriptExclusionRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShapeJavaScriptExclusionRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeJavaScriptExclusionRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DomainMatcherChoice != nil {
		{
			size := m.DomainMatcherChoice.Size()
			i -= size
			if _, err := m.DomainMatcherChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShapeJavaScriptExclusionRule_AnyDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeJavaScriptExclusionRule_AnyDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AnyDomain != nil {
		{
			size, err := m.AnyDomain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ShapeJavaScriptExclusionRule_Domain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShapeJavaScriptExclusionRule_Domain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Domain != nil {
		{
			size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *IPThreatCategoryListType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPThreatCategoryListType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IPThreatCategoryListType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IpThreatCategories) > 0 {
		dAtA143 := make([]byte, len(m.IpThreatCategories)*10)
		var j142 int
		for _, num := range m.IpThreatCategories {
			for num >= 1<<7 {
				dAtA143[j142] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j142++
			}
			dAtA143[j142] = uint8(num)
			j142++
		}
		i -= j142
		copy(dAtA[i:], dAtA143[:j142])
		i = encodeVarintTypes(dAtA, i, uint64(j142))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutoCertInfo != nil {
		{
			size, err := m.AutoCertInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0x92
	}
	if m.AutoCertState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertState))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xe0
	}
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xd8
	}
	if len(m.DnsInfo) > 0 {
		for iNdEx := len(m.DnsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.HostName) > 0 {
		i -= len(m.HostName)
		copy(dAtA[i:], m.HostName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if m.ViewInternal != nil {
		{
			size, err := m.ViewInternal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xc2
	}
	if m.ApiDefinitionChoice != nil {
		{
			size := m.ApiDefinitionChoice.Size()
			i -= size
			if _, err := m.ApiDefinitionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RateLimitChoice != nil {
		{
			size := m.RateLimitChoice.Size()
			i -= size
			if _, err := m.RateLimitChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IpReputationChoice != nil {
		{
			size := m.IpReputationChoice.Size()
			i -= size
			if _, err := m.IpReputationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DataGuardRules) > 0 {
		for iNdEx := len(m.DataGuardRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataGuardRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.DownstreamTlsCertificateExpirationTimestamps) > 0 {
		for iNdEx := len(m.DownstreamTlsCertificateExpirationTimestamps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DownstreamTlsCertificateExpirationTimestamps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xf2
		}
	}
	if m.UserIdChoice != nil {
		{
			size := m.UserIdChoice.Size()
			i -= size
			if _, err := m.UserIdChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BotDefenseChoice != nil {
		{
			size := m.BotDefenseChoice.Size()
			i -= size
			if _, err := m.BotDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MlConfigChoice != nil {
		{
			size := m.MlConfigChoice.Size()
			i -= size
			if _, err := m.MlConfigChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WafChoice != nil {
		{
			size := m.WafChoice.Size()
			i -= size
			if _, err := m.WafChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ChallengeType != nil {
		{
			size := m.ChallengeType.Size()
			i -= size
			if _, err := m.ChallengeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HashPolicyChoice != nil {
		{
			size := m.HashPolicyChoice.Size()
			i -= size
			if _, err := m.HashPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServicePolicyChoice != nil {
		{
			size := m.ServicePolicyChoice.Size()
			i -= size
			if _, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for iNdEx := len(m.DdosMitigationRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DdosMitigationRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.TrustedClients) > 0 {
		for iNdEx := len(m.TrustedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.BlockedClients) > 0 {
		for iNdEx := len(m.BlockedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.WafExclusionRules) > 0 {
		for iNdEx := len(m.WafExclusionRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WafExclusionRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.MaliciousUserMitigation != nil {
		{
			size, err := m.MaliciousUserMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.HostRewriteParams != nil {
		{
			size := m.HostRewriteParams.Size()
			i -= size
			if _, err := m.HostRewriteParams.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MoreOption != nil {
		{
			size, err := m.MoreOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.AddLocation {
		i--
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DefaultRoutePools) > 0 {
		for iNdEx := len(m.DefaultRoutePools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultRoutePools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GlobalSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Http) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Http != nil {
		{
			size, err := m.Http.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Https) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Https != nil {
		{
			size, err := m.Https.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Waf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Waf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Waf != nil {
		{
			size, err := m.Waf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_WafRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_WafRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WafRule != nil {
		{
			size, err := m.WafRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableWaf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableWaf != nil {
		{
			size, err := m.DisableWaf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DoNotAdvertise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertise != nil {
		{
			size, err := m.DoNotAdvertise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_JsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallenge != nil {
		{
			size, err := m.JsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_UserIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_UserIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdentification != nil {
		{
			size, err := m.UserIdentification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableRateLimit != nil {
		{
			size, err := m.DisableRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_RateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RateLimit != nil {
		{
			size, err := m.RateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_CaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HttpsAutoCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsAutoCert != nil {
		{
			size, err := m.HttpsAutoCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AutoHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AutoHostRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AutoHostRewrite != nil {
		{
			size, err := m.AutoHostRewrite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_HostRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_HostRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.HostRewrite)
	copy(dAtA[i:], m.HostRewrite)
	i = encodeVarintTypes(dAtA, i, uint64(len(m.HostRewrite)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xea
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableHostRewrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableHostRewrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableHostRewrite != nil {
		{
			size, err := m.DisableHostRewrite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ServicePoliciesFromNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServicePoliciesFromNamespace != nil {
		{
			size, err := m.ServicePoliciesFromNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_NoServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoServicePolicies != nil {
		{
			size, err := m.NoServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ActiveServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveServicePolicies != nil {
		{
			size, err := m.ActiveServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_RoundRobin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_RoundRobin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RoundRobin != nil {
		{
			size, err := m.RoundRobin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_LeastActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_LeastActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LeastActive != nil {
		{
			size, err := m.LeastActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_Random) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_Random) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Random != nil {
		{
			size, err := m.Random.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SourceIpStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourceIpStickiness != nil {
		{
			size, err := m.SourceIpStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_CookieStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_CookieStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CookieStickiness != nil {
		{
			size, err := m.CookieStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_RingHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_RingHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RingHash != nil {
		{
			size, err := m.RingHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_PolicyBasedChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyBasedChallenge != nil {
		{
			size, err := m.PolicyBasedChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_AppFirewall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_AppFirewall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewall != nil {
		{
			size, err := m.AppFirewall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_SingleLbApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_SingleLbApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SingleLbApp != nil {
		{
			size, err := m.SingleLbApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_MultiLbApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_MultiLbApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultiLbApp != nil {
		{
			size, err := m.MultiLbApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableBotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableBotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableBotDefense != nil {
		{
			size, err := m.DisableBotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_BotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_BotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefense != nil {
		{
			size, err := m.BotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_UserIdClientIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_UserIdClientIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdClientIp != nil {
		{
			size, err := m.UserIdClientIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ApiDefinitions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ApiDefinitions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinitions != nil {
		{
			size, err := m.ApiDefinitions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableIpReputation != nil {
		{
			size, err := m.DisableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_EnableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_EnableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableIpReputation != nil {
		{
			size, err := m.EnableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ApiRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ApiRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiRateLimit != nil {
		{
			size, err := m.ApiRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_DisableApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_DisableApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDefinition != nil {
		{
			size, err := m.DisableApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GlobalSpecType_ApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalSpecType_ApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinition != nil {
		{
			size, err := m.ApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApiDefinitionChoice != nil {
		{
			size := m.ApiDefinitionChoice.Size()
			i -= size
			if _, err := m.ApiDefinitionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RateLimitChoice != nil {
		{
			size := m.RateLimitChoice.Size()
			i -= size
			if _, err := m.RateLimitChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IpReputationChoice != nil {
		{
			size := m.IpReputationChoice.Size()
			i -= size
			if _, err := m.IpReputationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DataGuardRules) > 0 {
		for iNdEx := len(m.DataGuardRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataGuardRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.UserIdChoice != nil {
		{
			size := m.UserIdChoice.Size()
			i -= size
			if _, err := m.UserIdChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BotDefenseChoice != nil {
		{
			size := m.BotDefenseChoice.Size()
			i -= size
			if _, err := m.BotDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MlConfigChoice != nil {
		{
			size := m.MlConfigChoice.Size()
			i -= size
			if _, err := m.MlConfigChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WafChoice != nil {
		{
			size := m.WafChoice.Size()
			i -= size
			if _, err := m.WafChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ChallengeType != nil {
		{
			size := m.ChallengeType.Size()
			i -= size
			if _, err := m.ChallengeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HashPolicyChoice != nil {
		{
			size := m.HashPolicyChoice.Size()
			i -= size
			if _, err := m.HashPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServicePolicyChoice != nil {
		{
			size := m.ServicePolicyChoice.Size()
			i -= size
			if _, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for iNdEx := len(m.DdosMitigationRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DdosMitigationRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.TrustedClients) > 0 {
		for iNdEx := len(m.TrustedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.BlockedClients) > 0 {
		for iNdEx := len(m.BlockedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.WafExclusionRules) > 0 {
		for iNdEx := len(m.WafExclusionRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WafExclusionRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.MaliciousUserMitigation != nil {
		{
			size, err := m.MaliciousUserMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MoreOption != nil {
		{
			size, err := m.MoreOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.AddLocation {
		i--
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DefaultRoutePools) > 0 {
		for iNdEx := len(m.DefaultRoutePools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultRoutePools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Http) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Http != nil {
		{
			size, err := m.Http.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Https) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Https != nil {
		{
			size, err := m.Https.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Waf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Waf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Waf != nil {
		{
			size, err := m.Waf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_WafRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_WafRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WafRule != nil {
		{
			size, err := m.WafRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableWaf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableWaf != nil {
		{
			size, err := m.DisableWaf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DoNotAdvertise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertise != nil {
		{
			size, err := m.DoNotAdvertise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_JsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallenge != nil {
		{
			size, err := m.JsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_UserIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_UserIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdentification != nil {
		{
			size, err := m.UserIdentification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableRateLimit != nil {
		{
			size, err := m.DisableRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_RateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RateLimit != nil {
		{
			size, err := m.RateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_CaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_HttpsAutoCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsAutoCert != nil {
		{
			size, err := m.HttpsAutoCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ServicePoliciesFromNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServicePoliciesFromNamespace != nil {
		{
			size, err := m.ServicePoliciesFromNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_NoServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoServicePolicies != nil {
		{
			size, err := m.NoServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ActiveServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveServicePolicies != nil {
		{
			size, err := m.ActiveServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_RoundRobin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_RoundRobin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RoundRobin != nil {
		{
			size, err := m.RoundRobin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_LeastActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_LeastActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LeastActive != nil {
		{
			size, err := m.LeastActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_Random) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_Random) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Random != nil {
		{
			size, err := m.Random.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_SourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_SourceIpStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourceIpStickiness != nil {
		{
			size, err := m.SourceIpStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_CookieStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_CookieStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CookieStickiness != nil {
		{
			size, err := m.CookieStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_RingHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_RingHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RingHash != nil {
		{
			size, err := m.RingHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_PolicyBasedChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyBasedChallenge != nil {
		{
			size, err := m.PolicyBasedChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_AppFirewall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_AppFirewall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewall != nil {
		{
			size, err := m.AppFirewall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_SingleLbApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_SingleLbApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SingleLbApp != nil {
		{
			size, err := m.SingleLbApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_MultiLbApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_MultiLbApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultiLbApp != nil {
		{
			size, err := m.MultiLbApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableBotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableBotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableBotDefense != nil {
		{
			size, err := m.DisableBotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_BotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_BotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefense != nil {
		{
			size, err := m.BotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_UserIdClientIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_UserIdClientIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdClientIp != nil {
		{
			size, err := m.UserIdClientIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ApiDefinitions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ApiDefinitions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinitions != nil {
		{
			size, err := m.ApiDefinitions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableIpReputation != nil {
		{
			size, err := m.DisableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_EnableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_EnableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableIpReputation != nil {
		{
			size, err := m.EnableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ApiRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ApiRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiRateLimit != nil {
		{
			size, err := m.ApiRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_DisableApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_DisableApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDefinition != nil {
		{
			size, err := m.DisableApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *CreateSpecType_ApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpecType_ApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinition != nil {
		{
			size, err := m.ApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApiDefinitionChoice != nil {
		{
			size := m.ApiDefinitionChoice.Size()
			i -= size
			if _, err := m.ApiDefinitionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RateLimitChoice != nil {
		{
			size := m.RateLimitChoice.Size()
			i -= size
			if _, err := m.RateLimitChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IpReputationChoice != nil {
		{
			size := m.IpReputationChoice.Size()
			i -= size
			if _, err := m.IpReputationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DataGuardRules) > 0 {
		for iNdEx := len(m.DataGuardRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataGuardRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.UserIdChoice != nil {
		{
			size := m.UserIdChoice.Size()
			i -= size
			if _, err := m.UserIdChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BotDefenseChoice != nil {
		{
			size := m.BotDefenseChoice.Size()
			i -= size
			if _, err := m.BotDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MlConfigChoice != nil {
		{
			size := m.MlConfigChoice.Size()
			i -= size
			if _, err := m.MlConfigChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WafChoice != nil {
		{
			size := m.WafChoice.Size()
			i -= size
			if _, err := m.WafChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ChallengeType != nil {
		{
			size := m.ChallengeType.Size()
			i -= size
			if _, err := m.ChallengeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HashPolicyChoice != nil {
		{
			size := m.HashPolicyChoice.Size()
			i -= size
			if _, err := m.HashPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServicePolicyChoice != nil {
		{
			size := m.ServicePolicyChoice.Size()
			i -= size
			if _, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for iNdEx := len(m.DdosMitigationRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DdosMitigationRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.TrustedClients) > 0 {
		for iNdEx := len(m.TrustedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.BlockedClients) > 0 {
		for iNdEx := len(m.BlockedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.WafExclusionRules) > 0 {
		for iNdEx := len(m.WafExclusionRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WafExclusionRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.MaliciousUserMitigation != nil {
		{
			size, err := m.MaliciousUserMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MoreOption != nil {
		{
			size, err := m.MoreOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.AddLocation {
		i--
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DefaultRoutePools) > 0 {
		for iNdEx := len(m.DefaultRoutePools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultRoutePools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Http) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Http != nil {
		{
			size, err := m.Http.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Https) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Https != nil {
		{
			size, err := m.Https.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Waf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Waf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Waf != nil {
		{
			size, err := m.Waf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_WafRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_WafRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WafRule != nil {
		{
			size, err := m.WafRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableWaf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableWaf != nil {
		{
			size, err := m.DisableWaf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DoNotAdvertise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertise != nil {
		{
			size, err := m.DoNotAdvertise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_JsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallenge != nil {
		{
			size, err := m.JsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_UserIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_UserIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdentification != nil {
		{
			size, err := m.UserIdentification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableRateLimit != nil {
		{
			size, err := m.DisableRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_RateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RateLimit != nil {
		{
			size, err := m.RateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_CaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_HttpsAutoCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsAutoCert != nil {
		{
			size, err := m.HttpsAutoCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ServicePoliciesFromNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServicePoliciesFromNamespace != nil {
		{
			size, err := m.ServicePoliciesFromNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_NoServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoServicePolicies != nil {
		{
			size, err := m.NoServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ActiveServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveServicePolicies != nil {
		{
			size, err := m.ActiveServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_RoundRobin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_RoundRobin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RoundRobin != nil {
		{
			size, err := m.RoundRobin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_LeastActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_LeastActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LeastActive != nil {
		{
			size, err := m.LeastActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_Random) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_Random) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Random != nil {
		{
			size, err := m.Random.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_SourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_SourceIpStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourceIpStickiness != nil {
		{
			size, err := m.SourceIpStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_CookieStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_CookieStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CookieStickiness != nil {
		{
			size, err := m.CookieStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_RingHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_RingHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RingHash != nil {
		{
			size, err := m.RingHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_PolicyBasedChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyBasedChallenge != nil {
		{
			size, err := m.PolicyBasedChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_AppFirewall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_AppFirewall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewall != nil {
		{
			size, err := m.AppFirewall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_SingleLbApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_SingleLbApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SingleLbApp != nil {
		{
			size, err := m.SingleLbApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_MultiLbApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_MultiLbApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultiLbApp != nil {
		{
			size, err := m.MultiLbApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableBotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableBotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableBotDefense != nil {
		{
			size, err := m.DisableBotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_BotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_BotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefense != nil {
		{
			size, err := m.BotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_UserIdClientIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_UserIdClientIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdClientIp != nil {
		{
			size, err := m.UserIdClientIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ApiDefinitions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ApiDefinitions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinitions != nil {
		{
			size, err := m.ApiDefinitions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableIpReputation != nil {
		{
			size, err := m.DisableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_EnableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_EnableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableIpReputation != nil {
		{
			size, err := m.EnableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ApiRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ApiRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiRateLimit != nil {
		{
			size, err := m.ApiRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_DisableApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_DisableApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDefinition != nil {
		{
			size, err := m.DisableApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *ReplaceSpecType_ApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceSpecType_ApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinition != nil {
		{
			size, err := m.ApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpecType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutoCertInfo != nil {
		{
			size, err := m.AutoCertInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3f
		i--
		dAtA[i] = 0x92
	}
	if m.AutoCertState != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AutoCertState))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xe0
	}
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xd8
	}
	if len(m.DnsInfo) > 0 {
		for iNdEx := len(m.DnsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DnsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.HostName) > 0 {
		i -= len(m.HostName)
		copy(dAtA[i:], m.HostName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HostName)))
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	if m.ApiDefinitionChoice != nil {
		{
			size := m.ApiDefinitionChoice.Size()
			i -= size
			if _, err := m.ApiDefinitionChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RateLimitChoice != nil {
		{
			size := m.RateLimitChoice.Size()
			i -= size
			if _, err := m.RateLimitChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IpReputationChoice != nil {
		{
			size := m.IpReputationChoice.Size()
			i -= size
			if _, err := m.IpReputationChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DataGuardRules) > 0 {
		for iNdEx := len(m.DataGuardRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataGuardRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.DownstreamTlsCertificateExpirationTimestamps) > 0 {
		for iNdEx := len(m.DownstreamTlsCertificateExpirationTimestamps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DownstreamTlsCertificateExpirationTimestamps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xf2
		}
	}
	if m.UserIdChoice != nil {
		{
			size := m.UserIdChoice.Size()
			i -= size
			if _, err := m.UserIdChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BotDefenseChoice != nil {
		{
			size := m.BotDefenseChoice.Size()
			i -= size
			if _, err := m.BotDefenseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MlConfigChoice != nil {
		{
			size := m.MlConfigChoice.Size()
			i -= size
			if _, err := m.MlConfigChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WafChoice != nil {
		{
			size := m.WafChoice.Size()
			i -= size
			if _, err := m.WafChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ChallengeType != nil {
		{
			size := m.ChallengeType.Size()
			i -= size
			if _, err := m.ChallengeType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HashPolicyChoice != nil {
		{
			size := m.HashPolicyChoice.Size()
			i -= size
			if _, err := m.HashPolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ServicePolicyChoice != nil {
		{
			size := m.ServicePolicyChoice.Size()
			i -= size
			if _, err := m.ServicePolicyChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for iNdEx := len(m.DdosMitigationRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DdosMitigationRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.TrustedClients) > 0 {
		for iNdEx := len(m.TrustedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TrustedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.BlockedClients) > 0 {
		for iNdEx := len(m.BlockedClients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedClients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.WafExclusionRules) > 0 {
		for iNdEx := len(m.WafExclusionRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WafExclusionRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.MaliciousUserMitigation != nil {
		{
			size, err := m.MaliciousUserMitigation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.LoadbalancerType != nil {
		{
			size := m.LoadbalancerType.Size()
			i -= size
			if _, err := m.LoadbalancerType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MoreOption != nil {
		{
			size, err := m.MoreOption.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.AddLocation {
		i--
		if m.AddLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.AdvertiseChoice != nil {
		{
			size := m.AdvertiseChoice.Size()
			i -= size
			if _, err := m.AdvertiseChoice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CorsPolicy != nil {
		{
			size, err := m.CorsPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DefaultRoutePools) > 0 {
		for iNdEx := len(m.DefaultRoutePools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultRoutePools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Domains[iNdEx])
			copy(dAtA[i:], m.Domains[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Domains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSpecType_Http) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Http) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Http != nil {
		{
			size, err := m.Http.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Https) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Https) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Https != nil {
		{
			size, err := m.Https.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AdvertiseOnPublic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AdvertiseOnPublic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublic != nil {
		{
			size, err := m.AdvertiseOnPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AdvertiseCustom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AdvertiseCustom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseCustom != nil {
		{
			size, err := m.AdvertiseCustom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Waf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Waf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Waf != nil {
		{
			size, err := m.Waf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_WafRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_WafRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WafRule != nil {
		{
			size, err := m.WafRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableWaf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableWaf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableWaf != nil {
		{
			size, err := m.DisableWaf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DoNotAdvertise) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DoNotAdvertise) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DoNotAdvertise != nil {
		{
			size, err := m.DoNotAdvertise.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AdvertiseOnPublicDefaultVip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AdvertiseOnPublicDefaultVip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseOnPublicDefaultVip != nil {
		{
			size, err := m.AdvertiseOnPublicDefaultVip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_JsChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_JsChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsChallenge != nil {
		{
			size, err := m.JsChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_UserIdentification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_UserIdentification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdentification != nil {
		{
			size, err := m.UserIdentification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableRateLimit != nil {
		{
			size, err := m.DisableRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_RateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_RateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RateLimit != nil {
		{
			size, err := m.RateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_CaptchaChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_CaptchaChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CaptchaChallenge != nil {
		{
			size, err := m.CaptchaChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NoChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoChallenge != nil {
		{
			size, err := m.NoChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_HttpsAutoCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_HttpsAutoCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpsAutoCert != nil {
		{
			size, err := m.HttpsAutoCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ServicePoliciesFromNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ServicePoliciesFromNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServicePoliciesFromNamespace != nil {
		{
			size, err := m.ServicePoliciesFromNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_NoServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_NoServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoServicePolicies != nil {
		{
			size, err := m.NoServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ActiveServicePolicies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ActiveServicePolicies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveServicePolicies != nil {
		{
			size, err := m.ActiveServicePolicies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_RoundRobin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_RoundRobin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RoundRobin != nil {
		{
			size, err := m.RoundRobin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_LeastActive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_LeastActive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LeastActive != nil {
		{
			size, err := m.LeastActive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_Random) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_Random) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Random != nil {
		{
			size, err := m.Random.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_SourceIpStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SourceIpStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourceIpStickiness != nil {
		{
			size, err := m.SourceIpStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_CookieStickiness) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_CookieStickiness) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CookieStickiness != nil {
		{
			size, err := m.CookieStickiness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_RingHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_RingHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RingHash != nil {
		{
			size, err := m.RingHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_PolicyBasedChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_PolicyBasedChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyBasedChallenge != nil {
		{
			size, err := m.PolicyBasedChallenge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_AppFirewall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_AppFirewall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppFirewall != nil {
		{
			size, err := m.AppFirewall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_SingleLbApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_SingleLbApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SingleLbApp != nil {
		{
			size, err := m.SingleLbApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_MultiLbApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_MultiLbApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultiLbApp != nil {
		{
			size, err := m.MultiLbApp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableBotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableBotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableBotDefense != nil {
		{
			size, err := m.DisableBotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_BotDefense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_BotDefense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BotDefense != nil {
		{
			size, err := m.BotDefense.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_UserIdClientIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_UserIdClientIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserIdClientIp != nil {
		{
			size, err := m.UserIdClientIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ApiDefinitions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ApiDefinitions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinitions != nil {
		{
			size, err := m.ApiDefinitions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableIpReputation != nil {
		{
			size, err := m.DisableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_EnableIpReputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_EnableIpReputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableIpReputation != nil {
		{
			size, err := m.EnableIpReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ApiRateLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ApiRateLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiRateLimit != nil {
		{
			size, err := m.ApiRateLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_DisableApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_DisableApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DisableApiDefinition != nil {
		{
			size, err := m.DisableApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *GetSpecType_ApiDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSpecType_ApiDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiDefinition != nil {
		{
			size, err := m.ApiDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InlineRateLimiter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Threshold != 0 {
		n += 1 + sovTypes(uint64(m.Threshold))
	}
	if m.Unit != 0 {
		n += 1 + sovTypes(uint64(m.Unit))
	}
	if m.CountByChoice != nil {
		n += m.CountByChoice.Size()
	}
	return n
}

func (m *InlineRateLimiter_UseHttpLbUserId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseHttpLbUserId != nil {
		l = m.UseHttpLbUserId.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *InlineRateLimiter_RefUserId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RefUserId != nil {
		l = m.RefUserId.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServerUrlRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainChoice != nil {
		n += m.DomainChoice.Size()
	}
	l = len(m.BasePath)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RateLimiterChoice != nil {
		n += m.RateLimiterChoice.Size()
	}
	return n
}

func (m *ServerUrlRule_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServerUrlRule_SpecificDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificDomain)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ServerUrlRule_InlineRateLimiter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InlineRateLimiter != nil {
		l = m.InlineRateLimiter.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServerUrlRule_RefRateLimiter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RefRateLimiter != nil {
		l = m.RefRateLimiter.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ApiEndpointRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainChoice != nil {
		n += m.DomainChoice.Size()
	}
	l = len(m.BasePath)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ApiEndpointPath)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ApiEndpointMethod != nil {
		l = m.ApiEndpointMethod.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RateLimiterChoice != nil {
		n += m.RateLimiterChoice.Size()
	}
	return n
}

func (m *ApiEndpointRule_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ApiEndpointRule_SpecificDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecificDomain)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ApiEndpointRule_InlineRateLimiter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InlineRateLimiter != nil {
		l = m.InlineRateLimiter.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ApiEndpointRule_RefRateLimiter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RefRateLimiter != nil {
		l = m.RefRateLimiter.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *APIRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpAllowedListChoice != nil {
		n += m.IpAllowedListChoice.Size()
	}
	if len(m.ServerUrlRules) > 0 {
		for _, e := range m.ServerUrlRules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ApiEndpointRules) > 0 {
		for _, e := range m.ApiEndpointRules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *APIRateLimit_NoIpAllowedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoIpAllowedList != nil {
		l = m.NoIpAllowedList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *APIRateLimit_IpAllowedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpAllowedList != nil {
		l = m.IpAllowedList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *APIRateLimit_CustomIpAllowedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomIpAllowedList != nil {
		l = m.CustomIpAllowedList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DownstreamTlsValidationContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TrustedCaUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CrlChoice != nil {
		n += m.CrlChoice.Size()
	}
	return n
}

func (m *DownstreamTlsValidationContext_NoCrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoCrl != nil {
		l = m.NoCrl.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DownstreamTlsValidationContext_Crl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Crl != nil {
		l = m.Crl.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DownstreamTlsParamsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsConfig != nil {
		l = m.TlsConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.TlsCertificates) > 0 {
		for _, e := range m.TlsCertificates {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.MtlsChoice != nil {
		n += m.MtlsChoice.Size()
	}
	return n
}

func (m *DownstreamTlsParamsType_NoMtls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoMtls != nil {
		l = m.NoMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DownstreamTlsParamsType_UseMtls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseMtls != nil {
		l = m.UseMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpRedirect {
		n += 2
	}
	if m.AddHsts {
		n += 2
	}
	if m.TlsParameters != nil {
		l = m.TlsParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServerHeaderChoice != nil {
		n += m.ServerHeaderChoice.Size()
	}
	if m.PathNormalizeChoice != nil {
		n += m.PathNormalizeChoice.Size()
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	return n
}

func (m *ProxyTypeHttps_DefaultHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultHeader != nil {
		l = m.DefaultHeader.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttps_ServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ProxyTypeHttps_AppendServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppendServerName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ProxyTypeHttps_PassThrough) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PassThrough != nil {
		l = m.PassThrough.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttps_EnablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnablePathNormalize != nil {
		l = m.EnablePathNormalize.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttps_DisablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisablePathNormalize != nil {
		l = m.DisablePathNormalize.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsVolterraManaged {
		n += 2
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	return n
}

func (m *ProxyTypeHttpsAutoCerts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpRedirect {
		n += 2
	}
	if m.AddHsts {
		n += 2
	}
	if m.TlsConfig != nil {
		l = m.TlsConfig.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MtlsChoice != nil {
		n += m.MtlsChoice.Size()
	}
	if m.ServerHeaderChoice != nil {
		n += m.ServerHeaderChoice.Size()
	}
	if m.PathNormalizeChoice != nil {
		n += m.PathNormalizeChoice.Size()
	}
	if m.Port != 0 {
		n += 2 + sovTypes(uint64(m.Port))
	}
	return n
}

func (m *ProxyTypeHttpsAutoCerts_NoMtls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoMtls != nil {
		l = m.NoMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttpsAutoCerts_UseMtls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseMtls != nil {
		l = m.UseMtls.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttpsAutoCerts_DefaultHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultHeader != nil {
		l = m.DefaultHeader.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttpsAutoCerts_ServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ProxyTypeHttpsAutoCerts_AppendServerName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppendServerName)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *ProxyTypeHttpsAutoCerts_PassThrough) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PassThrough != nil {
		l = m.PassThrough.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttpsAutoCerts_EnablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnablePathNormalize != nil {
		l = m.EnablePathNormalize.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ProxyTypeHttpsAutoCerts_DisablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisablePathNormalize != nil {
		l = m.DisablePathNormalize.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *HashPolicyListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HashPolicy) > 0 {
		for _, e := range m.HashPolicy {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *MirrorPolicyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OriginPool != nil {
		l = m.OriginPool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Percent != nil {
		l = m.Percent.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RouteSimpleAdvancedOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.Priority != 0 {
		n += 1 + sovTypes(uint64(m.Priority))
	}
	if len(m.EndpointSubsets) > 0 {
		for k, v := range m.EndpointSubsets {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.RewriteChoice != nil {
		n += m.RewriteChoice.Size()
	}
	if len(m.RequestHeadersToAdd) > 0 {
		for _, e := range m.RequestHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, e := range m.ResponseHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.DisableLocationAdd {
		n += 2
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.SpdyChoice != nil {
		n += m.SpdyChoice.Size()
	}
	if m.WebsocketChoice != nil {
		n += m.WebsocketChoice.Size()
	}
	if m.RetryPolicyChoice != nil {
		n += m.RetryPolicyChoice.Size()
	}
	if m.Timeout != 0 {
		n += 2 + sovTypes(uint64(m.Timeout))
	}
	if m.BufferChoice != nil {
		n += m.BufferChoice.Size()
	}
	if m.MirroringChoice != nil {
		n += m.MirroringChoice.Size()
	}
	if m.ClusterRetractChoice != nil {
		n += m.ClusterRetractChoice.Size()
	}
	return n
}

func (m *RouteSimpleAdvancedOptions_CommonHashPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommonHashPolicy != nil {
		l = m.CommonHashPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_SpecificHashPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpecificHashPolicy != nil {
		l = m.SpecificHashPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DisablePrefixRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisablePrefixRewrite != nil {
		l = m.DisablePrefixRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_PrefixRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PrefixRewrite)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *RouteSimpleAdvancedOptions_DisableWaf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_Waf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Waf != nil {
		l = m.Waf.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_WafRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WafRule != nil {
		l = m.WafRule.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DisableSpdy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableSpdy != nil {
		l = m.DisableSpdy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_EnableSpdy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableSpdy != nil {
		l = m.EnableSpdy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DisableWebSocketConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableWebSocketConfig != nil {
		l = m.DisableWebSocketConfig.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_WebSocketConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WebSocketConfig != nil {
		l = m.WebSocketConfig.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DefaultRetryPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultRetryPolicy != nil {
		l = m.DefaultRetryPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_RetryPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetryPolicy != nil {
		l = m.RetryPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_CommonBuffering) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommonBuffering != nil {
		l = m.CommonBuffering.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_BufferPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BufferPolicy != nil {
		l = m.BufferPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DisableMirroring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableMirroring != nil {
		l = m.DisableMirroring.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_MirrorPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MirrorPolicy != nil {
		l = m.MirrorPolicy.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_RetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetractCluster != nil {
		l = m.RetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_DoNotRetractCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotRetractCluster != nil {
		l = m.DoNotRetractCluster.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteSimpleAdvancedOptions_AppFirewall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewall != nil {
		l = m.AppFirewall.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeSimpleWithDefaultOriginPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpMethod != 0 {
		n += 1 + sovTypes(uint64(m.HttpMethod))
	}
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HostRewriteParams != nil {
		n += m.HostRewriteParams.Size()
	}
	return n
}

func (m *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoHostRewrite != nil {
		l = m.AutoHostRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostRewrite)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableHostRewrite != nil {
		l = m.DisableHostRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeSimple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HttpMethod != 0 {
		n += 1 + sovTypes(uint64(m.HttpMethod))
	}
	if len(m.OriginPools) > 0 {
		for _, e := range m.OriginPools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.HostRewriteParams != nil {
		n += m.HostRewriteParams.Size()
	}
	if m.AdvancedOptions != nil {
		l = m.AdvancedOptions.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *RouteTypeSimple_AutoHostRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoHostRewrite != nil {
		l = m.AutoHostRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeSimple_HostRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostRewrite)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *RouteTypeSimple_DisableHostRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableHostRewrite != nil {
		l = m.DisableHostRewrite.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteTypeRedirect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HttpMethod != 0 {
		n += 1 + sovTypes(uint64(m.HttpMethod))
	}
	if m.RouteRedirect != nil {
		l = m.RouteRedirect.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *RouteTypeDirectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HttpMethod != 0 {
		n += 1 + sovTypes(uint64(m.HttpMethod))
	}
	if m.RouteDirectResponse != nil {
		l = m.RouteDirectResponse.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *RouteTypeCustomRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteRef != nil {
		l = m.RouteRef.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *RouteType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		n += m.Choice.Size()
	}
	return n
}

func (m *RouteType_SimpleRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SimpleRoute != nil {
		l = m.SimpleRoute.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteType_RedirectRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RedirectRoute != nil {
		l = m.RedirectRoute.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteType_DirectResponseRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectResponseRoute != nil {
		l = m.DirectResponseRoute.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RouteType_CustomRouteObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomRouteObject != nil {
		l = m.CustomRouteObject.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AdvancedOptionsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestHeadersToAdd) > 0 {
		for _, e := range m.RequestHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RequestHeadersToRemove) > 0 {
		for _, s := range m.RequestHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToAdd) > 0 {
		for _, e := range m.ResponseHeadersToAdd {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ResponseHeadersToRemove) > 0 {
		for _, s := range m.ResponseHeadersToRemove {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.MaxRequestHeaderSize != 0 {
		n += 1 + sovTypes(uint64(m.MaxRequestHeaderSize))
	}
	if m.BufferPolicy != nil {
		l = m.BufferPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CompressionParams != nil {
		l = m.CompressionParams.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.CustomErrors) > 0 {
		for k, v := range m.CustomErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.JavascriptInfo != nil {
		l = m.JavascriptInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Jwt) > 0 {
		for _, e := range m.Jwt {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.IdleTimeout != 0 {
		n += 1 + sovTypes(uint64(m.IdleTimeout))
	}
	if m.DisableDefaultErrorPages {
		n += 2
	}
	if m.PathNormalizeChoice != nil {
		n += m.PathNormalizeChoice.Size()
	}
	if m.StrictSniHostHeaderCheckChoice != nil {
		n += m.StrictSniHostHeaderCheckChoice.Size()
	}
	return n
}

func (m *AdvancedOptionsType_EnablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnablePathNormalize != nil {
		l = m.EnablePathNormalize.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AdvancedOptionsType_DisablePathNormalize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisablePathNormalize != nil {
		l = m.DisablePathNormalize.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AdvancedOptionsType_EnableStrictSniHostHeaderCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableStrictSniHostHeaderCheck != nil {
		l = m.EnableStrictSniHostHeaderCheck.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AdvancedOptionsType_AdditionalDomains) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdditionalDomains != nil {
		l = m.AdditionalDomains.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallengeParametersChoice != nil {
		n += m.JsChallengeParametersChoice.Size()
	}
	if m.CaptchaChallengeParametersChoice != nil {
		n += m.CaptchaChallengeParametersChoice.Size()
	}
	if m.TemporaryBlockingParametersChoice != nil {
		n += m.TemporaryBlockingParametersChoice.Size()
	}
	if m.MaliciousUserMitigationChoice != nil {
		n += m.MaliciousUserMitigationChoice.Size()
	}
	if m.ChallengeChoice != nil {
		n += m.ChallengeChoice.Size()
	}
	if m.RuleList != nil {
		l = m.RuleList.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PolicyBasedChallenge_DefaultJsChallengeParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultJsChallengeParameters != nil {
		l = m.DefaultJsChallengeParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_JsChallengeParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallengeParameters != nil {
		l = m.JsChallengeParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_DefaultCaptchaChallengeParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultCaptchaChallengeParameters != nil {
		l = m.DefaultCaptchaChallengeParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_CaptchaChallengeParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallengeParameters != nil {
		l = m.CaptchaChallengeParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_DefaultTemporaryBlockingParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultTemporaryBlockingParameters != nil {
		l = m.DefaultTemporaryBlockingParameters.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_TemporaryUserBlocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TemporaryUserBlocking != nil {
		l = m.TemporaryUserBlocking.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_DefaultMitigationSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultMitigationSettings != nil {
		l = m.DefaultMitigationSettings.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_MaliciousUserMitigation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_AlwaysEnableJsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AlwaysEnableJsChallenge != nil {
		l = m.AlwaysEnableJsChallenge.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AlwaysEnableCaptchaChallenge != nil {
		l = m.AlwaysEnableCaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ChallengeRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ChallengeRuleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *HttpHeaderMatcherList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *SimpleClientSrcRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientSourceChoice != nil {
		n += m.ClientSourceChoice.Size()
	}
	if m.ExpirationTimestamp != nil {
		l = m.ExpirationTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ActionChoice != nil {
		n += m.ActionChoice.Size()
	}
	return n
}

func (m *SimpleClientSrcRule_IpPrefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IpPrefix)
	n += 1 + l + sovTypes(uint64(l))
	return n
}
func (m *SimpleClientSrcRule_AsNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTypes(uint64(m.AsNumber))
	return n
}
func (m *SimpleClientSrcRule_SkipProcessing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SkipProcessing != nil {
		l = m.SkipProcessing.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SimpleClientSrcRule_WafSkipProcessing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WafSkipProcessing != nil {
		l = m.WafSkipProcessing.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SimpleClientSrcRule_BotSkipProcessing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotSkipProcessing != nil {
		l = m.BotSkipProcessing.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SimpleClientSrcRule_HttpHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpHeader != nil {
		l = m.HttpHeader.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DDoSClientSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsnList != nil {
		l = m.AsnList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.CountryList) > 0 {
		l = 0
		for _, e := range m.CountryList {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.TlsFingerprintMatcher != nil {
		l = m.TlsFingerprintMatcher.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DDoSMitigationRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MitigationAction != nil {
		n += m.MitigationAction.Size()
	}
	if m.MitigationChoice != nil {
		n += m.MitigationChoice.Size()
	}
	if m.ExpirationTimestamp != nil {
		l = m.ExpirationTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DDoSMitigationRule_Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DDoSMitigationRule_DdosClientSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DdosClientSource != nil {
		l = m.DdosClientSource.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *DDoSMitigationRule_IpPrefixList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpPrefixList != nil {
		l = m.IpPrefixList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CustomIpAllowedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RateLimiterAllowedPrefixes) > 0 {
		for _, e := range m.RateLimiterAllowedPrefixes {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *RateLimitConfigType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimiter != nil {
		l = m.RateLimiter.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.IpAllowedListChoice != nil {
		n += m.IpAllowedListChoice.Size()
	}
	if m.PolicyChoice != nil {
		n += m.PolicyChoice.Size()
	}
	return n
}

func (m *RateLimitConfigType_NoIpAllowedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoIpAllowedList != nil {
		l = m.NoIpAllowedList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RateLimitConfigType_IpAllowedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IpAllowedList != nil {
		l = m.IpAllowedList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RateLimitConfigType_CustomIpAllowedList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomIpAllowedList != nil {
		l = m.CustomIpAllowedList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RateLimitConfigType_NoPolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoPolicies != nil {
		l = m.NoPolicies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *RateLimitConfigType_Policies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Policies != nil {
		l = m.Policies.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ServicePolicyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ApiDefinitionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApiDefinitions) > 0 {
		for _, e := range m.ApiDefinitions {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ApiDiscoverySetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LearnFromRedirectTraffic != nil {
		n += m.LearnFromRedirectTraffic.Size()
	}
	return n
}

func (m *ApiDiscoverySetting_DisableLearnFromRedirectTraffic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableLearnFromRedirectTraffic != nil {
		l = m.DisableLearnFromRedirectTraffic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ApiDiscoverySetting_EnableLearnFromRedirectTraffic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableLearnFromRedirectTraffic != nil {
		l = m.EnableLearnFromRedirectTraffic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SingleLoadBalancerAppSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDiscoveryChoice != nil {
		n += m.ApiDiscoveryChoice.Size()
	}
	if m.DdosDetectionChoice != nil {
		n += m.DdosDetectionChoice.Size()
	}
	if m.MaliciousUserDetectionChoice != nil {
		n += m.MaliciousUserDetectionChoice.Size()
	}
	return n
}

func (m *SingleLoadBalancerAppSetting_EnableDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableDiscovery != nil {
		l = m.EnableDiscovery.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SingleLoadBalancerAppSetting_DisableDiscovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableDiscovery != nil {
		l = m.DisableDiscovery.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SingleLoadBalancerAppSetting_EnableDdosDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableDdosDetection != nil {
		l = m.EnableDdosDetection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SingleLoadBalancerAppSetting_DisableDdosDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableDdosDetection != nil {
		l = m.DisableDdosDetection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SingleLoadBalancerAppSetting_EnableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableMaliciousUserDetection != nil {
		l = m.EnableMaliciousUserDetection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *SingleLoadBalancerAppSetting_DisableMaliciousUserDetection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableMaliciousUserDetection != nil {
		l = m.DisableMaliciousUserDetection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ShapeBotDefenseType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegionalEndpoint != 0 {
		n += 1 + sovTypes(uint64(m.RegionalEndpoint))
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovTypes(uint64(m.Timeout))
	}
	return n
}

func (m *ShapeBotDefensePolicyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProtectedAppEndpoints) > 0 {
		for _, e := range m.ProtectedAppEndpoints {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.JsDownloadPath)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.JavaScriptChoice != nil {
		n += m.JavaScriptChoice.Size()
	}
	return n
}

func (m *ShapeBotDefensePolicyType_DisableJsInsert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableJsInsert != nil {
		l = m.DisableJsInsert.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ShapeBotDefensePolicyType_JsInsertAllPages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsInsertAllPages != nil {
		l = m.JsInsertAllPages.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ShapeBotDefensePolicyType_JsInsertAllPagesExcept) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsInsertAllPagesExcept != nil {
		l = m.JsInsertAllPagesExcept.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ShapeBotDefensePolicyType_JsInsertionRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsInsertionRules != nil {
		l = m.JsInsertionRules.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AppEndpointType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.HttpMethods) > 0 {
		l = 0
		for _, e := range m.HttpMethods {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.Protocol != 0 {
		n += 1 + sovTypes(uint64(m.Protocol))
	}
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DomainMatcherChoice != nil {
		n += m.DomainMatcherChoice.Size()
	}
	if m.AppTrafficTypeChoice != nil {
		n += m.AppTrafficTypeChoice.Size()
	}
	if m.Mitigation != nil {
		l = m.Mitigation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AppEndpointType_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AppEndpointType_Domain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Domain != nil {
		l = m.Domain.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AppEndpointType_Web) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Web != nil {
		l = m.Web.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AppEndpointType_Mobile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mobile != nil {
		l = m.Mobile.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *AppEndpointType_WebMobile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WebMobile != nil {
		l = m.WebMobile.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *WebMobileTrafficType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ShapeJavaScriptInsertType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ExcludeList) > 0 {
		for _, e := range m.ExcludeList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ShapeJavaScriptInsertAllWithExceptionsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JavascriptLocation != 0 {
		n += 1 + sovTypes(uint64(m.JavascriptLocation))
	}
	if len(m.ExcludeList) > 0 {
		for _, e := range m.ExcludeList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ShapeJavaScriptInsertAllType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JavascriptLocation != 0 {
		n += 1 + sovTypes(uint64(m.JavascriptLocation))
	}
	return n
}

func (m *ShapeJavaScriptInsertionRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DomainMatcherChoice != nil {
		n += m.DomainMatcherChoice.Size()
	}
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.JavascriptLocation != 0 {
		n += 1 + sovTypes(uint64(m.JavascriptLocation))
	}
	return n
}

func (m *ShapeJavaScriptInsertionRule_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ShapeJavaScriptInsertionRule_Domain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Domain != nil {
		l = m.Domain.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ShapeJavaScriptExclusionRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DomainMatcherChoice != nil {
		n += m.DomainMatcherChoice.Size()
	}
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ShapeJavaScriptExclusionRule_AnyDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnyDomain != nil {
		l = m.AnyDomain.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ShapeJavaScriptExclusionRule_Domain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Domain != nil {
		l = m.Domain.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *IPThreatCategoryListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IpThreatCategories) > 0 {
		l = 0
		for _, e := range m.IpThreatCategories {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *GlobalSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, e := range m.DefaultRoutePools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.AddLocation {
		n += 3
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UserIdChoice != nil {
		n += m.UserIdChoice.Size()
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if m.HostRewriteParams != nil {
		n += m.HostRewriteParams.Size()
	}
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, e := range m.BlockedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TrustedClients) > 0 {
		for _, e := range m.TrustedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for _, e := range m.DdosMitigationRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.MlConfigChoice != nil {
		n += m.MlConfigChoice.Size()
	}
	if m.BotDefenseChoice != nil {
		n += m.BotDefenseChoice.Size()
	}
	if m.ApiDefinitionChoice != nil {
		n += m.ApiDefinitionChoice.Size()
	}
	if len(m.DownstreamTlsCertificateExpirationTimestamps) > 0 {
		for _, e := range m.DownstreamTlsCertificateExpirationTimestamps {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DataGuardRules) > 0 {
		for _, e := range m.DataGuardRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.IpReputationChoice != nil {
		n += m.IpReputationChoice.Size()
	}
	if m.ViewInternal != nil {
		l = m.ViewInternal.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.State != 0 {
		n += 2 + sovTypes(uint64(m.State))
	}
	if m.AutoCertState != 0 {
		n += 2 + sovTypes(uint64(m.AutoCertState))
	}
	if m.AutoCertInfo != nil {
		l = m.AutoCertInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GlobalSpecType_Http) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Https) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Waf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Waf != nil {
		l = m.Waf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_WafRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WafRule != nil {
		l = m.WafRule.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableWaf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DoNotAdvertise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_JsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_UserIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HttpsAutoCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AutoHostRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoHostRewrite != nil {
		l = m.AutoHostRewrite.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_HostRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostRewrite)
	n += 2 + l + sovTypes(uint64(l))
	return n
}
func (m *GlobalSpecType_DisableHostRewrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableHostRewrite != nil {
		l = m.DisableHostRewrite.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_NoServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ActiveServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RoundRobin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundRobin != nil {
		l = m.RoundRobin.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_LeastActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeastActive != nil {
		l = m.LeastActive.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_Random) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Random != nil {
		l = m.Random.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SourceIpStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceIpStickiness != nil {
		l = m.SourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_CookieStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CookieStickiness != nil {
		l = m.CookieStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_RingHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RingHash != nil {
		l = m.RingHash.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_PolicyBasedChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_AppFirewall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewall != nil {
		l = m.AppFirewall.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_SingleLbApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SingleLbApp != nil {
		l = m.SingleLbApp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_MultiLbApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultiLbApp != nil {
		l = m.MultiLbApp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableBotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableBotDefense != nil {
		l = m.DisableBotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_BotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefense != nil {
		l = m.BotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_UserIdClientIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdClientIp != nil {
		l = m.UserIdClientIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ApiDefinitions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinitions != nil {
		l = m.ApiDefinitions.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableIpReputation != nil {
		l = m.DisableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_EnableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableIpReputation != nil {
		l = m.EnableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ApiRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiRateLimit != nil {
		l = m.ApiRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_DisableApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDefinition != nil {
		l = m.DisableApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GlobalSpecType_ApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinition != nil {
		l = m.ApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, e := range m.DefaultRoutePools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.AddLocation {
		n += 3
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UserIdChoice != nil {
		n += m.UserIdChoice.Size()
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, e := range m.BlockedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TrustedClients) > 0 {
		for _, e := range m.TrustedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for _, e := range m.DdosMitigationRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.MlConfigChoice != nil {
		n += m.MlConfigChoice.Size()
	}
	if m.BotDefenseChoice != nil {
		n += m.BotDefenseChoice.Size()
	}
	if m.ApiDefinitionChoice != nil {
		n += m.ApiDefinitionChoice.Size()
	}
	if len(m.DataGuardRules) > 0 {
		for _, e := range m.DataGuardRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.IpReputationChoice != nil {
		n += m.IpReputationChoice.Size()
	}
	return n
}

func (m *CreateSpecType_Http) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Https) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Waf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Waf != nil {
		l = m.Waf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_WafRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WafRule != nil {
		l = m.WafRule.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableWaf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DoNotAdvertise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_JsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_UserIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_RateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_HttpsAutoCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_NoServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ActiveServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_RoundRobin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundRobin != nil {
		l = m.RoundRobin.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_LeastActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeastActive != nil {
		l = m.LeastActive.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_Random) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Random != nil {
		l = m.Random.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SourceIpStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceIpStickiness != nil {
		l = m.SourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_CookieStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CookieStickiness != nil {
		l = m.CookieStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_RingHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RingHash != nil {
		l = m.RingHash.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_PolicyBasedChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_AppFirewall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewall != nil {
		l = m.AppFirewall.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_SingleLbApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SingleLbApp != nil {
		l = m.SingleLbApp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_MultiLbApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultiLbApp != nil {
		l = m.MultiLbApp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableBotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableBotDefense != nil {
		l = m.DisableBotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_BotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefense != nil {
		l = m.BotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_UserIdClientIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdClientIp != nil {
		l = m.UserIdClientIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ApiDefinitions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinitions != nil {
		l = m.ApiDefinitions.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableIpReputation != nil {
		l = m.DisableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_EnableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableIpReputation != nil {
		l = m.EnableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ApiRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiRateLimit != nil {
		l = m.ApiRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_DisableApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDefinition != nil {
		l = m.DisableApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *CreateSpecType_ApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinition != nil {
		l = m.ApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, e := range m.DefaultRoutePools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.AddLocation {
		n += 3
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UserIdChoice != nil {
		n += m.UserIdChoice.Size()
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, e := range m.BlockedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TrustedClients) > 0 {
		for _, e := range m.TrustedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for _, e := range m.DdosMitigationRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.MlConfigChoice != nil {
		n += m.MlConfigChoice.Size()
	}
	if m.BotDefenseChoice != nil {
		n += m.BotDefenseChoice.Size()
	}
	if m.ApiDefinitionChoice != nil {
		n += m.ApiDefinitionChoice.Size()
	}
	if len(m.DataGuardRules) > 0 {
		for _, e := range m.DataGuardRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.IpReputationChoice != nil {
		n += m.IpReputationChoice.Size()
	}
	return n
}

func (m *ReplaceSpecType_Http) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Https) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Waf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Waf != nil {
		l = m.Waf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_WafRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WafRule != nil {
		l = m.WafRule.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableWaf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DoNotAdvertise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_JsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_UserIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_RateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_CaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_HttpsAutoCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_NoServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ActiveServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_RoundRobin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundRobin != nil {
		l = m.RoundRobin.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_LeastActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeastActive != nil {
		l = m.LeastActive.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_Random) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Random != nil {
		l = m.Random.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SourceIpStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceIpStickiness != nil {
		l = m.SourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_CookieStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CookieStickiness != nil {
		l = m.CookieStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_RingHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RingHash != nil {
		l = m.RingHash.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_PolicyBasedChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_AppFirewall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewall != nil {
		l = m.AppFirewall.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_SingleLbApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SingleLbApp != nil {
		l = m.SingleLbApp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_MultiLbApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultiLbApp != nil {
		l = m.MultiLbApp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableBotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableBotDefense != nil {
		l = m.DisableBotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_BotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefense != nil {
		l = m.BotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_UserIdClientIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdClientIp != nil {
		l = m.UserIdClientIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ApiDefinitions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinitions != nil {
		l = m.ApiDefinitions.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableIpReputation != nil {
		l = m.DisableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_EnableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableIpReputation != nil {
		l = m.EnableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ApiRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiRateLimit != nil {
		l = m.ApiRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_DisableApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDefinition != nil {
		l = m.DisableApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *ReplaceSpecType_ApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinition != nil {
		l = m.ApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LoadbalancerType != nil {
		n += m.LoadbalancerType.Size()
	}
	if m.AdvertiseChoice != nil {
		n += m.AdvertiseChoice.Size()
	}
	if len(m.DefaultRoutePools) > 0 {
		for _, e := range m.DefaultRoutePools {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CorsPolicy != nil {
		l = m.CorsPolicy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WafChoice != nil {
		n += m.WafChoice.Size()
	}
	if m.AddLocation {
		n += 3
	}
	if m.ChallengeType != nil {
		n += m.ChallengeType.Size()
	}
	if m.MoreOption != nil {
		l = m.MoreOption.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.UserIdChoice != nil {
		n += m.UserIdChoice.Size()
	}
	if m.RateLimitChoice != nil {
		n += m.RateLimitChoice.Size()
	}
	if m.MaliciousUserMitigation != nil {
		l = m.MaliciousUserMitigation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.WafExclusionRules) > 0 {
		for _, e := range m.WafExclusionRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.BlockedClients) > 0 {
		for _, e := range m.BlockedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.TrustedClients) > 0 {
		for _, e := range m.TrustedClients {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DdosMitigationRules) > 0 {
		for _, e := range m.DdosMitigationRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.ServicePolicyChoice != nil {
		n += m.ServicePolicyChoice.Size()
	}
	if m.HashPolicyChoice != nil {
		n += m.HashPolicyChoice.Size()
	}
	if m.MlConfigChoice != nil {
		n += m.MlConfigChoice.Size()
	}
	if m.BotDefenseChoice != nil {
		n += m.BotDefenseChoice.Size()
	}
	if m.ApiDefinitionChoice != nil {
		n += m.ApiDefinitionChoice.Size()
	}
	if len(m.DownstreamTlsCertificateExpirationTimestamps) > 0 {
		for _, e := range m.DownstreamTlsCertificateExpirationTimestamps {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.DataGuardRules) > 0 {
		for _, e := range m.DataGuardRules {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.IpReputationChoice != nil {
		n += m.IpReputationChoice.Size()
	}
	l = len(m.HostName)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if len(m.DnsInfo) > 0 {
		for _, e := range m.DnsInfo {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if m.State != 0 {
		n += 2 + sovTypes(uint64(m.State))
	}
	if m.AutoCertState != 0 {
		n += 2 + sovTypes(uint64(m.AutoCertState))
	}
	if m.AutoCertInfo != nil {
		l = m.AutoCertInfo.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GetSpecType_Http) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Https) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Https != nil {
		l = m.Https.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseOnPublic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublic != nil {
		l = m.AdvertiseOnPublic.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseCustom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseCustom != nil {
		l = m.AdvertiseCustom.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Waf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Waf != nil {
		l = m.Waf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_WafRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WafRule != nil {
		l = m.WafRule.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableWaf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableWaf != nil {
		l = m.DisableWaf.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DoNotAdvertise) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotAdvertise != nil {
		l = m.DoNotAdvertise.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AdvertiseOnPublicDefaultVip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseOnPublicDefaultVip != nil {
		l = m.AdvertiseOnPublicDefaultVip.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_JsChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsChallenge != nil {
		l = m.JsChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_UserIdentification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdentification != nil {
		l = m.UserIdentification.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableRateLimit != nil {
		l = m.DisableRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimit != nil {
		l = m.RateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CaptchaChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CaptchaChallenge != nil {
		l = m.CaptchaChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoChallenge != nil {
		l = m.NoChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_HttpsAutoCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpsAutoCert != nil {
		l = m.HttpsAutoCert.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ServicePoliciesFromNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServicePoliciesFromNamespace != nil {
		l = m.ServicePoliciesFromNamespace.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_NoServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoServicePolicies != nil {
		l = m.NoServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ActiveServicePolicies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveServicePolicies != nil {
		l = m.ActiveServicePolicies.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RoundRobin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundRobin != nil {
		l = m.RoundRobin.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_LeastActive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeastActive != nil {
		l = m.LeastActive.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_Random) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Random != nil {
		l = m.Random.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SourceIpStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceIpStickiness != nil {
		l = m.SourceIpStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_CookieStickiness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CookieStickiness != nil {
		l = m.CookieStickiness.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_RingHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RingHash != nil {
		l = m.RingHash.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_PolicyBasedChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyBasedChallenge != nil {
		l = m.PolicyBasedChallenge.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_AppFirewall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppFirewall != nil {
		l = m.AppFirewall.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_SingleLbApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SingleLbApp != nil {
		l = m.SingleLbApp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_MultiLbApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultiLbApp != nil {
		l = m.MultiLbApp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableBotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableBotDefense != nil {
		l = m.DisableBotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_BotDefense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotDefense != nil {
		l = m.BotDefense.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_UserIdClientIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserIdClientIp != nil {
		l = m.UserIdClientIp.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ApiDefinitions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinitions != nil {
		l = m.ApiDefinitions.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableIpReputation != nil {
		l = m.DisableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_EnableIpReputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableIpReputation != nil {
		l = m.EnableIpReputation.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ApiRateLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiRateLimit != nil {
		l = m.ApiRateLimit.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_DisableApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableApiDefinition != nil {
		l = m.DisableApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *GetSpecType_ApiDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiDefinition != nil {
		l = m.ApiDefinition.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *InlineRateLimiter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InlineRateLimiter{`,
		`Threshold:` + fmt.Sprintf("%v", this.Threshold) + `,`,
		`Unit:` + fmt.Sprintf("%v", this.Unit) + `,`,
		`CountByChoice:` + fmt.Sprintf("%v", this.CountByChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InlineRateLimiter_UseHttpLbUserId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InlineRateLimiter_UseHttpLbUserId{`,
		`UseHttpLbUserId:` + strings.Replace(fmt.Sprintf("%v", this.UseHttpLbUserId), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InlineRateLimiter_RefUserId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InlineRateLimiter_RefUserId{`,
		`RefUserId:` + strings.Replace(fmt.Sprintf("%v", this.RefUserId), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerUrlRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerUrlRule{`,
		`DomainChoice:` + fmt.Sprintf("%v", this.DomainChoice) + `,`,
		`BasePath:` + fmt.Sprintf("%v", this.BasePath) + `,`,
		`RateLimiterChoice:` + fmt.Sprintf("%v", this.RateLimiterChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerUrlRule_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerUrlRule_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerUrlRule_SpecificDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerUrlRule_SpecificDomain{`,
		`SpecificDomain:` + fmt.Sprintf("%v", this.SpecificDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerUrlRule_InlineRateLimiter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerUrlRule_InlineRateLimiter{`,
		`InlineRateLimiter:` + strings.Replace(fmt.Sprintf("%v", this.InlineRateLimiter), "InlineRateLimiter", "InlineRateLimiter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerUrlRule_RefRateLimiter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerUrlRule_RefRateLimiter{`,
		`RefRateLimiter:` + strings.Replace(fmt.Sprintf("%v", this.RefRateLimiter), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiEndpointRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiEndpointRule{`,
		`DomainChoice:` + fmt.Sprintf("%v", this.DomainChoice) + `,`,
		`BasePath:` + fmt.Sprintf("%v", this.BasePath) + `,`,
		`ApiEndpointPath:` + fmt.Sprintf("%v", this.ApiEndpointPath) + `,`,
		`ApiEndpointMethod:` + strings.Replace(fmt.Sprintf("%v", this.ApiEndpointMethod), "HttpMethodMatcherType", "policy.HttpMethodMatcherType", 1) + `,`,
		`RateLimiterChoice:` + fmt.Sprintf("%v", this.RateLimiterChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiEndpointRule_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiEndpointRule_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiEndpointRule_SpecificDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiEndpointRule_SpecificDomain{`,
		`SpecificDomain:` + fmt.Sprintf("%v", this.SpecificDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiEndpointRule_InlineRateLimiter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiEndpointRule_InlineRateLimiter{`,
		`InlineRateLimiter:` + strings.Replace(fmt.Sprintf("%v", this.InlineRateLimiter), "InlineRateLimiter", "InlineRateLimiter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiEndpointRule_RefRateLimiter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiEndpointRule_RefRateLimiter{`,
		`RefRateLimiter:` + strings.Replace(fmt.Sprintf("%v", this.RefRateLimiter), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServerUrlRules := "[]*ServerUrlRule{"
	for _, f := range this.ServerUrlRules {
		repeatedStringForServerUrlRules += strings.Replace(f.String(), "ServerUrlRule", "ServerUrlRule", 1) + ","
	}
	repeatedStringForServerUrlRules += "}"
	repeatedStringForApiEndpointRules := "[]*ApiEndpointRule{"
	for _, f := range this.ApiEndpointRules {
		repeatedStringForApiEndpointRules += strings.Replace(f.String(), "ApiEndpointRule", "ApiEndpointRule", 1) + ","
	}
	repeatedStringForApiEndpointRules += "}"
	s := strings.Join([]string{`&APIRateLimit{`,
		`IpAllowedListChoice:` + fmt.Sprintf("%v", this.IpAllowedListChoice) + `,`,
		`ServerUrlRules:` + repeatedStringForServerUrlRules + `,`,
		`ApiEndpointRules:` + repeatedStringForApiEndpointRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIRateLimit_NoIpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIRateLimit_NoIpAllowedList{`,
		`NoIpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.NoIpAllowedList), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIRateLimit_IpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIRateLimit_IpAllowedList{`,
		`IpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.IpAllowedList), "PrefixStringListType", "views.PrefixStringListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIRateLimit_CustomIpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIRateLimit_CustomIpAllowedList{`,
		`CustomIpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.CustomIpAllowedList), "CustomIpAllowedList", "CustomIpAllowedList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsValidationContext) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsValidationContext{`,
		`TrustedCaUrl:` + fmt.Sprintf("%v", this.TrustedCaUrl) + `,`,
		`CrlChoice:` + fmt.Sprintf("%v", this.CrlChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsValidationContext_NoCrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsValidationContext_NoCrl{`,
		`NoCrl:` + strings.Replace(fmt.Sprintf("%v", this.NoCrl), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsValidationContext_Crl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsValidationContext_Crl{`,
		`Crl:` + strings.Replace(fmt.Sprintf("%v", this.Crl), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsParamsType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTlsCertificates := "[]*TlsCertificateType{"
	for _, f := range this.TlsCertificates {
		repeatedStringForTlsCertificates += strings.Replace(fmt.Sprintf("%v", f), "TlsCertificateType", "schema.TlsCertificateType", 1) + ","
	}
	repeatedStringForTlsCertificates += "}"
	s := strings.Join([]string{`&DownstreamTlsParamsType{`,
		`TlsConfig:` + strings.Replace(fmt.Sprintf("%v", this.TlsConfig), "TlsConfig", "views.TlsConfig", 1) + `,`,
		`TlsCertificates:` + repeatedStringForTlsCertificates + `,`,
		`MtlsChoice:` + fmt.Sprintf("%v", this.MtlsChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsParamsType_NoMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsParamsType_NoMtls{`,
		`NoMtls:` + strings.Replace(fmt.Sprintf("%v", this.NoMtls), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownstreamTlsParamsType_UseMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownstreamTlsParamsType_UseMtls{`,
		`UseMtls:` + strings.Replace(fmt.Sprintf("%v", this.UseMtls), "DownstreamTlsValidationContext", "DownstreamTlsValidationContext", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps{`,
		`HttpRedirect:` + fmt.Sprintf("%v", this.HttpRedirect) + `,`,
		`AddHsts:` + fmt.Sprintf("%v", this.AddHsts) + `,`,
		`TlsParameters:` + strings.Replace(this.TlsParameters.String(), "DownstreamTlsParamsType", "DownstreamTlsParamsType", 1) + `,`,
		`ServerHeaderChoice:` + fmt.Sprintf("%v", this.ServerHeaderChoice) + `,`,
		`PathNormalizeChoice:` + fmt.Sprintf("%v", this.PathNormalizeChoice) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_DefaultHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_DefaultHeader{`,
		`DefaultHeader:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHeader), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_ServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_ServerName{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_AppendServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_AppendServerName{`,
		`AppendServerName:` + fmt.Sprintf("%v", this.AppendServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_PassThrough) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_PassThrough{`,
		`PassThrough:` + strings.Replace(fmt.Sprintf("%v", this.PassThrough), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_EnablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_EnablePathNormalize{`,
		`EnablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.EnablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttps_DisablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttps_DisablePathNormalize{`,
		`DisablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.DisablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttp{`,
		`DnsVolterraManaged:` + fmt.Sprintf("%v", this.DnsVolterraManaged) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts{`,
		`HttpRedirect:` + fmt.Sprintf("%v", this.HttpRedirect) + `,`,
		`AddHsts:` + fmt.Sprintf("%v", this.AddHsts) + `,`,
		`TlsConfig:` + strings.Replace(fmt.Sprintf("%v", this.TlsConfig), "TlsConfig", "views.TlsConfig", 1) + `,`,
		`MtlsChoice:` + fmt.Sprintf("%v", this.MtlsChoice) + `,`,
		`ServerHeaderChoice:` + fmt.Sprintf("%v", this.ServerHeaderChoice) + `,`,
		`PathNormalizeChoice:` + fmt.Sprintf("%v", this.PathNormalizeChoice) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_NoMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_NoMtls{`,
		`NoMtls:` + strings.Replace(fmt.Sprintf("%v", this.NoMtls), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_UseMtls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_UseMtls{`,
		`UseMtls:` + strings.Replace(fmt.Sprintf("%v", this.UseMtls), "DownstreamTlsValidationContext", "DownstreamTlsValidationContext", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_DefaultHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_DefaultHeader{`,
		`DefaultHeader:` + strings.Replace(fmt.Sprintf("%v", this.DefaultHeader), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_ServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_ServerName{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_AppendServerName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_AppendServerName{`,
		`AppendServerName:` + fmt.Sprintf("%v", this.AppendServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_PassThrough) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_PassThrough{`,
		`PassThrough:` + strings.Replace(fmt.Sprintf("%v", this.PassThrough), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_EnablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_EnablePathNormalize{`,
		`EnablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.EnablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyTypeHttpsAutoCerts_DisablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyTypeHttpsAutoCerts_DisablePathNormalize{`,
		`DisablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.DisablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HashPolicyListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHashPolicy := "[]*HashPolicyType{"
	for _, f := range this.HashPolicy {
		repeatedStringForHashPolicy += strings.Replace(fmt.Sprintf("%v", f), "HashPolicyType", "route.HashPolicyType", 1) + ","
	}
	repeatedStringForHashPolicy += "}"
	s := strings.Join([]string{`&HashPolicyListType{`,
		`HashPolicy:` + repeatedStringForHashPolicy + `,`,
		`}`,
	}, "")
	return s
}
func (this *MirrorPolicyType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MirrorPolicyType{`,
		`OriginPool:` + strings.Replace(fmt.Sprintf("%v", this.OriginPool), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`Percent:` + strings.Replace(fmt.Sprintf("%v", this.Percent), "FractionalPercent", "schema.FractionalPercent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRequestHeadersToAdd := "[]*HeaderManipulationOptionType{"
	for _, f := range this.RequestHeadersToAdd {
		repeatedStringForRequestHeadersToAdd += strings.Replace(fmt.Sprintf("%v", f), "HeaderManipulationOptionType", "schema.HeaderManipulationOptionType", 1) + ","
	}
	repeatedStringForRequestHeadersToAdd += "}"
	repeatedStringForResponseHeadersToAdd := "[]*HeaderManipulationOptionType{"
	for _, f := range this.ResponseHeadersToAdd {
		repeatedStringForResponseHeadersToAdd += strings.Replace(fmt.Sprintf("%v", f), "HeaderManipulationOptionType", "schema.HeaderManipulationOptionType", 1) + ","
	}
	repeatedStringForResponseHeadersToAdd += "}"
	keysForEndpointSubsets := make([]string, 0, len(this.EndpointSubsets))
	for k, _ := range this.EndpointSubsets {
		keysForEndpointSubsets = append(keysForEndpointSubsets, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEndpointSubsets)
	mapStringForEndpointSubsets := "map[string]string{"
	for _, k := range keysForEndpointSubsets {
		mapStringForEndpointSubsets += fmt.Sprintf("%v: %v,", k, this.EndpointSubsets[k])
	}
	mapStringForEndpointSubsets += "}"
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions{`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`EndpointSubsets:` + mapStringForEndpointSubsets + `,`,
		`RewriteChoice:` + fmt.Sprintf("%v", this.RewriteChoice) + `,`,
		`RequestHeadersToAdd:` + repeatedStringForRequestHeadersToAdd + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`ResponseHeadersToAdd:` + repeatedStringForResponseHeadersToAdd + `,`,
		`ResponseHeadersToRemove:` + fmt.Sprintf("%v", this.ResponseHeadersToRemove) + `,`,
		`DisableLocationAdd:` + fmt.Sprintf("%v", this.DisableLocationAdd) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`SpdyChoice:` + fmt.Sprintf("%v", this.SpdyChoice) + `,`,
		`WebsocketChoice:` + fmt.Sprintf("%v", this.WebsocketChoice) + `,`,
		`RetryPolicyChoice:` + fmt.Sprintf("%v", this.RetryPolicyChoice) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`BufferChoice:` + fmt.Sprintf("%v", this.BufferChoice) + `,`,
		`MirroringChoice:` + fmt.Sprintf("%v", this.MirroringChoice) + `,`,
		`ClusterRetractChoice:` + fmt.Sprintf("%v", this.ClusterRetractChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_CommonHashPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_CommonHashPolicy{`,
		`CommonHashPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CommonHashPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_SpecificHashPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_SpecificHashPolicy{`,
		`SpecificHashPolicy:` + strings.Replace(fmt.Sprintf("%v", this.SpecificHashPolicy), "HashPolicyListType", "HashPolicyListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisablePrefixRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DisablePrefixRewrite{`,
		`DisablePrefixRewrite:` + strings.Replace(fmt.Sprintf("%v", this.DisablePrefixRewrite), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_PrefixRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_PrefixRewrite{`,
		`PrefixRewrite:` + fmt.Sprintf("%v", this.PrefixRewrite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_Waf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_Waf{`,
		`Waf:` + strings.Replace(fmt.Sprintf("%v", this.Waf), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_WafRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_WafRule{`,
		`WafRule:` + strings.Replace(fmt.Sprintf("%v", this.WafRule), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableSpdy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DisableSpdy{`,
		`DisableSpdy:` + strings.Replace(fmt.Sprintf("%v", this.DisableSpdy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_EnableSpdy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_EnableSpdy{`,
		`EnableSpdy:` + strings.Replace(fmt.Sprintf("%v", this.EnableSpdy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableWebSocketConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DisableWebSocketConfig{`,
		`DisableWebSocketConfig:` + strings.Replace(fmt.Sprintf("%v", this.DisableWebSocketConfig), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_WebSocketConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_WebSocketConfig{`,
		`WebSocketConfig:` + strings.Replace(fmt.Sprintf("%v", this.WebSocketConfig), "WebsocketConfigType", "route.WebsocketConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DefaultRetryPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DefaultRetryPolicy{`,
		`DefaultRetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.DefaultRetryPolicy), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_RetryPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_RetryPolicy{`,
		`RetryPolicy:` + strings.Replace(fmt.Sprintf("%v", this.RetryPolicy), "RetryPolicyType", "schema.RetryPolicyType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_CommonBuffering) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_CommonBuffering{`,
		`CommonBuffering:` + strings.Replace(fmt.Sprintf("%v", this.CommonBuffering), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_BufferPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_BufferPolicy{`,
		`BufferPolicy:` + strings.Replace(fmt.Sprintf("%v", this.BufferPolicy), "BufferConfigType", "schema.BufferConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DisableMirroring) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DisableMirroring{`,
		`DisableMirroring:` + strings.Replace(fmt.Sprintf("%v", this.DisableMirroring), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_MirrorPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_MirrorPolicy{`,
		`MirrorPolicy:` + strings.Replace(fmt.Sprintf("%v", this.MirrorPolicy), "MirrorPolicyType", "MirrorPolicyType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_RetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_RetractCluster{`,
		`RetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.RetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_DoNotRetractCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_DoNotRetractCluster{`,
		`DoNotRetractCluster:` + strings.Replace(fmt.Sprintf("%v", this.DoNotRetractCluster), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteSimpleAdvancedOptions_AppFirewall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteSimpleAdvancedOptions_AppFirewall{`,
		`AppFirewall:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewall), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimpleWithDefaultOriginPool{`,
		`HttpMethod:` + fmt.Sprintf("%v", this.HttpMethod) + `,`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "schema.PathMatcherType", 1) + `,`,
		`HostRewriteParams:` + fmt.Sprintf("%v", this.HostRewriteParams) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite{`,
		`AutoHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.AutoHostRewrite), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_HostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimpleWithDefaultOriginPool_HostRewrite{`,
		`HostRewrite:` + fmt.Sprintf("%v", this.HostRewrite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite{`,
		`DisableHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.DisableHostRewrite), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimple) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOriginPools := "[]*OriginPoolWithWeight{"
	for _, f := range this.OriginPools {
		repeatedStringForOriginPools += strings.Replace(fmt.Sprintf("%v", f), "OriginPoolWithWeight", "views.OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForOriginPools += "}"
	repeatedStringForHeaders := "[]*HeaderMatcherType{"
	for _, f := range this.Headers {
		repeatedStringForHeaders += strings.Replace(fmt.Sprintf("%v", f), "HeaderMatcherType", "schema.HeaderMatcherType", 1) + ","
	}
	repeatedStringForHeaders += "}"
	s := strings.Join([]string{`&RouteTypeSimple{`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "schema.PathMatcherType", 1) + `,`,
		`HttpMethod:` + fmt.Sprintf("%v", this.HttpMethod) + `,`,
		`OriginPools:` + repeatedStringForOriginPools + `,`,
		`HostRewriteParams:` + fmt.Sprintf("%v", this.HostRewriteParams) + `,`,
		`AdvancedOptions:` + strings.Replace(this.AdvancedOptions.String(), "RouteSimpleAdvancedOptions", "RouteSimpleAdvancedOptions", 1) + `,`,
		`Headers:` + repeatedStringForHeaders + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimple_AutoHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimple_AutoHostRewrite{`,
		`AutoHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.AutoHostRewrite), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimple_HostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimple_HostRewrite{`,
		`HostRewrite:` + fmt.Sprintf("%v", this.HostRewrite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeSimple_DisableHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeSimple_DisableHostRewrite{`,
		`DisableHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.DisableHostRewrite), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeRedirect) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHeaders := "[]*HeaderMatcherType{"
	for _, f := range this.Headers {
		repeatedStringForHeaders += strings.Replace(fmt.Sprintf("%v", f), "HeaderMatcherType", "schema.HeaderMatcherType", 1) + ","
	}
	repeatedStringForHeaders += "}"
	s := strings.Join([]string{`&RouteTypeRedirect{`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "schema.PathMatcherType", 1) + `,`,
		`HttpMethod:` + fmt.Sprintf("%v", this.HttpMethod) + `,`,
		`RouteRedirect:` + strings.Replace(fmt.Sprintf("%v", this.RouteRedirect), "RouteRedirect", "route.RouteRedirect", 1) + `,`,
		`Headers:` + repeatedStringForHeaders + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeDirectResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHeaders := "[]*HeaderMatcherType{"
	for _, f := range this.Headers {
		repeatedStringForHeaders += strings.Replace(fmt.Sprintf("%v", f), "HeaderMatcherType", "schema.HeaderMatcherType", 1) + ","
	}
	repeatedStringForHeaders += "}"
	s := strings.Join([]string{`&RouteTypeDirectResponse{`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "schema.PathMatcherType", 1) + `,`,
		`HttpMethod:` + fmt.Sprintf("%v", this.HttpMethod) + `,`,
		`RouteDirectResponse:` + strings.Replace(fmt.Sprintf("%v", this.RouteDirectResponse), "RouteDirectResponse", "route.RouteDirectResponse", 1) + `,`,
		`Headers:` + repeatedStringForHeaders + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTypeCustomRoute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTypeCustomRoute{`,
		`RouteRef:` + strings.Replace(fmt.Sprintf("%v", this.RouteRef), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType{`,
		`Choice:` + fmt.Sprintf("%v", this.Choice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType_SimpleRoute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType_SimpleRoute{`,
		`SimpleRoute:` + strings.Replace(fmt.Sprintf("%v", this.SimpleRoute), "RouteTypeSimple", "RouteTypeSimple", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType_RedirectRoute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType_RedirectRoute{`,
		`RedirectRoute:` + strings.Replace(fmt.Sprintf("%v", this.RedirectRoute), "RouteTypeRedirect", "RouteTypeRedirect", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType_DirectResponseRoute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType_DirectResponseRoute{`,
		`DirectResponseRoute:` + strings.Replace(fmt.Sprintf("%v", this.DirectResponseRoute), "RouteTypeDirectResponse", "RouteTypeDirectResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType_CustomRouteObject) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType_CustomRouteObject{`,
		`CustomRouteObject:` + strings.Replace(fmt.Sprintf("%v", this.CustomRouteObject), "RouteTypeCustomRoute", "RouteTypeCustomRoute", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvancedOptionsType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRequestHeadersToAdd := "[]*HeaderManipulationOptionType{"
	for _, f := range this.RequestHeadersToAdd {
		repeatedStringForRequestHeadersToAdd += strings.Replace(fmt.Sprintf("%v", f), "HeaderManipulationOptionType", "schema.HeaderManipulationOptionType", 1) + ","
	}
	repeatedStringForRequestHeadersToAdd += "}"
	repeatedStringForResponseHeadersToAdd := "[]*HeaderManipulationOptionType{"
	for _, f := range this.ResponseHeadersToAdd {
		repeatedStringForResponseHeadersToAdd += strings.Replace(fmt.Sprintf("%v", f), "HeaderManipulationOptionType", "schema.HeaderManipulationOptionType", 1) + ","
	}
	repeatedStringForResponseHeadersToAdd += "}"
	repeatedStringForJwt := "[]*ObjectRefType{"
	for _, f := range this.Jwt {
		repeatedStringForJwt += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForJwt += "}"
	keysForCustomErrors := make([]uint32, 0, len(this.CustomErrors))
	for k, _ := range this.CustomErrors {
		keysForCustomErrors = append(keysForCustomErrors, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForCustomErrors)
	mapStringForCustomErrors := "map[uint32]string{"
	for _, k := range keysForCustomErrors {
		mapStringForCustomErrors += fmt.Sprintf("%v: %v,", k, this.CustomErrors[k])
	}
	mapStringForCustomErrors += "}"
	s := strings.Join([]string{`&AdvancedOptionsType{`,
		`RequestHeadersToAdd:` + repeatedStringForRequestHeadersToAdd + `,`,
		`RequestHeadersToRemove:` + fmt.Sprintf("%v", this.RequestHeadersToRemove) + `,`,
		`ResponseHeadersToAdd:` + repeatedStringForResponseHeadersToAdd + `,`,
		`ResponseHeadersToRemove:` + fmt.Sprintf("%v", this.ResponseHeadersToRemove) + `,`,
		`MaxRequestHeaderSize:` + fmt.Sprintf("%v", this.MaxRequestHeaderSize) + `,`,
		`BufferPolicy:` + strings.Replace(fmt.Sprintf("%v", this.BufferPolicy), "BufferConfigType", "schema.BufferConfigType", 1) + `,`,
		`CompressionParams:` + strings.Replace(fmt.Sprintf("%v", this.CompressionParams), "CompressionType", "virtual_host.CompressionType", 1) + `,`,
		`CustomErrors:` + mapStringForCustomErrors + `,`,
		`JavascriptInfo:` + strings.Replace(fmt.Sprintf("%v", this.JavascriptInfo), "JavaScriptConfigType", "virtual_host.JavaScriptConfigType", 1) + `,`,
		`Jwt:` + repeatedStringForJwt + `,`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`DisableDefaultErrorPages:` + fmt.Sprintf("%v", this.DisableDefaultErrorPages) + `,`,
		`PathNormalizeChoice:` + fmt.Sprintf("%v", this.PathNormalizeChoice) + `,`,
		`StrictSniHostHeaderCheckChoice:` + fmt.Sprintf("%v", this.StrictSniHostHeaderCheckChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvancedOptionsType_EnablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvancedOptionsType_EnablePathNormalize{`,
		`EnablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.EnablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvancedOptionsType_DisablePathNormalize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvancedOptionsType_DisablePathNormalize{`,
		`DisablePathNormalize:` + strings.Replace(fmt.Sprintf("%v", this.DisablePathNormalize), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvancedOptionsType_EnableStrictSniHostHeaderCheck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvancedOptionsType_EnableStrictSniHostHeaderCheck{`,
		`EnableStrictSniHostHeaderCheck:` + strings.Replace(fmt.Sprintf("%v", this.EnableStrictSniHostHeaderCheck), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvancedOptionsType_AdditionalDomains) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvancedOptionsType_AdditionalDomains{`,
		`AdditionalDomains:` + strings.Replace(fmt.Sprintf("%v", this.AdditionalDomains), "DomainNameList", "schema.DomainNameList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge{`,
		`JsChallengeParametersChoice:` + fmt.Sprintf("%v", this.JsChallengeParametersChoice) + `,`,
		`CaptchaChallengeParametersChoice:` + fmt.Sprintf("%v", this.CaptchaChallengeParametersChoice) + `,`,
		`TemporaryBlockingParametersChoice:` + fmt.Sprintf("%v", this.TemporaryBlockingParametersChoice) + `,`,
		`MaliciousUserMitigationChoice:` + fmt.Sprintf("%v", this.MaliciousUserMitigationChoice) + `,`,
		`ChallengeChoice:` + fmt.Sprintf("%v", this.ChallengeChoice) + `,`,
		`RuleList:` + strings.Replace(this.RuleList.String(), "ChallengeRuleList", "ChallengeRuleList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_DefaultJsChallengeParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_DefaultJsChallengeParameters{`,
		`DefaultJsChallengeParameters:` + strings.Replace(fmt.Sprintf("%v", this.DefaultJsChallengeParameters), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_JsChallengeParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_JsChallengeParameters{`,
		`JsChallengeParameters:` + strings.Replace(fmt.Sprintf("%v", this.JsChallengeParameters), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_DefaultCaptchaChallengeParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_DefaultCaptchaChallengeParameters{`,
		`DefaultCaptchaChallengeParameters:` + strings.Replace(fmt.Sprintf("%v", this.DefaultCaptchaChallengeParameters), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_CaptchaChallengeParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_CaptchaChallengeParameters{`,
		`CaptchaChallengeParameters:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallengeParameters), "CaptchaChallengeType", "virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_DefaultTemporaryBlockingParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_DefaultTemporaryBlockingParameters{`,
		`DefaultTemporaryBlockingParameters:` + strings.Replace(fmt.Sprintf("%v", this.DefaultTemporaryBlockingParameters), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_TemporaryUserBlocking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_TemporaryUserBlocking{`,
		`TemporaryUserBlocking:` + strings.Replace(fmt.Sprintf("%v", this.TemporaryUserBlocking), "TemporaryUserBlockingType", "virtual_host.TemporaryUserBlockingType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_DefaultMitigationSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_DefaultMitigationSettings{`,
		`DefaultMitigationSettings:` + strings.Replace(fmt.Sprintf("%v", this.DefaultMitigationSettings), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_MaliciousUserMitigation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_MaliciousUserMitigation{`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableJsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_AlwaysEnableJsChallenge{`,
		`AlwaysEnableJsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.AlwaysEnableJsChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedChallenge_AlwaysEnableCaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{`,
		`AlwaysEnableCaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.AlwaysEnableCaptchaChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChallengeRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChallengeRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "ChallengeRuleSpec", "service_policy_rule.ChallengeRuleSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChallengeRuleList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*ChallengeRule{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "ChallengeRule", "ChallengeRule", 1) + ","
	}
	repeatedStringForRules += "}"
	s := strings.Join([]string{`&ChallengeRuleList{`,
		`Rules:` + repeatedStringForRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *HttpHeaderMatcherList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHeaders := "[]*HeaderMatcherType{"
	for _, f := range this.Headers {
		repeatedStringForHeaders += strings.Replace(fmt.Sprintf("%v", f), "HeaderMatcherType", "schema.HeaderMatcherType", 1) + ","
	}
	repeatedStringForHeaders += "}"
	s := strings.Join([]string{`&HttpHeaderMatcherList{`,
		`Headers:` + repeatedStringForHeaders + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleClientSrcRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleClientSrcRule{`,
		`ClientSourceChoice:` + fmt.Sprintf("%v", this.ClientSourceChoice) + `,`,
		`ExpirationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ExpirationTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`ActionChoice:` + fmt.Sprintf("%v", this.ActionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleClientSrcRule_IpPrefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleClientSrcRule_IpPrefix{`,
		`IpPrefix:` + fmt.Sprintf("%v", this.IpPrefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleClientSrcRule_AsNumber) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleClientSrcRule_AsNumber{`,
		`AsNumber:` + fmt.Sprintf("%v", this.AsNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleClientSrcRule_SkipProcessing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleClientSrcRule_SkipProcessing{`,
		`SkipProcessing:` + strings.Replace(fmt.Sprintf("%v", this.SkipProcessing), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleClientSrcRule_WafSkipProcessing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleClientSrcRule_WafSkipProcessing{`,
		`WafSkipProcessing:` + strings.Replace(fmt.Sprintf("%v", this.WafSkipProcessing), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleClientSrcRule_BotSkipProcessing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleClientSrcRule_BotSkipProcessing{`,
		`BotSkipProcessing:` + strings.Replace(fmt.Sprintf("%v", this.BotSkipProcessing), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleClientSrcRule_HttpHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleClientSrcRule_HttpHeader{`,
		`HttpHeader:` + strings.Replace(fmt.Sprintf("%v", this.HttpHeader), "HttpHeaderMatcherList", "HttpHeaderMatcherList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DDoSClientSource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DDoSClientSource{`,
		`AsnList:` + strings.Replace(fmt.Sprintf("%v", this.AsnList), "AsnMatchList", "policy.AsnMatchList", 1) + `,`,
		`CountryList:` + fmt.Sprintf("%v", this.CountryList) + `,`,
		`TlsFingerprintMatcher:` + strings.Replace(fmt.Sprintf("%v", this.TlsFingerprintMatcher), "TlsFingerprintMatcherType", "policy.TlsFingerprintMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DDoSMitigationRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DDoSMitigationRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`MitigationAction:` + fmt.Sprintf("%v", this.MitigationAction) + `,`,
		`MitigationChoice:` + fmt.Sprintf("%v", this.MitigationChoice) + `,`,
		`ExpirationTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ExpirationTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DDoSMitigationRule_Block) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DDoSMitigationRule_Block{`,
		`Block:` + strings.Replace(fmt.Sprintf("%v", this.Block), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DDoSMitigationRule_DdosClientSource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DDoSMitigationRule_DdosClientSource{`,
		`DdosClientSource:` + strings.Replace(fmt.Sprintf("%v", this.DdosClientSource), "DDoSClientSource", "DDoSClientSource", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DDoSMitigationRule_IpPrefixList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DDoSMitigationRule_IpPrefixList{`,
		`IpPrefixList:` + strings.Replace(fmt.Sprintf("%v", this.IpPrefixList), "PrefixMatchList", "policy.PrefixMatchList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomIpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRateLimiterAllowedPrefixes := "[]*ObjectRefType{"
	for _, f := range this.RateLimiterAllowedPrefixes {
		repeatedStringForRateLimiterAllowedPrefixes += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForRateLimiterAllowedPrefixes += "}"
	s := strings.Join([]string{`&CustomIpAllowedList{`,
		`RateLimiterAllowedPrefixes:` + repeatedStringForRateLimiterAllowedPrefixes + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType{`,
		`RateLimiter:` + strings.Replace(fmt.Sprintf("%v", this.RateLimiter), "RateLimitValue", "rate_limiter.RateLimitValue", 1) + `,`,
		`IpAllowedListChoice:` + fmt.Sprintf("%v", this.IpAllowedListChoice) + `,`,
		`PolicyChoice:` + fmt.Sprintf("%v", this.PolicyChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType_NoIpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType_NoIpAllowedList{`,
		`NoIpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.NoIpAllowedList), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType_IpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType_IpAllowedList{`,
		`IpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.IpAllowedList), "PrefixStringListType", "views.PrefixStringListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType_CustomIpAllowedList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType_CustomIpAllowedList{`,
		`CustomIpAllowedList:` + strings.Replace(fmt.Sprintf("%v", this.CustomIpAllowedList), "CustomIpAllowedList", "CustomIpAllowedList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType_NoPolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType_NoPolicies{`,
		`NoPolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoPolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RateLimitConfigType_Policies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RateLimitConfigType_Policies{`,
		`Policies:` + strings.Replace(fmt.Sprintf("%v", this.Policies), "PolicyList", "rate_limiter_policy.PolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicePolicyList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPolicies := "[]*ObjectRefType{"
	for _, f := range this.Policies {
		repeatedStringForPolicies += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForPolicies += "}"
	s := strings.Join([]string{`&ServicePolicyList{`,
		`Policies:` + repeatedStringForPolicies + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiDefinitionList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForApiDefinitions := "[]*ObjectRefType{"
	for _, f := range this.ApiDefinitions {
		repeatedStringForApiDefinitions += strings.Replace(fmt.Sprintf("%v", f), "ObjectRefType", "views.ObjectRefType", 1) + ","
	}
	repeatedStringForApiDefinitions += "}"
	s := strings.Join([]string{`&ApiDefinitionList{`,
		`ApiDefinitions:` + repeatedStringForApiDefinitions + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiDiscoverySetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiDiscoverySetting{`,
		`LearnFromRedirectTraffic:` + fmt.Sprintf("%v", this.LearnFromRedirectTraffic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiDiscoverySetting_DisableLearnFromRedirectTraffic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiDiscoverySetting_DisableLearnFromRedirectTraffic{`,
		`DisableLearnFromRedirectTraffic:` + strings.Replace(fmt.Sprintf("%v", this.DisableLearnFromRedirectTraffic), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApiDiscoverySetting_EnableLearnFromRedirectTraffic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApiDiscoverySetting_EnableLearnFromRedirectTraffic{`,
		`EnableLearnFromRedirectTraffic:` + strings.Replace(fmt.Sprintf("%v", this.EnableLearnFromRedirectTraffic), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SingleLoadBalancerAppSetting) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SingleLoadBalancerAppSetting{`,
		`ApiDiscoveryChoice:` + fmt.Sprintf("%v", this.ApiDiscoveryChoice) + `,`,
		`DdosDetectionChoice:` + fmt.Sprintf("%v", this.DdosDetectionChoice) + `,`,
		`MaliciousUserDetectionChoice:` + fmt.Sprintf("%v", this.MaliciousUserDetectionChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SingleLoadBalancerAppSetting_EnableDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SingleLoadBalancerAppSetting_EnableDiscovery{`,
		`EnableDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.EnableDiscovery), "ApiDiscoverySetting", "ApiDiscoverySetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SingleLoadBalancerAppSetting_DisableDiscovery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SingleLoadBalancerAppSetting_DisableDiscovery{`,
		`DisableDiscovery:` + strings.Replace(fmt.Sprintf("%v", this.DisableDiscovery), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SingleLoadBalancerAppSetting_EnableDdosDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SingleLoadBalancerAppSetting_EnableDdosDetection{`,
		`EnableDdosDetection:` + strings.Replace(fmt.Sprintf("%v", this.EnableDdosDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SingleLoadBalancerAppSetting_DisableDdosDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SingleLoadBalancerAppSetting_DisableDdosDetection{`,
		`DisableDdosDetection:` + strings.Replace(fmt.Sprintf("%v", this.DisableDdosDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SingleLoadBalancerAppSetting_EnableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SingleLoadBalancerAppSetting_EnableMaliciousUserDetection{`,
		`EnableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.EnableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SingleLoadBalancerAppSetting_DisableMaliciousUserDetection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SingleLoadBalancerAppSetting_DisableMaliciousUserDetection{`,
		`DisableMaliciousUserDetection:` + strings.Replace(fmt.Sprintf("%v", this.DisableMaliciousUserDetection), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotDefenseType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotDefenseType{`,
		`RegionalEndpoint:` + fmt.Sprintf("%v", this.RegionalEndpoint) + `,`,
		`Policy:` + strings.Replace(this.Policy.String(), "ShapeBotDefensePolicyType", "ShapeBotDefensePolicyType", 1) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotDefensePolicyType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProtectedAppEndpoints := "[]*AppEndpointType{"
	for _, f := range this.ProtectedAppEndpoints {
		repeatedStringForProtectedAppEndpoints += strings.Replace(f.String(), "AppEndpointType", "AppEndpointType", 1) + ","
	}
	repeatedStringForProtectedAppEndpoints += "}"
	s := strings.Join([]string{`&ShapeBotDefensePolicyType{`,
		`ProtectedAppEndpoints:` + repeatedStringForProtectedAppEndpoints + `,`,
		`JsDownloadPath:` + fmt.Sprintf("%v", this.JsDownloadPath) + `,`,
		`JavaScriptChoice:` + fmt.Sprintf("%v", this.JavaScriptChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotDefensePolicyType_DisableJsInsert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotDefensePolicyType_DisableJsInsert{`,
		`DisableJsInsert:` + strings.Replace(fmt.Sprintf("%v", this.DisableJsInsert), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotDefensePolicyType_JsInsertAllPages) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotDefensePolicyType_JsInsertAllPages{`,
		`JsInsertAllPages:` + strings.Replace(fmt.Sprintf("%v", this.JsInsertAllPages), "ShapeJavaScriptInsertAllType", "ShapeJavaScriptInsertAllType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotDefensePolicyType_JsInsertAllPagesExcept) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotDefensePolicyType_JsInsertAllPagesExcept{`,
		`JsInsertAllPagesExcept:` + strings.Replace(fmt.Sprintf("%v", this.JsInsertAllPagesExcept), "ShapeJavaScriptInsertAllWithExceptionsType", "ShapeJavaScriptInsertAllWithExceptionsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeBotDefensePolicyType_JsInsertionRules) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeBotDefensePolicyType_JsInsertionRules{`,
		`JsInsertionRules:` + strings.Replace(fmt.Sprintf("%v", this.JsInsertionRules), "ShapeJavaScriptInsertType", "ShapeJavaScriptInsertType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppEndpointType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppEndpointType{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`HttpMethods:` + fmt.Sprintf("%v", this.HttpMethods) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "schema.PathMatcherType", 1) + `,`,
		`DomainMatcherChoice:` + fmt.Sprintf("%v", this.DomainMatcherChoice) + `,`,
		`AppTrafficTypeChoice:` + fmt.Sprintf("%v", this.AppTrafficTypeChoice) + `,`,
		`Mitigation:` + strings.Replace(fmt.Sprintf("%v", this.Mitigation), "ShapeBotMitigationAction", "policy.ShapeBotMitigationAction", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppEndpointType_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppEndpointType_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppEndpointType_Domain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppEndpointType_Domain{`,
		`Domain:` + strings.Replace(fmt.Sprintf("%v", this.Domain), "DomainType", "schema.DomainType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppEndpointType_Web) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppEndpointType_Web{`,
		`Web:` + strings.Replace(fmt.Sprintf("%v", this.Web), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppEndpointType_Mobile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppEndpointType_Mobile{`,
		`Mobile:` + strings.Replace(fmt.Sprintf("%v", this.Mobile), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppEndpointType_WebMobile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppEndpointType_WebMobile{`,
		`WebMobile:` + strings.Replace(fmt.Sprintf("%v", this.WebMobile), "WebMobileTrafficType", "WebMobileTrafficType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebMobileTrafficType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebMobileTrafficType{`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "HeaderMatcherTypeBasic", "policy.HeaderMatcherTypeBasic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeJavaScriptInsertType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRules := "[]*ShapeJavaScriptInsertionRule{"
	for _, f := range this.Rules {
		repeatedStringForRules += strings.Replace(f.String(), "ShapeJavaScriptInsertionRule", "ShapeJavaScriptInsertionRule", 1) + ","
	}
	repeatedStringForRules += "}"
	repeatedStringForExcludeList := "[]*ShapeJavaScriptExclusionRule{"
	for _, f := range this.ExcludeList {
		repeatedStringForExcludeList += strings.Replace(f.String(), "ShapeJavaScriptExclusionRule", "ShapeJavaScriptExclusionRule", 1) + ","
	}
	repeatedStringForExcludeList += "}"
	s := strings.Join([]string{`&ShapeJavaScriptInsertType{`,
		`Rules:` + repeatedStringForRules + `,`,
		`ExcludeList:` + repeatedStringForExcludeList + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeJavaScriptInsertAllWithExceptionsType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExcludeList := "[]*ShapeJavaScriptExclusionRule{"
	for _, f := range this.ExcludeList {
		repeatedStringForExcludeList += strings.Replace(f.String(), "ShapeJavaScriptExclusionRule", "ShapeJavaScriptExclusionRule", 1) + ","
	}
	repeatedStringForExcludeList += "}"
	s := strings.Join([]string{`&ShapeJavaScriptInsertAllWithExceptionsType{`,
		`JavascriptLocation:` + fmt.Sprintf("%v", this.JavascriptLocation) + `,`,
		`ExcludeList:` + repeatedStringForExcludeList + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeJavaScriptInsertAllType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeJavaScriptInsertAllType{`,
		`JavascriptLocation:` + fmt.Sprintf("%v", this.JavascriptLocation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeJavaScriptInsertionRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeJavaScriptInsertionRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`DomainMatcherChoice:` + fmt.Sprintf("%v", this.DomainMatcherChoice) + `,`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "schema.PathMatcherType", 1) + `,`,
		`JavascriptLocation:` + fmt.Sprintf("%v", this.JavascriptLocation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeJavaScriptInsertionRule_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeJavaScriptInsertionRule_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeJavaScriptInsertionRule_Domain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeJavaScriptInsertionRule_Domain{`,
		`Domain:` + strings.Replace(fmt.Sprintf("%v", this.Domain), "DomainType", "schema.DomainType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeJavaScriptExclusionRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeJavaScriptExclusionRule{`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "MessageMetaType", "schema.MessageMetaType", 1) + `,`,
		`DomainMatcherChoice:` + fmt.Sprintf("%v", this.DomainMatcherChoice) + `,`,
		`Path:` + strings.Replace(fmt.Sprintf("%v", this.Path), "PathMatcherType", "schema.PathMatcherType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeJavaScriptExclusionRule_AnyDomain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeJavaScriptExclusionRule_AnyDomain{`,
		`AnyDomain:` + strings.Replace(fmt.Sprintf("%v", this.AnyDomain), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShapeJavaScriptExclusionRule_Domain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShapeJavaScriptExclusionRule_Domain{`,
		`Domain:` + strings.Replace(fmt.Sprintf("%v", this.Domain), "DomainType", "schema.DomainType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IPThreatCategoryListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IPThreatCategoryListType{`,
		`IpThreatCategories:` + fmt.Sprintf("%v", this.IpThreatCategories) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDefaultRoutePools := "[]*OriginPoolWithWeight{"
	for _, f := range this.DefaultRoutePools {
		repeatedStringForDefaultRoutePools += strings.Replace(fmt.Sprintf("%v", f), "OriginPoolWithWeight", "views.OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForDefaultRoutePools += "}"
	repeatedStringForRoutes := "[]*RouteType{"
	for _, f := range this.Routes {
		repeatedStringForRoutes += strings.Replace(f.String(), "RouteType", "RouteType", 1) + ","
	}
	repeatedStringForRoutes += "}"
	repeatedStringForWafExclusionRules := "[]*SimpleWafExclusionRule{"
	for _, f := range this.WafExclusionRules {
		repeatedStringForWafExclusionRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleWafExclusionRule", "policy.SimpleWafExclusionRule", 1) + ","
	}
	repeatedStringForWafExclusionRules += "}"
	repeatedStringForBlockedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.BlockedClients {
		repeatedStringForBlockedClients += strings.Replace(f.String(), "SimpleClientSrcRule", "SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForBlockedClients += "}"
	repeatedStringForTrustedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.TrustedClients {
		repeatedStringForTrustedClients += strings.Replace(f.String(), "SimpleClientSrcRule", "SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForTrustedClients += "}"
	repeatedStringForDdosMitigationRules := "[]*DDoSMitigationRule{"
	for _, f := range this.DdosMitigationRules {
		repeatedStringForDdosMitigationRules += strings.Replace(f.String(), "DDoSMitigationRule", "DDoSMitigationRule", 1) + ","
	}
	repeatedStringForDdosMitigationRules += "}"
	repeatedStringForDownstreamTlsCertificateExpirationTimestamps := "[]*Timestamp{"
	for _, f := range this.DownstreamTlsCertificateExpirationTimestamps {
		repeatedStringForDownstreamTlsCertificateExpirationTimestamps += strings.Replace(fmt.Sprintf("%v", f), "Timestamp", "types.Timestamp", 1) + ","
	}
	repeatedStringForDownstreamTlsCertificateExpirationTimestamps += "}"
	repeatedStringForDataGuardRules := "[]*SimpleDataGuardRule{"
	for _, f := range this.DataGuardRules {
		repeatedStringForDataGuardRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleDataGuardRule", "policy.SimpleDataGuardRule", 1) + ","
	}
	repeatedStringForDataGuardRules += "}"
	repeatedStringForDnsInfo := "[]*DnsInfo{"
	for _, f := range this.DnsInfo {
		repeatedStringForDnsInfo += strings.Replace(fmt.Sprintf("%v", f), "DnsInfo", "virtual_host_dns_info.DnsInfo", 1) + ","
	}
	repeatedStringForDnsInfo += "}"
	s := strings.Join([]string{`&GlobalSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`DefaultRoutePools:` + repeatedStringForDefaultRoutePools + `,`,
		`Routes:` + repeatedStringForRoutes + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`MoreOption:` + strings.Replace(this.MoreOption.String(), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`UserIdChoice:` + fmt.Sprintf("%v", this.UserIdChoice) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`HostRewriteParams:` + fmt.Sprintf("%v", this.HostRewriteParams) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`WafExclusionRules:` + repeatedStringForWafExclusionRules + `,`,
		`BlockedClients:` + repeatedStringForBlockedClients + `,`,
		`TrustedClients:` + repeatedStringForTrustedClients + `,`,
		`DdosMitigationRules:` + repeatedStringForDdosMitigationRules + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`MlConfigChoice:` + fmt.Sprintf("%v", this.MlConfigChoice) + `,`,
		`BotDefenseChoice:` + fmt.Sprintf("%v", this.BotDefenseChoice) + `,`,
		`ApiDefinitionChoice:` + fmt.Sprintf("%v", this.ApiDefinitionChoice) + `,`,
		`DownstreamTlsCertificateExpirationTimestamps:` + repeatedStringForDownstreamTlsCertificateExpirationTimestamps + `,`,
		`DataGuardRules:` + repeatedStringForDataGuardRules + `,`,
		`IpReputationChoice:` + fmt.Sprintf("%v", this.IpReputationChoice) + `,`,
		`ViewInternal:` + strings.Replace(fmt.Sprintf("%v", this.ViewInternal), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + repeatedStringForDnsInfo + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`AutoCertState:` + fmt.Sprintf("%v", this.AutoCertState) + `,`,
		`AutoCertInfo:` + strings.Replace(fmt.Sprintf("%v", this.AutoCertInfo), "AutoCertInfoType", "virtual_host.AutoCertInfoType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "ProxyTypeHttp", "ProxyTypeHttp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "ProxyTypeHttps", "ProxyTypeHttps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Waf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Waf{`,
		`Waf:` + strings.Replace(fmt.Sprintf("%v", this.Waf), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_WafRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_WafRule{`,
		`WafRule:` + strings.Replace(fmt.Sprintf("%v", this.WafRule), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_UserIdentification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_UserIdentification{`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "ProxyTypeHttpsAutoCerts", "ProxyTypeHttpsAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AutoHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AutoHostRewrite{`,
		`AutoHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.AutoHostRewrite), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_HostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_HostRewrite{`,
		`HostRewrite:` + fmt.Sprintf("%v", this.HostRewrite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableHostRewrite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableHostRewrite{`,
		`DisableHostRewrite:` + strings.Replace(fmt.Sprintf("%v", this.DisableHostRewrite), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RoundRobin{`,
		`RoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.RoundRobin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_LeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_LeastActive{`,
		`LeastActive:` + strings.Replace(fmt.Sprintf("%v", this.LeastActive), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_Random) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_Random{`,
		`Random:` + strings.Replace(fmt.Sprintf("%v", this.Random), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SourceIpStickiness{`,
		`SourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.SourceIpStickiness), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_CookieStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_CookieStickiness{`,
		`CookieStickiness:` + strings.Replace(fmt.Sprintf("%v", this.CookieStickiness), "CookieForHashing", "route.CookieForHashing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_RingHash) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_RingHash{`,
		`RingHash:` + strings.Replace(fmt.Sprintf("%v", this.RingHash), "HashPolicyListType", "HashPolicyListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_AppFirewall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_AppFirewall{`,
		`AppFirewall:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewall), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_SingleLbApp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_SingleLbApp{`,
		`SingleLbApp:` + strings.Replace(fmt.Sprintf("%v", this.SingleLbApp), "SingleLoadBalancerAppSetting", "SingleLoadBalancerAppSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_MultiLbApp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_MultiLbApp{`,
		`MultiLbApp:` + strings.Replace(fmt.Sprintf("%v", this.MultiLbApp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableBotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableBotDefense{`,
		`DisableBotDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableBotDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_BotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_BotDefense{`,
		`BotDefense:` + strings.Replace(fmt.Sprintf("%v", this.BotDefense), "ShapeBotDefenseType", "ShapeBotDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_UserIdClientIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_UserIdClientIp{`,
		`UserIdClientIp:` + strings.Replace(fmt.Sprintf("%v", this.UserIdClientIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ApiDefinitions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ApiDefinitions{`,
		`ApiDefinitions:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinitions), "ApiDefinitionList", "ApiDefinitionList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableIpReputation{`,
		`DisableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.DisableIpReputation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_EnableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_EnableIpReputation{`,
		`EnableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.EnableIpReputation), "IPThreatCategoryListType", "IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ApiRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ApiRateLimit{`,
		`ApiRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.ApiRateLimit), "APIRateLimit", "APIRateLimit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_DisableApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_DisableApiDefinition{`,
		`DisableApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDefinition), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSpecType_ApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSpecType_ApiDefinition{`,
		`ApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinition), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDefaultRoutePools := "[]*OriginPoolWithWeight{"
	for _, f := range this.DefaultRoutePools {
		repeatedStringForDefaultRoutePools += strings.Replace(fmt.Sprintf("%v", f), "OriginPoolWithWeight", "views.OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForDefaultRoutePools += "}"
	repeatedStringForRoutes := "[]*RouteType{"
	for _, f := range this.Routes {
		repeatedStringForRoutes += strings.Replace(f.String(), "RouteType", "RouteType", 1) + ","
	}
	repeatedStringForRoutes += "}"
	repeatedStringForWafExclusionRules := "[]*SimpleWafExclusionRule{"
	for _, f := range this.WafExclusionRules {
		repeatedStringForWafExclusionRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleWafExclusionRule", "policy.SimpleWafExclusionRule", 1) + ","
	}
	repeatedStringForWafExclusionRules += "}"
	repeatedStringForBlockedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.BlockedClients {
		repeatedStringForBlockedClients += strings.Replace(f.String(), "SimpleClientSrcRule", "SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForBlockedClients += "}"
	repeatedStringForTrustedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.TrustedClients {
		repeatedStringForTrustedClients += strings.Replace(f.String(), "SimpleClientSrcRule", "SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForTrustedClients += "}"
	repeatedStringForDdosMitigationRules := "[]*DDoSMitigationRule{"
	for _, f := range this.DdosMitigationRules {
		repeatedStringForDdosMitigationRules += strings.Replace(f.String(), "DDoSMitigationRule", "DDoSMitigationRule", 1) + ","
	}
	repeatedStringForDdosMitigationRules += "}"
	repeatedStringForDataGuardRules := "[]*SimpleDataGuardRule{"
	for _, f := range this.DataGuardRules {
		repeatedStringForDataGuardRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleDataGuardRule", "policy.SimpleDataGuardRule", 1) + ","
	}
	repeatedStringForDataGuardRules += "}"
	s := strings.Join([]string{`&CreateSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`DefaultRoutePools:` + repeatedStringForDefaultRoutePools + `,`,
		`Routes:` + repeatedStringForRoutes + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`MoreOption:` + strings.Replace(this.MoreOption.String(), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`UserIdChoice:` + fmt.Sprintf("%v", this.UserIdChoice) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`WafExclusionRules:` + repeatedStringForWafExclusionRules + `,`,
		`BlockedClients:` + repeatedStringForBlockedClients + `,`,
		`TrustedClients:` + repeatedStringForTrustedClients + `,`,
		`DdosMitigationRules:` + repeatedStringForDdosMitigationRules + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`MlConfigChoice:` + fmt.Sprintf("%v", this.MlConfigChoice) + `,`,
		`BotDefenseChoice:` + fmt.Sprintf("%v", this.BotDefenseChoice) + `,`,
		`ApiDefinitionChoice:` + fmt.Sprintf("%v", this.ApiDefinitionChoice) + `,`,
		`DataGuardRules:` + repeatedStringForDataGuardRules + `,`,
		`IpReputationChoice:` + fmt.Sprintf("%v", this.IpReputationChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "ProxyTypeHttp", "ProxyTypeHttp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "ProxyTypeHttps", "ProxyTypeHttps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Waf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Waf{`,
		`Waf:` + strings.Replace(fmt.Sprintf("%v", this.Waf), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_WafRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_WafRule{`,
		`WafRule:` + strings.Replace(fmt.Sprintf("%v", this.WafRule), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_UserIdentification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_UserIdentification{`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "ProxyTypeHttpsAutoCerts", "ProxyTypeHttpsAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_RoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_RoundRobin{`,
		`RoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.RoundRobin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_LeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_LeastActive{`,
		`LeastActive:` + strings.Replace(fmt.Sprintf("%v", this.LeastActive), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_Random) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_Random{`,
		`Random:` + strings.Replace(fmt.Sprintf("%v", this.Random), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SourceIpStickiness{`,
		`SourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.SourceIpStickiness), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_CookieStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_CookieStickiness{`,
		`CookieStickiness:` + strings.Replace(fmt.Sprintf("%v", this.CookieStickiness), "CookieForHashing", "route.CookieForHashing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_RingHash) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_RingHash{`,
		`RingHash:` + strings.Replace(fmt.Sprintf("%v", this.RingHash), "HashPolicyListType", "HashPolicyListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_AppFirewall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_AppFirewall{`,
		`AppFirewall:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewall), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_SingleLbApp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_SingleLbApp{`,
		`SingleLbApp:` + strings.Replace(fmt.Sprintf("%v", this.SingleLbApp), "SingleLoadBalancerAppSetting", "SingleLoadBalancerAppSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_MultiLbApp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_MultiLbApp{`,
		`MultiLbApp:` + strings.Replace(fmt.Sprintf("%v", this.MultiLbApp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableBotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableBotDefense{`,
		`DisableBotDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableBotDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_BotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_BotDefense{`,
		`BotDefense:` + strings.Replace(fmt.Sprintf("%v", this.BotDefense), "ShapeBotDefenseType", "ShapeBotDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_UserIdClientIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_UserIdClientIp{`,
		`UserIdClientIp:` + strings.Replace(fmt.Sprintf("%v", this.UserIdClientIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ApiDefinitions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ApiDefinitions{`,
		`ApiDefinitions:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinitions), "ApiDefinitionList", "ApiDefinitionList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableIpReputation{`,
		`DisableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.DisableIpReputation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_EnableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_EnableIpReputation{`,
		`EnableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.EnableIpReputation), "IPThreatCategoryListType", "IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ApiRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ApiRateLimit{`,
		`ApiRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.ApiRateLimit), "APIRateLimit", "APIRateLimit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_DisableApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_DisableApiDefinition{`,
		`DisableApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDefinition), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSpecType_ApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSpecType_ApiDefinition{`,
		`ApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinition), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDefaultRoutePools := "[]*OriginPoolWithWeight{"
	for _, f := range this.DefaultRoutePools {
		repeatedStringForDefaultRoutePools += strings.Replace(fmt.Sprintf("%v", f), "OriginPoolWithWeight", "views.OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForDefaultRoutePools += "}"
	repeatedStringForRoutes := "[]*RouteType{"
	for _, f := range this.Routes {
		repeatedStringForRoutes += strings.Replace(f.String(), "RouteType", "RouteType", 1) + ","
	}
	repeatedStringForRoutes += "}"
	repeatedStringForWafExclusionRules := "[]*SimpleWafExclusionRule{"
	for _, f := range this.WafExclusionRules {
		repeatedStringForWafExclusionRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleWafExclusionRule", "policy.SimpleWafExclusionRule", 1) + ","
	}
	repeatedStringForWafExclusionRules += "}"
	repeatedStringForBlockedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.BlockedClients {
		repeatedStringForBlockedClients += strings.Replace(f.String(), "SimpleClientSrcRule", "SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForBlockedClients += "}"
	repeatedStringForTrustedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.TrustedClients {
		repeatedStringForTrustedClients += strings.Replace(f.String(), "SimpleClientSrcRule", "SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForTrustedClients += "}"
	repeatedStringForDdosMitigationRules := "[]*DDoSMitigationRule{"
	for _, f := range this.DdosMitigationRules {
		repeatedStringForDdosMitigationRules += strings.Replace(f.String(), "DDoSMitigationRule", "DDoSMitigationRule", 1) + ","
	}
	repeatedStringForDdosMitigationRules += "}"
	repeatedStringForDataGuardRules := "[]*SimpleDataGuardRule{"
	for _, f := range this.DataGuardRules {
		repeatedStringForDataGuardRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleDataGuardRule", "policy.SimpleDataGuardRule", 1) + ","
	}
	repeatedStringForDataGuardRules += "}"
	s := strings.Join([]string{`&ReplaceSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`DefaultRoutePools:` + repeatedStringForDefaultRoutePools + `,`,
		`Routes:` + repeatedStringForRoutes + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`MoreOption:` + strings.Replace(this.MoreOption.String(), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`UserIdChoice:` + fmt.Sprintf("%v", this.UserIdChoice) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`WafExclusionRules:` + repeatedStringForWafExclusionRules + `,`,
		`BlockedClients:` + repeatedStringForBlockedClients + `,`,
		`TrustedClients:` + repeatedStringForTrustedClients + `,`,
		`DdosMitigationRules:` + repeatedStringForDdosMitigationRules + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`MlConfigChoice:` + fmt.Sprintf("%v", this.MlConfigChoice) + `,`,
		`BotDefenseChoice:` + fmt.Sprintf("%v", this.BotDefenseChoice) + `,`,
		`ApiDefinitionChoice:` + fmt.Sprintf("%v", this.ApiDefinitionChoice) + `,`,
		`DataGuardRules:` + repeatedStringForDataGuardRules + `,`,
		`IpReputationChoice:` + fmt.Sprintf("%v", this.IpReputationChoice) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "ProxyTypeHttp", "ProxyTypeHttp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "ProxyTypeHttps", "ProxyTypeHttps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Waf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Waf{`,
		`Waf:` + strings.Replace(fmt.Sprintf("%v", this.Waf), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_WafRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_WafRule{`,
		`WafRule:` + strings.Replace(fmt.Sprintf("%v", this.WafRule), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_UserIdentification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_UserIdentification{`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "ProxyTypeHttpsAutoCerts", "ProxyTypeHttpsAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_RoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_RoundRobin{`,
		`RoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.RoundRobin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_LeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_LeastActive{`,
		`LeastActive:` + strings.Replace(fmt.Sprintf("%v", this.LeastActive), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_Random) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_Random{`,
		`Random:` + strings.Replace(fmt.Sprintf("%v", this.Random), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SourceIpStickiness{`,
		`SourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.SourceIpStickiness), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_CookieStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_CookieStickiness{`,
		`CookieStickiness:` + strings.Replace(fmt.Sprintf("%v", this.CookieStickiness), "CookieForHashing", "route.CookieForHashing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_RingHash) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_RingHash{`,
		`RingHash:` + strings.Replace(fmt.Sprintf("%v", this.RingHash), "HashPolicyListType", "HashPolicyListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_AppFirewall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_AppFirewall{`,
		`AppFirewall:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewall), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_SingleLbApp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_SingleLbApp{`,
		`SingleLbApp:` + strings.Replace(fmt.Sprintf("%v", this.SingleLbApp), "SingleLoadBalancerAppSetting", "SingleLoadBalancerAppSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_MultiLbApp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_MultiLbApp{`,
		`MultiLbApp:` + strings.Replace(fmt.Sprintf("%v", this.MultiLbApp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableBotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableBotDefense{`,
		`DisableBotDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableBotDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_BotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_BotDefense{`,
		`BotDefense:` + strings.Replace(fmt.Sprintf("%v", this.BotDefense), "ShapeBotDefenseType", "ShapeBotDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_UserIdClientIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_UserIdClientIp{`,
		`UserIdClientIp:` + strings.Replace(fmt.Sprintf("%v", this.UserIdClientIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ApiDefinitions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ApiDefinitions{`,
		`ApiDefinitions:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinitions), "ApiDefinitionList", "ApiDefinitionList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableIpReputation{`,
		`DisableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.DisableIpReputation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_EnableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_EnableIpReputation{`,
		`EnableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.EnableIpReputation), "IPThreatCategoryListType", "IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ApiRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ApiRateLimit{`,
		`ApiRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.ApiRateLimit), "APIRateLimit", "APIRateLimit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_DisableApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_DisableApiDefinition{`,
		`DisableApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDefinition), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplaceSpecType_ApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplaceSpecType_ApiDefinition{`,
		`ApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinition), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDefaultRoutePools := "[]*OriginPoolWithWeight{"
	for _, f := range this.DefaultRoutePools {
		repeatedStringForDefaultRoutePools += strings.Replace(fmt.Sprintf("%v", f), "OriginPoolWithWeight", "views.OriginPoolWithWeight", 1) + ","
	}
	repeatedStringForDefaultRoutePools += "}"
	repeatedStringForRoutes := "[]*RouteType{"
	for _, f := range this.Routes {
		repeatedStringForRoutes += strings.Replace(f.String(), "RouteType", "RouteType", 1) + ","
	}
	repeatedStringForRoutes += "}"
	repeatedStringForWafExclusionRules := "[]*SimpleWafExclusionRule{"
	for _, f := range this.WafExclusionRules {
		repeatedStringForWafExclusionRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleWafExclusionRule", "policy.SimpleWafExclusionRule", 1) + ","
	}
	repeatedStringForWafExclusionRules += "}"
	repeatedStringForBlockedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.BlockedClients {
		repeatedStringForBlockedClients += strings.Replace(f.String(), "SimpleClientSrcRule", "SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForBlockedClients += "}"
	repeatedStringForTrustedClients := "[]*SimpleClientSrcRule{"
	for _, f := range this.TrustedClients {
		repeatedStringForTrustedClients += strings.Replace(f.String(), "SimpleClientSrcRule", "SimpleClientSrcRule", 1) + ","
	}
	repeatedStringForTrustedClients += "}"
	repeatedStringForDdosMitigationRules := "[]*DDoSMitigationRule{"
	for _, f := range this.DdosMitigationRules {
		repeatedStringForDdosMitigationRules += strings.Replace(f.String(), "DDoSMitigationRule", "DDoSMitigationRule", 1) + ","
	}
	repeatedStringForDdosMitigationRules += "}"
	repeatedStringForDownstreamTlsCertificateExpirationTimestamps := "[]*Timestamp{"
	for _, f := range this.DownstreamTlsCertificateExpirationTimestamps {
		repeatedStringForDownstreamTlsCertificateExpirationTimestamps += strings.Replace(fmt.Sprintf("%v", f), "Timestamp", "types.Timestamp", 1) + ","
	}
	repeatedStringForDownstreamTlsCertificateExpirationTimestamps += "}"
	repeatedStringForDataGuardRules := "[]*SimpleDataGuardRule{"
	for _, f := range this.DataGuardRules {
		repeatedStringForDataGuardRules += strings.Replace(fmt.Sprintf("%v", f), "SimpleDataGuardRule", "policy.SimpleDataGuardRule", 1) + ","
	}
	repeatedStringForDataGuardRules += "}"
	repeatedStringForDnsInfo := "[]*DnsInfo{"
	for _, f := range this.DnsInfo {
		repeatedStringForDnsInfo += strings.Replace(fmt.Sprintf("%v", f), "DnsInfo", "virtual_host_dns_info.DnsInfo", 1) + ","
	}
	repeatedStringForDnsInfo += "}"
	s := strings.Join([]string{`&GetSpecType{`,
		`Domains:` + fmt.Sprintf("%v", this.Domains) + `,`,
		`LoadbalancerType:` + fmt.Sprintf("%v", this.LoadbalancerType) + `,`,
		`AdvertiseChoice:` + fmt.Sprintf("%v", this.AdvertiseChoice) + `,`,
		`DefaultRoutePools:` + repeatedStringForDefaultRoutePools + `,`,
		`Routes:` + repeatedStringForRoutes + `,`,
		`CorsPolicy:` + strings.Replace(fmt.Sprintf("%v", this.CorsPolicy), "CorsPolicy", "schema.CorsPolicy", 1) + `,`,
		`WafChoice:` + fmt.Sprintf("%v", this.WafChoice) + `,`,
		`AddLocation:` + fmt.Sprintf("%v", this.AddLocation) + `,`,
		`ChallengeType:` + fmt.Sprintf("%v", this.ChallengeType) + `,`,
		`MoreOption:` + strings.Replace(this.MoreOption.String(), "AdvancedOptionsType", "AdvancedOptionsType", 1) + `,`,
		`UserIdChoice:` + fmt.Sprintf("%v", this.UserIdChoice) + `,`,
		`RateLimitChoice:` + fmt.Sprintf("%v", this.RateLimitChoice) + `,`,
		`MaliciousUserMitigation:` + strings.Replace(fmt.Sprintf("%v", this.MaliciousUserMitigation), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`WafExclusionRules:` + repeatedStringForWafExclusionRules + `,`,
		`BlockedClients:` + repeatedStringForBlockedClients + `,`,
		`TrustedClients:` + repeatedStringForTrustedClients + `,`,
		`DdosMitigationRules:` + repeatedStringForDdosMitigationRules + `,`,
		`ServicePolicyChoice:` + fmt.Sprintf("%v", this.ServicePolicyChoice) + `,`,
		`HashPolicyChoice:` + fmt.Sprintf("%v", this.HashPolicyChoice) + `,`,
		`MlConfigChoice:` + fmt.Sprintf("%v", this.MlConfigChoice) + `,`,
		`BotDefenseChoice:` + fmt.Sprintf("%v", this.BotDefenseChoice) + `,`,
		`ApiDefinitionChoice:` + fmt.Sprintf("%v", this.ApiDefinitionChoice) + `,`,
		`DownstreamTlsCertificateExpirationTimestamps:` + repeatedStringForDownstreamTlsCertificateExpirationTimestamps + `,`,
		`DataGuardRules:` + repeatedStringForDataGuardRules + `,`,
		`IpReputationChoice:` + fmt.Sprintf("%v", this.IpReputationChoice) + `,`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`DnsInfo:` + repeatedStringForDnsInfo + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`AutoCertState:` + fmt.Sprintf("%v", this.AutoCertState) + `,`,
		`AutoCertInfo:` + strings.Replace(fmt.Sprintf("%v", this.AutoCertInfo), "AutoCertInfoType", "virtual_host.AutoCertInfoType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "ProxyTypeHttp", "ProxyTypeHttp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Https) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Https{`,
		`Https:` + strings.Replace(fmt.Sprintf("%v", this.Https), "ProxyTypeHttps", "ProxyTypeHttps", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseOnPublic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseOnPublic{`,
		`AdvertiseOnPublic:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublic), "AdvertisePublic", "views.AdvertisePublic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseCustom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseCustom{`,
		`AdvertiseCustom:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseCustom), "AdvertiseCustom", "views.AdvertiseCustom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Waf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Waf{`,
		`Waf:` + strings.Replace(fmt.Sprintf("%v", this.Waf), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_WafRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_WafRule{`,
		`WafRule:` + strings.Replace(fmt.Sprintf("%v", this.WafRule), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableWaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableWaf{`,
		`DisableWaf:` + strings.Replace(fmt.Sprintf("%v", this.DisableWaf), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DoNotAdvertise) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DoNotAdvertise{`,
		`DoNotAdvertise:` + strings.Replace(fmt.Sprintf("%v", this.DoNotAdvertise), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AdvertiseOnPublicDefaultVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AdvertiseOnPublicDefaultVip{`,
		`AdvertiseOnPublicDefaultVip:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseOnPublicDefaultVip), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_JsChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_JsChallenge{`,
		`JsChallenge:` + strings.Replace(fmt.Sprintf("%v", this.JsChallenge), "JavascriptChallengeType", "virtual_host.JavascriptChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_UserIdentification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_UserIdentification{`,
		`UserIdentification:` + strings.Replace(fmt.Sprintf("%v", this.UserIdentification), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableRateLimit{`,
		`DisableRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.DisableRateLimit), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RateLimit{`,
		`RateLimit:` + strings.Replace(fmt.Sprintf("%v", this.RateLimit), "RateLimitConfigType", "RateLimitConfigType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CaptchaChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CaptchaChallenge{`,
		`CaptchaChallenge:` + strings.Replace(fmt.Sprintf("%v", this.CaptchaChallenge), "CaptchaChallengeType", "virtual_host.CaptchaChallengeType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoChallenge{`,
		`NoChallenge:` + strings.Replace(fmt.Sprintf("%v", this.NoChallenge), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_HttpsAutoCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_HttpsAutoCert{`,
		`HttpsAutoCert:` + strings.Replace(fmt.Sprintf("%v", this.HttpsAutoCert), "ProxyTypeHttpsAutoCerts", "ProxyTypeHttpsAutoCerts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ServicePoliciesFromNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ServicePoliciesFromNamespace{`,
		`ServicePoliciesFromNamespace:` + strings.Replace(fmt.Sprintf("%v", this.ServicePoliciesFromNamespace), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_NoServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_NoServicePolicies{`,
		`NoServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.NoServicePolicies), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ActiveServicePolicies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ActiveServicePolicies{`,
		`ActiveServicePolicies:` + strings.Replace(fmt.Sprintf("%v", this.ActiveServicePolicies), "ServicePolicyList", "ServicePolicyList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RoundRobin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RoundRobin{`,
		`RoundRobin:` + strings.Replace(fmt.Sprintf("%v", this.RoundRobin), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_LeastActive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_LeastActive{`,
		`LeastActive:` + strings.Replace(fmt.Sprintf("%v", this.LeastActive), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_Random) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_Random{`,
		`Random:` + strings.Replace(fmt.Sprintf("%v", this.Random), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SourceIpStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SourceIpStickiness{`,
		`SourceIpStickiness:` + strings.Replace(fmt.Sprintf("%v", this.SourceIpStickiness), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_CookieStickiness) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_CookieStickiness{`,
		`CookieStickiness:` + strings.Replace(fmt.Sprintf("%v", this.CookieStickiness), "CookieForHashing", "route.CookieForHashing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_RingHash) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_RingHash{`,
		`RingHash:` + strings.Replace(fmt.Sprintf("%v", this.RingHash), "HashPolicyListType", "HashPolicyListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_PolicyBasedChallenge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_PolicyBasedChallenge{`,
		`PolicyBasedChallenge:` + strings.Replace(fmt.Sprintf("%v", this.PolicyBasedChallenge), "PolicyBasedChallenge", "PolicyBasedChallenge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_AppFirewall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_AppFirewall{`,
		`AppFirewall:` + strings.Replace(fmt.Sprintf("%v", this.AppFirewall), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_SingleLbApp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_SingleLbApp{`,
		`SingleLbApp:` + strings.Replace(fmt.Sprintf("%v", this.SingleLbApp), "SingleLoadBalancerAppSetting", "SingleLoadBalancerAppSetting", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_MultiLbApp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_MultiLbApp{`,
		`MultiLbApp:` + strings.Replace(fmt.Sprintf("%v", this.MultiLbApp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableBotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableBotDefense{`,
		`DisableBotDefense:` + strings.Replace(fmt.Sprintf("%v", this.DisableBotDefense), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_BotDefense) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_BotDefense{`,
		`BotDefense:` + strings.Replace(fmt.Sprintf("%v", this.BotDefense), "ShapeBotDefenseType", "ShapeBotDefenseType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_UserIdClientIp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_UserIdClientIp{`,
		`UserIdClientIp:` + strings.Replace(fmt.Sprintf("%v", this.UserIdClientIp), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ApiDefinitions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ApiDefinitions{`,
		`ApiDefinitions:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinitions), "ApiDefinitionList", "ApiDefinitionList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableIpReputation{`,
		`DisableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.DisableIpReputation), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_EnableIpReputation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_EnableIpReputation{`,
		`EnableIpReputation:` + strings.Replace(fmt.Sprintf("%v", this.EnableIpReputation), "IPThreatCategoryListType", "IPThreatCategoryListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ApiRateLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ApiRateLimit{`,
		`ApiRateLimit:` + strings.Replace(fmt.Sprintf("%v", this.ApiRateLimit), "APIRateLimit", "APIRateLimit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_DisableApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_DisableApiDefinition{`,
		`DisableApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.DisableApiDefinition), "Empty", "schema.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpecType_ApiDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpecType_ApiDefinition{`,
		`ApiDefinition:` + strings.Replace(fmt.Sprintf("%v", this.ApiDefinition), "ObjectRefType", "views.ObjectRefType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *InlineRateLimiter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InlineRateLimiter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InlineRateLimiter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			m.Unit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unit |= rate_limiter.RateLimitPeriodUnit(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseHttpLbUserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CountByChoice = &InlineRateLimiter_UseHttpLbUserId{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefUserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CountByChoice = &InlineRateLimiter_RefUserId{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerUrlRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerUrlRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerUrlRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainChoice = &ServerUrlRule_AnyDomain{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &ServerUrlRule_SpecificDomain{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineRateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InlineRateLimiter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimiterChoice = &ServerUrlRule_InlineRateLimiter{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefRateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimiterChoice = &ServerUrlRule_RefRateLimiter{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiEndpointRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiEndpointRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiEndpointRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainChoice = &ApiEndpointRule_AnyDomain{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainChoice = &ApiEndpointRule_SpecificDomain{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEndpointPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointMethod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiEndpointMethod == nil {
				m.ApiEndpointMethod = &policy.HttpMethodMatcherType{}
			}
			if err := m.ApiEndpointMethod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineRateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InlineRateLimiter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimiterChoice = &ApiEndpointRule_InlineRateLimiter{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefRateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimiterChoice = &ApiEndpointRule_RefRateLimiter{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIRateLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIRateLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIRateLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoIpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &APIRateLimit_NoIpAllowedList{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.PrefixStringListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &APIRateLimit_IpAllowedList{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomIpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomIpAllowedList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &APIRateLimit_CustomIpAllowedList{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerUrlRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerUrlRules = append(m.ServerUrlRules, &ServerUrlRule{})
			if err := m.ServerUrlRules[len(m.ServerUrlRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpointRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEndpointRules = append(m.ApiEndpointRules, &ApiEndpointRule{})
			if err := m.ApiEndpointRules[len(m.ApiEndpointRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamTlsValidationContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamTlsValidationContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamTlsValidationContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedCaUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedCaUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoCrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CrlChoice = &DownstreamTlsValidationContext_NoCrl{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CrlChoice = &DownstreamTlsValidationContext_Crl{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamTlsParamsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamTlsParamsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamTlsParamsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsConfig == nil {
				m.TlsConfig = &views.TlsConfig{}
			}
			if err := m.TlsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsCertificates = append(m.TlsCertificates, &schema.TlsCertificateType{})
			if err := m.TlsCertificates[len(m.TlsCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &DownstreamTlsParamsType_NoMtls{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamTlsValidationContext{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &DownstreamTlsParamsType_UseMtls{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyTypeHttps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyTypeHttps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyTypeHttps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpRedirect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HttpRedirect = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddHsts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddHsts = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsParameters == nil {
				m.TlsParameters = &DownstreamTlsParamsType{}
			}
			if err := m.TlsParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &ProxyTypeHttps_DefaultHeader{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &ProxyTypeHttps_ServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppendServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &ProxyTypeHttps_AppendServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassThrough", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &ProxyTypeHttps_PassThrough{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &ProxyTypeHttps_EnablePathNormalize{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &ProxyTypeHttps_DisablePathNormalize{v}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyTypeHttp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyTypeHttp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyTypeHttp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsVolterraManaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DnsVolterraManaged = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyTypeHttpsAutoCerts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyTypeHttpsAutoCerts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyTypeHttpsAutoCerts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpRedirect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HttpRedirect = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddHsts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddHsts = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsConfig == nil {
				m.TlsConfig = &views.TlsConfig{}
			}
			if err := m.TlsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &ProxyTypeHttpsAutoCerts_NoMtls{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamTlsValidationContext{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MtlsChoice = &ProxyTypeHttpsAutoCerts_UseMtls{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_DefaultHeader{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_ServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppendServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_AppendServerName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassThrough", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServerHeaderChoice = &ProxyTypeHttpsAutoCerts_PassThrough{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &ProxyTypeHttpsAutoCerts_EnablePathNormalize{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &ProxyTypeHttpsAutoCerts_DisablePathNormalize{v}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HashPolicyListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashPolicyListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashPolicyListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashPolicy = append(m.HashPolicy, &route.HashPolicyType{})
			if err := m.HashPolicy[len(m.HashPolicy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorPolicyType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorPolicyType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorPolicyType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginPool == nil {
				m.OriginPool = &views.ObjectRefType{}
			}
			if err := m.OriginPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Percent == nil {
				m.Percent = &schema.FractionalPercent{}
			}
			if err := m.Percent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteSimpleAdvancedOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteSimpleAdvancedOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteSimpleAdvancedOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonHashPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &RouteSimpleAdvancedOptions_CommonHashPolicy{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificHashPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HashPolicyListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &RouteSimpleAdvancedOptions_SpecificHashPolicy{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= schema.RoutingPriority(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointSubsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndpointSubsets == nil {
				m.EndpointSubsets = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EndpointSubsets[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePrefixRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RewriteChoice = &RouteSimpleAdvancedOptions_DisablePrefixRewrite{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixRewrite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewriteChoice = &RouteSimpleAdvancedOptions_PrefixRewrite{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToAdd = append(m.RequestHeadersToAdd, &schema.HeaderManipulationOptionType{})
			if err := m.RequestHeadersToAdd[len(m.RequestHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToAdd = append(m.ResponseHeadersToAdd, &schema.HeaderManipulationOptionType{})
			if err := m.ResponseHeadersToAdd[len(m.ResponseHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToRemove = append(m.ResponseHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableLocationAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableLocationAdd = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &RouteSimpleAdvancedOptions_DisableWaf{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &RouteSimpleAdvancedOptions_Waf{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &RouteSimpleAdvancedOptions_WafRule{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSpdy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SpdyChoice = &RouteSimpleAdvancedOptions_DisableSpdy{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableSpdy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SpdyChoice = &RouteSimpleAdvancedOptions_EnableSpdy{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWebSocketConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WebsocketChoice = &RouteSimpleAdvancedOptions_DisableWebSocketConfig{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebSocketConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &route.WebsocketConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WebsocketChoice = &RouteSimpleAdvancedOptions_WebSocketConfig{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RetryPolicyChoice = &RouteSimpleAdvancedOptions_DefaultRetryPolicy{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.RetryPolicyType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RetryPolicyChoice = &RouteSimpleAdvancedOptions_RetryPolicy{v}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonBuffering", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BufferChoice = &RouteSimpleAdvancedOptions_CommonBuffering{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.BufferConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BufferChoice = &RouteSimpleAdvancedOptions_BufferPolicy{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMirroring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MirroringChoice = &RouteSimpleAdvancedOptions_DisableMirroring{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MirrorPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MirrorPolicyType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MirroringChoice = &RouteSimpleAdvancedOptions_MirrorPolicy{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &RouteSimpleAdvancedOptions_RetractCluster{v}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotRetractCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClusterRetractChoice = &RouteSimpleAdvancedOptions_DoNotRetractCluster{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &RouteSimpleAdvancedOptions_AppFirewall{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeSimpleWithDefaultOriginPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeSimpleWithDefaultOriginPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeSimpleWithDefaultOriginPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= schema.HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &schema.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &RouteTypeSimpleWithDefaultOriginPool_AutoHostRewrite{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostRewrite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostRewriteParams = &RouteTypeSimpleWithDefaultOriginPool_HostRewrite{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &RouteTypeSimpleWithDefaultOriginPool_DisableHostRewrite{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeSimple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeSimple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeSimple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &schema.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= schema.HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPools = append(m.OriginPools, &views.OriginPoolWithWeight{})
			if err := m.OriginPools[len(m.OriginPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &RouteTypeSimple_AutoHostRewrite{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostRewrite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostRewriteParams = &RouteTypeSimple_HostRewrite{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &RouteTypeSimple_DisableHostRewrite{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvancedOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdvancedOptions == nil {
				m.AdvancedOptions = &RouteSimpleAdvancedOptions{}
			}
			if err := m.AdvancedOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &schema.HeaderMatcherType{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeRedirect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeRedirect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeRedirect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &schema.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= schema.HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRedirect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteRedirect == nil {
				m.RouteRedirect = &route.RouteRedirect{}
			}
			if err := m.RouteRedirect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &schema.HeaderMatcherType{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeDirectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeDirectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeDirectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &schema.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethod", wireType)
			}
			m.HttpMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpMethod |= schema.HttpMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteDirectResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteDirectResponse == nil {
				m.RouteDirectResponse = &route.RouteDirectResponse{}
			}
			if err := m.RouteDirectResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &schema.HeaderMatcherType{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTypeCustomRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTypeCustomRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTypeCustomRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteRef == nil {
				m.RouteRef = &views.ObjectRefType{}
			}
			if err := m.RouteRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteTypeSimple{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &RouteType_SimpleRoute{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteTypeRedirect{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &RouteType_RedirectRoute{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectResponseRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteTypeDirectResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &RouteType_DirectResponseRoute{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomRouteObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RouteTypeCustomRoute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Choice = &RouteType_CustomRouteObject{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvancedOptionsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvancedOptionsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvancedOptionsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToAdd = append(m.RequestHeadersToAdd, &schema.HeaderManipulationOptionType{})
			if err := m.RequestHeadersToAdd[len(m.RequestHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeadersToRemove = append(m.RequestHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToAdd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToAdd = append(m.ResponseHeadersToAdd, &schema.HeaderManipulationOptionType{})
			if err := m.ResponseHeadersToAdd[len(m.ResponseHeadersToAdd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeadersToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeadersToRemove = append(m.ResponseHeadersToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestHeaderSize", wireType)
			}
			m.MaxRequestHeaderSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestHeaderSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BufferPolicy == nil {
				m.BufferPolicy = &schema.BufferConfigType{}
			}
			if err := m.BufferPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressionParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompressionParams == nil {
				m.CompressionParams = &virtual_host.CompressionType{}
			}
			if err := m.CompressionParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomErrors == nil {
				m.CustomErrors = make(map[uint32]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CustomErrors[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JavascriptInfo == nil {
				m.JavascriptInfo = &virtual_host.JavaScriptConfigType{}
			}
			if err := m.JavascriptInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jwt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jwt = append(m.Jwt, &views.ObjectRefType{})
			if err := m.Jwt[len(m.Jwt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDefaultErrorPages", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDefaultErrorPages = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &AdvancedOptionsType_EnablePathNormalize{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisablePathNormalize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PathNormalizeChoice = &AdvancedOptionsType_DisablePathNormalize{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableStrictSniHostHeaderCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StrictSniHostHeaderCheckChoice = &AdvancedOptionsType_EnableStrictSniHostHeaderCheck{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalDomains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DomainNameList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.StrictSniHostHeaderCheckChoice = &AdvancedOptionsType_AdditionalDomains{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyBasedChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyBasedChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyBasedChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultJsChallengeParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JsChallengeParametersChoice = &PolicyBasedChallenge_DefaultJsChallengeParameters{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallengeParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JsChallengeParametersChoice = &PolicyBasedChallenge_JsChallengeParameters{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultCaptchaChallengeParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CaptchaChallengeParametersChoice = &PolicyBasedChallenge_DefaultCaptchaChallengeParameters{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallengeParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CaptchaChallengeParametersChoice = &PolicyBasedChallenge_CaptchaChallengeParameters{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTemporaryBlockingParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TemporaryBlockingParametersChoice = &PolicyBasedChallenge_DefaultTemporaryBlockingParameters{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemporaryUserBlocking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.TemporaryUserBlockingType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TemporaryBlockingParametersChoice = &PolicyBasedChallenge_TemporaryUserBlocking{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMitigationSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserMitigationChoice = &PolicyBasedChallenge_DefaultMitigationSettings{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserMitigationChoice = &PolicyBasedChallenge_MaliciousUserMitigation{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeChoice = &PolicyBasedChallenge_NoChallenge{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysEnableJsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeChoice = &PolicyBasedChallenge_AlwaysEnableJsChallenge{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysEnableCaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeChoice = &PolicyBasedChallenge_AlwaysEnableCaptchaChallenge{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RuleList == nil {
				m.RuleList = &ChallengeRuleList{}
			}
			if err := m.RuleList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &service_policy_rule.ChallengeRuleSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeRuleList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeRuleList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeRuleList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &ChallengeRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpHeaderMatcherList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpHeaderMatcherList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpHeaderMatcherList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &schema.HeaderMatcherType{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleClientSrcRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleClientSrcRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleClientSrcRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSourceChoice = &SimpleClientSrcRule_IpPrefix{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsNumber", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientSourceChoice = &SimpleClientSrcRule_AsNumber{v}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpirationTimestamp == nil {
				m.ExpirationTimestamp = &types.Timestamp{}
			}
			if err := m.ExpirationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipProcessing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionChoice = &SimpleClientSrcRule_SkipProcessing{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafSkipProcessing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionChoice = &SimpleClientSrcRule_WafSkipProcessing{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotSkipProcessing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ActionChoice = &SimpleClientSrcRule_BotSkipProcessing{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HttpHeaderMatcherList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ClientSourceChoice = &SimpleClientSrcRule_HttpHeader{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DDoSClientSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DDoSClientSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DDoSClientSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsnList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AsnList == nil {
				m.AsnList = &policy.AsnMatchList{}
			}
			if err := m.AsnList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v policy.CountryCode
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= policy.CountryCode(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CountryList = append(m.CountryList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.CountryList) == 0 {
					m.CountryList = make([]policy.CountryCode, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v policy.CountryCode
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= policy.CountryCode(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CountryList = append(m.CountryList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryList", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsFingerprintMatcher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsFingerprintMatcher == nil {
				m.TlsFingerprintMatcher = &policy.TlsFingerprintMatcherType{}
			}
			if err := m.TlsFingerprintMatcher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DDoSMitigationRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DDoSMitigationRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DDoSMitigationRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MitigationAction = &DDoSMitigationRule_Block{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosClientSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DDoSClientSource{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MitigationChoice = &DDoSMitigationRule_DdosClientSource{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefixList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &policy.PrefixMatchList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MitigationChoice = &DDoSMitigationRule_IpPrefixList{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpirationTimestamp == nil {
				m.ExpirationTimestamp = &types.Timestamp{}
			}
			if err := m.ExpirationTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomIpAllowedList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomIpAllowedList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomIpAllowedList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiterAllowedPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimiterAllowedPrefixes = append(m.RateLimiterAllowedPrefixes, &views.ObjectRefType{})
			if err := m.RateLimiterAllowedPrefixes[len(m.RateLimiterAllowedPrefixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimitConfigType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitConfigType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitConfigType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateLimiter == nil {
				m.RateLimiter = &rate_limiter.RateLimitValue{}
			}
			if err := m.RateLimiter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoIpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &RateLimitConfigType_NoIpAllowedList{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.PrefixStringListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &RateLimitConfigType_IpAllowedList{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomIpAllowedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomIpAllowedList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpAllowedListChoice = &RateLimitConfigType_CustomIpAllowedList{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoPolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PolicyChoice = &RateLimitConfigType_NoPolicies{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &rate_limiter_policy.PolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PolicyChoice = &RateLimitConfigType_Policies{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicePolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicePolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicePolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, &views.ObjectRefType{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiDefinitionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiDefinitionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiDefinitionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiDefinitions = append(m.ApiDefinitions, &views.ObjectRefType{})
			if err := m.ApiDefinitions[len(m.ApiDefinitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiDiscoverySetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiDiscoverySetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiDiscoverySetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableLearnFromRedirectTraffic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LearnFromRedirectTraffic = &ApiDiscoverySetting_DisableLearnFromRedirectTraffic{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableLearnFromRedirectTraffic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LearnFromRedirectTraffic = &ApiDiscoverySetting_EnableLearnFromRedirectTraffic{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleLoadBalancerAppSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleLoadBalancerAppSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleLoadBalancerAppSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApiDiscoverySetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &SingleLoadBalancerAppSetting_EnableDiscovery{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDiscovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDiscoveryChoice = &SingleLoadBalancerAppSetting_DisableDiscovery{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDdosDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DdosDetectionChoice = &SingleLoadBalancerAppSetting_EnableDdosDetection{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDdosDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DdosDetectionChoice = &SingleLoadBalancerAppSetting_DisableDdosDetection{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &SingleLoadBalancerAppSetting_EnableMaliciousUserDetection{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableMaliciousUserDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MaliciousUserDetectionChoice = &SingleLoadBalancerAppSetting_DisableMaliciousUserDetection{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeBotDefenseType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeBotDefenseType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeBotDefenseType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionalEndpoint", wireType)
			}
			m.RegionalEndpoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionalEndpoint |= ShapeBotDefenseRegion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &ShapeBotDefensePolicyType{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeBotDefensePolicyType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeBotDefensePolicyType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeBotDefensePolicyType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectedAppEndpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtectedAppEndpoints = append(m.ProtectedAppEndpoints, &AppEndpointType{})
			if err := m.ProtectedAppEndpoints[len(m.ProtectedAppEndpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsDownloadPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsDownloadPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableJsInsert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JavaScriptChoice = &ShapeBotDefensePolicyType_DisableJsInsert{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsInsertAllPages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ShapeJavaScriptInsertAllType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JavaScriptChoice = &ShapeBotDefensePolicyType_JsInsertAllPages{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsInsertAllPagesExcept", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ShapeJavaScriptInsertAllWithExceptionsType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JavaScriptChoice = &ShapeBotDefensePolicyType_JsInsertAllPagesExcept{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsInsertionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ShapeJavaScriptInsertType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.JavaScriptChoice = &ShapeBotDefensePolicyType_JsInsertionRules{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppEndpointType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppEndpointType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppEndpointType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v schema.HttpMethod
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= schema.HttpMethod(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HttpMethods = append(m.HttpMethods, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.HttpMethods) == 0 {
					m.HttpMethods = make([]schema.HttpMethod, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v schema.HttpMethod
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= schema.HttpMethod(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HttpMethods = append(m.HttpMethods, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpMethods", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= URLScheme(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &schema.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainMatcherChoice = &AppEndpointType_AnyDomain{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DomainType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainMatcherChoice = &AppEndpointType_Domain{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Web", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AppTrafficTypeChoice = &AppEndpointType_Web{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AppTrafficTypeChoice = &AppEndpointType_Mobile{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebMobile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WebMobileTrafficType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AppTrafficTypeChoice = &AppEndpointType_WebMobile{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mitigation == nil {
				m.Mitigation = &policy.ShapeBotMitigationAction{}
			}
			if err := m.Mitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebMobileTrafficType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebMobileTrafficType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebMobileTrafficType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &policy.HeaderMatcherTypeBasic{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeJavaScriptInsertType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeJavaScriptInsertType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeJavaScriptInsertType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &ShapeJavaScriptInsertionRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeList = append(m.ExcludeList, &ShapeJavaScriptExclusionRule{})
			if err := m.ExcludeList[len(m.ExcludeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeJavaScriptInsertAllWithExceptionsType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeJavaScriptInsertAllWithExceptionsType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeJavaScriptInsertAllWithExceptionsType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptLocation", wireType)
			}
			m.JavascriptLocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JavascriptLocation |= JavaScriptLocation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeList = append(m.ExcludeList, &ShapeJavaScriptExclusionRule{})
			if err := m.ExcludeList[len(m.ExcludeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeJavaScriptInsertAllType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeJavaScriptInsertAllType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeJavaScriptInsertAllType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptLocation", wireType)
			}
			m.JavascriptLocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JavascriptLocation |= JavaScriptLocation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeJavaScriptInsertionRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeJavaScriptInsertionRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeJavaScriptInsertionRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainMatcherChoice = &ShapeJavaScriptInsertionRule_AnyDomain{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DomainType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainMatcherChoice = &ShapeJavaScriptInsertionRule_Domain{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &schema.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JavascriptLocation", wireType)
			}
			m.JavascriptLocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JavascriptLocation |= JavaScriptLocation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShapeJavaScriptExclusionRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShapeJavaScriptExclusionRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShapeJavaScriptExclusionRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &schema.MessageMetaType{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnyDomain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainMatcherChoice = &ShapeJavaScriptExclusionRule_AnyDomain{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.DomainType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DomainMatcherChoice = &ShapeJavaScriptExclusionRule_Domain{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &schema.PathMatcherType{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPThreatCategoryListType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPThreatCategoryListType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPThreatCategoryListType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v policy.IPThreatCategory
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= policy.IPThreatCategory(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IpThreatCategories = append(m.IpThreatCategories, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.IpThreatCategories) == 0 {
					m.IpThreatCategories = make([]policy.IPThreatCategory, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v policy.IPThreatCategory
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= policy.IPThreatCategory(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IpThreatCategories = append(m.IpThreatCategories, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IpThreatCategories", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_Http{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_Https{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRoutePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRoutePools = append(m.DefaultRoutePools, &views.OriginPoolWithWeight{})
			if err := m.DefaultRoutePools[len(m.DefaultRoutePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &RouteType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GlobalSpecType_Waf{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GlobalSpecType_WafRule{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GlobalSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GlobalSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &GlobalSpecType_UserIdentification{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GlobalSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GlobalSpecType_RateLimit{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttpsAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GlobalSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &GlobalSpecType_AutoHostRewrite{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostRewrite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostRewriteParams = &GlobalSpecType_HostRewrite{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableHostRewrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HostRewriteParams = &GlobalSpecType_DisableHostRewrite{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserMitigation == nil {
				m.MaliciousUserMitigation = &views.ObjectRefType{}
			}
			if err := m.MaliciousUserMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedClients = append(m.BlockedClients, &SimpleClientSrcRule{})
			if err := m.BlockedClients[len(m.BlockedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedClients = append(m.TrustedClients, &SimpleClientSrcRule{})
			if err := m.TrustedClients[len(m.TrustedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosMitigationRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DdosMitigationRules = append(m.DdosMitigationRules, &DDoSMitigationRule{})
			if err := m.DdosMitigationRules[len(m.DdosMitigationRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GlobalSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GlobalSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GlobalSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_RoundRobin{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_LeastActive{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_Random{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_SourceIpStickiness{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &route.CookieForHashing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_CookieStickiness{v}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HashPolicyListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GlobalSpecType_RingHash{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GlobalSpecType_PolicyBasedChallenge{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GlobalSpecType_AppFirewall{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleLbApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SingleLoadBalancerAppSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MlConfigChoice = &GlobalSpecType_SingleLbApp{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiLbApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MlConfigChoice = &GlobalSpecType_MultiLbApp{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableBotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &GlobalSpecType_DisableBotDefense{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ShapeBotDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &GlobalSpecType_BotDefense{v}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdClientIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &GlobalSpecType_UserIdClientIp{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApiDefinitionList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GlobalSpecType_ApiDefinitions{v}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamTlsCertificateExpirationTimestamps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownstreamTlsCertificateExpirationTimestamps = append(m.DownstreamTlsCertificateExpirationTimestamps, &types.Timestamp{})
			if err := m.DownstreamTlsCertificateExpirationTimestamps[len(m.DownstreamTlsCertificateExpirationTimestamps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGuardRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataGuardRules = append(m.DataGuardRules, &policy.SimpleDataGuardRule{})
			if err := m.DataGuardRules[len(m.DataGuardRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &GlobalSpecType_DisableIpReputation{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &GlobalSpecType_EnableIpReputation{v}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &APIRateLimit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GlobalSpecType_ApiRateLimit{v}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GlobalSpecType_DisableApiDefinition{v}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GlobalSpecType_ApiDefinition{v}
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewInternal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewInternal == nil {
				m.ViewInternal = &views.ObjectRefType{}
			}
			if err := m.ViewInternal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= virtual_host.VirtualHostState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1004:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertState", wireType)
			}
			m.AutoCertState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoCertState |= virtual_host.CertificationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1010:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCertInfo == nil {
				m.AutoCertInfo = &virtual_host.AutoCertInfoType{}
			}
			if err := m.AutoCertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_Http{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_Https{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRoutePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRoutePools = append(m.DefaultRoutePools, &views.OriginPoolWithWeight{})
			if err := m.DefaultRoutePools[len(m.DefaultRoutePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &RouteType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &CreateSpecType_Waf{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &CreateSpecType_WafRule{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &CreateSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &CreateSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &CreateSpecType_UserIdentification{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &CreateSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &CreateSpecType_RateLimit{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttpsAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &CreateSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserMitigation == nil {
				m.MaliciousUserMitigation = &views.ObjectRefType{}
			}
			if err := m.MaliciousUserMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedClients = append(m.BlockedClients, &SimpleClientSrcRule{})
			if err := m.BlockedClients[len(m.BlockedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedClients = append(m.TrustedClients, &SimpleClientSrcRule{})
			if err := m.TrustedClients[len(m.TrustedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosMitigationRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DdosMitigationRules = append(m.DdosMitigationRules, &DDoSMitigationRule{})
			if err := m.DdosMitigationRules[len(m.DdosMitigationRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &CreateSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &CreateSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &CreateSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_RoundRobin{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_LeastActive{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_Random{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_SourceIpStickiness{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &route.CookieForHashing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_CookieStickiness{v}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HashPolicyListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &CreateSpecType_RingHash{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &CreateSpecType_PolicyBasedChallenge{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &CreateSpecType_AppFirewall{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleLbApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SingleLoadBalancerAppSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MlConfigChoice = &CreateSpecType_SingleLbApp{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiLbApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MlConfigChoice = &CreateSpecType_MultiLbApp{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableBotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &CreateSpecType_DisableBotDefense{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ShapeBotDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &CreateSpecType_BotDefense{v}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdClientIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &CreateSpecType_UserIdClientIp{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApiDefinitionList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &CreateSpecType_ApiDefinitions{v}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGuardRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataGuardRules = append(m.DataGuardRules, &policy.SimpleDataGuardRule{})
			if err := m.DataGuardRules[len(m.DataGuardRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &CreateSpecType_DisableIpReputation{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &CreateSpecType_EnableIpReputation{v}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &APIRateLimit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &CreateSpecType_ApiRateLimit{v}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &CreateSpecType_DisableApiDefinition{v}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &CreateSpecType_ApiDefinition{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_Http{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_Https{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRoutePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRoutePools = append(m.DefaultRoutePools, &views.OriginPoolWithWeight{})
			if err := m.DefaultRoutePools[len(m.DefaultRoutePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &RouteType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &ReplaceSpecType_Waf{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &ReplaceSpecType_WafRule{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &ReplaceSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &ReplaceSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &ReplaceSpecType_UserIdentification{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &ReplaceSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &ReplaceSpecType_RateLimit{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttpsAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &ReplaceSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserMitigation == nil {
				m.MaliciousUserMitigation = &views.ObjectRefType{}
			}
			if err := m.MaliciousUserMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedClients = append(m.BlockedClients, &SimpleClientSrcRule{})
			if err := m.BlockedClients[len(m.BlockedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedClients = append(m.TrustedClients, &SimpleClientSrcRule{})
			if err := m.TrustedClients[len(m.TrustedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosMitigationRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DdosMitigationRules = append(m.DdosMitigationRules, &DDoSMitigationRule{})
			if err := m.DdosMitigationRules[len(m.DdosMitigationRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &ReplaceSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &ReplaceSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &ReplaceSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_RoundRobin{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_LeastActive{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_Random{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_SourceIpStickiness{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &route.CookieForHashing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_CookieStickiness{v}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HashPolicyListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &ReplaceSpecType_RingHash{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &ReplaceSpecType_PolicyBasedChallenge{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &ReplaceSpecType_AppFirewall{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleLbApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SingleLoadBalancerAppSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MlConfigChoice = &ReplaceSpecType_SingleLbApp{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiLbApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MlConfigChoice = &ReplaceSpecType_MultiLbApp{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableBotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &ReplaceSpecType_DisableBotDefense{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ShapeBotDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &ReplaceSpecType_BotDefense{v}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdClientIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &ReplaceSpecType_UserIdClientIp{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApiDefinitionList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &ReplaceSpecType_ApiDefinitions{v}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGuardRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataGuardRules = append(m.DataGuardRules, &policy.SimpleDataGuardRule{})
			if err := m.DataGuardRules[len(m.DataGuardRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &ReplaceSpecType_DisableIpReputation{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &ReplaceSpecType_EnableIpReputation{v}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &APIRateLimit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &ReplaceSpecType_ApiRateLimit{v}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &ReplaceSpecType_DisableApiDefinition{v}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &ReplaceSpecType_ApiDefinition{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpecType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpecType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpecType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_Http{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Https", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_Https{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertisePublic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublic{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseCustom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.AdvertiseCustom{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseCustom{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRoutePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRoutePools = append(m.DefaultRoutePools, &views.OriginPoolWithWeight{})
			if err := m.DefaultRoutePools[len(m.DefaultRoutePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &RouteType{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorsPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CorsPolicy == nil {
				m.CorsPolicy = &schema.CorsPolicy{}
			}
			if err := m.CorsPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GetSpecType_Waf{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GetSpecType_WafRule{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableWaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GetSpecType_DisableWaf{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotAdvertise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_DoNotAdvertise{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseOnPublicDefaultVip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdvertiseChoice = &GetSpecType_AdvertiseOnPublicDefaultVip{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddLocation = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.JavascriptChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_JsChallenge{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MoreOption == nil {
				m.MoreOption = &AdvancedOptionsType{}
			}
			if err := m.MoreOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdentification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &GetSpecType_UserIdentification{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GetSpecType_DisableRateLimit{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RateLimitConfigType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GetSpecType_RateLimit{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &virtual_host.CaptchaChallengeType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_CaptchaChallenge{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_NoChallenge{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpsAutoCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProxyTypeHttpsAutoCerts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LoadbalancerType = &GetSpecType_HttpsAutoCert{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliciousUserMitigation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaliciousUserMitigation == nil {
				m.MaliciousUserMitigation = &views.ObjectRefType{}
			}
			if err := m.MaliciousUserMitigation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WafExclusionRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WafExclusionRules = append(m.WafExclusionRules, &policy.SimpleWafExclusionRule{})
			if err := m.WafExclusionRules[len(m.WafExclusionRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedClients = append(m.BlockedClients, &SimpleClientSrcRule{})
			if err := m.BlockedClients[len(m.BlockedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedClients = append(m.TrustedClients, &SimpleClientSrcRule{})
			if err := m.TrustedClients[len(m.TrustedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdosMitigationRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DdosMitigationRules = append(m.DdosMitigationRules, &DDoSMitigationRule{})
			if err := m.DdosMitigationRules[len(m.DdosMitigationRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePoliciesFromNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GetSpecType_ServicePoliciesFromNamespace{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GetSpecType_NoServicePolicies{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveServicePolicies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServicePolicyList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ServicePolicyChoice = &GetSpecType_ActiveServicePolicies{v}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundRobin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_RoundRobin{v}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeastActive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_LeastActive{v}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_Random{v}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIpStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_SourceIpStickiness{v}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookieStickiness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &route.CookieForHashing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_CookieStickiness{v}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HashPolicyListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.HashPolicyChoice = &GetSpecType_RingHash{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyBasedChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PolicyBasedChallenge{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ChallengeType = &GetSpecType_PolicyBasedChallenge{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFirewall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WafChoice = &GetSpecType_AppFirewall{v}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleLbApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SingleLoadBalancerAppSetting{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MlConfigChoice = &GetSpecType_SingleLbApp{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiLbApp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MlConfigChoice = &GetSpecType_MultiLbApp{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableBotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &GetSpecType_DisableBotDefense{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotDefense", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ShapeBotDefenseType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.BotDefenseChoice = &GetSpecType_BotDefense{v}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdClientIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UserIdChoice = &GetSpecType_UserIdClientIp{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ApiDefinitionList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GetSpecType_ApiDefinitions{v}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamTlsCertificateExpirationTimestamps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownstreamTlsCertificateExpirationTimestamps = append(m.DownstreamTlsCertificateExpirationTimestamps, &types.Timestamp{})
			if err := m.DownstreamTlsCertificateExpirationTimestamps[len(m.DownstreamTlsCertificateExpirationTimestamps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataGuardRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataGuardRules = append(m.DataGuardRules, &policy.SimpleDataGuardRule{})
			if err := m.DataGuardRules[len(m.DataGuardRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &GetSpecType_DisableIpReputation{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIpReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IPThreatCategoryListType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpReputationChoice = &GetSpecType_EnableIpReputation{v}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRateLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &APIRateLimit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RateLimitChoice = &GetSpecType_ApiRateLimit{v}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &schema.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GetSpecType_DisableApiDefinition{v}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &views.ObjectRefType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ApiDefinitionChoice = &GetSpecType_ApiDefinition{v}
			iNdEx = postIndex
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsInfo = append(m.DnsInfo, &virtual_host_dns_info.DnsInfo{})
			if err := m.DnsInfo[len(m.DnsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 1003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= virtual_host.VirtualHostState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1004:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertState", wireType)
			}
			m.AutoCertState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoCertState |= virtual_host.CertificationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1010:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoCertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoCertInfo == nil {
				m.AutoCertInfo = &virtual_host.AutoCertInfoType{}
			}
			if err := m.AutoCertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
