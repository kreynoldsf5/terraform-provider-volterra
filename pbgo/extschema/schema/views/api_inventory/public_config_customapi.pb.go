// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/api_inventory/public_config_customapi.proto

// api inventory object
//
// x-displayName: "API Inventory"
// The API Inventory manages an approved set of endpoints of an application per HTTP Load Balancer,
// and it's actually an internal object of the HTTP Load Balancer with custom API defined to reflect this.
// The endpoints are stored in a swagger file and manipulated by the asterix service,
// thus operations on the inventory are proxied to the asterix service.
// Inventory's content is automatically synced with API Definition specified for HTTP Load Balancer.
// In addition, API Inventory maintains custom API groups as child objects, and provides methods to
// evaluate a custom group builder without updating groups. Custom api groups are defined by
// api group builders which contain selection expressions, explicit include list, and explicit exclude list.
//
//  The view creates the following child objects:
//  * app_api_group
//

package api_inventory

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Update API Group Request
//
// x-displayName: "Update API Group Request"
// Request shape for Apply API Group
type UpdateApiGroupReq struct {
	// Http LoadBalancer Name
	//
	// x-displayName: "Http LoadBalancer Name"
	// x-example: "blogging-app"
	// Http LoadBalancer for the current request
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the Http LoadBalancer for the current request
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// API Group Name
	//
	// x-displayName: "API Group Name"
	// x-example: "sensitive"
	// API Group name for the current request
	GroupName string `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// Custom Api Group
	//
	// x-displayName: "Custom Api Group"
	// A Custom API Group which includes API Group Builder
	ApiGroup *CustomApiGroup `protobuf:"bytes,4,opt,name=api_group,json=apiGroup,proto3" json:"api_group,omitempty"`
}

func (m *UpdateApiGroupReq) Reset()      { *m = UpdateApiGroupReq{} }
func (*UpdateApiGroupReq) ProtoMessage() {}
func (*UpdateApiGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba88186c28a99902, []int{0}
}
func (m *UpdateApiGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateApiGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateApiGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateApiGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateApiGroupReq.Merge(m, src)
}
func (m *UpdateApiGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateApiGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateApiGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateApiGroupReq proto.InternalMessageInfo

func (m *UpdateApiGroupReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateApiGroupReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateApiGroupReq) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *UpdateApiGroupReq) GetApiGroup() *CustomApiGroup {
	if m != nil {
		return m.ApiGroup
	}
	return nil
}

// Update API Group Response
//
// x-displayName: "Update API Group Response"
// Response shape for Update API Group request;
// empty because the only returned information is error message.
type UpdateApiGroupRsp struct {
}

func (m *UpdateApiGroupRsp) Reset()      { *m = UpdateApiGroupRsp{} }
func (*UpdateApiGroupRsp) ProtoMessage() {}
func (*UpdateApiGroupRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba88186c28a99902, []int{1}
}
func (m *UpdateApiGroupRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateApiGroupRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateApiGroupRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateApiGroupRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateApiGroupRsp.Merge(m, src)
}
func (m *UpdateApiGroupRsp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateApiGroupRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateApiGroupRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateApiGroupRsp proto.InternalMessageInfo

// Get API Group Request
//
// x-displayName: "Get API Group Request"
// Request shape for Get API Group
type GetApiGroupReq struct {
	// Http LoadBalancer Name
	//
	// x-displayName: "Http LoadBalancer Name"
	// x-example: "blogging-app"
	// API Inventory for the current request
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the Http LoadBalancer for the current request
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// API Group Name
	//
	// x-displayName: "API Group Name"
	// x-example: "sensitive"
	// API Group name for the current request
	GroupName string `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
}

func (m *GetApiGroupReq) Reset()      { *m = GetApiGroupReq{} }
func (*GetApiGroupReq) ProtoMessage() {}
func (*GetApiGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba88186c28a99902, []int{2}
}
func (m *GetApiGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetApiGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetApiGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetApiGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetApiGroupReq.Merge(m, src)
}
func (m *GetApiGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *GetApiGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetApiGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetApiGroupReq proto.InternalMessageInfo

func (m *GetApiGroupReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetApiGroupReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetApiGroupReq) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

// Get API Group Response
//
// x-displayName: "Get API Group Response"
// Response shape for Get API Group request
type GetApiGroupRsp struct {
	// Custom Api Group
	//
	// x-displayName: "Custom Api Group"
	// A Custom API Group which includes API Group Builder
	ApiGroup *CustomApiGroup `protobuf:"bytes,1,opt,name=api_group,json=apiGroup,proto3" json:"api_group,omitempty"`
}

func (m *GetApiGroupRsp) Reset()      { *m = GetApiGroupRsp{} }
func (*GetApiGroupRsp) ProtoMessage() {}
func (*GetApiGroupRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba88186c28a99902, []int{3}
}
func (m *GetApiGroupRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetApiGroupRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetApiGroupRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetApiGroupRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetApiGroupRsp.Merge(m, src)
}
func (m *GetApiGroupRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetApiGroupRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetApiGroupRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetApiGroupRsp proto.InternalMessageInfo

func (m *GetApiGroupRsp) GetApiGroup() *CustomApiGroup {
	if m != nil {
		return m.ApiGroup
	}
	return nil
}

// List API Groups Request
//
// x-displayName: "List API Groups Request"
// Request shape for List API Groups
type ListApiGroupsReq struct {
	// Http LoadBalancer Name
	//
	// x-displayName: "Http LoadBalancer Name"
	// x-example: "blogging-app"
	// Http LoadBalancer for the current request
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the Http LoadBalancer for the current request
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// With Contents
	//
	// x-displayName: "With Contents"
	// Optional query parameter.
	// When set, the response will include full contents of the Custom API Groups and not only names.
	WithContents bool `protobuf:"varint,3,opt,name=with_contents,json=withContents,proto3" json:"with_contents,omitempty"`
}

func (m *ListApiGroupsReq) Reset()      { *m = ListApiGroupsReq{} }
func (*ListApiGroupsReq) ProtoMessage() {}
func (*ListApiGroupsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba88186c28a99902, []int{4}
}
func (m *ListApiGroupsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListApiGroupsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListApiGroupsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListApiGroupsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListApiGroupsReq.Merge(m, src)
}
func (m *ListApiGroupsReq) XXX_Size() int {
	return m.Size()
}
func (m *ListApiGroupsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListApiGroupsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListApiGroupsReq proto.InternalMessageInfo

func (m *ListApiGroupsReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListApiGroupsReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListApiGroupsReq) GetWithContents() bool {
	if m != nil {
		return m.WithContents
	}
	return false
}

// List API Groups Response
//
// x-displayName: "List API Group Builders Response"
// Response shape for List API Group Builders request
type ListApiGroupsRsp struct {
	// api_groups_names
	//
	// x-displayName: "Custom API Groups Contents"
	// Contents of the Custom API Groups in the API Inventory
	ApiGroupsNames []string `protobuf:"bytes,1,rep,name=api_groups_names,json=apiGroupsNames,proto3" json:"api_groups_names,omitempty"`
	// api_groups_contents
	//
	// x-displayName: "Custom API Groups Contents"
	// Contents of the Custom API Groups in the API Inventory
	// OPTIONAL
	ApiGroupsContents []*CustomApiGroup `protobuf:"bytes,2,rep,name=api_groups_contents,json=apiGroupsContents,proto3" json:"api_groups_contents,omitempty"`
}

func (m *ListApiGroupsRsp) Reset()      { *m = ListApiGroupsRsp{} }
func (*ListApiGroupsRsp) ProtoMessage() {}
func (*ListApiGroupsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba88186c28a99902, []int{5}
}
func (m *ListApiGroupsRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListApiGroupsRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListApiGroupsRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListApiGroupsRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListApiGroupsRsp.Merge(m, src)
}
func (m *ListApiGroupsRsp) XXX_Size() int {
	return m.Size()
}
func (m *ListApiGroupsRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListApiGroupsRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ListApiGroupsRsp proto.InternalMessageInfo

func (m *ListApiGroupsRsp) GetApiGroupsNames() []string {
	if m != nil {
		return m.ApiGroupsNames
	}
	return nil
}

func (m *ListApiGroupsRsp) GetApiGroupsContents() []*CustomApiGroup {
	if m != nil {
		return m.ApiGroupsContents
	}
	return nil
}

func init() {
	proto.RegisterType((*UpdateApiGroupReq)(nil), "ves.io.schema.views.api_inventory.UpdateApiGroupReq")
	golang_proto.RegisterType((*UpdateApiGroupReq)(nil), "ves.io.schema.views.api_inventory.UpdateApiGroupReq")
	proto.RegisterType((*UpdateApiGroupRsp)(nil), "ves.io.schema.views.api_inventory.UpdateApiGroupRsp")
	golang_proto.RegisterType((*UpdateApiGroupRsp)(nil), "ves.io.schema.views.api_inventory.UpdateApiGroupRsp")
	proto.RegisterType((*GetApiGroupReq)(nil), "ves.io.schema.views.api_inventory.GetApiGroupReq")
	golang_proto.RegisterType((*GetApiGroupReq)(nil), "ves.io.schema.views.api_inventory.GetApiGroupReq")
	proto.RegisterType((*GetApiGroupRsp)(nil), "ves.io.schema.views.api_inventory.GetApiGroupRsp")
	golang_proto.RegisterType((*GetApiGroupRsp)(nil), "ves.io.schema.views.api_inventory.GetApiGroupRsp")
	proto.RegisterType((*ListApiGroupsReq)(nil), "ves.io.schema.views.api_inventory.ListApiGroupsReq")
	golang_proto.RegisterType((*ListApiGroupsReq)(nil), "ves.io.schema.views.api_inventory.ListApiGroupsReq")
	proto.RegisterType((*ListApiGroupsRsp)(nil), "ves.io.schema.views.api_inventory.ListApiGroupsRsp")
	golang_proto.RegisterType((*ListApiGroupsRsp)(nil), "ves.io.schema.views.api_inventory.ListApiGroupsRsp")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/api_inventory/public_config_customapi.proto", fileDescriptor_ba88186c28a99902)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/api_inventory/public_config_customapi.proto", fileDescriptor_ba88186c28a99902)
}

var fileDescriptor_ba88186c28a99902 = []byte{
	// 704 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xc1, 0x4f, 0x13, 0x4d,
	0x14, 0xef, 0xb4, 0x84, 0xd0, 0xe1, 0x83, 0x0f, 0x86, 0x4b, 0xb3, 0x1f, 0xdf, 0xa4, 0xae, 0x97,
	0xc6, 0xa4, 0x3b, 0x11, 0x8c, 0x07, 0x2f, 0x46, 0x39, 0x10, 0x13, 0x83, 0x5a, 0x63, 0x4c, 0x3c,
	0x58, 0xa6, 0xdb, 0x61, 0x3b, 0xda, 0xee, 0x8c, 0x3b, 0xd3, 0x42, 0x43, 0x48, 0x0c, 0x17, 0x3d,
	0x6a, 0xfc, 0x03, 0xbc, 0xfa, 0x07, 0x78, 0x30, 0xe1, 0xc2, 0x4d, 0x2e, 0x1a, 0xa2, 0x17, 0x8e,
	0xb2, 0xf5, 0xe0, 0x91, 0x93, 0x47, 0x63, 0x76, 0xba, 0x14, 0xb6, 0x68, 0x28, 0x28, 0xa7, 0xbe,
	0x7d, 0x6f, 0xde, 0x7b, 0xbf, 0xdf, 0x6f, 0xde, 0xeb, 0xc0, 0xab, 0x2d, 0xa6, 0x1c, 0x2e, 0x88,
	0x72, 0x6b, 0xac, 0x41, 0x49, 0x8b, 0xb3, 0x65, 0x45, 0xa8, 0xe4, 0x65, 0xee, 0xb7, 0x98, 0xaf,
	0x45, 0xd0, 0x26, 0xb2, 0x59, 0xa9, 0x73, 0xb7, 0xec, 0x0a, 0x7f, 0x89, 0x7b, 0x65, 0xb7, 0xa9,
	0xb4, 0x68, 0x50, 0xc9, 0x1d, 0x19, 0x08, 0x2d, 0xd0, 0xb9, 0x6e, 0x01, 0xa7, 0x5b, 0xc0, 0x31,
	0x05, 0x9c, 0x44, 0x01, 0xab, 0xe8, 0x71, 0x5d, 0x6b, 0x56, 0x1c, 0x57, 0x34, 0x88, 0x27, 0x3c,
	0x41, 0x4c, 0x66, 0xa5, 0xb9, 0x64, 0xbe, 0xcc, 0x87, 0xb1, 0xba, 0x15, 0xad, 0x69, 0x4f, 0x08,
	0xaf, 0xce, 0x22, 0x14, 0x84, 0xfa, 0xbe, 0xd0, 0x54, 0x73, 0xe1, 0xab, 0x38, 0xfa, 0x5f, 0x12,
	0xb0, 0x90, 0x87, 0x83, 0x76, 0x1f, 0x1b, 0xa6, 0x98, 0xdf, 0xea, 0x3b, 0x53, 0x3c, 0x9e, 0xb1,
	0x6e, 0x4b, 0x16, 0x1f, 0xb7, 0xdf, 0x02, 0x38, 0x79, 0x4f, 0x56, 0xa9, 0x66, 0xd7, 0x24, 0x9f,
	0x0f, 0x44, 0x53, 0x96, 0xd8, 0x13, 0x84, 0xe0, 0x90, 0x4f, 0x1b, 0x2c, 0x07, 0xf2, 0xa0, 0x90,
	0x2d, 0x19, 0x1b, 0x4d, 0xc3, 0x6c, 0xf4, 0xab, 0x24, 0x75, 0x59, 0x2e, 0x6d, 0x02, 0x07, 0x0e,
	0xf4, 0x3f, 0x84, 0x5e, 0x94, 0x5d, 0x36, 0x79, 0x99, 0x6e, 0xd8, 0x78, 0x16, 0xa2, 0xe4, 0x05,
	0x98, 0x8d, 0x30, 0x18, 0x47, 0x6e, 0x28, 0x0f, 0x0a, 0xa3, 0x33, 0x17, 0x9d, 0x63, 0xa5, 0x75,
	0xe6, 0xcc, 0x6d, 0xf4, 0x90, 0x8d, 0xd0, 0xd8, 0xb2, 0xa7, 0x8e, 0xa0, 0x56, 0xd2, 0xa6, 0x70,
	0x7c, 0x9e, 0xe9, 0xb3, 0xe4, 0x61, 0x2f, 0x26, 0x5b, 0x28, 0x99, 0x64, 0x06, 0xfe, 0x9c, 0x19,
	0x87, 0x13, 0x37, 0xb9, 0xea, 0xb5, 0x50, 0xa7, 0xa3, 0x71, 0x1e, 0x8e, 0x2d, 0x73, 0x5d, 0x8b,
	0xa6, 0x5a, 0x33, 0x5f, 0x2b, 0xc3, 0x64, 0xa4, 0xf4, 0x4f, 0xe4, 0x9c, 0x8b, 0x7d, 0xf6, 0x6b,
	0xd0, 0xdf, 0x4b, 0x49, 0x54, 0x80, 0x13, 0x3d, 0x3e, 0xca, 0xa8, 0xa0, 0x72, 0x20, 0x9f, 0x29,
	0x64, 0x4b, 0xe3, 0xfb, 0x18, 0x55, 0x24, 0x85, 0x42, 0x14, 0x4e, 0x1d, 0x3a, 0xd9, 0xeb, 0x94,
	0xce, 0x67, 0x4e, 0xa7, 0xc1, 0x64, 0xaf, 0xfe, 0x3e, 0xc2, 0x99, 0x0f, 0xc3, 0xf0, 0xdf, 0x39,
	0xb3, 0x98, 0xf1, 0xd9, 0xdb, 0x37, 0xd0, 0xb3, 0x34, 0x1c, 0x4f, 0xde, 0x3d, 0xba, 0x34, 0x40,
	0xb3, 0x23, 0x43, 0x6e, 0x9d, 0x22, 0x4b, 0x49, 0xfb, 0x39, 0x08, 0xdf, 0xe7, 0xa2, 0x2d, 0x2d,
	0x72, 0x51, 0x94, 0x81, 0x58, 0x69, 0x17, 0x15, 0x73, 0x9b, 0x01, 0xd7, 0xed, 0xe2, 0x72, 0xc0,
	0x35, 0x5b, 0xff, 0xfc, 0xf5, 0x55, 0xda, 0xb5, 0x1e, 0xc6, 0x7f, 0x2c, 0xa4, 0x77, 0x29, 0x8a,
	0xac, 0xf6, 0xec, 0x35, 0x52, 0xd3, 0x5a, 0x96, 0xeb, 0x82, 0x56, 0x2b, 0xb4, 0x4e, 0x7d, 0x97,
	0x05, 0x71, 0x78, 0xad, 0x6f, 0x59, 0x0f, 0x24, 0x26, 0xab, 0x07, 0x93, 0xb9, 0x76, 0x05, 0x5c,
	0x40, 0x3f, 0x00, 0x1c, 0x3d, 0x34, 0x8d, 0x68, 0x10, 0xcd, 0x93, 0x0b, 0x62, 0x9d, 0x34, 0xc5,
	0x08, 0xb0, 0xf5, 0x2e, 0x1d, 0x89, 0x60, 0xfd, 0x5a, 0x84, 0x80, 0xd1, 0xaa, 0xd1, 0x60, 0x11,
	0x9d, 0xb1, 0x06, 0xe8, 0x3b, 0x80, 0x63, 0x89, 0x01, 0x46, 0xb3, 0x03, 0xf0, 0xe9, 0x5f, 0x2f,
	0xeb, 0xe4, 0x49, 0x4a, 0xda, 0xab, 0x03, 0xaa, 0x70, 0x17, 0xdd, 0xf9, 0xeb, 0x2a, 0x58, 0x97,
	0x37, 0x37, 0x40, 0xe6, 0xd3, 0x06, 0x28, 0x1c, 0x0f, 0xfc, 0x56, 0xe5, 0x11, 0x73, 0xf5, 0xfa,
	0xc7, 0x5c, 0x7a, 0x02, 0x5c, 0x7f, 0x09, 0xb6, 0x77, 0x71, 0x6a, 0x67, 0x17, 0xa7, 0xf6, 0x76,
	0x31, 0x78, 0x1a, 0x62, 0xf0, 0x26, 0xc4, 0x60, 0x2b, 0xc4, 0x60, 0x3b, 0xc4, 0xe0, 0x4b, 0x88,
	0xc1, 0xb7, 0x10, 0xa7, 0xf6, 0x42, 0x0c, 0x5e, 0x74, 0x70, 0x6a, 0xb3, 0x83, 0xc1, 0x76, 0x07,
	0xa7, 0x76, 0x3a, 0x38, 0xf5, 0xe0, 0xbe, 0x27, 0xe4, 0x63, 0xcf, 0x69, 0x89, 0xba, 0x66, 0x41,
	0x40, 0x9d, 0xa6, 0x22, 0xc6, 0x58, 0x12, 0x41, 0x23, 0x22, 0xdf, 0xe2, 0x55, 0x16, 0x14, 0xf7,
	0xc3, 0x44, 0x56, 0x3c, 0x41, 0xd8, 0x8a, 0x8e, 0x9f, 0xa1, 0xdf, 0xbf, 0x46, 0x95, 0x61, 0xf3,
	0x10, 0xcd, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x8b, 0xec, 0x1e, 0x3f, 0xab, 0x07, 0x00, 0x00,
}

func (this *UpdateApiGroupReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateApiGroupReq)
	if !ok {
		that2, ok := that.(UpdateApiGroupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.GroupName != that1.GroupName {
		return false
	}
	if !this.ApiGroup.Equal(that1.ApiGroup) {
		return false
	}
	return true
}
func (this *UpdateApiGroupRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateApiGroupRsp)
	if !ok {
		that2, ok := that.(UpdateApiGroupRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetApiGroupReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetApiGroupReq)
	if !ok {
		that2, ok := that.(GetApiGroupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.GroupName != that1.GroupName {
		return false
	}
	return true
}
func (this *GetApiGroupRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetApiGroupRsp)
	if !ok {
		that2, ok := that.(GetApiGroupRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiGroup.Equal(that1.ApiGroup) {
		return false
	}
	return true
}
func (this *ListApiGroupsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListApiGroupsReq)
	if !ok {
		that2, ok := that.(ListApiGroupsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.WithContents != that1.WithContents {
		return false
	}
	return true
}
func (this *ListApiGroupsRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListApiGroupsRsp)
	if !ok {
		that2, ok := that.(ListApiGroupsRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ApiGroupsNames) != len(that1.ApiGroupsNames) {
		return false
	}
	for i := range this.ApiGroupsNames {
		if this.ApiGroupsNames[i] != that1.ApiGroupsNames[i] {
			return false
		}
	}
	if len(this.ApiGroupsContents) != len(that1.ApiGroupsContents) {
		return false
	}
	for i := range this.ApiGroupsContents {
		if !this.ApiGroupsContents[i].Equal(that1.ApiGroupsContents[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateApiGroupReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&api_inventory.UpdateApiGroupReq{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "GroupName: "+fmt.Sprintf("%#v", this.GroupName)+",\n")
	if this.ApiGroup != nil {
		s = append(s, "ApiGroup: "+fmt.Sprintf("%#v", this.ApiGroup)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateApiGroupRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&api_inventory.UpdateApiGroupRsp{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetApiGroupReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api_inventory.GetApiGroupReq{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "GroupName: "+fmt.Sprintf("%#v", this.GroupName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetApiGroupRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api_inventory.GetApiGroupRsp{")
	if this.ApiGroup != nil {
		s = append(s, "ApiGroup: "+fmt.Sprintf("%#v", this.ApiGroup)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListApiGroupsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api_inventory.ListApiGroupsReq{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "WithContents: "+fmt.Sprintf("%#v", this.WithContents)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListApiGroupsRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api_inventory.ListApiGroupsRsp{")
	s = append(s, "ApiGroupsNames: "+fmt.Sprintf("%#v", this.ApiGroupsNames)+",\n")
	if this.ApiGroupsContents != nil {
		s = append(s, "ApiGroupsContents: "+fmt.Sprintf("%#v", this.ApiGroupsContents)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicConfigCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigCustomAPIClient is the client API for ConfigCustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigCustomAPIClient interface {
	// Update Api Group in the API Inventory
	//
	// x-displayName: "Update Api Group"
	// Update the API Group and the Api Group Builder object in the API Inventory.
	UpdateApiGroup(ctx context.Context, in *UpdateApiGroupReq, opts ...grpc.CallOption) (*UpdateApiGroupRsp, error)
	// Get an API Group from the API Inventory
	//
	// x-displayName: "Get API Group"
	// Get the API Group and the API Group Builder object from the API Inventory object.
	GetApiGroup(ctx context.Context, in *GetApiGroupReq, opts ...grpc.CallOption) (*GetApiGroupRsp, error)
	// List API Groups of the API Inventory
	//
	// x-displayName: "List API Groups of the API Inventory"
	// List the API Groups and the API Group Builder objects from the API Inventory object.
	ListApiGroups(ctx context.Context, in *ListApiGroupsReq, opts ...grpc.CallOption) (*ListApiGroupsRsp, error)
}

type configCustomAPIClient struct {
	cc *grpc.ClientConn
}

func NewConfigCustomAPIClient(cc *grpc.ClientConn) ConfigCustomAPIClient {
	return &configCustomAPIClient{cc}
}

func (c *configCustomAPIClient) UpdateApiGroup(ctx context.Context, in *UpdateApiGroupReq, opts ...grpc.CallOption) (*UpdateApiGroupRsp, error) {
	out := new(UpdateApiGroupRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.api_inventory.ConfigCustomAPI/UpdateApiGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configCustomAPIClient) GetApiGroup(ctx context.Context, in *GetApiGroupReq, opts ...grpc.CallOption) (*GetApiGroupRsp, error) {
	out := new(GetApiGroupRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.api_inventory.ConfigCustomAPI/GetApiGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configCustomAPIClient) ListApiGroups(ctx context.Context, in *ListApiGroupsReq, opts ...grpc.CallOption) (*ListApiGroupsRsp, error) {
	out := new(ListApiGroupsRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.api_inventory.ConfigCustomAPI/ListApiGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigCustomAPIServer is the server API for ConfigCustomAPI service.
type ConfigCustomAPIServer interface {
	// Update Api Group in the API Inventory
	//
	// x-displayName: "Update Api Group"
	// Update the API Group and the Api Group Builder object in the API Inventory.
	UpdateApiGroup(context.Context, *UpdateApiGroupReq) (*UpdateApiGroupRsp, error)
	// Get an API Group from the API Inventory
	//
	// x-displayName: "Get API Group"
	// Get the API Group and the API Group Builder object from the API Inventory object.
	GetApiGroup(context.Context, *GetApiGroupReq) (*GetApiGroupRsp, error)
	// List API Groups of the API Inventory
	//
	// x-displayName: "List API Groups of the API Inventory"
	// List the API Groups and the API Group Builder objects from the API Inventory object.
	ListApiGroups(context.Context, *ListApiGroupsReq) (*ListApiGroupsRsp, error)
}

// UnimplementedConfigCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedConfigCustomAPIServer struct {
}

func (*UnimplementedConfigCustomAPIServer) UpdateApiGroup(ctx context.Context, req *UpdateApiGroupReq) (*UpdateApiGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApiGroup not implemented")
}
func (*UnimplementedConfigCustomAPIServer) GetApiGroup(ctx context.Context, req *GetApiGroupReq) (*GetApiGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiGroup not implemented")
}
func (*UnimplementedConfigCustomAPIServer) ListApiGroups(ctx context.Context, req *ListApiGroupsReq) (*ListApiGroupsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApiGroups not implemented")
}

func RegisterConfigCustomAPIServer(s *grpc.Server, srv ConfigCustomAPIServer) {
	s.RegisterService(&_ConfigCustomAPI_serviceDesc, srv)
}

func _ConfigCustomAPI_UpdateApiGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApiGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigCustomAPIServer).UpdateApiGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.api_inventory.ConfigCustomAPI/UpdateApiGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigCustomAPIServer).UpdateApiGroup(ctx, req.(*UpdateApiGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigCustomAPI_GetApiGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigCustomAPIServer).GetApiGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.api_inventory.ConfigCustomAPI/GetApiGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigCustomAPIServer).GetApiGroup(ctx, req.(*GetApiGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigCustomAPI_ListApiGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApiGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigCustomAPIServer).ListApiGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.api_inventory.ConfigCustomAPI/ListApiGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigCustomAPIServer).ListApiGroups(ctx, req.(*ListApiGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigCustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.views.api_inventory.ConfigCustomAPI",
	HandlerType: (*ConfigCustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateApiGroup",
			Handler:    _ConfigCustomAPI_UpdateApiGroup_Handler,
		},
		{
			MethodName: "GetApiGroup",
			Handler:    _ConfigCustomAPI_GetApiGroup_Handler,
		},
		{
			MethodName: "ListApiGroups",
			Handler:    _ConfigCustomAPI_ListApiGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/views/api_inventory/public_config_customapi.proto",
}

func (m *UpdateApiGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateApiGroupReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateApiGroupReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApiGroup != nil {
		{
			size, err := m.ApiGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateApiGroupRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateApiGroupRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateApiGroupRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetApiGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetApiGroupReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetApiGroupReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetApiGroupRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetApiGroupRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetApiGroupRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApiGroup != nil {
		{
			size, err := m.ApiGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListApiGroupsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApiGroupsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListApiGroupsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithContents {
		i--
		if m.WithContents {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListApiGroupsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApiGroupsRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListApiGroupsRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiGroupsContents) > 0 {
		for iNdEx := len(m.ApiGroupsContents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiGroupsContents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ApiGroupsNames) > 0 {
		for iNdEx := len(m.ApiGroupsNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ApiGroupsNames[iNdEx])
			copy(dAtA[i:], m.ApiGroupsNames[iNdEx])
			i = encodeVarintPublicConfigCustomapi(dAtA, i, uint64(len(m.ApiGroupsNames[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicConfigCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicConfigCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateApiGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicConfigCustomapi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicConfigCustomapi(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovPublicConfigCustomapi(uint64(l))
	}
	if m.ApiGroup != nil {
		l = m.ApiGroup.Size()
		n += 1 + l + sovPublicConfigCustomapi(uint64(l))
	}
	return n
}

func (m *UpdateApiGroupRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetApiGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicConfigCustomapi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicConfigCustomapi(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovPublicConfigCustomapi(uint64(l))
	}
	return n
}

func (m *GetApiGroupRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiGroup != nil {
		l = m.ApiGroup.Size()
		n += 1 + l + sovPublicConfigCustomapi(uint64(l))
	}
	return n
}

func (m *ListApiGroupsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicConfigCustomapi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicConfigCustomapi(uint64(l))
	}
	if m.WithContents {
		n += 2
	}
	return n
}

func (m *ListApiGroupsRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApiGroupsNames) > 0 {
		for _, s := range m.ApiGroupsNames {
			l = len(s)
			n += 1 + l + sovPublicConfigCustomapi(uint64(l))
		}
	}
	if len(m.ApiGroupsContents) > 0 {
		for _, e := range m.ApiGroupsContents {
			l = e.Size()
			n += 1 + l + sovPublicConfigCustomapi(uint64(l))
		}
	}
	return n
}

func sovPublicConfigCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicConfigCustomapi(x uint64) (n int) {
	return sovPublicConfigCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UpdateApiGroupReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateApiGroupReq{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`GroupName:` + fmt.Sprintf("%v", this.GroupName) + `,`,
		`ApiGroup:` + strings.Replace(fmt.Sprintf("%v", this.ApiGroup), "CustomApiGroup", "CustomApiGroup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateApiGroupRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateApiGroupRsp{`,
		`}`,
	}, "")
	return s
}
func (this *GetApiGroupReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetApiGroupReq{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`GroupName:` + fmt.Sprintf("%v", this.GroupName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetApiGroupRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetApiGroupRsp{`,
		`ApiGroup:` + strings.Replace(fmt.Sprintf("%v", this.ApiGroup), "CustomApiGroup", "CustomApiGroup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListApiGroupsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListApiGroupsReq{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WithContents:` + fmt.Sprintf("%v", this.WithContents) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListApiGroupsRsp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForApiGroupsContents := "[]*CustomApiGroup{"
	for _, f := range this.ApiGroupsContents {
		repeatedStringForApiGroupsContents += strings.Replace(fmt.Sprintf("%v", f), "CustomApiGroup", "CustomApiGroup", 1) + ","
	}
	repeatedStringForApiGroupsContents += "}"
	s := strings.Join([]string{`&ListApiGroupsRsp{`,
		`ApiGroupsNames:` + fmt.Sprintf("%v", this.ApiGroupsNames) + `,`,
		`ApiGroupsContents:` + repeatedStringForApiGroupsContents + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicConfigCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UpdateApiGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicConfigCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateApiGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateApiGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiGroup == nil {
				m.ApiGroup = &CustomApiGroup{}
			}
			if err := m.ApiGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicConfigCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateApiGroupRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicConfigCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateApiGroupRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateApiGroupRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPublicConfigCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetApiGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicConfigCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetApiGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetApiGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicConfigCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetApiGroupRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicConfigCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetApiGroupRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetApiGroupRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiGroup == nil {
				m.ApiGroup = &CustomApiGroup{}
			}
			if err := m.ApiGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicConfigCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApiGroupsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicConfigCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApiGroupsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApiGroupsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithContents", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithContents = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPublicConfigCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApiGroupsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicConfigCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApiGroupsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApiGroupsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroupsNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroupsNames = append(m.ApiGroupsNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroupsContents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiGroupsContents = append(m.ApiGroupsContents, &CustomApiGroup{})
			if err := m.ApiGroupsContents[len(m.ApiGroupsContents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicConfigCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicConfigCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicConfigCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicConfigCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicConfigCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicConfigCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicConfigCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicConfigCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicConfigCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicConfigCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicConfigCustomapi = fmt.Errorf("proto: unexpected end of group")
)
