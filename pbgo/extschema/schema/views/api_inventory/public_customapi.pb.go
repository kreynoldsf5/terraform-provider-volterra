// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/api_inventory/public_customapi.proto

// api inventory object
//
// x-displayName: "API Inventory"
// The API Inventory manages an approved set of endpoints of an application per HTTP Load Balancer,
// and it's actually an internal object of the HTTP Load Balancer with custom API defined to reflect this.
// The endpoints are stored in a swagger file and manipulated by the asterix service,
// thus operations on the inventory are proxied to the asterix service.
// Inventory's content is automatically synced with API Definition specified for HTTP Load Balancer.
// In addition, API Inventory maintains custom API groups as child objects, and provides methods to
// evaluate a custom group builder without updating groups. Custom api groups are defined by
// api group builders which contain selection expressions, explicit include list, and explicit exclude list.
//
//  The view creates the following child objects:
//  * app_api_group
//

package api_inventory

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/vesenv"
	api_definition "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/api_definition"
	app_api_group "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views/app_api_group"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Get API Endpoints Request
//
// x-displayName: "Get API Endpoints Request"
// Request shape for Get API Endpoints
type GetContentReq struct {
	// Http LoadBalancer Name
	//
	// x-displayName: "Http LoadBalancer Name"
	// x-example: "blogging-app"
	// Http LoadBalancer for the current request
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the Http LoadBalancer for the current request
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *GetContentReq) Reset()      { *m = GetContentReq{} }
func (*GetContentReq) ProtoMessage() {}
func (*GetContentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_590bfa15708c573a, []int{0}
}
func (m *GetContentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetContentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetContentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetContentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetContentReq.Merge(m, src)
}
func (m *GetContentReq) XXX_Size() int {
	return m.Size()
}
func (m *GetContentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetContentReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetContentReq proto.InternalMessageInfo

func (m *GetContentReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetContentReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// Get API Endpoints Response
//
// x-displayName: "Get API Endpoints Response"
// Response shape for Get API Endpoints request
type GetContentRsp struct {
	// API Endpoints
	//
	// x-displayName: "API Endpoints"
	// A list of API endpoints of the API Inventory
	ApiEndpoints []*ApiEndpoint `protobuf:"bytes,1,rep,name=api_endpoints,json=apiEndpoints,proto3" json:"api_endpoints,omitempty"`
}

func (m *GetContentRsp) Reset()      { *m = GetContentRsp{} }
func (*GetContentRsp) ProtoMessage() {}
func (*GetContentRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_590bfa15708c573a, []int{1}
}
func (m *GetContentRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetContentRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetContentRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetContentRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetContentRsp.Merge(m, src)
}
func (m *GetContentRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetContentRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetContentRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetContentRsp proto.InternalMessageInfo

func (m *GetContentRsp) GetApiEndpoints() []*ApiEndpoint {
	if m != nil {
		return m.ApiEndpoints
	}
	return nil
}

// Evaluate API Group Builders Request
//
// x-displayName: "Evaluate Api Group Builders Request"
// Request shape for Evaluate Api Group Builders
type EvaluateApiGroupReq struct {
	// Http LoadBalancer Name
	//
	// x-displayName: "Http LoadBalancer Name"
	// x-example: "blogging-app"
	// Http LoadBalancer for the current request
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace
	//
	// x-displayName: "Namespace"
	// x-example: "shared"
	// Namespace of the Http LoadBalancer for the current request
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// API Group Name
	//
	// x-displayName: "API Group Name"
	// x-example: "sensitive"
	// API Group name for the current request
	GroupName string `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// API Group Builder
	//
	// x-displayName: "API Group Builder"
	// An Api Group Builder to evaluate against the API Inventory.
	ApiGroupBuilder *api_definition.ApiGroupBuilder `protobuf:"bytes,4,opt,name=api_group_builder,json=apiGroupBuilder,proto3" json:"api_group_builder,omitempty"`
}

func (m *EvaluateApiGroupReq) Reset()      { *m = EvaluateApiGroupReq{} }
func (*EvaluateApiGroupReq) ProtoMessage() {}
func (*EvaluateApiGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_590bfa15708c573a, []int{2}
}
func (m *EvaluateApiGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateApiGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateApiGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateApiGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateApiGroupReq.Merge(m, src)
}
func (m *EvaluateApiGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateApiGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateApiGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateApiGroupReq proto.InternalMessageInfo

func (m *EvaluateApiGroupReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EvaluateApiGroupReq) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *EvaluateApiGroupReq) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *EvaluateApiGroupReq) GetApiGroupBuilder() *api_definition.ApiGroupBuilder {
	if m != nil {
		return m.ApiGroupBuilder
	}
	return nil
}

// Evaluate Api Group Builder Response
//
// x-displayName: "Evaluate Api Group Builder Response"
// Response for the Evaluate Api Group Builder request
type EvaluateApiGroupRsp struct {
	// Api Group
	//
	// x-displayName: "Api Group"
	// The API group as a result of evaluating API group builder against the API inventory
	ApiGroup *app_api_group.GlobalSpecType `protobuf:"bytes,1,opt,name=api_group,json=apiGroup,proto3" json:"api_group,omitempty"`
}

func (m *EvaluateApiGroupRsp) Reset()      { *m = EvaluateApiGroupRsp{} }
func (*EvaluateApiGroupRsp) ProtoMessage() {}
func (*EvaluateApiGroupRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_590bfa15708c573a, []int{3}
}
func (m *EvaluateApiGroupRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateApiGroupRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateApiGroupRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateApiGroupRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateApiGroupRsp.Merge(m, src)
}
func (m *EvaluateApiGroupRsp) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateApiGroupRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateApiGroupRsp.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateApiGroupRsp proto.InternalMessageInfo

func (m *EvaluateApiGroupRsp) GetApiGroup() *app_api_group.GlobalSpecType {
	if m != nil {
		return m.ApiGroup
	}
	return nil
}

func init() {
	proto.RegisterType((*GetContentReq)(nil), "ves.io.schema.views.api_inventory.GetContentReq")
	golang_proto.RegisterType((*GetContentReq)(nil), "ves.io.schema.views.api_inventory.GetContentReq")
	proto.RegisterType((*GetContentRsp)(nil), "ves.io.schema.views.api_inventory.GetContentRsp")
	golang_proto.RegisterType((*GetContentRsp)(nil), "ves.io.schema.views.api_inventory.GetContentRsp")
	proto.RegisterType((*EvaluateApiGroupReq)(nil), "ves.io.schema.views.api_inventory.EvaluateApiGroupReq")
	golang_proto.RegisterType((*EvaluateApiGroupReq)(nil), "ves.io.schema.views.api_inventory.EvaluateApiGroupReq")
	proto.RegisterType((*EvaluateApiGroupRsp)(nil), "ves.io.schema.views.api_inventory.EvaluateApiGroupRsp")
	golang_proto.RegisterType((*EvaluateApiGroupRsp)(nil), "ves.io.schema.views.api_inventory.EvaluateApiGroupRsp")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/api_inventory/public_customapi.proto", fileDescriptor_590bfa15708c573a)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/api_inventory/public_customapi.proto", fileDescriptor_590bfa15708c573a)
}

var fileDescriptor_590bfa15708c573a = []byte{
	// 675 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4f, 0x6b, 0x13, 0x41,
	0x14, 0xcf, 0xa4, 0x45, 0xcc, 0xd6, 0xa2, 0xae, 0x97, 0x10, 0xeb, 0x52, 0xf7, 0x14, 0x84, 0xcc,
	0xd4, 0x14, 0x8a, 0x78, 0x4b, 0x4b, 0xad, 0x5e, 0xaa, 0xa4, 0x82, 0xe0, 0x25, 0xcc, 0xee, 0xbe,
	0x6e, 0x47, 0x37, 0x3b, 0xe3, 0xce, 0xec, 0xda, 0x50, 0x0a, 0xd2, 0x4f, 0xa0, 0xe8, 0xc5, 0x6f,
	0xe0, 0x47, 0x10, 0x7a, 0xe9, 0x41, 0x68, 0x4f, 0x52, 0xf4, 0xd2, 0xa3, 0xdd, 0x78, 0xf0, 0xd8,
	0x8f, 0x20, 0x3b, 0xf9, 0xd7, 0x94, 0x86, 0xc6, 0xe2, 0x69, 0xdf, 0xcc, 0x7b, 0xbf, 0x7d, 0xef,
	0xf7, 0x7e, 0x6f, 0x9e, 0xf1, 0x20, 0x01, 0x89, 0x19, 0x27, 0xd2, 0xdd, 0x80, 0x26, 0x25, 0x09,
	0x83, 0xb7, 0x92, 0x50, 0xc1, 0x1a, 0x2c, 0x4c, 0x20, 0x54, 0x3c, 0x6a, 0x11, 0x11, 0x3b, 0x01,
	0x73, 0x1b, 0x6e, 0x2c, 0x15, 0x6f, 0x52, 0xc1, 0xb0, 0x88, 0xb8, 0xe2, 0xe6, 0xdd, 0x0e, 0x12,
	0x77, 0x90, 0x58, 0x23, 0xf1, 0x10, 0xb2, 0x54, 0xf1, 0x99, 0xda, 0x88, 0x1d, 0xec, 0xf2, 0x26,
	0xf1, 0xb9, 0xcf, 0x89, 0x46, 0x3a, 0xf1, 0xba, 0x3e, 0xe9, 0x83, 0xb6, 0x3a, 0x7f, 0x2c, 0xcd,
	0xf8, 0x9c, 0xfb, 0x01, 0x64, 0xe9, 0x09, 0x0d, 0x43, 0xae, 0xa8, 0x62, 0x3c, 0x94, 0x5d, 0xef,
	0xed, 0xe1, 0x4a, 0xb9, 0x38, 0xed, 0xb4, 0xcf, 0xd0, 0x00, 0x09, 0x61, 0x72, 0x26, 0x06, 0x8f,
	0xa2, 0xea, 0xc1, 0x3a, 0x0b, 0x59, 0x16, 0x4a, 0x54, 0x4b, 0x40, 0x2f, 0xbe, 0x72, 0x71, 0x6b,
	0xc6, 0x08, 0x17, 0x8d, 0x0c, 0xe2, 0x47, 0x3c, 0x16, 0xa7, 0xc3, 0xed, 0x9a, 0x31, 0xbd, 0x02,
	0x6a, 0x89, 0x87, 0x0a, 0x42, 0x55, 0x87, 0x37, 0xa6, 0x69, 0x4c, 0x86, 0xb4, 0x09, 0x45, 0x34,
	0x8b, 0xca, 0x85, 0xba, 0xb6, 0xcd, 0x19, 0xa3, 0x90, 0x7d, 0xa5, 0xa0, 0x2e, 0x14, 0xf3, 0xda,
	0x31, 0xb8, 0xb0, 0xbd, 0xa1, 0x5f, 0x48, 0x61, 0xae, 0x19, 0xd3, 0x59, 0x32, 0x08, 0x3d, 0xc1,
	0x59, 0xa8, 0x64, 0x11, 0xcd, 0x4e, 0x94, 0xa7, 0xaa, 0x18, 0x5f, 0x28, 0x15, 0xae, 0x09, 0xb6,
	0xdc, 0x85, 0xd5, 0xaf, 0xd1, 0xc1, 0x41, 0xda, 0xfb, 0xc8, 0xb8, 0xb5, 0x9c, 0xd0, 0x20, 0xa6,
	0x0a, 0x6a, 0x82, 0xad, 0x64, 0x4c, 0x2e, 0x55, 0xaf, 0x79, 0xc7, 0x30, 0x74, 0x1f, 0x1a, 0x1a,
	0x37, 0xd1, 0x71, 0xeb, 0x9b, 0xd5, 0x0c, 0xdc, 0x30, 0x6e, 0xf6, 0x5b, 0xd5, 0x70, 0x62, 0x16,
	0x78, 0x10, 0x15, 0x27, 0x67, 0x51, 0x79, 0xaa, 0x3a, 0x3f, 0x92, 0xc1, 0x40, 0x3b, 0xdc, 0x2b,
	0x6e, 0xb1, 0x03, 0xad, 0x5f, 0xa7, 0xc3, 0x17, 0x36, 0x9c, 0x43, 0x44, 0x0a, 0x73, 0xd5, 0x28,
	0xf4, 0xf3, 0x6a, 0x36, 0x53, 0xd5, 0xfb, 0x23, 0xf2, 0x9d, 0x12, 0x13, 0xaf, 0x04, 0xdc, 0xa1,
	0xc1, 0x9a, 0x00, 0xf7, 0x79, 0x4b, 0x40, 0xfd, 0x6a, 0x2f, 0x5b, 0xf5, 0xdb, 0xa4, 0x51, 0x58,
	0xd2, 0x8f, 0xa5, 0xf6, 0xec, 0x89, 0x99, 0x22, 0xc3, 0x18, 0xa8, 0x64, 0xce, 0x8d, 0xa1, 0xc5,
	0xd0, 0x5c, 0x94, 0xfe, 0x11, 0x21, 0x85, 0x2d, 0x0e, 0xbe, 0xe6, 0x51, 0xba, 0x5f, 0x2c, 0x25,
	0x20, 0x2b, 0x8c, 0x57, 0x44, 0xc4, 0x37, 0x5b, 0x15, 0x09, 0x6e, 0x1c, 0x31, 0xd5, 0xaa, 0x44,
	0x40, 0xbd, 0x9d, 0x9f, 0xbf, 0x3f, 0xe6, 0x1f, 0x9b, 0x8f, 0xba, 0x8f, 0x9b, 0xf4, 0x45, 0x92,
	0x64, 0xab, 0x6f, 0x6f, 0x93, 0x0d, 0xa5, 0x44, 0x23, 0xe0, 0xd4, 0x73, 0x68, 0x40, 0x43, 0x17,
	0xa2, 0xae, 0x7b, 0x7b, 0xf8, 0x1d, 0x98, 0x9f, 0xf3, 0xc6, 0x8d, 0xb3, 0xad, 0x35, 0x17, 0xc6,
	0x28, 0xfc, 0x9c, 0xc1, 0x2a, 0x5d, 0x0a, 0x27, 0x85, 0xfd, 0x09, 0x8d, 0xc9, 0x3b, 0xb0, 0xfd,
	0xff, 0xc3, 0x9b, 0xf4, 0xa7, 0x41, 0x92, 0xad, 0xc1, 0x68, 0x6f, 0x13, 0xe8, 0x96, 0xf7, 0x10,
	0xdd, 0x2b, 0x2d, 0xec, 0xed, 0xa2, 0x89, 0x1f, 0xbb, 0xa8, 0x7c, 0x31, 0xab, 0xa7, 0xce, 0x2b,
	0x70, 0xd5, 0xce, 0xf7, 0x62, 0x7e, 0x0e, 0x2d, 0x7e, 0x40, 0x87, 0xc7, 0x56, 0xee, 0xe8, 0xd8,
	0xca, 0x9d, 0x1c, 0x5b, 0xe8, 0x5d, 0x6a, 0xa1, 0x2f, 0xa9, 0x85, 0x0e, 0x52, 0x0b, 0x1d, 0xa6,
	0x16, 0xfa, 0x95, 0x5a, 0xe8, 0x4f, 0x6a, 0xe5, 0x4e, 0x52, 0x0b, 0xbd, 0x6f, 0x5b, 0xb9, 0xbd,
	0xb6, 0x85, 0x0e, 0xdb, 0x56, 0xee, 0xa8, 0x6d, 0xe5, 0x5e, 0xbe, 0xf0, 0xb9, 0x78, 0xed, 0xe3,
	0x84, 0x07, 0x0a, 0xa2, 0x88, 0xe2, 0x58, 0x12, 0x6d, 0xac, 0xf3, 0xa8, 0x99, 0x75, 0x25, 0x61,
	0x1e, 0x44, 0x95, 0x9e, 0x9b, 0x08, 0xc7, 0xe7, 0x04, 0x36, 0x55, 0x77, 0x73, 0x8d, 0xde, 0x77,
	0xce, 0x15, 0xbd, 0xbb, 0xe6, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x6c, 0xeb, 0x21, 0x36,
	0x06, 0x00, 0x00,
}

func (this *GetContentReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetContentReq)
	if !ok {
		that2, ok := that.(GetContentReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *GetContentRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetContentRsp)
	if !ok {
		that2, ok := that.(GetContentRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ApiEndpoints) != len(that1.ApiEndpoints) {
		return false
	}
	for i := range this.ApiEndpoints {
		if !this.ApiEndpoints[i].Equal(that1.ApiEndpoints[i]) {
			return false
		}
	}
	return true
}
func (this *EvaluateApiGroupReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateApiGroupReq)
	if !ok {
		that2, ok := that.(EvaluateApiGroupReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.GroupName != that1.GroupName {
		return false
	}
	if !this.ApiGroupBuilder.Equal(that1.ApiGroupBuilder) {
		return false
	}
	return true
}
func (this *EvaluateApiGroupRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvaluateApiGroupRsp)
	if !ok {
		that2, ok := that.(EvaluateApiGroupRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiGroup.Equal(that1.ApiGroup) {
		return false
	}
	return true
}
func (this *GetContentReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api_inventory.GetContentReq{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetContentRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api_inventory.GetContentRsp{")
	if this.ApiEndpoints != nil {
		s = append(s, "ApiEndpoints: "+fmt.Sprintf("%#v", this.ApiEndpoints)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvaluateApiGroupReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&api_inventory.EvaluateApiGroupReq{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "GroupName: "+fmt.Sprintf("%#v", this.GroupName)+",\n")
	if this.ApiGroupBuilder != nil {
		s = append(s, "ApiGroupBuilder: "+fmt.Sprintf("%#v", this.ApiGroupBuilder)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvaluateApiGroupRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api_inventory.EvaluateApiGroupRsp{")
	if this.ApiGroup != nil {
		s = append(s, "ApiGroup: "+fmt.Sprintf("%#v", this.ApiGroup)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPublicCustomapi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomAPIClient is the client API for CustomAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomAPIClient interface {
	// Get Content of the API Inventory
	//
	// x-displayName: "Get Content of the API Inventory"
	// Get list of all API Endpoints in the API Inventory
	// NOTE: The method is mainly used for custom api groups management.
	GetContent(ctx context.Context, in *GetContentReq, opts ...grpc.CallOption) (*GetContentRsp, error)
	// Evaluate Api Group
	//
	// x-displayName: "Evaluate Api Group"
	// Evaluate Api Group Builder against the API Inventory and return the resulting API Group.
	// NOTE: This operation does not modify any object.
	EvaluateApiGroup(ctx context.Context, in *EvaluateApiGroupReq, opts ...grpc.CallOption) (*EvaluateApiGroupRsp, error)
}

type customAPIClient struct {
	cc *grpc.ClientConn
}

func NewCustomAPIClient(cc *grpc.ClientConn) CustomAPIClient {
	return &customAPIClient{cc}
}

func (c *customAPIClient) GetContent(ctx context.Context, in *GetContentReq, opts ...grpc.CallOption) (*GetContentRsp, error) {
	out := new(GetContentRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.api_inventory.CustomAPI/GetContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customAPIClient) EvaluateApiGroup(ctx context.Context, in *EvaluateApiGroupReq, opts ...grpc.CallOption) (*EvaluateApiGroupRsp, error) {
	out := new(EvaluateApiGroupRsp)
	err := c.cc.Invoke(ctx, "/ves.io.schema.views.api_inventory.CustomAPI/EvaluateApiGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomAPIServer is the server API for CustomAPI service.
type CustomAPIServer interface {
	// Get Content of the API Inventory
	//
	// x-displayName: "Get Content of the API Inventory"
	// Get list of all API Endpoints in the API Inventory
	// NOTE: The method is mainly used for custom api groups management.
	GetContent(context.Context, *GetContentReq) (*GetContentRsp, error)
	// Evaluate Api Group
	//
	// x-displayName: "Evaluate Api Group"
	// Evaluate Api Group Builder against the API Inventory and return the resulting API Group.
	// NOTE: This operation does not modify any object.
	EvaluateApiGroup(context.Context, *EvaluateApiGroupReq) (*EvaluateApiGroupRsp, error)
}

// UnimplementedCustomAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCustomAPIServer struct {
}

func (*UnimplementedCustomAPIServer) GetContent(ctx context.Context, req *GetContentReq) (*GetContentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContent not implemented")
}
func (*UnimplementedCustomAPIServer) EvaluateApiGroup(ctx context.Context, req *EvaluateApiGroupReq) (*EvaluateApiGroupRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateApiGroup not implemented")
}

func RegisterCustomAPIServer(s *grpc.Server, srv CustomAPIServer) {
	s.RegisterService(&_CustomAPI_serviceDesc, srv)
}

func _CustomAPI_GetContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).GetContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.api_inventory.CustomAPI/GetContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).GetContent(ctx, req.(*GetContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomAPI_EvaluateApiGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateApiGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomAPIServer).EvaluateApiGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ves.io.schema.views.api_inventory.CustomAPI/EvaluateApiGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomAPIServer).EvaluateApiGroup(ctx, req.(*EvaluateApiGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ves.io.schema.views.api_inventory.CustomAPI",
	HandlerType: (*CustomAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContent",
			Handler:    _CustomAPI_GetContent_Handler,
		},
		{
			MethodName: "EvaluateApiGroup",
			Handler:    _CustomAPI_EvaluateApiGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ves.io/schema/views/api_inventory/public_customapi.proto",
}

func (m *GetContentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetContentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetContentRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContentRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetContentRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiEndpoints) > 0 {
		for iNdEx := len(m.ApiEndpoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApiEndpoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EvaluateApiGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateApiGroupReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateApiGroupReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApiGroupBuilder != nil {
		{
			size, err := m.ApiGroupBuilder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublicCustomapi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvaluateApiGroupRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateApiGroupRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateApiGroupRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApiGroup != nil {
		{
			size, err := m.ApiGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPublicCustomapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublicCustomapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublicCustomapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetContentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *GetContentRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApiEndpoints) > 0 {
		for _, e := range m.ApiEndpoints {
			l = e.Size()
			n += 1 + l + sovPublicCustomapi(uint64(l))
		}
	}
	return n
}

func (m *EvaluateApiGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	if m.ApiGroupBuilder != nil {
		l = m.ApiGroupBuilder.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func (m *EvaluateApiGroupRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiGroup != nil {
		l = m.ApiGroup.Size()
		n += 1 + l + sovPublicCustomapi(uint64(l))
	}
	return n
}

func sovPublicCustomapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublicCustomapi(x uint64) (n int) {
	return sovPublicCustomapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetContentReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetContentReq{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetContentRsp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForApiEndpoints := "[]*ApiEndpoint{"
	for _, f := range this.ApiEndpoints {
		repeatedStringForApiEndpoints += strings.Replace(fmt.Sprintf("%v", f), "ApiEndpoint", "ApiEndpoint", 1) + ","
	}
	repeatedStringForApiEndpoints += "}"
	s := strings.Join([]string{`&GetContentRsp{`,
		`ApiEndpoints:` + repeatedStringForApiEndpoints + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateApiGroupReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvaluateApiGroupReq{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`GroupName:` + fmt.Sprintf("%v", this.GroupName) + `,`,
		`ApiGroupBuilder:` + strings.Replace(fmt.Sprintf("%v", this.ApiGroupBuilder), "ApiGroupBuilder", "api_definition.ApiGroupBuilder", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvaluateApiGroupRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvaluateApiGroupRsp{`,
		`ApiGroup:` + strings.Replace(fmt.Sprintf("%v", this.ApiGroup), "GlobalSpecType", "app_api_group.GlobalSpecType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPublicCustomapi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetContentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContentRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContentRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContentRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEndpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEndpoints = append(m.ApiEndpoints, &ApiEndpoint{})
			if err := m.ApiEndpoints[len(m.ApiEndpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateApiGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateApiGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateApiGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroupBuilder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiGroupBuilder == nil {
				m.ApiGroupBuilder = &api_definition.ApiGroupBuilder{}
			}
			if err := m.ApiGroupBuilder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateApiGroupRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateApiGroupRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateApiGroupRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiGroup == nil {
				m.ApiGroup = &app_api_group.GlobalSpecType{}
			}
			if err := m.ApiGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPublicCustomapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPublicCustomapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublicCustomapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublicCustomapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublicCustomapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublicCustomapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublicCustomapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublicCustomapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublicCustomapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublicCustomapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublicCustomapi = fmt.Errorf("proto: unexpected end of group")
)
