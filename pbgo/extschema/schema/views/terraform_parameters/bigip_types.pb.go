// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ves.io/schema/views/terraform_parameters/bigip_types.proto

package terraform_parameters

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/certified_hardware"
	_ "github.com/volterraedge/terraform-provider-volterra/pbgo/extschema/schema/views"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Big-IP Device Parameters
//
// x-displayName: "Big-IP Device Parameters"
// Big-IP Device Parameters
type BigIPDeviceType struct {
	// Node Name
	//
	// x-displayName: "Node Name"
	// x-required
	// Node Name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// AWS Instance Type
	//
	// x-displayName: "t3.xlarge"
	// x-required
	// AWS Instance Type
	InstanceType string `protobuf:"bytes,2,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// BigIP Mgmt Subnet Cidr
	//
	// x-displayName: "BigIP Mgmt Subnet Cidr"
	// x-required
	// Bigip management subnet cidr
	MgmtSubnetCidr string `protobuf:"bytes,6,opt,name=mgmt_subnet_cidr,json=mgmtSubnetCidr,proto3" json:"mgmt_subnet_cidr,omitempty"`
	// BigIP Mgmt Subnet Id
	//
	// x-displayName: "BigIP Mgmt Subnet Id"
	// x-required
	// Bigip management subnet Id, if mgmt subnet cidr is not provided then subnet id will be used
	MgmtSubnetId string `protobuf:"bytes,7,opt,name=mgmt_subnet_id,json=mgmtSubnetId,proto3" json:"mgmt_subnet_id,omitempty"`
	// Private Subnet Id
	//
	// x-displayName: "Private Subnet Id"
	// x-required
	// Private subnet will be used for bigip external interface
	PrivateSubnetId string `protobuf:"bytes,4,opt,name=private_subnet_id,json=privateSubnetId,proto3" json:"private_subnet_id,omitempty"`
	// Workload Subnet Id
	//
	// x-displayName: "Workload Subnet Id"
	// x-required
	// Workload subnet will be used for bigip internal interface
	WorkloadSubnetId string `protobuf:"bytes,5,opt,name=workload_subnet_id,json=workloadSubnetId,proto3" json:"workload_subnet_id,omitempty"`
}

func (m *BigIPDeviceType) Reset()      { *m = BigIPDeviceType{} }
func (*BigIPDeviceType) ProtoMessage() {}
func (*BigIPDeviceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd8601fcf955383a, []int{0}
}
func (m *BigIPDeviceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BigIPDeviceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BigIPDeviceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BigIPDeviceType.Merge(m, src)
}
func (m *BigIPDeviceType) XXX_Size() int {
	return m.Size()
}
func (m *BigIPDeviceType) XXX_DiscardUnknown() {
	xxx_messageInfo_BigIPDeviceType.DiscardUnknown(m)
}

var xxx_messageInfo_BigIPDeviceType proto.InternalMessageInfo

func (m *BigIPDeviceType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BigIPDeviceType) GetInstanceType() string {
	if m != nil {
		return m.InstanceType
	}
	return ""
}

func (m *BigIPDeviceType) GetMgmtSubnetCidr() string {
	if m != nil {
		return m.MgmtSubnetCidr
	}
	return ""
}

func (m *BigIPDeviceType) GetMgmtSubnetId() string {
	if m != nil {
		return m.MgmtSubnetId
	}
	return ""
}

func (m *BigIPDeviceType) GetPrivateSubnetId() string {
	if m != nil {
		return m.PrivateSubnetId
	}
	return ""
}

func (m *BigIPDeviceType) GetWorkloadSubnetId() string {
	if m != nil {
		return m.WorkloadSubnetId
	}
	return ""
}

// Terraform Big-IP Service Parameters
//
// x-displayName: "Terraform Big-IP Service Parameters"
// Terraform Big-IP Service Parameters for AWS.
type BigIPAWSType struct {
	// AWS Region
	//
	// x-displayName: "AWS Region"
	// x-required
	// AWS Region where the bigip service will be deployed
	AwsRegion string `protobuf:"bytes,1,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	// AWS Unique Name Prefix
	//
	// x-displayName: "AWS Name Prefix"
	// x-required
	// AWS Unique Name Prefix to be used for creating aws resource objects
	AwsNamePrefix string `protobuf:"bytes,2,opt,name=aws_name_prefix,json=awsNamePrefix,proto3" json:"aws_name_prefix,omitempty"`
	// AWS Marketplace AMI Image Name
	//
	// x-displayName: "AWS AMI Image Name"
	// AWS Marketplace AMI Image Name
	MpAmiImage string `protobuf:"bytes,3,opt,name=mp_ami_image,json=mpAmiImage,proto3" json:"mp_ami_image,omitempty"`
	// VPC ID
	//
	// x-displayName: "VPC ID"
	// x-required
	// VPC ID where the bigip needs to be deployed
	VpcId string `protobuf:"bytes,4,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// Big-IP Admin Username
	//
	// x-displayName: "Big-IP Admin Username"
	// x-required
	// Big-IP Admin Username
	AdminUsername string `protobuf:"bytes,5,opt,name=admin_username,json=adminUsername,proto3" json:"admin_username,omitempty"`
	// Big-IP VIP Address
	//
	// x-displayName: "Big-IP VIP Address"
	// x-required
	// Big-IP VIP Address
	VipAddress string `protobuf:"bytes,7,opt,name=vip_address,json=vipAddress,proto3" json:"vip_address,omitempty"`
	// Big-IP Devices Info
	//
	// x-displayName: "Big-IP Devices Info"
	// x-required
	// Big-IP Devices Info
	Devices []*BigIPDeviceType `protobuf:"bytes,8,rep,name=devices,proto3" json:"devices,omitempty"`
	// SSH Public Key
	//
	// x-displayName: "SSH Public Key"
	// x-required
	// SSH Public Key to be programmed on bigip instance for ssh access
	SshKey string `protobuf:"bytes,9,opt,name=ssh_key,json=sshKey,proto3" json:"ssh_key,omitempty"`
	// AWS Cloud Resource Tags
	//
	// x-displayName: "AWS Cloud Resource Tags"
	// AWS Tags is a label consisting of a user-defined key and value. It helps to manage, identify, organize, search for, and filter resources.
	Tags map[string]string `protobuf:"bytes,20,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *BigIPAWSType) Reset()      { *m = BigIPAWSType{} }
func (*BigIPAWSType) ProtoMessage() {}
func (*BigIPAWSType) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd8601fcf955383a, []int{1}
}
func (m *BigIPAWSType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BigIPAWSType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BigIPAWSType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BigIPAWSType.Merge(m, src)
}
func (m *BigIPAWSType) XXX_Size() int {
	return m.Size()
}
func (m *BigIPAWSType) XXX_DiscardUnknown() {
	xxx_messageInfo_BigIPAWSType.DiscardUnknown(m)
}

var xxx_messageInfo_BigIPAWSType proto.InternalMessageInfo

func (m *BigIPAWSType) GetAwsRegion() string {
	if m != nil {
		return m.AwsRegion
	}
	return ""
}

func (m *BigIPAWSType) GetAwsNamePrefix() string {
	if m != nil {
		return m.AwsNamePrefix
	}
	return ""
}

func (m *BigIPAWSType) GetMpAmiImage() string {
	if m != nil {
		return m.MpAmiImage
	}
	return ""
}

func (m *BigIPAWSType) GetVpcId() string {
	if m != nil {
		return m.VpcId
	}
	return ""
}

func (m *BigIPAWSType) GetAdminUsername() string {
	if m != nil {
		return m.AdminUsername
	}
	return ""
}

func (m *BigIPAWSType) GetVipAddress() string {
	if m != nil {
		return m.VipAddress
	}
	return ""
}

func (m *BigIPAWSType) GetDevices() []*BigIPDeviceType {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *BigIPAWSType) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *BigIPAWSType) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*BigIPDeviceType)(nil), "ves.io.schema.views.terraform_parameters.BigIPDeviceType")
	golang_proto.RegisterType((*BigIPDeviceType)(nil), "ves.io.schema.views.terraform_parameters.BigIPDeviceType")
	proto.RegisterType((*BigIPAWSType)(nil), "ves.io.schema.views.terraform_parameters.BigIPAWSType")
	golang_proto.RegisterType((*BigIPAWSType)(nil), "ves.io.schema.views.terraform_parameters.BigIPAWSType")
	proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.terraform_parameters.BigIPAWSType.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ves.io.schema.views.terraform_parameters.BigIPAWSType.TagsEntry")
}

func init() {
	proto.RegisterFile("ves.io/schema/views/terraform_parameters/bigip_types.proto", fileDescriptor_cd8601fcf955383a)
}
func init() {
	golang_proto.RegisterFile("ves.io/schema/views/terraform_parameters/bigip_types.proto", fileDescriptor_cd8601fcf955383a)
}

var fileDescriptor_cd8601fcf955383a = []byte{
	// 723 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x3d, 0x6f, 0xe3, 0x36,
	0x18, 0x36, 0xfd, 0x6d, 0xe6, 0xcb, 0x25, 0x52, 0x54, 0x71, 0x5b, 0xc5, 0x48, 0xd3, 0xc2, 0x28,
	0x12, 0x09, 0x68, 0x0b, 0xb4, 0xcd, 0xd4, 0xa4, 0xed, 0xe0, 0x14, 0x28, 0x02, 0x27, 0x45, 0x81,
	0x0e, 0x15, 0x68, 0x89, 0x96, 0x89, 0x58, 0x22, 0x41, 0xd2, 0x72, 0xbc, 0xf5, 0x27, 0x14, 0x37,
	0xdf, 0x0f, 0xb8, 0xdf, 0x70, 0x53, 0xc6, 0x1b, 0x33, 0x66, 0xbc, 0xc8, 0xcb, 0xdd, 0x74, 0x99,
	0x6f, 0x3a, 0x98, 0x92, 0x62, 0x39, 0x17, 0xe0, 0x72, 0x1b, 0xf9, 0x7c, 0xbc, 0x7a, 0xf9, 0xbc,
	0x7a, 0xe1, 0x41, 0x44, 0xa4, 0x45, 0x99, 0x2d, 0xdd, 0x21, 0x09, 0xb0, 0x1d, 0x51, 0x32, 0x91,
	0xb6, 0x22, 0x42, 0xe0, 0x01, 0x13, 0x81, 0xc3, 0xb1, 0xc0, 0x01, 0x51, 0x44, 0x48, 0xbb, 0x4f,
	0x7d, 0xca, 0x1d, 0x35, 0xe5, 0x44, 0x5a, 0x5c, 0x30, 0xc5, 0x50, 0x27, 0xf1, 0x5a, 0x89, 0xd7,
	0xd2, 0x5e, 0xeb, 0x21, 0x6f, 0x6b, 0xdf, 0xa7, 0x6a, 0x38, 0xee, 0x5b, 0x2e, 0x0b, 0x6c, 0x9f,
	0xf9, 0xcc, 0xd6, 0x05, 0xfa, 0xe3, 0x81, 0xbe, 0xe9, 0x8b, 0x3e, 0x25, 0x85, 0x5b, 0x5b, 0x3e,
	0x63, 0xfe, 0x88, 0x2c, 0x54, 0x38, 0x9c, 0xa6, 0xd4, 0xde, 0x72, 0xbf, 0x2e, 0x11, 0x8a, 0x0e,
	0x28, 0xf1, 0x9c, 0x21, 0x16, 0xde, 0x04, 0x0b, 0x62, 0xe7, 0x3a, 0x6c, 0x7d, 0xbe, 0xac, 0x66,
	0x5c, 0x51, 0x16, 0x66, 0xe4, 0xd6, 0x32, 0x99, 0xf7, 0x7d, 0x71, 0x2f, 0x15, 0x3c, 0xa2, 0x1e,
	0x56, 0x24, 0x65, 0xdb, 0xef, 0x67, 0xe6, 0x2c, 0x97, 0xde, 0x7d, 0x28, 0x55, 0x49, 0x15, 0xc9,
	0xe7, 0xd7, 0xfa, 0xe1, 0xd1, 0xd9, 0xe7, 0x5d, 0xdb, 0x0f, 0xba, 0x16, 0x82, 0x9d, 0xb7, 0x00,
	0x6e, 0x1c, 0x51, 0xbf, 0x7b, 0xf2, 0x1b, 0x89, 0xa8, 0x4b, 0xce, 0xa6, 0x9c, 0x20, 0x04, 0xcb,
	0x21, 0x0e, 0x88, 0x01, 0xda, 0xa0, 0xd3, 0xe8, 0xe9, 0x33, 0xfa, 0x0a, 0xae, 0xd1, 0x50, 0x2a,
	0x1c, 0xba, 0x49, 0x5b, 0x46, 0x51, 0x93, 0xab, 0x19, 0xa8, 0x8d, 0x1d, 0xd8, 0x0c, 0xfc, 0x40,
	0x39, 0x72, 0xdc, 0x0f, 0x89, 0x72, 0x5c, 0xea, 0x09, 0xa3, 0xaa, 0x75, 0xeb, 0x73, 0xfc, 0x54,
	0xc3, 0xbf, 0x52, 0x4f, 0xa0, 0x5d, 0xb8, 0x9e, 0x57, 0x52, 0xcf, 0xa8, 0x25, 0xf5, 0x16, 0xba,
	0xae, 0x87, 0xbe, 0x85, 0x9f, 0x70, 0x41, 0x23, 0xac, 0x48, 0x4e, 0x58, 0xd6, 0xc2, 0x8d, 0x94,
	0xb8, 0xd3, 0xee, 0x41, 0x34, 0x61, 0xe2, 0x7c, 0xc4, 0xb0, 0x97, 0x13, 0x57, 0xb4, 0xb8, 0x99,
	0x31, 0x99, 0xfa, 0xb8, 0x5c, 0x2f, 0x35, 0xcb, 0x3b, 0x6f, 0x4a, 0x70, 0x55, 0x3f, 0xfe, 0xf0,
	0xef, 0x53, 0xfd, 0x80, 0x2f, 0x21, 0xc4, 0x13, 0xe9, 0x08, 0xe2, 0x53, 0x16, 0xa6, 0xef, 0x6f,
	0xe0, 0x89, 0xec, 0x69, 0x00, 0x7d, 0x03, 0x37, 0xe6, 0xf4, 0x3c, 0x10, 0x87, 0x0b, 0x32, 0xa0,
	0x17, 0x69, 0x0c, 0x6b, 0x78, 0x22, 0xff, 0xc4, 0x01, 0x39, 0xd1, 0x20, 0x6a, 0xc3, 0xd5, 0x80,
	0x3b, 0x38, 0xa0, 0x0e, 0x0d, 0xb0, 0x4f, 0x8c, 0x92, 0x16, 0xc1, 0x80, 0x1f, 0x06, 0xb4, 0x3b,
	0x47, 0xd0, 0xa7, 0xb0, 0x1a, 0x71, 0x77, 0xf1, 0x9c, 0x4a, 0xc4, 0xdd, 0xae, 0x87, 0xbe, 0x86,
	0xeb, 0xd8, 0x0b, 0x68, 0xe8, 0x8c, 0x25, 0x11, 0x7a, 0x06, 0x95, 0xb4, 0xfe, 0x1c, 0xfd, 0x2b,
	0x05, 0xd1, 0x36, 0x5c, 0x89, 0x28, 0x77, 0xb0, 0xe7, 0x09, 0x22, 0x65, 0x1a, 0x1d, 0x8c, 0x28,
	0x3f, 0x4c, 0x10, 0x44, 0x61, 0xcd, 0xd3, 0xf3, 0x94, 0x46, 0xbd, 0x5d, 0xea, 0xac, 0x7c, 0xf7,
	0xb3, 0xf5, 0xd8, 0xf5, 0xb3, 0xee, 0xfd, 0x0d, 0x47, 0x9b, 0xcf, 0x5f, 0x5f, 0x96, 0x2a, 0x4f,
	0x40, 0xb1, 0x59, 0xcc, 0x4e, 0x75, 0xd0, 0xcb, 0xea, 0xa3, 0xcf, 0x60, 0x4d, 0xca, 0xa1, 0x73,
	0x4e, 0xa6, 0x46, 0x43, 0xf7, 0x51, 0x95, 0x72, 0xf8, 0x07, 0x99, 0xa2, 0x33, 0x58, 0x56, 0xd8,
	0x97, 0xc6, 0xa6, 0x6e, 0xe0, 0x97, 0x8f, 0x6c, 0x20, 0x9d, 0x88, 0x75, 0x86, 0x7d, 0xf9, 0x7b,
	0xa8, 0xc4, 0xb4, 0xa7, 0xab, 0xb5, 0x7e, 0x84, 0x8d, 0x3b, 0x08, 0x35, 0x61, 0x69, 0xfe, 0xdd,
	0x64, 0x4e, 0xf3, 0x23, 0xda, 0x84, 0x95, 0x08, 0x8f, 0xc6, 0xd9, 0xef, 0x99, 0x5c, 0x0e, 0x8a,
	0x3f, 0x81, 0xe3, 0x72, 0xbd, 0xda, 0xac, 0x1d, 0x3d, 0x05, 0x57, 0x37, 0x66, 0xe1, 0xfa, 0xc6,
	0x2c, 0xdc, 0xde, 0x98, 0xe0, 0xbf, 0xd8, 0x04, 0xcf, 0x62, 0x13, 0xbc, 0x88, 0x4d, 0x70, 0x15,
	0x9b, 0xe0, 0x3a, 0x36, 0xc1, 0xcb, 0xd8, 0x04, 0xaf, 0x62, 0xb3, 0x70, 0x1b, 0x9b, 0xe0, 0xff,
	0x99, 0x59, 0xb8, 0x9c, 0x99, 0xe0, 0x6a, 0x66, 0x16, 0xae, 0x67, 0x66, 0xe1, 0x9f, 0x7f, 0x7d,
	0xc6, 0xcf, 0x7d, 0x2b, 0x62, 0x23, 0xdd, 0xb9, 0x35, 0xce, 0xad, 0xe0, 0x3e, 0x17, 0x2c, 0xa2,
	0x1e, 0x11, 0xfb, 0x19, 0x6d, 0xf3, 0xbe, 0xcf, 0x6c, 0x72, 0xa1, 0xd2, 0xed, 0xfb, 0xe0, 0xea,
	0xf6, 0xab, 0x7a, 0x29, 0xbf, 0x7f, 0x17, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x32, 0x1a, 0x8b, 0x69,
	0x05, 0x00, 0x00,
}

func (this *BigIPDeviceType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BigIPDeviceType)
	if !ok {
		that2, ok := that.(BigIPDeviceType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.InstanceType != that1.InstanceType {
		return false
	}
	if this.MgmtSubnetCidr != that1.MgmtSubnetCidr {
		return false
	}
	if this.MgmtSubnetId != that1.MgmtSubnetId {
		return false
	}
	if this.PrivateSubnetId != that1.PrivateSubnetId {
		return false
	}
	if this.WorkloadSubnetId != that1.WorkloadSubnetId {
		return false
	}
	return true
}
func (this *BigIPAWSType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BigIPAWSType)
	if !ok {
		that2, ok := that.(BigIPAWSType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AwsRegion != that1.AwsRegion {
		return false
	}
	if this.AwsNamePrefix != that1.AwsNamePrefix {
		return false
	}
	if this.MpAmiImage != that1.MpAmiImage {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	if this.AdminUsername != that1.AdminUsername {
		return false
	}
	if this.VipAddress != that1.VipAddress {
		return false
	}
	if len(this.Devices) != len(that1.Devices) {
		return false
	}
	for i := range this.Devices {
		if !this.Devices[i].Equal(that1.Devices[i]) {
			return false
		}
	}
	if this.SshKey != that1.SshKey {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	return true
}
func (this *BigIPDeviceType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&terraform_parameters.BigIPDeviceType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "InstanceType: "+fmt.Sprintf("%#v", this.InstanceType)+",\n")
	s = append(s, "MgmtSubnetCidr: "+fmt.Sprintf("%#v", this.MgmtSubnetCidr)+",\n")
	s = append(s, "MgmtSubnetId: "+fmt.Sprintf("%#v", this.MgmtSubnetId)+",\n")
	s = append(s, "PrivateSubnetId: "+fmt.Sprintf("%#v", this.PrivateSubnetId)+",\n")
	s = append(s, "WorkloadSubnetId: "+fmt.Sprintf("%#v", this.WorkloadSubnetId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BigIPAWSType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&terraform_parameters.BigIPAWSType{")
	s = append(s, "AwsRegion: "+fmt.Sprintf("%#v", this.AwsRegion)+",\n")
	s = append(s, "AwsNamePrefix: "+fmt.Sprintf("%#v", this.AwsNamePrefix)+",\n")
	s = append(s, "MpAmiImage: "+fmt.Sprintf("%#v", this.MpAmiImage)+",\n")
	s = append(s, "VpcId: "+fmt.Sprintf("%#v", this.VpcId)+",\n")
	s = append(s, "AdminUsername: "+fmt.Sprintf("%#v", this.AdminUsername)+",\n")
	s = append(s, "VipAddress: "+fmt.Sprintf("%#v", this.VipAddress)+",\n")
	if this.Devices != nil {
		s = append(s, "Devices: "+fmt.Sprintf("%#v", this.Devices)+",\n")
	}
	s = append(s, "SshKey: "+fmt.Sprintf("%#v", this.SshKey)+",\n")
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBigipTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BigIPDeviceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BigIPDeviceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BigIPDeviceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MgmtSubnetId) > 0 {
		i -= len(m.MgmtSubnetId)
		copy(dAtA[i:], m.MgmtSubnetId)
		i = encodeVarintBigipTypes(dAtA, i, uint64(len(m.MgmtSubnetId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MgmtSubnetCidr) > 0 {
		i -= len(m.MgmtSubnetCidr)
		copy(dAtA[i:], m.MgmtSubnetCidr)
		i = encodeVarintBigipTypes(dAtA, i, uint64(len(m.MgmtSubnetCidr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.WorkloadSubnetId) > 0 {
		i -= len(m.WorkloadSubnetId)
		copy(dAtA[i:], m.WorkloadSubnetId)
		i = encodeVarintBigipTypes(dAtA, i, uint64(len(m.WorkloadSubnetId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PrivateSubnetId) > 0 {
		i -= len(m.PrivateSubnetId)
		copy(dAtA[i:], m.PrivateSubnetId)
		i = encodeVarintBigipTypes(dAtA, i, uint64(len(m.PrivateSubnetId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InstanceType) > 0 {
		i -= len(m.InstanceType)
		copy(dAtA[i:], m.InstanceType)
		i = encodeVarintBigipTypes(dAtA, i, uint64(len(m.InstanceType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBigipTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BigIPAWSType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BigIPAWSType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BigIPAWSType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for iNdEx := len(keysForTags) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Tags[string(keysForTags[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBigipTypes(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTags[iNdEx])
			copy(dAtA[i:], keysForTags[iNdEx])
			i = encodeVarintBigipTypes(dAtA, i, uint64(len(keysForTags[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBigipTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.SshKey) > 0 {
		i -= len(m.SshKey)
		copy(dAtA[i:], m.SshKey)
		i = encodeVarintBigipTypes(dAtA, i, uint64(len(m.SshKey)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Devices) > 0 {
		for iNdEx := len(m.Devices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Devices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBigipTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.VipAddress) > 0 {
		i -= len(m.VipAddress)
		copy(dAtA[i:], m.VipAddress)
		i = encodeVarintBigipTypes(dAtA, i, uint64(len(m.VipAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AdminUsername) > 0 {
		i -= len(m.AdminUsername)
		copy(dAtA[i:], m.AdminUsername)
		i = encodeVarintBigipTypes(dAtA, i, uint64(len(m.AdminUsername)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VpcId) > 0 {
		i -= len(m.VpcId)
		copy(dAtA[i:], m.VpcId)
		i = encodeVarintBigipTypes(dAtA, i, uint64(len(m.VpcId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MpAmiImage) > 0 {
		i -= len(m.MpAmiImage)
		copy(dAtA[i:], m.MpAmiImage)
		i = encodeVarintBigipTypes(dAtA, i, uint64(len(m.MpAmiImage)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AwsNamePrefix) > 0 {
		i -= len(m.AwsNamePrefix)
		copy(dAtA[i:], m.AwsNamePrefix)
		i = encodeVarintBigipTypes(dAtA, i, uint64(len(m.AwsNamePrefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AwsRegion) > 0 {
		i -= len(m.AwsRegion)
		copy(dAtA[i:], m.AwsRegion)
		i = encodeVarintBigipTypes(dAtA, i, uint64(len(m.AwsRegion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBigipTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovBigipTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BigIPDeviceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBigipTypes(uint64(l))
	}
	l = len(m.InstanceType)
	if l > 0 {
		n += 1 + l + sovBigipTypes(uint64(l))
	}
	l = len(m.PrivateSubnetId)
	if l > 0 {
		n += 1 + l + sovBigipTypes(uint64(l))
	}
	l = len(m.WorkloadSubnetId)
	if l > 0 {
		n += 1 + l + sovBigipTypes(uint64(l))
	}
	l = len(m.MgmtSubnetCidr)
	if l > 0 {
		n += 1 + l + sovBigipTypes(uint64(l))
	}
	l = len(m.MgmtSubnetId)
	if l > 0 {
		n += 1 + l + sovBigipTypes(uint64(l))
	}
	return n
}

func (m *BigIPAWSType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AwsRegion)
	if l > 0 {
		n += 1 + l + sovBigipTypes(uint64(l))
	}
	l = len(m.AwsNamePrefix)
	if l > 0 {
		n += 1 + l + sovBigipTypes(uint64(l))
	}
	l = len(m.MpAmiImage)
	if l > 0 {
		n += 1 + l + sovBigipTypes(uint64(l))
	}
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovBigipTypes(uint64(l))
	}
	l = len(m.AdminUsername)
	if l > 0 {
		n += 1 + l + sovBigipTypes(uint64(l))
	}
	l = len(m.VipAddress)
	if l > 0 {
		n += 1 + l + sovBigipTypes(uint64(l))
	}
	if len(m.Devices) > 0 {
		for _, e := range m.Devices {
			l = e.Size()
			n += 1 + l + sovBigipTypes(uint64(l))
		}
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovBigipTypes(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBigipTypes(uint64(len(k))) + 1 + len(v) + sovBigipTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovBigipTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func sovBigipTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBigipTypes(x uint64) (n int) {
	return sovBigipTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BigIPDeviceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BigIPDeviceType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`InstanceType:` + fmt.Sprintf("%v", this.InstanceType) + `,`,
		`PrivateSubnetId:` + fmt.Sprintf("%v", this.PrivateSubnetId) + `,`,
		`WorkloadSubnetId:` + fmt.Sprintf("%v", this.WorkloadSubnetId) + `,`,
		`MgmtSubnetCidr:` + fmt.Sprintf("%v", this.MgmtSubnetCidr) + `,`,
		`MgmtSubnetId:` + fmt.Sprintf("%v", this.MgmtSubnetId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BigIPAWSType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDevices := "[]*BigIPDeviceType{"
	for _, f := range this.Devices {
		repeatedStringForDevices += strings.Replace(f.String(), "BigIPDeviceType", "BigIPDeviceType", 1) + ","
	}
	repeatedStringForDevices += "}"
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&BigIPAWSType{`,
		`AwsRegion:` + fmt.Sprintf("%v", this.AwsRegion) + `,`,
		`AwsNamePrefix:` + fmt.Sprintf("%v", this.AwsNamePrefix) + `,`,
		`MpAmiImage:` + fmt.Sprintf("%v", this.MpAmiImage) + `,`,
		`VpcId:` + fmt.Sprintf("%v", this.VpcId) + `,`,
		`AdminUsername:` + fmt.Sprintf("%v", this.AdminUsername) + `,`,
		`VipAddress:` + fmt.Sprintf("%v", this.VipAddress) + `,`,
		`Devices:` + repeatedStringForDevices + `,`,
		`SshKey:` + fmt.Sprintf("%v", this.SshKey) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBigipTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BigIPDeviceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigipTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BigIPDeviceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BigIPDeviceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigipTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigipTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigipTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigipTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateSubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigipTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigipTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateSubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadSubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigipTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigipTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkloadSubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MgmtSubnetCidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigipTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigipTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MgmtSubnetCidr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MgmtSubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigipTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigipTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MgmtSubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBigipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BigIPAWSType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigipTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BigIPAWSType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BigIPAWSType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigipTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigipTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsNamePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigipTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigipTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsNamePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpAmiImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigipTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigipTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MpAmiImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigipTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigipTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigipTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigipTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigipTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigipTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigipTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBigipTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devices = append(m.Devices, &BigIPDeviceType{})
			if err := m.Devices[len(m.Devices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigipTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigipTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigipTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBigipTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBigipTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBigipTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBigipTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBigipTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBigipTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBigipTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBigipTypes
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBigipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBigipTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBigipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBigipTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBigipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBigipTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBigipTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBigipTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBigipTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBigipTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBigipTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBigipTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBigipTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBigipTypes = fmt.Errorf("proto: unexpected end of group")
)
